{"ast":null,"code":"var _class, _class2, _class3, _class4, _class5, _class6, _class7, _class8, _class9, _class10, _class11, _class12, _class13, _class14, _class15, _class16, _class17, _class19, _class20, _class21, _class22, _class23, _class24, _class25, _class26, _class27, _class28, _class29, _class30, _class31;\n/**\n * @license Angular v17.0.8\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { setActiveConsumer as setActiveConsumer$1, consumerDestroy as consumerDestroy$1, SIGNAL as SIGNAL$1, createComputed as createComputed$1, createSignal as createSignal$1, signalSetFn as signalSetFn$1, signalUpdateFn as signalUpdateFn$1, REACTIVE_NODE as REACTIVE_NODE$1, consumerBeforeComputation as consumerBeforeComputation$1, consumerAfterComputation as consumerAfterComputation$1, consumerPollProducersForChange as consumerPollProducersForChange$1, getActiveConsumer as getActiveConsumer$1, createWatch as createWatch$1, setThrowInvalidWriteToSignalError as setThrowInvalidWriteToSignalError$1 } from '@angular/core/primitives/signals';\nimport { Subject, Subscription, BehaviorSubject } from 'rxjs';\nimport { map, first } from 'rxjs/operators';\nfunction getClosureSafeProperty(objWithPropertyToExtract) {\n  for (let key in objWithPropertyToExtract) {\n    if (objWithPropertyToExtract[key] === getClosureSafeProperty) {\n      return key;\n    }\n  }\n  throw Error('Could not find renamed property on target object.');\n}\n/**\n * Sets properties on a target object from a source object, but only if\n * the property doesn't already exist on the target object.\n * @param target The target to set properties on\n * @param source The source of the property keys and values to set\n */\nfunction fillProperties(target, source) {\n  for (const key in source) {\n    if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {\n      target[key] = source[key];\n    }\n  }\n}\nfunction stringify(token) {\n  if (typeof token === 'string') {\n    return token;\n  }\n  if (Array.isArray(token)) {\n    return '[' + token.map(stringify).join(', ') + ']';\n  }\n  if (token == null) {\n    return '' + token;\n  }\n  if (token.overriddenName) {\n    return `${token.overriddenName}`;\n  }\n  if (token.name) {\n    return `${token.name}`;\n  }\n  const res = token.toString();\n  if (res == null) {\n    return '' + res;\n  }\n  const newLineIndex = res.indexOf('\\n');\n  return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n/**\n * Concatenates two strings with separator, allocating new strings only when necessary.\n *\n * @param before before string.\n * @param separator separator string.\n * @param after after string.\n * @returns concatenated string.\n */\nfunction concatStringsWithSpace(before, after) {\n  return before == null || before === '' ? after === null ? '' : after : after == null || after === '' ? before : before + ' ' + after;\n}\n/**\n * Ellipses the string in the middle when longer than the max length\n *\n * @param string\n * @param maxLength of the output string\n * @returns elispsed string with ... in the middle\n */\nfunction truncateMiddle(str, maxLength = 100) {\n  if (!str || maxLength < 1 || str.length <= maxLength) return str;\n  if (maxLength == 1) return str.substring(0, 1) + '...';\n  const halfLimit = Math.round(maxLength / 2);\n  return str.substring(0, halfLimit) + '...' + str.substring(str.length - halfLimit);\n}\nconst __forward_ref__ = getClosureSafeProperty({\n  __forward_ref__: getClosureSafeProperty\n});\n/**\n * Allows to refer to references which are not yet defined.\n *\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n * a query is not yet defined.\n *\n * `forwardRef` is also used to break circularities in standalone components imports.\n *\n * @usageNotes\n * ### Circular dependency example\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n *\n * ### Circular standalone reference import example\n * ```ts\n * @Component({\n *   standalone: true,\n *   imports: [ChildComponent],\n *   selector: 'app-parent',\n *   template: `<app-child [hideParent]=\"hideParent\"></app-child>`,\n * })\n * export class ParentComponent {\n *   @Input() hideParent: boolean;\n * }\n *\n *\n * @Component({\n *   standalone: true,\n *   imports: [CommonModule, forwardRef(() => ParentComponent)],\n *   selector: 'app-child',\n *   template: `<app-parent *ngIf=\"!hideParent\"></app-parent>`,\n * })\n * export class ChildComponent {\n *   @Input() hideParent: boolean;\n * }\n * ```\n *\n * @publicApi\n */\nfunction forwardRef(forwardRefFn) {\n  forwardRefFn.__forward_ref__ = forwardRef;\n  forwardRefFn.toString = function () {\n    return stringify(this());\n  };\n  return forwardRefFn;\n}\n/**\n * Lazily retrieves the reference value from a forwardRef.\n *\n * Acts as the identity function when given a non-forward-ref value.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n *\n * @see {@link forwardRef}\n * @publicApi\n */\nfunction resolveForwardRef(type) {\n  return isForwardRef(type) ? type() : type;\n}\n/** Checks whether a function is wrapped by a `forwardRef`. */\nfunction isForwardRef(fn) {\n  return typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) && fn.__forward_ref__ === forwardRef;\n}\nfunction isEnvironmentProviders(value) {\n  return value && !!value.ɵproviders;\n}\n\n/**\n * Base URL for the error details page.\n *\n * Keep this constant in sync across:\n *  - packages/compiler-cli/src/ngtsc/diagnostics/src/error_details_base_url.ts\n *  - packages/core/src/error_details_base_url.ts\n */\nconst ERROR_DETAILS_PAGE_BASE_URL = 'https://angular.io/errors';\n/**\n * URL for the XSS security documentation.\n */\nconst XSS_SECURITY_URL = 'https://g.co/ng/security#xss';\n\n/**\n * Class that represents a runtime error.\n * Formats and outputs the error message in a consistent way.\n *\n * Example:\n * ```\n *  throw new RuntimeError(\n *    RuntimeErrorCode.INJECTOR_ALREADY_DESTROYED,\n *    ngDevMode && 'Injector has already been destroyed.');\n * ```\n *\n * Note: the `message` argument contains a descriptive error message as a string in development\n * mode (when the `ngDevMode` is defined). In production mode (after tree-shaking pass), the\n * `message` argument becomes `false`, thus we account for it in the typings and the runtime\n * logic.\n */\nclass RuntimeError extends Error {\n  constructor(code, message) {\n    super(formatRuntimeError(code, message));\n    this.code = code;\n  }\n}\n/**\n * Called to format a runtime error.\n * See additional info on the `message` argument type in the `RuntimeError` class description.\n */\nfunction formatRuntimeError(code, message) {\n  // Error code might be a negative number, which is a special marker that instructs the logic to\n  // generate a link to the error details page on angular.io.\n  // We also prepend `0` to non-compile-time errors.\n  const fullCode = `NG0${Math.abs(code)}`;\n  let errorMessage = `${fullCode}${message ? ': ' + message : ''}`;\n  if (ngDevMode && code < 0) {\n    const addPeriodSeparator = !errorMessage.match(/[.,;!?\\n]$/);\n    const separator = addPeriodSeparator ? '.' : '';\n    errorMessage = `${errorMessage}${separator} Find more at ${ERROR_DETAILS_PAGE_BASE_URL}/${fullCode}`;\n  }\n  return errorMessage;\n}\nconst NG_COMP_DEF = getClosureSafeProperty({\n  ɵcmp: getClosureSafeProperty\n});\nconst NG_DIR_DEF = getClosureSafeProperty({\n  ɵdir: getClosureSafeProperty\n});\nconst NG_PIPE_DEF = getClosureSafeProperty({\n  ɵpipe: getClosureSafeProperty\n});\nconst NG_MOD_DEF = getClosureSafeProperty({\n  ɵmod: getClosureSafeProperty\n});\nconst NG_FACTORY_DEF = getClosureSafeProperty({\n  ɵfac: getClosureSafeProperty\n});\n/**\n * If a directive is diPublic, bloomAdd sets a property on the type with this constant as\n * the key and the directive's unique ID as the value. This allows us to map directives to their\n * bloom filter bit for DI.\n */\n// TODO(misko): This is wrong. The NG_ELEMENT_ID should never be minified.\nconst NG_ELEMENT_ID = getClosureSafeProperty({\n  __NG_ELEMENT_ID__: getClosureSafeProperty\n});\n/**\n * The `NG_ENV_ID` field on a DI token indicates special processing in the `EnvironmentInjector`:\n * getting such tokens from the `EnvironmentInjector` will bypass the standard DI resolution\n * strategy and instead will return implementation produced by the `NG_ENV_ID` factory function.\n *\n * This particular retrieval of DI tokens is mostly done to eliminate circular dependencies and\n * improve tree-shaking.\n */\nconst NG_ENV_ID = getClosureSafeProperty({\n  __NG_ENV_ID__: getClosureSafeProperty\n});\n\n/**\n * Used for stringify render output in Ivy.\n * Important! This function is very performance-sensitive and we should\n * be extra careful not to introduce megamorphic reads in it.\n * Check `core/test/render3/perf/render_stringify` for benchmarks and alternate implementations.\n */\nfunction renderStringify(value) {\n  if (typeof value === 'string') return value;\n  if (value == null) return '';\n  // Use `String` so that it invokes the `toString` method of the value. Note that this\n  // appears to be faster than calling `value.toString` (see `render_stringify` benchmark).\n  return String(value);\n}\n/**\n * Used to stringify a value so that it can be displayed in an error message.\n *\n * Important! This function contains a megamorphic read and should only be\n * used for error messages.\n */\nfunction stringifyForError(value) {\n  if (typeof value === 'function') return value.name || value.toString();\n  if (typeof value === 'object' && value != null && typeof value.type === 'function') {\n    return value.type.name || value.type.toString();\n  }\n  return renderStringify(value);\n}\n/**\n * Used to stringify a `Type` and including the file path and line number in which it is defined, if\n * possible, for better debugging experience.\n *\n * Important! This function contains a megamorphic read and should only be used for error messages.\n */\nfunction debugStringifyTypeForError(type) {\n  // TODO(pmvald): Do some refactoring so that we can use getComponentDef here without creating\n  // circular deps.\n  let componentDef = type[NG_COMP_DEF] || null;\n  if (componentDef !== null && componentDef.debugInfo) {\n    return stringifyTypeFromDebugInfo(componentDef.debugInfo);\n  }\n  return stringifyForError(type);\n}\n// TODO(pmvald): Do some refactoring so that we can use the type ClassDebugInfo for the param\n// debugInfo here without creating circular deps.\nfunction stringifyTypeFromDebugInfo(debugInfo) {\n  if (!debugInfo.filePath || !debugInfo.lineNumber) {\n    return debugInfo.className;\n  } else {\n    return `${debugInfo.className} (at ${debugInfo.filePath}:${debugInfo.lineNumber})`;\n  }\n}\n\n/** Called when directives inject each other (creating a circular dependency) */\nfunction throwCyclicDependencyError(token, path) {\n  const depPath = path ? `. Dependency path: ${path.join(' > ')} > ${token}` : '';\n  throw new RuntimeError(-200 /* RuntimeErrorCode.CYCLIC_DI_DEPENDENCY */, `Circular dependency in DI detected for ${token}${depPath}`);\n}\nfunction throwMixedMultiProviderError() {\n  throw new Error(`Cannot mix multi providers and regular providers`);\n}\nfunction throwInvalidProviderError(ngModuleType, providers, provider) {\n  if (ngModuleType && providers) {\n    const providerDetail = providers.map(v => v == provider ? '?' + provider + '?' : '...');\n    throw new Error(`Invalid provider for the NgModule '${stringify(ngModuleType)}' - only instances of Provider and Type are allowed, got: [${providerDetail.join(', ')}]`);\n  } else if (isEnvironmentProviders(provider)) {\n    if (provider.ɵfromNgModule) {\n      throw new RuntimeError(207 /* RuntimeErrorCode.PROVIDER_IN_WRONG_CONTEXT */, `Invalid providers from 'importProvidersFrom' present in a non-environment injector. 'importProvidersFrom' can't be used for component providers.`);\n    } else {\n      throw new RuntimeError(207 /* RuntimeErrorCode.PROVIDER_IN_WRONG_CONTEXT */, `Invalid providers present in a non-environment injector. 'EnvironmentProviders' can't be used for component providers.`);\n    }\n  } else {\n    throw new Error('Invalid provider');\n  }\n}\n/** Throws an error when a token is not found in DI. */\nfunction throwProviderNotFoundError(token, injectorName) {\n  const injectorDetails = injectorName ? ` in ${injectorName}` : '';\n  throw new RuntimeError(-201 /* RuntimeErrorCode.PROVIDER_NOT_FOUND */, ngDevMode && `No provider for ${stringifyForError(token)} found${injectorDetails}`);\n}\n\n// The functions in this file verify that the assumptions we are making\nfunction assertNumber(actual, msg) {\n  if (!(typeof actual === 'number')) {\n    throwError(msg, typeof actual, 'number', '===');\n  }\n}\nfunction assertNumberInRange(actual, minInclusive, maxInclusive) {\n  assertNumber(actual, 'Expected a number');\n  assertLessThanOrEqual(actual, maxInclusive, 'Expected number to be less than or equal to');\n  assertGreaterThanOrEqual(actual, minInclusive, 'Expected number to be greater than or equal to');\n}\nfunction assertString(actual, msg) {\n  if (!(typeof actual === 'string')) {\n    throwError(msg, actual === null ? 'null' : typeof actual, 'string', '===');\n  }\n}\nfunction assertFunction(actual, msg) {\n  if (!(typeof actual === 'function')) {\n    throwError(msg, actual === null ? 'null' : typeof actual, 'function', '===');\n  }\n}\nfunction assertEqual(actual, expected, msg) {\n  if (!(actual == expected)) {\n    throwError(msg, actual, expected, '==');\n  }\n}\nfunction assertNotEqual(actual, expected, msg) {\n  if (!(actual != expected)) {\n    throwError(msg, actual, expected, '!=');\n  }\n}\nfunction assertSame(actual, expected, msg) {\n  if (!(actual === expected)) {\n    throwError(msg, actual, expected, '===');\n  }\n}\nfunction assertNotSame(actual, expected, msg) {\n  if (!(actual !== expected)) {\n    throwError(msg, actual, expected, '!==');\n  }\n}\nfunction assertLessThan(actual, expected, msg) {\n  if (!(actual < expected)) {\n    throwError(msg, actual, expected, '<');\n  }\n}\nfunction assertLessThanOrEqual(actual, expected, msg) {\n  if (!(actual <= expected)) {\n    throwError(msg, actual, expected, '<=');\n  }\n}\nfunction assertGreaterThan(actual, expected, msg) {\n  if (!(actual > expected)) {\n    throwError(msg, actual, expected, '>');\n  }\n}\nfunction assertGreaterThanOrEqual(actual, expected, msg) {\n  if (!(actual >= expected)) {\n    throwError(msg, actual, expected, '>=');\n  }\n}\nfunction assertNotDefined(actual, msg) {\n  if (actual != null) {\n    throwError(msg, actual, null, '==');\n  }\n}\nfunction assertDefined(actual, msg) {\n  if (actual == null) {\n    throwError(msg, actual, null, '!=');\n  }\n}\nfunction throwError(msg, actual, expected, comparison) {\n  throw new Error(`ASSERTION ERROR: ${msg}` + (comparison == null ? '' : ` [Expected=> ${expected} ${comparison} ${actual} <=Actual]`));\n}\nfunction assertDomNode(node) {\n  if (!(node instanceof Node)) {\n    throwError(`The provided value must be an instance of a DOM Node but got ${stringify(node)}`);\n  }\n}\nfunction assertElement(node) {\n  if (!(node instanceof Element)) {\n    throwError(`The provided value must be an element but got ${stringify(node)}`);\n  }\n}\nfunction assertIndexInRange(arr, index) {\n  assertDefined(arr, 'Array must be defined.');\n  const maxLen = arr.length;\n  if (index < 0 || index >= maxLen) {\n    throwError(`Index expected to be less than ${maxLen} but got ${index}`);\n  }\n}\nfunction assertOneOf(value, ...validValues) {\n  if (validValues.indexOf(value) !== -1) return true;\n  throwError(`Expected value to be one of ${JSON.stringify(validValues)} but was ${JSON.stringify(value)}.`);\n}\n\n/**\n * Construct an injectable definition which defines how a token will be constructed by the DI\n * system, and in which injectors (if any) it will be available.\n *\n * This should be assigned to a static `ɵprov` field on a type, which will then be an\n * `InjectableType`.\n *\n * Options:\n * * `providedIn` determines which injectors will include the injectable, by either associating it\n *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be\n *   provided in the `'root'` injector, which will be the application-level injector in most apps.\n * * `factory` gives the zero argument function which will create an instance of the injectable.\n *   The factory can call [`inject`](api/core/inject) to access the `Injector` and request injection\n * of dependencies.\n *\n * @codeGenApi\n * @publicApi This instruction has been emitted by ViewEngine for some time and is deployed to npm.\n */\nfunction ɵɵdefineInjectable(opts) {\n  return {\n    token: opts.token,\n    providedIn: opts.providedIn || null,\n    factory: opts.factory,\n    value: undefined\n  };\n}\n/**\n * @deprecated in v8, delete after v10. This API should be used only by generated code, and that\n * code should now use ɵɵdefineInjectable instead.\n * @publicApi\n */\nconst defineInjectable = ɵɵdefineInjectable;\n/**\n * Construct an `InjectorDef` which configures an injector.\n *\n * This should be assigned to a static injector def (`ɵinj`) field on a type, which will then be an\n * `InjectorType`.\n *\n * Options:\n *\n * * `providers`: an optional array of providers to add to the injector. Each provider must\n *   either have a factory or point to a type which has a `ɵprov` static property (the\n *   type must be an `InjectableType`).\n * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s\n *   whose providers will also be added to the injector. Locally provided types will override\n *   providers from imports.\n *\n * @codeGenApi\n */\nfunction ɵɵdefineInjector(options) {\n  return {\n    providers: options.providers || [],\n    imports: options.imports || []\n  };\n}\n/**\n * Read the injectable def (`ɵprov`) for `type` in a way which is immune to accidentally reading\n * inherited value.\n *\n * @param type A type which may have its own (non-inherited) `ɵprov`.\n */\nfunction getInjectableDef(type) {\n  return getOwnDefinition(type, NG_PROV_DEF) || getOwnDefinition(type, NG_INJECTABLE_DEF);\n}\nfunction isInjectable(type) {\n  return getInjectableDef(type) !== null;\n}\n/**\n * Return definition only if it is defined directly on `type` and is not inherited from a base\n * class of `type`.\n */\nfunction getOwnDefinition(type, field) {\n  return type.hasOwnProperty(field) ? type[field] : null;\n}\n/**\n * Read the injectable def (`ɵprov`) for `type` or read the `ɵprov` from one of its ancestors.\n *\n * @param type A type which may have `ɵprov`, via inheritance.\n *\n * @deprecated Will be removed in a future version of Angular, where an error will occur in the\n *     scenario if we find the `ɵprov` on an ancestor only.\n */\nfunction getInheritedInjectableDef(type) {\n  const def = type && (type[NG_PROV_DEF] || type[NG_INJECTABLE_DEF]);\n  if (def) {\n    ngDevMode && console.warn(`DEPRECATED: DI is instantiating a token \"${type.name}\" that inherits its @Injectable decorator but does not provide one itself.\\n` + `This will become an error in a future version of Angular. Please add @Injectable() to the \"${type.name}\" class.`);\n    return def;\n  } else {\n    return null;\n  }\n}\n/**\n * Read the injector def type in a way which is immune to accidentally reading inherited value.\n *\n * @param type type which may have an injector def (`ɵinj`)\n */\nfunction getInjectorDef(type) {\n  return type && (type.hasOwnProperty(NG_INJ_DEF) || type.hasOwnProperty(NG_INJECTOR_DEF)) ? type[NG_INJ_DEF] : null;\n}\nconst NG_PROV_DEF = getClosureSafeProperty({\n  ɵprov: getClosureSafeProperty\n});\nconst NG_INJ_DEF = getClosureSafeProperty({\n  ɵinj: getClosureSafeProperty\n});\n// We need to keep these around so we can read off old defs if new defs are unavailable\nconst NG_INJECTABLE_DEF = getClosureSafeProperty({\n  ngInjectableDef: getClosureSafeProperty\n});\nconst NG_INJECTOR_DEF = getClosureSafeProperty({\n  ngInjectorDef: getClosureSafeProperty\n});\n\n/**\n * Injection flags for DI.\n *\n * @publicApi\n * @deprecated use an options object for [`inject`](api/core/inject) instead.\n */\nvar InjectFlags;\n(function (InjectFlags) {\n  // TODO(alxhub): make this 'const' (and remove `InternalInjectFlags` enum) when ngc no longer\n  // writes exports of it into ngfactory files.\n  /** Check self and check parent injector if needed */\n  InjectFlags[InjectFlags[\"Default\"] = 0] = \"Default\";\n  /**\n   * Specifies that an injector should retrieve a dependency from any injector until reaching the\n   * host element of the current component. (Only used with Element Injector)\n   */\n  InjectFlags[InjectFlags[\"Host\"] = 1] = \"Host\";\n  /** Don't ascend to ancestors of the node requesting injection. */\n  InjectFlags[InjectFlags[\"Self\"] = 2] = \"Self\";\n  /** Skip the node that is requesting injection. */\n  InjectFlags[InjectFlags[\"SkipSelf\"] = 4] = \"SkipSelf\";\n  /** Inject `defaultValue` instead if token not found. */\n  InjectFlags[InjectFlags[\"Optional\"] = 8] = \"Optional\";\n})(InjectFlags || (InjectFlags = {}));\n\n/**\n * Current implementation of inject.\n *\n * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed\n * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this\n * way for two reasons:\n *  1. `Injector` should not depend on ivy logic.\n *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.\n */\nlet _injectImplementation;\nfunction getInjectImplementation() {\n  return _injectImplementation;\n}\n/**\n * Sets the current inject implementation.\n */\nfunction setInjectImplementation(impl) {\n  const previous = _injectImplementation;\n  _injectImplementation = impl;\n  return previous;\n}\n/**\n * Injects `root` tokens in limp mode.\n *\n * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to\n * `\"root\"`. This is known as the limp mode injection. In such case the value is stored in the\n * injectable definition.\n */\nfunction injectRootLimpMode(token, notFoundValue, flags) {\n  const injectableDef = getInjectableDef(token);\n  if (injectableDef && injectableDef.providedIn == 'root') {\n    return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() : injectableDef.value;\n  }\n  if (flags & InjectFlags.Optional) return null;\n  if (notFoundValue !== undefined) return notFoundValue;\n  throwProviderNotFoundError(stringify(token), 'Injector');\n}\n/**\n * Assert that `_injectImplementation` is not `fn`.\n *\n * This is useful, to prevent infinite recursion.\n *\n * @param fn Function which it should not equal to\n */\nfunction assertInjectImplementationNotEqual(fn) {\n  ngDevMode && assertNotEqual(_injectImplementation, fn, 'Calling ɵɵinject would cause infinite recursion');\n}\nconst _global = globalThis;\nfunction ngDevModeResetPerfCounters() {\n  const locationString = typeof location !== 'undefined' ? location.toString() : '';\n  const newCounters = {\n    namedConstructors: locationString.indexOf('ngDevMode=namedConstructors') != -1,\n    firstCreatePass: 0,\n    tNode: 0,\n    tView: 0,\n    rendererCreateTextNode: 0,\n    rendererSetText: 0,\n    rendererCreateElement: 0,\n    rendererAddEventListener: 0,\n    rendererSetAttribute: 0,\n    rendererRemoveAttribute: 0,\n    rendererSetProperty: 0,\n    rendererSetClassName: 0,\n    rendererAddClass: 0,\n    rendererRemoveClass: 0,\n    rendererSetStyle: 0,\n    rendererRemoveStyle: 0,\n    rendererDestroy: 0,\n    rendererDestroyNode: 0,\n    rendererMoveNode: 0,\n    rendererRemoveNode: 0,\n    rendererAppendChild: 0,\n    rendererInsertBefore: 0,\n    rendererCreateComment: 0,\n    hydratedNodes: 0,\n    hydratedComponents: 0,\n    dehydratedViewsRemoved: 0,\n    dehydratedViewsCleanupRuns: 0,\n    componentsSkippedHydration: 0\n  };\n  // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n  const allowNgDevModeTrue = locationString.indexOf('ngDevMode=false') === -1;\n  _global['ngDevMode'] = allowNgDevModeTrue && newCounters;\n  return newCounters;\n}\n/**\n * This function checks to see if the `ngDevMode` has been set. If yes,\n * then we honor it, otherwise we default to dev mode with additional checks.\n *\n * The idea is that unless we are doing production build where we explicitly\n * set `ngDevMode == false` we should be helping the developer by providing\n * as much early warning and errors as possible.\n *\n * `ɵɵdefineComponent` is guaranteed to have been called before any component template functions\n * (and thus Ivy instructions), so a single initialization there is sufficient to ensure ngDevMode\n * is defined for the entire instruction set.\n *\n * When checking `ngDevMode` on toplevel, always init it before referencing it\n * (e.g. `((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode())`), otherwise you can\n *  get a `ReferenceError` like in https://github.com/angular/angular/issues/31595.\n *\n * Details on possible values for `ngDevMode` can be found on its docstring.\n *\n * NOTE:\n * - changes to the `ngDevMode` name must be synced with `compiler-cli/src/tooling.ts`.\n */\nfunction initNgDevMode() {\n  // The below checks are to ensure that calling `initNgDevMode` multiple times does not\n  // reset the counters.\n  // If the `ngDevMode` is not an object, then it means we have not created the perf counters\n  // yet.\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    if (typeof ngDevMode !== 'object') {\n      ngDevModeResetPerfCounters();\n    }\n    return typeof ngDevMode !== 'undefined' && !!ngDevMode;\n  }\n  return false;\n}\n\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parameterized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides an additional level of type safety.\n *\n * <div class=\"alert is-helpful\">\n *\n * **Important Note**: Ensure that you use the same instance of the `InjectionToken` in both the\n * provider and the injection call. Creating a new instance of `InjectionToken` in different places,\n * even with the same description, will be treated as different tokens by Angular's DI system,\n * leading to a `NullInjectorError`.\n *\n * </div>\n *\n * <code-example format=\"typescript\" language=\"typescript\" path=\"injection-token/src/main.ts\"\n * region=\"InjectionToken\"></code-example>\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the [`inject`](api/core/inject) function.\n * As you can see in the Tree-shakable InjectionToken example below.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `@NgModule` (note:\n * this option is now deprecated). As mentioned above, `'root'` is the default value for\n * `providedIn`.\n *\n * The `providedIn: NgModule` and `providedIn: 'any'` options are deprecated.\n *\n * @usageNotes\n * ### Basic Examples\n *\n * ### Plain InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * ### Tree-shakable InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n * @publicApi\n */\nclass InjectionToken {\n  /**\n   * @param _desc   Description for the token,\n   *                used only for debugging purposes,\n   *                it should but does not need to be unique\n   * @param options Options for the token's usage, as described above\n   */\n  constructor(_desc, options) {\n    this._desc = _desc;\n    /** @internal */\n    this.ngMetadataName = 'InjectionToken';\n    this.ɵprov = undefined;\n    if (typeof options == 'number') {\n      (typeof ngDevMode === 'undefined' || ngDevMode) && assertLessThan(options, 0, 'Only negative numbers are supported here');\n      // This is a special hack to assign __NG_ELEMENT_ID__ to this instance.\n      // See `InjectorMarkers`\n      this.__NG_ELEMENT_ID__ = options;\n    } else if (options !== undefined) {\n      this.ɵprov = ɵɵdefineInjectable({\n        token: this,\n        providedIn: options.providedIn || 'root',\n        factory: options.factory\n      });\n    }\n  }\n  /**\n   * @internal\n   */\n  get multi() {\n    return this;\n  }\n  toString() {\n    return `InjectionToken ${this._desc}`;\n  }\n}\nlet _injectorProfilerContext;\nfunction getInjectorProfilerContext() {\n  !ngDevMode && throwError('getInjectorProfilerContext should never be called in production mode');\n  return _injectorProfilerContext;\n}\nfunction setInjectorProfilerContext(context) {\n  !ngDevMode && throwError('setInjectorProfilerContext should never be called in production mode');\n  const previous = _injectorProfilerContext;\n  _injectorProfilerContext = context;\n  return previous;\n}\nlet injectorProfilerCallback = null;\n/**\n * Sets the callback function which will be invoked during certain DI events within the\n * runtime (for example: injecting services, creating injectable instances, configuring providers)\n *\n * Warning: this function is *INTERNAL* and should not be relied upon in application's code.\n * The contract of the function might be changed in any release and/or the function can be removed\n * completely.\n *\n * @param profiler function provided by the caller or null value to disable profiling.\n */\nconst setInjectorProfiler = injectorProfiler => {\n  !ngDevMode && throwError('setInjectorProfiler should never be called in production mode');\n  injectorProfilerCallback = injectorProfiler;\n};\n/**\n * Injector profiler function which emits on DI events executed by the runtime.\n *\n * @param event InjectorProfilerEvent corresponding to the DI event being emitted\n */\nfunction injectorProfiler(event) {\n  !ngDevMode && throwError('Injector profiler should never be called in production mode');\n  if (injectorProfilerCallback != null /* both `null` and `undefined` */) {\n    injectorProfilerCallback(event);\n  }\n}\n/**\n * Emits an InjectorProfilerEventType.ProviderConfigured to the injector profiler. The data in the\n * emitted event includes the raw provider, as well as the token that provider is providing.\n *\n * @param eventProvider A provider object\n */\nfunction emitProviderConfiguredEvent(eventProvider, isViewProvider = false) {\n  !ngDevMode && throwError('Injector profiler should never be called in production mode');\n  let token;\n  // if the provider is a TypeProvider (typeof provider is function) then the token is the\n  // provider itself\n  if (typeof eventProvider === 'function') {\n    token = eventProvider;\n  }\n  // if the provider is an injection token, then the token is the injection token.\n  else if (eventProvider instanceof InjectionToken) {\n    token = eventProvider;\n  }\n  // in all other cases we can access the token via the `provide` property of the provider\n  else {\n    token = resolveForwardRef(eventProvider.provide);\n  }\n  let provider = eventProvider;\n  // Injection tokens may define their own default provider which gets attached to the token itself\n  // as `ɵprov`. In this case, we want to emit the provider that is attached to the token, not the\n  // token itself.\n  if (eventProvider instanceof InjectionToken) {\n    provider = eventProvider.ɵprov || eventProvider;\n  }\n  injectorProfiler({\n    type: 2 /* InjectorProfilerEventType.ProviderConfigured */,\n    context: getInjectorProfilerContext(),\n    providerRecord: {\n      token,\n      provider,\n      isViewProvider\n    }\n  });\n}\n/**\n * Emits an event to the injector profiler with the instance that was created. Note that\n * the injector associated with this emission can be accessed by using getDebugInjectContext()\n *\n * @param instance an object created by an injector\n */\nfunction emitInstanceCreatedByInjectorEvent(instance) {\n  !ngDevMode && throwError('Injector profiler should never be called in production mode');\n  injectorProfiler({\n    type: 1 /* InjectorProfilerEventType.InstanceCreatedByInjector */,\n    context: getInjectorProfilerContext(),\n    instance: {\n      value: instance\n    }\n  });\n}\n/**\n * @param token DI token associated with injected service\n * @param value the instance of the injected service (i.e the result of `inject(token)`)\n * @param flags the flags that the token was injected with\n */\nfunction emitInjectEvent(token, value, flags) {\n  !ngDevMode && throwError('Injector profiler should never be called in production mode');\n  injectorProfiler({\n    type: 0 /* InjectorProfilerEventType.Inject */,\n    context: getInjectorProfilerContext(),\n    service: {\n      token,\n      value,\n      flags\n    }\n  });\n}\nfunction runInInjectorProfilerContext(injector, token, callback) {\n  !ngDevMode && throwError('runInInjectorProfilerContext should never be called in production mode');\n  const prevInjectContext = setInjectorProfilerContext({\n    injector,\n    token\n  });\n  try {\n    callback();\n  } finally {\n    setInjectorProfilerContext(prevInjectContext);\n  }\n}\nconst _THROW_IF_NOT_FOUND = {};\nconst THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n/*\n * Name of a property (that we patch onto DI decorator), which is used as an annotation of which\n * InjectFlag this decorator represents. This allows to avoid direct references to the DI decorators\n * in the code, thus making them tree-shakable.\n */\nconst DI_DECORATOR_FLAG = '__NG_DI_FLAG__';\nconst NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\nconst NG_TOKEN_PATH = 'ngTokenPath';\nconst NEW_LINE = /\\n/gm;\nconst NO_NEW_LINE = 'ɵ';\nconst SOURCE = '__source';\n/**\n * Current injector value used by `inject`.\n * - `undefined`: it is an error to call `inject`\n * - `null`: `inject` can be called but there is no injector (limp-mode).\n * - Injector instance: Use the injector for resolution.\n */\nlet _currentInjector = undefined;\nfunction getCurrentInjector() {\n  return _currentInjector;\n}\nfunction setCurrentInjector(injector) {\n  const former = _currentInjector;\n  _currentInjector = injector;\n  return former;\n}\nfunction injectInjectorOnly(token, flags = InjectFlags.Default) {\n  if (_currentInjector === undefined) {\n    throw new RuntimeError(-203 /* RuntimeErrorCode.MISSING_INJECTION_CONTEXT */, ngDevMode && `inject() must be called from an injection context such as a constructor, a factory function, a field initializer, or a function used with \\`runInInjectionContext\\`.`);\n  } else if (_currentInjector === null) {\n    return injectRootLimpMode(token, undefined, flags);\n  } else {\n    const value = _currentInjector.get(token, flags & InjectFlags.Optional ? null : undefined, flags);\n    ngDevMode && emitInjectEvent(token, value, flags);\n    return value;\n  }\n}\nfunction ɵɵinject(token, flags = InjectFlags.Default) {\n  return (getInjectImplementation() || injectInjectorOnly)(resolveForwardRef(token), flags);\n}\n/**\n * Throws an error indicating that a factory function could not be generated by the compiler for a\n * particular class.\n *\n * The name of the class is not mentioned here, but will be in the generated factory function name\n * and thus in the stack trace.\n *\n * @codeGenApi\n */\nfunction ɵɵinvalidFactoryDep(index) {\n  throw new RuntimeError(202 /* RuntimeErrorCode.INVALID_FACTORY_DEPENDENCY */, ngDevMode && `This constructor is not compatible with Angular Dependency Injection because its dependency at index ${index} of the parameter list is invalid.\nThis can happen if the dependency type is a primitive like a string or if an ancestor of this class is missing an Angular decorator.\n\nPlease check that 1) the type for the parameter at index ${index} is correct and 2) the correct Angular decorators are defined for this class and its ancestors.`);\n}\n/**\n * Injects a token from the currently active injector.\n * `inject` is only supported in an [injection context](/guide/dependency-injection-context). It can\n * be used during:\n * - Construction (via the `constructor`) of a class being instantiated by the DI system, such\n * as an `@Injectable` or `@Component`.\n * - In the initializer for fields of such classes.\n * - In the factory function specified for `useFactory` of a `Provider` or an `@Injectable`.\n * - In the `factory` function specified for an `InjectionToken`.\n * - In a stackframe of a function call in a DI context\n *\n * @param token A token that represents a dependency that should be injected.\n * @param flags Optional flags that control how injection is executed.\n * The flags correspond to injection strategies that can be specified with\n * parameter decorators `@Host`, `@Self`, `@SkipSelf`, and `@Optional`.\n * @returns the injected value if operation is successful, `null` otherwise.\n * @throws if called outside of a supported context.\n *\n * @usageNotes\n * In practice the `inject()` calls are allowed in a constructor, a constructor parameter and a\n * field initializer:\n *\n * ```typescript\n * @Injectable({providedIn: 'root'})\n * export class Car {\n *   radio: Radio|undefined;\n *   // OK: field initializer\n *   spareTyre = inject(Tyre);\n *\n *   constructor() {\n *     // OK: constructor body\n *     this.radio = inject(Radio);\n *   }\n * }\n * ```\n *\n * It is also legal to call `inject` from a provider's factory:\n *\n * ```typescript\n * providers: [\n *   {provide: Car, useFactory: () => {\n *     // OK: a class factory\n *     const engine = inject(Engine);\n *     return new Car(engine);\n *   }}\n * ]\n * ```\n *\n * Calls to the `inject()` function outside of the class creation context will result in error. Most\n * notably, calls to `inject()` are disallowed after a class instance was created, in methods\n * (including lifecycle hooks):\n *\n * ```typescript\n * @Component({ ... })\n * export class CarComponent {\n *   ngOnInit() {\n *     // ERROR: too late, the component instance was already created\n *     const engine = inject(Engine);\n *     engine.start();\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nfunction inject(token, flags = InjectFlags.Default) {\n  return ɵɵinject(token, convertToBitFlags(flags));\n}\n// Converts object-based DI flags (`InjectOptions`) to bit flags (`InjectFlags`).\nfunction convertToBitFlags(flags) {\n  if (typeof flags === 'undefined' || typeof flags === 'number') {\n    return flags;\n  }\n  // While TypeScript doesn't accept it without a cast, bitwise OR with false-y values in\n  // JavaScript is a no-op. We can use that for a very codesize-efficient conversion from\n  // `InjectOptions` to `InjectFlags`.\n  return 0 /* InternalInjectFlags.Default */ | (\n  // comment to force a line break in the formatter\n  flags.optional && 8 /* InternalInjectFlags.Optional */) | (flags.host && 1 /* InternalInjectFlags.Host */) | (flags.self && 2 /* InternalInjectFlags.Self */) | (flags.skipSelf && 4 /* InternalInjectFlags.SkipSelf */);\n}\n\nfunction injectArgs(types) {\n  const args = [];\n  for (let i = 0; i < types.length; i++) {\n    const arg = resolveForwardRef(types[i]);\n    if (Array.isArray(arg)) {\n      if (arg.length === 0) {\n        throw new RuntimeError(900 /* RuntimeErrorCode.INVALID_DIFFER_INPUT */, ngDevMode && 'Arguments array must have arguments.');\n      }\n      let type = undefined;\n      let flags = InjectFlags.Default;\n      for (let j = 0; j < arg.length; j++) {\n        const meta = arg[j];\n        const flag = getInjectFlag(meta);\n        if (typeof flag === 'number') {\n          // Special case when we handle @Inject decorator.\n          if (flag === -1 /* DecoratorFlags.Inject */) {\n            type = meta.token;\n          } else {\n            flags |= flag;\n          }\n        } else {\n          type = meta;\n        }\n      }\n      args.push(ɵɵinject(type, flags));\n    } else {\n      args.push(ɵɵinject(arg));\n    }\n  }\n  return args;\n}\n/**\n * Attaches a given InjectFlag to a given decorator using monkey-patching.\n * Since DI decorators can be used in providers `deps` array (when provider is configured using\n * `useFactory`) without initialization (e.g. `Host`) and as an instance (e.g. `new Host()`), we\n * attach the flag to make it available both as a static property and as a field on decorator\n * instance.\n *\n * @param decorator Provided DI decorator.\n * @param flag InjectFlag that should be applied.\n */\nfunction attachInjectFlag(decorator, flag) {\n  decorator[DI_DECORATOR_FLAG] = flag;\n  decorator.prototype[DI_DECORATOR_FLAG] = flag;\n  return decorator;\n}\n/**\n * Reads monkey-patched property that contains InjectFlag attached to a decorator.\n *\n * @param token Token that may contain monkey-patched DI flags property.\n */\nfunction getInjectFlag(token) {\n  return token[DI_DECORATOR_FLAG];\n}\nfunction catchInjectorError(e, token, injectorErrorName, source) {\n  const tokenPath = e[NG_TEMP_TOKEN_PATH];\n  if (token[SOURCE]) {\n    tokenPath.unshift(token[SOURCE]);\n  }\n  e.message = formatError('\\n' + e.message, tokenPath, injectorErrorName, source);\n  e[NG_TOKEN_PATH] = tokenPath;\n  e[NG_TEMP_TOKEN_PATH] = null;\n  throw e;\n}\nfunction formatError(text, obj, injectorErrorName, source = null) {\n  text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.slice(2) : text;\n  let context = stringify(obj);\n  if (Array.isArray(obj)) {\n    context = obj.map(stringify).join(' -> ');\n  } else if (typeof obj === 'object') {\n    let parts = [];\n    for (let key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        let value = obj[key];\n        parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\n      }\n    }\n    context = `{${parts.join(', ')}}`;\n  }\n  return `${injectorErrorName}${source ? '(' + source + ')' : ''}[${context}]: ${text.replace(NEW_LINE, '\\n  ')}`;\n}\n\n/**\n * Convince closure compiler that the wrapped function has no side-effects.\n *\n * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to\n * allow us to execute a function but have closure compiler mark the call as no-side-effects.\n * It is important that the return value for the `noSideEffects` function be assigned\n * to something which is retained otherwise the call to `noSideEffects` will be removed by closure\n * compiler.\n */\nfunction noSideEffects(fn) {\n  return {\n    toString: fn\n  }.toString();\n}\n\n/**\n * The strategy that the default change detector uses to detect changes.\n * When set, takes effect the next time change detection is triggered.\n *\n * @see {@link ChangeDetectorRef#usage-notes Change detection usage}\n *\n * @publicApi\n */\nvar ChangeDetectionStrategy;\n(function (ChangeDetectionStrategy) {\n  /**\n   * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated\n   * until reactivated by setting the strategy to `Default` (`CheckAlways`).\n   * Change detection can still be explicitly invoked.\n   * This strategy applies to all child directives and cannot be overridden.\n   */\n  ChangeDetectionStrategy[ChangeDetectionStrategy[\"OnPush\"] = 0] = \"OnPush\";\n  /**\n   * Use the default `CheckAlways` strategy, in which change detection is automatic until\n   * explicitly deactivated.\n   */\n  ChangeDetectionStrategy[ChangeDetectionStrategy[\"Default\"] = 1] = \"Default\";\n})(ChangeDetectionStrategy || (ChangeDetectionStrategy = {}));\n\n/**\n * Defines the CSS styles encapsulation policies for the {@link Component} decorator's\n * `encapsulation` option.\n *\n * See {@link Component#encapsulation encapsulation}.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/ts/metadata/encapsulation.ts region='longform'}\n *\n * @publicApi\n */\nvar ViewEncapsulation$1;\n(function (ViewEncapsulation) {\n  // TODO: consider making `ViewEncapsulation` a `const enum` instead. See\n  // https://github.com/angular/angular/issues/44119 for additional information.\n  /**\n   * Emulates a native Shadow DOM encapsulation behavior by adding a specific attribute to the\n   * component's host element and applying the same attribute to all the CSS selectors provided\n   * via {@link Component#styles styles} or {@link Component#styleUrls styleUrls}.\n   *\n   * This is the default option.\n   */\n  ViewEncapsulation[ViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\";\n  // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.\n  /**\n   * Doesn't provide any sort of CSS style encapsulation, meaning that all the styles provided\n   * via {@link Component#styles styles} or {@link Component#styleUrls styleUrls} are applicable\n   * to any HTML element of the application regardless of their host Component.\n   */\n  ViewEncapsulation[ViewEncapsulation[\"None\"] = 2] = \"None\";\n  /**\n   * Uses the browser's native Shadow DOM API to encapsulate CSS styles, meaning that it creates\n   * a ShadowRoot for the component's host element which is then used to encapsulate\n   * all the Component's styling.\n   */\n  ViewEncapsulation[ViewEncapsulation[\"ShadowDom\"] = 3] = \"ShadowDom\";\n})(ViewEncapsulation$1 || (ViewEncapsulation$1 = {}));\n\n/**\n * This file contains reuseable \"empty\" symbols that can be used as default return values\n * in different parts of the rendering code. Because the same symbols are returned, this\n * allows for identity checks against these values to be consistently used by the framework\n * code.\n */\nconst EMPTY_OBJ = {};\nconst EMPTY_ARRAY = [];\n// freezing the values prevents any code from accidentally inserting new values in\nif ((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode()) {\n  // These property accesses can be ignored because ngDevMode will be set to false\n  // when optimizing code and the whole if statement will be dropped.\n  // tslint:disable-next-line:no-toplevel-property-access\n  Object.freeze(EMPTY_OBJ);\n  // tslint:disable-next-line:no-toplevel-property-access\n  Object.freeze(EMPTY_ARRAY);\n}\n\n/**\n * Returns an index of `classToSearch` in `className` taking token boundaries into account.\n *\n * `classIndexOf('AB A', 'A', 0)` will be 3 (not 0 since `AB!==A`)\n *\n * @param className A string containing classes (whitespace separated)\n * @param classToSearch A class name to locate\n * @param startingIndex Starting location of search\n * @returns an index of the located class (or -1 if not found)\n */\nfunction classIndexOf(className, classToSearch, startingIndex) {\n  ngDevMode && assertNotEqual(classToSearch, '', 'can not look for \"\" string.');\n  let end = className.length;\n  while (true) {\n    const foundIndex = className.indexOf(classToSearch, startingIndex);\n    if (foundIndex === -1) return foundIndex;\n    if (foundIndex === 0 || className.charCodeAt(foundIndex - 1) <= 32 /* CharCode.SPACE */) {\n      // Ensure that it has leading whitespace\n      const length = classToSearch.length;\n      if (foundIndex + length === end || className.charCodeAt(foundIndex + length) <= 32 /* CharCode.SPACE */) {\n        // Ensure that it has trailing whitespace\n        return foundIndex;\n      }\n    }\n    // False positive, keep searching from where we left off.\n    startingIndex = foundIndex + 1;\n  }\n}\n\n/**\n * Assigns all attribute values to the provided element via the inferred renderer.\n *\n * This function accepts two forms of attribute entries:\n *\n * default: (key, value):\n *  attrs = [key1, value1, key2, value2]\n *\n * namespaced: (NAMESPACE_MARKER, uri, name, value)\n *  attrs = [NAMESPACE_MARKER, uri, name, value, NAMESPACE_MARKER, uri, name, value]\n *\n * The `attrs` array can contain a mix of both the default and namespaced entries.\n * The \"default\" values are set without a marker, but if the function comes across\n * a marker value then it will attempt to set a namespaced value. If the marker is\n * not of a namespaced value then the function will quit and return the index value\n * where it stopped during the iteration of the attrs array.\n *\n * See [AttributeMarker] to understand what the namespace marker value is.\n *\n * Note that this instruction does not support assigning style and class values to\n * an element. See `elementStart` and `elementHostAttrs` to learn how styling values\n * are applied to an element.\n * @param renderer The renderer to be used\n * @param native The element that the attributes will be assigned to\n * @param attrs The attribute array of values that will be assigned to the element\n * @returns the index value that was last accessed in the attributes array\n */\nfunction setUpAttributes(renderer, native, attrs) {\n  let i = 0;\n  while (i < attrs.length) {\n    const value = attrs[i];\n    if (typeof value === 'number') {\n      // only namespaces are supported. Other value types (such as style/class\n      // entries) are not supported in this function.\n      if (value !== 0 /* AttributeMarker.NamespaceURI */) {\n        break;\n      }\n      // we just landed on the marker value ... therefore\n      // we should skip to the next entry\n      i++;\n      const namespaceURI = attrs[i++];\n      const attrName = attrs[i++];\n      const attrVal = attrs[i++];\n      ngDevMode && ngDevMode.rendererSetAttribute++;\n      renderer.setAttribute(native, attrName, attrVal, namespaceURI);\n    } else {\n      // attrName is string;\n      const attrName = value;\n      const attrVal = attrs[++i];\n      // Standard attributes\n      ngDevMode && ngDevMode.rendererSetAttribute++;\n      if (isAnimationProp(attrName)) {\n        renderer.setProperty(native, attrName, attrVal);\n      } else {\n        renderer.setAttribute(native, attrName, attrVal);\n      }\n      i++;\n    }\n  }\n  // another piece of code may iterate over the same attributes array. Therefore\n  // it may be helpful to return the exact spot where the attributes array exited\n  // whether by running into an unsupported marker or if all the static values were\n  // iterated over.\n  return i;\n}\n/**\n * Test whether the given value is a marker that indicates that the following\n * attribute values in a `TAttributes` array are only the names of attributes,\n * and not name-value pairs.\n * @param marker The attribute marker to test.\n * @returns true if the marker is a \"name-only\" marker (e.g. `Bindings`, `Template` or `I18n`).\n */\nfunction isNameOnlyAttributeMarker(marker) {\n  return marker === 3 /* AttributeMarker.Bindings */ || marker === 4 /* AttributeMarker.Template */ || marker === 6 /* AttributeMarker.I18n */;\n}\n\nfunction isAnimationProp(name) {\n  // Perf note: accessing charCodeAt to check for the first character of a string is faster as\n  // compared to accessing a character at index 0 (ex. name[0]). The main reason for this is that\n  // charCodeAt doesn't allocate memory to return a substring.\n  return name.charCodeAt(0) === 64 /* CharCode.AT_SIGN */;\n}\n/**\n * Merges `src` `TAttributes` into `dst` `TAttributes` removing any duplicates in the process.\n *\n * This merge function keeps the order of attrs same.\n *\n * @param dst Location of where the merged `TAttributes` should end up.\n * @param src `TAttributes` which should be appended to `dst`\n */\nfunction mergeHostAttrs(dst, src) {\n  if (src === null || src.length === 0) {\n    // do nothing\n  } else if (dst === null || dst.length === 0) {\n    // We have source, but dst is empty, just make a copy.\n    dst = src.slice();\n  } else {\n    let srcMarker = -1 /* AttributeMarker.ImplicitAttributes */;\n    for (let i = 0; i < src.length; i++) {\n      const item = src[i];\n      if (typeof item === 'number') {\n        srcMarker = item;\n      } else {\n        if (srcMarker === 0 /* AttributeMarker.NamespaceURI */) {\n          // Case where we need to consume `key1`, `key2`, `value` items.\n        } else if (srcMarker === -1 /* AttributeMarker.ImplicitAttributes */ || srcMarker === 2 /* AttributeMarker.Styles */) {\n          // Case where we have to consume `key1` and `value` only.\n          mergeHostAttribute(dst, srcMarker, item, null, src[++i]);\n        } else {\n          // Case where we have to consume `key1` only.\n          mergeHostAttribute(dst, srcMarker, item, null, null);\n        }\n      }\n    }\n  }\n  return dst;\n}\n/**\n * Append `key`/`value` to existing `TAttributes` taking region marker and duplicates into account.\n *\n * @param dst `TAttributes` to append to.\n * @param marker Region where the `key`/`value` should be added.\n * @param key1 Key to add to `TAttributes`\n * @param key2 Key to add to `TAttributes` (in case of `AttributeMarker.NamespaceURI`)\n * @param value Value to add or to overwrite to `TAttributes` Only used if `marker` is not Class.\n */\nfunction mergeHostAttribute(dst, marker, key1, key2, value) {\n  let i = 0;\n  // Assume that new markers will be inserted at the end.\n  let markerInsertPosition = dst.length;\n  // scan until correct type.\n  if (marker === -1 /* AttributeMarker.ImplicitAttributes */) {\n    markerInsertPosition = -1;\n  } else {\n    while (i < dst.length) {\n      const dstValue = dst[i++];\n      if (typeof dstValue === 'number') {\n        if (dstValue === marker) {\n          markerInsertPosition = -1;\n          break;\n        } else if (dstValue > marker) {\n          // We need to save this as we want the markers to be inserted in specific order.\n          markerInsertPosition = i - 1;\n          break;\n        }\n      }\n    }\n  }\n  // search until you find place of insertion\n  while (i < dst.length) {\n    const item = dst[i];\n    if (typeof item === 'number') {\n      // since `i` started as the index after the marker, we did not find it if we are at the next\n      // marker\n      break;\n    } else if (item === key1) {\n      // We already have same token\n      if (key2 === null) {\n        if (value !== null) {\n          dst[i + 1] = value;\n        }\n        return;\n      } else if (key2 === dst[i + 1]) {\n        dst[i + 2] = value;\n        return;\n      }\n    }\n    // Increment counter.\n    i++;\n    if (key2 !== null) i++;\n    if (value !== null) i++;\n  }\n  // insert at location.\n  if (markerInsertPosition !== -1) {\n    dst.splice(markerInsertPosition, 0, marker);\n    i = markerInsertPosition + 1;\n  }\n  dst.splice(i++, 0, key1);\n  if (key2 !== null) {\n    dst.splice(i++, 0, key2);\n  }\n  if (value !== null) {\n    dst.splice(i++, 0, value);\n  }\n}\nconst NG_TEMPLATE_SELECTOR = 'ng-template';\n/**\n * Search the `TAttributes` to see if it contains `cssClassToMatch` (case insensitive)\n *\n * @param attrs `TAttributes` to search through.\n * @param cssClassToMatch class to match (lowercase)\n * @param isProjectionMode Whether or not class matching should look into the attribute `class` in\n *    addition to the `AttributeMarker.Classes`.\n */\nfunction isCssClassMatching(attrs, cssClassToMatch, isProjectionMode) {\n  // TODO(misko): The fact that this function needs to know about `isProjectionMode` seems suspect.\n  // It is strange to me that sometimes the class information comes in form of `class` attribute\n  // and sometimes in form of `AttributeMarker.Classes`. Some investigation is needed to determine\n  // if that is the right behavior.\n  ngDevMode && assertEqual(cssClassToMatch, cssClassToMatch.toLowerCase(), 'Class name expected to be lowercase.');\n  let i = 0;\n  // Indicates whether we are processing value from the implicit\n  // attribute section (i.e. before the first marker in the array).\n  let isImplicitAttrsSection = true;\n  while (i < attrs.length) {\n    let item = attrs[i++];\n    if (typeof item === 'string' && isImplicitAttrsSection) {\n      const value = attrs[i++];\n      if (isProjectionMode && item === 'class') {\n        // We found a `class` attribute in the implicit attribute section,\n        // check if it matches the value of the `cssClassToMatch` argument.\n        if (classIndexOf(value.toLowerCase(), cssClassToMatch, 0) !== -1) {\n          return true;\n        }\n      }\n    } else if (item === 1 /* AttributeMarker.Classes */) {\n      // We found the classes section. Start searching for the class.\n      while (i < attrs.length && typeof (item = attrs[i++]) == 'string') {\n        // while we have strings\n        if (item.toLowerCase() === cssClassToMatch) return true;\n      }\n      return false;\n    } else if (typeof item === 'number') {\n      // We've came across a first marker, which indicates\n      // that the implicit attribute section is over.\n      isImplicitAttrsSection = false;\n    }\n  }\n  return false;\n}\n/**\n * Checks whether the `tNode` represents an inline template (e.g. `*ngFor`).\n *\n * @param tNode current TNode\n */\nfunction isInlineTemplate(tNode) {\n  return tNode.type === 4 /* TNodeType.Container */ && tNode.value !== NG_TEMPLATE_SELECTOR;\n}\n/**\n * Function that checks whether a given tNode matches tag-based selector and has a valid type.\n *\n * Matching can be performed in 2 modes: projection mode (when we project nodes) and regular\n * directive matching mode:\n * - in the \"directive matching\" mode we do _not_ take TContainer's tagName into account if it is\n * different from NG_TEMPLATE_SELECTOR (value different from NG_TEMPLATE_SELECTOR indicates that a\n * tag name was extracted from * syntax so we would match the same directive twice);\n * - in the \"projection\" mode, we use a tag name potentially extracted from the * syntax processing\n * (applicable to TNodeType.Container only).\n */\nfunction hasTagAndTypeMatch(tNode, currentSelector, isProjectionMode) {\n  const tagNameToCompare = tNode.type === 4 /* TNodeType.Container */ && !isProjectionMode ? NG_TEMPLATE_SELECTOR : tNode.value;\n  return currentSelector === tagNameToCompare;\n}\n/**\n * A utility function to match an Ivy node static data against a simple CSS selector\n *\n * @param node static data of the node to match\n * @param selector The selector to try matching against the node.\n * @param isProjectionMode if `true` we are matching for content projection, otherwise we are doing\n * directive matching.\n * @returns true if node matches the selector.\n */\nfunction isNodeMatchingSelector(tNode, selector, isProjectionMode) {\n  ngDevMode && assertDefined(selector[0], 'Selector should have a tag name');\n  let mode = 4 /* SelectorFlags.ELEMENT */;\n  const nodeAttrs = tNode.attrs || [];\n  // Find the index of first attribute that has no value, only a name.\n  const nameOnlyMarkerIdx = getNameOnlyMarkerIndex(nodeAttrs);\n  // When processing \":not\" selectors, we skip to the next \":not\" if the\n  // current one doesn't match\n  let skipToNextSelector = false;\n  for (let i = 0; i < selector.length; i++) {\n    const current = selector[i];\n    if (typeof current === 'number') {\n      // If we finish processing a :not selector and it hasn't failed, return false\n      if (!skipToNextSelector && !isPositive(mode) && !isPositive(current)) {\n        return false;\n      }\n      // If we are skipping to the next :not() and this mode flag is positive,\n      // it's a part of the current :not() selector, and we should keep skipping\n      if (skipToNextSelector && isPositive(current)) continue;\n      skipToNextSelector = false;\n      mode = current | mode & 1 /* SelectorFlags.NOT */;\n      continue;\n    }\n    if (skipToNextSelector) continue;\n    if (mode & 4 /* SelectorFlags.ELEMENT */) {\n      mode = 2 /* SelectorFlags.ATTRIBUTE */ | mode & 1 /* SelectorFlags.NOT */;\n      if (current !== '' && !hasTagAndTypeMatch(tNode, current, isProjectionMode) || current === '' && selector.length === 1) {\n        if (isPositive(mode)) return false;\n        skipToNextSelector = true;\n      }\n    } else {\n      const selectorAttrValue = mode & 8 /* SelectorFlags.CLASS */ ? current : selector[++i];\n      // special case for matching against classes when a tNode has been instantiated with\n      // class and style values as separate attribute values (e.g. ['title', CLASS, 'foo'])\n      if (mode & 8 /* SelectorFlags.CLASS */ && tNode.attrs !== null) {\n        if (!isCssClassMatching(tNode.attrs, selectorAttrValue, isProjectionMode)) {\n          if (isPositive(mode)) return false;\n          skipToNextSelector = true;\n        }\n        continue;\n      }\n      const attrName = mode & 8 /* SelectorFlags.CLASS */ ? 'class' : current;\n      const attrIndexInNode = findAttrIndexInNode(attrName, nodeAttrs, isInlineTemplate(tNode), isProjectionMode);\n      if (attrIndexInNode === -1) {\n        if (isPositive(mode)) return false;\n        skipToNextSelector = true;\n        continue;\n      }\n      if (selectorAttrValue !== '') {\n        let nodeAttrValue;\n        if (attrIndexInNode > nameOnlyMarkerIdx) {\n          nodeAttrValue = '';\n        } else {\n          ngDevMode && assertNotEqual(nodeAttrs[attrIndexInNode], 0 /* AttributeMarker.NamespaceURI */, 'We do not match directives on namespaced attributes');\n          // we lowercase the attribute value to be able to match\n          // selectors without case-sensitivity\n          // (selectors are already in lowercase when generated)\n          nodeAttrValue = nodeAttrs[attrIndexInNode + 1].toLowerCase();\n        }\n        const compareAgainstClassName = mode & 8 /* SelectorFlags.CLASS */ ? nodeAttrValue : null;\n        if (compareAgainstClassName && classIndexOf(compareAgainstClassName, selectorAttrValue, 0) !== -1 || mode & 2 /* SelectorFlags.ATTRIBUTE */ && selectorAttrValue !== nodeAttrValue) {\n          if (isPositive(mode)) return false;\n          skipToNextSelector = true;\n        }\n      }\n    }\n  }\n  return isPositive(mode) || skipToNextSelector;\n}\nfunction isPositive(mode) {\n  return (mode & 1 /* SelectorFlags.NOT */) === 0;\n}\n/**\n * Examines the attribute's definition array for a node to find the index of the\n * attribute that matches the given `name`.\n *\n * NOTE: This will not match namespaced attributes.\n *\n * Attribute matching depends upon `isInlineTemplate` and `isProjectionMode`.\n * The following table summarizes which types of attributes we attempt to match:\n *\n * ===========================================================================================================\n * Modes                   | Normal Attributes | Bindings Attributes | Template Attributes | I18n\n * Attributes\n * ===========================================================================================================\n * Inline + Projection     | YES               | YES                 | NO                  | YES\n * -----------------------------------------------------------------------------------------------------------\n * Inline + Directive      | NO                | NO                  | YES                 | NO\n * -----------------------------------------------------------------------------------------------------------\n * Non-inline + Projection | YES               | YES                 | NO                  | YES\n * -----------------------------------------------------------------------------------------------------------\n * Non-inline + Directive  | YES               | YES                 | NO                  | YES\n * ===========================================================================================================\n *\n * @param name the name of the attribute to find\n * @param attrs the attribute array to examine\n * @param isInlineTemplate true if the node being matched is an inline template (e.g. `*ngFor`)\n * rather than a manually expanded template node (e.g `<ng-template>`).\n * @param isProjectionMode true if we are matching against content projection otherwise we are\n * matching against directives.\n */\nfunction findAttrIndexInNode(name, attrs, isInlineTemplate, isProjectionMode) {\n  if (attrs === null) return -1;\n  let i = 0;\n  if (isProjectionMode || !isInlineTemplate) {\n    let bindingsMode = false;\n    while (i < attrs.length) {\n      const maybeAttrName = attrs[i];\n      if (maybeAttrName === name) {\n        return i;\n      } else if (maybeAttrName === 3 /* AttributeMarker.Bindings */ || maybeAttrName === 6 /* AttributeMarker.I18n */) {\n        bindingsMode = true;\n      } else if (maybeAttrName === 1 /* AttributeMarker.Classes */ || maybeAttrName === 2 /* AttributeMarker.Styles */) {\n        let value = attrs[++i];\n        // We should skip classes here because we have a separate mechanism for\n        // matching classes in projection mode.\n        while (typeof value === 'string') {\n          value = attrs[++i];\n        }\n        continue;\n      } else if (maybeAttrName === 4 /* AttributeMarker.Template */) {\n        // We do not care about Template attributes in this scenario.\n        break;\n      } else if (maybeAttrName === 0 /* AttributeMarker.NamespaceURI */) {\n        // Skip the whole namespaced attribute and value. This is by design.\n        i += 4;\n        continue;\n      }\n      // In binding mode there are only names, rather than name-value pairs.\n      i += bindingsMode ? 1 : 2;\n    }\n    // We did not match the attribute\n    return -1;\n  } else {\n    return matchTemplateAttribute(attrs, name);\n  }\n}\nfunction isNodeMatchingSelectorList(tNode, selector, isProjectionMode = false) {\n  for (let i = 0; i < selector.length; i++) {\n    if (isNodeMatchingSelector(tNode, selector[i], isProjectionMode)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction getProjectAsAttrValue(tNode) {\n  const nodeAttrs = tNode.attrs;\n  if (nodeAttrs != null) {\n    const ngProjectAsAttrIdx = nodeAttrs.indexOf(5 /* AttributeMarker.ProjectAs */);\n    // only check for ngProjectAs in attribute names, don't accidentally match attribute's value\n    // (attribute names are stored at even indexes)\n    if ((ngProjectAsAttrIdx & 1) === 0) {\n      return nodeAttrs[ngProjectAsAttrIdx + 1];\n    }\n  }\n  return null;\n}\nfunction getNameOnlyMarkerIndex(nodeAttrs) {\n  for (let i = 0; i < nodeAttrs.length; i++) {\n    const nodeAttr = nodeAttrs[i];\n    if (isNameOnlyAttributeMarker(nodeAttr)) {\n      return i;\n    }\n  }\n  return nodeAttrs.length;\n}\nfunction matchTemplateAttribute(attrs, name) {\n  let i = attrs.indexOf(4 /* AttributeMarker.Template */);\n  if (i > -1) {\n    i++;\n    while (i < attrs.length) {\n      const attr = attrs[i];\n      // Return in case we checked all template attrs and are switching to the next section in the\n      // attrs array (that starts with a number that represents an attribute marker).\n      if (typeof attr === 'number') return -1;\n      if (attr === name) return i;\n      i++;\n    }\n  }\n  return -1;\n}\n/**\n * Checks whether a selector is inside a CssSelectorList\n * @param selector Selector to be checked.\n * @param list List in which to look for the selector.\n */\nfunction isSelectorInSelectorList(selector, list) {\n  selectorListLoop: for (let i = 0; i < list.length; i++) {\n    const currentSelectorInList = list[i];\n    if (selector.length !== currentSelectorInList.length) {\n      continue;\n    }\n    for (let j = 0; j < selector.length; j++) {\n      if (selector[j] !== currentSelectorInList[j]) {\n        continue selectorListLoop;\n      }\n    }\n    return true;\n  }\n  return false;\n}\nfunction maybeWrapInNotSelector(isNegativeMode, chunk) {\n  return isNegativeMode ? ':not(' + chunk.trim() + ')' : chunk;\n}\nfunction stringifyCSSSelector(selector) {\n  let result = selector[0];\n  let i = 1;\n  let mode = 2 /* SelectorFlags.ATTRIBUTE */;\n  let currentChunk = '';\n  let isNegativeMode = false;\n  while (i < selector.length) {\n    let valueOrMarker = selector[i];\n    if (typeof valueOrMarker === 'string') {\n      if (mode & 2 /* SelectorFlags.ATTRIBUTE */) {\n        const attrValue = selector[++i];\n        currentChunk += '[' + valueOrMarker + (attrValue.length > 0 ? '=\"' + attrValue + '\"' : '') + ']';\n      } else if (mode & 8 /* SelectorFlags.CLASS */) {\n        currentChunk += '.' + valueOrMarker;\n      } else if (mode & 4 /* SelectorFlags.ELEMENT */) {\n        currentChunk += ' ' + valueOrMarker;\n      }\n    } else {\n      //\n      // Append current chunk to the final result in case we come across SelectorFlag, which\n      // indicates that the previous section of a selector is over. We need to accumulate content\n      // between flags to make sure we wrap the chunk later in :not() selector if needed, e.g.\n      // ```\n      //  ['', Flags.CLASS, '.classA', Flags.CLASS | Flags.NOT, '.classB', '.classC']\n      // ```\n      // should be transformed to `.classA :not(.classB .classC)`.\n      //\n      // Note: for negative selector part, we accumulate content between flags until we find the\n      // next negative flag. This is needed to support a case where `:not()` rule contains more than\n      // one chunk, e.g. the following selector:\n      // ```\n      //  ['', Flags.ELEMENT | Flags.NOT, 'p', Flags.CLASS, 'foo', Flags.CLASS | Flags.NOT, 'bar']\n      // ```\n      // should be stringified to `:not(p.foo) :not(.bar)`\n      //\n      if (currentChunk !== '' && !isPositive(valueOrMarker)) {\n        result += maybeWrapInNotSelector(isNegativeMode, currentChunk);\n        currentChunk = '';\n      }\n      mode = valueOrMarker;\n      // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative\n      // mode is maintained for remaining chunks of a selector.\n      isNegativeMode = isNegativeMode || !isPositive(mode);\n    }\n    i++;\n  }\n  if (currentChunk !== '') {\n    result += maybeWrapInNotSelector(isNegativeMode, currentChunk);\n  }\n  return result;\n}\n/**\n * Generates string representation of CSS selector in parsed form.\n *\n * ComponentDef and DirectiveDef are generated with the selector in parsed form to avoid doing\n * additional parsing at runtime (for example, for directive matching). However in some cases (for\n * example, while bootstrapping a component), a string version of the selector is required to query\n * for the host element on the page. This function takes the parsed form of a selector and returns\n * its string representation.\n *\n * @param selectorList selector in parsed form\n * @returns string representation of a given selector\n */\nfunction stringifyCSSSelectorList(selectorList) {\n  return selectorList.map(stringifyCSSSelector).join(',');\n}\n/**\n * Extracts attributes and classes information from a given CSS selector.\n *\n * This function is used while creating a component dynamically. In this case, the host element\n * (that is created dynamically) should contain attributes and classes specified in component's CSS\n * selector.\n *\n * @param selector CSS selector in parsed form (in a form of array)\n * @returns object with `attrs` and `classes` fields that contain extracted information\n */\nfunction extractAttrsAndClassesFromSelector(selector) {\n  const attrs = [];\n  const classes = [];\n  let i = 1;\n  let mode = 2 /* SelectorFlags.ATTRIBUTE */;\n  while (i < selector.length) {\n    let valueOrMarker = selector[i];\n    if (typeof valueOrMarker === 'string') {\n      if (mode === 2 /* SelectorFlags.ATTRIBUTE */) {\n        if (valueOrMarker !== '') {\n          attrs.push(valueOrMarker, selector[++i]);\n        }\n      } else if (mode === 8 /* SelectorFlags.CLASS */) {\n        classes.push(valueOrMarker);\n      }\n    } else {\n      // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative\n      // mode is maintained for remaining chunks of a selector. Since attributes and classes are\n      // extracted only for \"positive\" part of the selector, we can stop here.\n      if (!isPositive(mode)) break;\n      mode = valueOrMarker;\n    }\n    i++;\n  }\n  return {\n    attrs,\n    classes\n  };\n}\n\n/**\n * Create a component definition object.\n *\n *\n * # Example\n * ```\n * class MyComponent {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ɵcmp = defineComponent({\n *     ...\n *   });\n * }\n * ```\n * @codeGenApi\n */\nfunction ɵɵdefineComponent(componentDefinition) {\n  return noSideEffects(() => {\n    var _componentDefinition$;\n    // Initialize ngDevMode. This must be the first statement in ɵɵdefineComponent.\n    // See the `initNgDevMode` docstring for more information.\n    (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();\n    const baseDef = getNgDirectiveDef(componentDefinition);\n    const def = {\n      ...baseDef,\n      decls: componentDefinition.decls,\n      vars: componentDefinition.vars,\n      template: componentDefinition.template,\n      consts: componentDefinition.consts || null,\n      ngContentSelectors: componentDefinition.ngContentSelectors,\n      onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,\n      directiveDefs: null,\n      pipeDefs: null,\n      dependencies: baseDef.standalone && componentDefinition.dependencies || null,\n      getStandaloneInjector: null,\n      signals: (_componentDefinition$ = componentDefinition.signals) !== null && _componentDefinition$ !== void 0 ? _componentDefinition$ : false,\n      data: componentDefinition.data || {},\n      encapsulation: componentDefinition.encapsulation || ViewEncapsulation$1.Emulated,\n      styles: componentDefinition.styles || EMPTY_ARRAY,\n      _: null,\n      schemas: componentDefinition.schemas || null,\n      tView: null,\n      id: ''\n    };\n    initFeatures(def);\n    const dependencies = componentDefinition.dependencies;\n    def.directiveDefs = extractDefListOrFactory(dependencies, /* pipeDef */false);\n    def.pipeDefs = extractDefListOrFactory(dependencies, /* pipeDef */true);\n    def.id = getComponentId(def);\n    return def;\n  });\n}\nfunction extractDirectiveDef(type) {\n  return getComponentDef(type) || getDirectiveDef(type);\n}\nfunction nonNull(value) {\n  return value !== null;\n}\n/**\n * @codeGenApi\n */\nfunction ɵɵdefineNgModule(def) {\n  return noSideEffects(() => {\n    const res = {\n      type: def.type,\n      bootstrap: def.bootstrap || EMPTY_ARRAY,\n      declarations: def.declarations || EMPTY_ARRAY,\n      imports: def.imports || EMPTY_ARRAY,\n      exports: def.exports || EMPTY_ARRAY,\n      transitiveCompileScopes: null,\n      schemas: def.schemas || null,\n      id: def.id || null\n    };\n    return res;\n  });\n}\n/**\n * Inverts an inputs or outputs lookup such that the keys, which were the\n * minified keys, are part of the values, and the values are parsed so that\n * the publicName of the property is the new key\n *\n * e.g. for\n *\n * ```\n * class Comp {\n *   @Input()\n *   propName1: string;\n *\n *   @Input('publicName2')\n *   declaredPropName2: number;\n * }\n * ```\n *\n * will be serialized as\n *\n * ```\n * {\n *   propName1: 'propName1',\n *   declaredPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * which is than translated by the minifier as:\n *\n * ```\n * {\n *   minifiedPropName1: 'propName1',\n *   minifiedPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * becomes: (public name => minifiedName)\n *\n * ```\n * {\n *  'propName1': 'minifiedPropName1',\n *  'publicName2': 'minifiedPropName2',\n * }\n * ```\n *\n * Optionally the function can take `secondary` which will result in: (public name => declared name)\n *\n * ```\n * {\n *  'propName1': 'propName1',\n *  'publicName2': 'declaredPropName2',\n * }\n * ```\n *\n\n */\nfunction invertObject(obj, secondary) {\n  if (obj == null) return EMPTY_OBJ;\n  const newLookup = {};\n  for (const minifiedKey in obj) {\n    if (obj.hasOwnProperty(minifiedKey)) {\n      let publicName = obj[minifiedKey];\n      let declaredName = publicName;\n      if (Array.isArray(publicName)) {\n        declaredName = publicName[1];\n        publicName = publicName[0];\n      }\n      newLookup[publicName] = minifiedKey;\n      if (secondary) {\n        secondary[publicName] = declaredName;\n      }\n    }\n  }\n  return newLookup;\n}\n/**\n * Create a directive definition object.\n *\n * # Example\n * ```ts\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ɵdir = ɵɵdefineDirective({\n *     ...\n *   });\n * }\n * ```\n *\n * @codeGenApi\n */\nfunction ɵɵdefineDirective(directiveDefinition) {\n  return noSideEffects(() => {\n    const def = getNgDirectiveDef(directiveDefinition);\n    initFeatures(def);\n    return def;\n  });\n}\n/**\n * Create a pipe definition object.\n *\n * # Example\n * ```\n * class MyPipe implements PipeTransform {\n *   // Generated by Angular Template Compiler\n *   static ɵpipe = definePipe({\n *     ...\n *   });\n * }\n * ```\n * @param pipeDef Pipe definition generated by the compiler\n *\n * @codeGenApi\n */\nfunction ɵɵdefinePipe(pipeDef) {\n  return {\n    type: pipeDef.type,\n    name: pipeDef.name,\n    factory: null,\n    pure: pipeDef.pure !== false,\n    standalone: pipeDef.standalone === true,\n    onDestroy: pipeDef.type.prototype.ngOnDestroy || null\n  };\n}\n/**\n * The following getter methods retrieve the definition from the type. Currently the retrieval\n * honors inheritance, but in the future we may change the rule to require that definitions are\n * explicit. This would require some sort of migration strategy.\n */\nfunction getComponentDef(type) {\n  return type[NG_COMP_DEF] || null;\n}\nfunction getDirectiveDef(type) {\n  return type[NG_DIR_DEF] || null;\n}\nfunction getPipeDef$1(type) {\n  return type[NG_PIPE_DEF] || null;\n}\n/**\n * Checks whether a given Component, Directive or Pipe is marked as standalone.\n * This will return false if passed anything other than a Component, Directive, or Pipe class\n * See [this guide](/guide/standalone-components) for additional information:\n *\n * @param type A reference to a Component, Directive or Pipe.\n * @publicApi\n */\nfunction isStandalone(type) {\n  const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef$1(type);\n  return def !== null ? def.standalone : false;\n}\nfunction getNgModuleDef(type, throwNotFound) {\n  const ngModuleDef = type[NG_MOD_DEF] || null;\n  if (!ngModuleDef && throwNotFound === true) {\n    throw new Error(`Type ${stringify(type)} does not have 'ɵmod' property.`);\n  }\n  return ngModuleDef;\n}\nfunction getNgDirectiveDef(directiveDefinition) {\n  const declaredInputs = {};\n  return {\n    type: directiveDefinition.type,\n    providersResolver: null,\n    factory: null,\n    hostBindings: directiveDefinition.hostBindings || null,\n    hostVars: directiveDefinition.hostVars || 0,\n    hostAttrs: directiveDefinition.hostAttrs || null,\n    contentQueries: directiveDefinition.contentQueries || null,\n    declaredInputs,\n    inputTransforms: null,\n    inputConfig: directiveDefinition.inputs || EMPTY_OBJ,\n    exportAs: directiveDefinition.exportAs || null,\n    standalone: directiveDefinition.standalone === true,\n    signals: directiveDefinition.signals === true,\n    selectors: directiveDefinition.selectors || EMPTY_ARRAY,\n    viewQuery: directiveDefinition.viewQuery || null,\n    features: directiveDefinition.features || null,\n    setInput: null,\n    findHostDirectiveDefs: null,\n    hostDirectives: null,\n    inputs: invertObject(directiveDefinition.inputs, declaredInputs),\n    outputs: invertObject(directiveDefinition.outputs),\n    debugInfo: null\n  };\n}\nfunction initFeatures(definition) {\n  var _definition$features;\n  (_definition$features = definition.features) === null || _definition$features === void 0 || _definition$features.forEach(fn => fn(definition));\n}\nfunction extractDefListOrFactory(dependencies, pipeDef) {\n  if (!dependencies) {\n    return null;\n  }\n  const defExtractor = pipeDef ? getPipeDef$1 : extractDirectiveDef;\n  return () => (typeof dependencies === 'function' ? dependencies() : dependencies).map(dep => defExtractor(dep)).filter(nonNull);\n}\n/**\n * A map that contains the generated component IDs and type.\n */\nconst GENERATED_COMP_IDS = new Map();\n/**\n * A method can returns a component ID from the component definition using a variant of DJB2 hash\n * algorithm.\n */\nfunction getComponentId(componentDef) {\n  let hash = 0;\n  // We cannot rely solely on the component selector as the same selector can be used in different\n  // modules.\n  //\n  // `componentDef.style` is not used, due to it causing inconsistencies. Ex: when server\n  // component styles has no sourcemaps and browsers do.\n  //\n  // Example:\n  // https://github.com/angular/components/blob/d9f82c8f95309e77a6d82fd574c65871e91354c2/src/material/core/option/option.ts#L248\n  // https://github.com/angular/components/blob/285f46dc2b4c5b127d356cb7c4714b221f03ce50/src/material/legacy-core/option/option.ts#L32\n  const hashSelectors = [componentDef.selectors, componentDef.ngContentSelectors, componentDef.hostVars, componentDef.hostAttrs, componentDef.consts, componentDef.vars, componentDef.decls, componentDef.encapsulation, componentDef.standalone, componentDef.signals, componentDef.exportAs, JSON.stringify(componentDef.inputs), JSON.stringify(componentDef.outputs),\n  // We cannot use 'componentDef.type.name' as the name of the symbol will change and will not\n  // match in the server and browser bundles.\n  Object.getOwnPropertyNames(componentDef.type.prototype), !!componentDef.contentQueries, !!componentDef.viewQuery].join('|');\n  for (const char of hashSelectors) {\n    hash = Math.imul(31, hash) + char.charCodeAt(0) << 0;\n  }\n  // Force positive number hash.\n  // 2147483647 = equivalent of Integer.MAX_VALUE.\n  hash += 2147483647 + 1;\n  const compId = 'c' + hash;\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    if (GENERATED_COMP_IDS.has(compId)) {\n      const previousCompDefType = GENERATED_COMP_IDS.get(compId);\n      if (previousCompDefType !== componentDef.type) {\n        console.warn(formatRuntimeError(-912 /* RuntimeErrorCode.COMPONENT_ID_COLLISION */, `Component ID generation collision detected. Components '${previousCompDefType.name}' and '${componentDef.type.name}' with selector '${stringifyCSSSelectorList(componentDef.selectors)}' generated the same component ID. To fix this, you can change the selector of one of those components or add an extra host attribute to force a different ID.`));\n      }\n    } else {\n      GENERATED_COMP_IDS.set(compId, componentDef.type);\n    }\n  }\n  return compId;\n}\n\n// Below are constants for LView indices to help us look up LView members\n// without having to remember the specific indices.\n// Uglify will inline these when minifying so there shouldn't be a cost.\nconst HOST = 0;\nconst TVIEW = 1;\n// Shared with LContainer\nconst FLAGS = 2;\nconst PARENT = 3;\nconst NEXT = 4;\nconst T_HOST = 5;\n// End shared with LContainer\nconst HYDRATION = 6;\nconst CLEANUP = 7;\nconst CONTEXT = 8;\nconst INJECTOR$1 = 9;\nconst ENVIRONMENT = 10;\nconst RENDERER = 11;\nconst CHILD_HEAD = 12;\nconst CHILD_TAIL = 13;\n// FIXME(misko): Investigate if the three declarations aren't all same thing.\nconst DECLARATION_VIEW = 14;\nconst DECLARATION_COMPONENT_VIEW = 15;\nconst DECLARATION_LCONTAINER = 16;\nconst PREORDER_HOOK_FLAGS = 17;\nconst QUERIES = 18;\nconst ID = 19;\nconst EMBEDDED_VIEW_INJECTOR = 20;\nconst ON_DESTROY_HOOKS = 21;\nconst EFFECTS_TO_SCHEDULE = 22;\nconst REACTIVE_TEMPLATE_CONSUMER = 23;\n/**\n * Size of LView's header. Necessary to adjust for it when setting slots.\n *\n * IMPORTANT: `HEADER_OFFSET` should only be referred to the in the `ɵɵ*` instructions to translate\n * instruction index into `LView` index. All other indexes should be in the `LView` index space and\n * there should be no need to refer to `HEADER_OFFSET` anywhere else.\n */\nconst HEADER_OFFSET = 25;\n\n/**\n * Special location which allows easy identification of type. If we have an array which was\n * retrieved from the `LView` and that array has `true` at `TYPE` location, we know it is\n * `LContainer`.\n */\nconst TYPE = 1;\n/**\n * Below are constants for LContainer indices to help us look up LContainer members\n * without having to remember the specific indices.\n * Uglify will inline these when minifying so there shouldn't be a cost.\n */\n// FLAGS, PARENT, NEXT, and T_HOST are indices 2, 3, 4, and 5\n// As we already have these constants in LView, we don't need to re-create them.\nconst DEHYDRATED_VIEWS = 6;\nconst NATIVE = 7;\nconst VIEW_REFS = 8;\nconst MOVED_VIEWS = 9;\n/**\n * Size of LContainer's header. Represents the index after which all views in the\n * container will be inserted. We need to keep a record of current views so we know\n * which views are already in the DOM (and don't need to be re-added) and so we can\n * remove views from the DOM when they are no longer required.\n */\nconst CONTAINER_HEADER_OFFSET = 10;\n/** Flags associated with an LContainer (saved in LContainer[FLAGS]) */\nvar LContainerFlags;\n(function (LContainerFlags) {\n  LContainerFlags[LContainerFlags[\"None\"] = 0] = \"None\";\n  /**\n   * Flag to signify that this `LContainer` may have transplanted views which need to be change\n   * detected. (see: `LView[DECLARATION_COMPONENT_VIEW])`.\n   *\n   * This flag, once set, is never unset for the `LContainer`.\n   */\n  LContainerFlags[LContainerFlags[\"HasTransplantedViews\"] = 2] = \"HasTransplantedViews\";\n  /**\n   * Indicates that this LContainer has a view underneath it that needs to be refreshed during\n   * change detection.\n   */\n  LContainerFlags[LContainerFlags[\"HasChildViewsToRefresh\"] = 4] = \"HasChildViewsToRefresh\";\n})(LContainerFlags || (LContainerFlags = {}));\n\n/**\n * True if `value` is `LView`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nfunction isLView(value) {\n  return Array.isArray(value) && typeof value[TYPE] === 'object';\n}\n/**\n * True if `value` is `LContainer`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nfunction isLContainer(value) {\n  return Array.isArray(value) && value[TYPE] === true;\n}\nfunction isContentQueryHost(tNode) {\n  return (tNode.flags & 4 /* TNodeFlags.hasContentQuery */) !== 0;\n}\nfunction isComponentHost(tNode) {\n  return tNode.componentOffset > -1;\n}\nfunction isDirectiveHost(tNode) {\n  return (tNode.flags & 1 /* TNodeFlags.isDirectiveHost */) === 1 /* TNodeFlags.isDirectiveHost */;\n}\n\nfunction isComponentDef(def) {\n  return !!def.template;\n}\nfunction isRootView(target) {\n  return (target[FLAGS] & 512 /* LViewFlags.IsRoot */) !== 0;\n}\nfunction isProjectionTNode(tNode) {\n  return (tNode.type & 16 /* TNodeType.Projection */) === 16 /* TNodeType.Projection */;\n}\n\nfunction hasI18n(lView) {\n  return (lView[FLAGS] & 32 /* LViewFlags.HasI18n */) === 32 /* LViewFlags.HasI18n */;\n}\n\nfunction isDestroyed(lView) {\n  return (lView[FLAGS] & 256 /* LViewFlags.Destroyed */) === 256 /* LViewFlags.Destroyed */;\n}\n\n// [Assert functions do not constraint type when they are guarded by a truthy\n// expression.](https://github.com/microsoft/TypeScript/issues/37295)\nfunction assertTNodeForLView(tNode, lView) {\n  assertTNodeForTView(tNode, lView[TVIEW]);\n}\nfunction assertTNodeForTView(tNode, tView) {\n  assertTNode(tNode);\n  const tData = tView.data;\n  for (let i = HEADER_OFFSET; i < tData.length; i++) {\n    if (tData[i] === tNode) {\n      return;\n    }\n  }\n  throwError('This TNode does not belong to this TView.');\n}\nfunction assertTNode(tNode) {\n  assertDefined(tNode, 'TNode must be defined');\n  if (!(tNode && typeof tNode === 'object' && tNode.hasOwnProperty('directiveStylingLast'))) {\n    throwError('Not of type TNode, got: ' + tNode);\n  }\n}\nfunction assertTIcu(tIcu) {\n  assertDefined(tIcu, 'Expected TIcu to be defined');\n  if (!(typeof tIcu.currentCaseLViewIndex === 'number')) {\n    throwError('Object is not of TIcu type.');\n  }\n}\nfunction assertComponentType(actual, msg = 'Type passed in is not ComponentType, it does not have \\'ɵcmp\\' property.') {\n  if (!getComponentDef(actual)) {\n    throwError(msg);\n  }\n}\nfunction assertNgModuleType(actual, msg = 'Type passed in is not NgModuleType, it does not have \\'ɵmod\\' property.') {\n  if (!getNgModuleDef(actual)) {\n    throwError(msg);\n  }\n}\nfunction assertCurrentTNodeIsParent(isParent) {\n  assertEqual(isParent, true, 'currentTNode should be a parent');\n}\nfunction assertHasParent(tNode) {\n  assertDefined(tNode, 'currentTNode should exist!');\n  assertDefined(tNode.parent, 'currentTNode should have a parent');\n}\nfunction assertLContainer(value) {\n  assertDefined(value, 'LContainer must be defined');\n  assertEqual(isLContainer(value), true, 'Expecting LContainer');\n}\nfunction assertLViewOrUndefined(value) {\n  value && assertEqual(isLView(value), true, 'Expecting LView or undefined or null');\n}\nfunction assertLView(value) {\n  assertDefined(value, 'LView must be defined');\n  assertEqual(isLView(value), true, 'Expecting LView');\n}\nfunction assertFirstCreatePass(tView, errMessage) {\n  assertEqual(tView.firstCreatePass, true, errMessage || 'Should only be called in first create pass.');\n}\nfunction assertFirstUpdatePass(tView, errMessage) {\n  assertEqual(tView.firstUpdatePass, true, errMessage || 'Should only be called in first update pass.');\n}\n/**\n * This is a basic sanity check that an object is probably a directive def. DirectiveDef is\n * an interface, so we can't do a direct instanceof check.\n */\nfunction assertDirectiveDef(obj) {\n  if (obj.type === undefined || obj.selectors == undefined || obj.inputs === undefined) {\n    throwError(`Expected a DirectiveDef/ComponentDef and this object does not seem to have the expected shape.`);\n  }\n}\nfunction assertIndexInDeclRange(tView, index) {\n  assertBetween(HEADER_OFFSET, tView.bindingStartIndex, index);\n}\nfunction assertIndexInExpandoRange(lView, index) {\n  const tView = lView[1];\n  assertBetween(tView.expandoStartIndex, lView.length, index);\n}\nfunction assertBetween(lower, upper, index) {\n  if (!(lower <= index && index < upper)) {\n    throwError(`Index out of range (expecting ${lower} <= ${index} < ${upper})`);\n  }\n}\nfunction assertProjectionSlots(lView, errMessage) {\n  assertDefined(lView[DECLARATION_COMPONENT_VIEW], 'Component views should exist.');\n  assertDefined(lView[DECLARATION_COMPONENT_VIEW][T_HOST].projection, errMessage || 'Components with projection nodes (<ng-content>) must have projection slots defined.');\n}\nfunction assertParentView(lView, errMessage) {\n  assertDefined(lView, errMessage || 'Component views should always have a parent view (component\\'s host view)');\n}\nfunction assertNoDuplicateDirectives(directives) {\n  // The array needs at least two elements in order to have duplicates.\n  if (directives.length < 2) {\n    return;\n  }\n  const seenDirectives = new Set();\n  for (const current of directives) {\n    if (seenDirectives.has(current)) {\n      throw new RuntimeError(309 /* RuntimeErrorCode.DUPLICATE_DIRECTIVE */, `Directive ${current.type.name} matches multiple times on the same element. ` + `Directives can only match an element once.`);\n    }\n    seenDirectives.add(current);\n  }\n}\n/**\n * This is a basic sanity check that the `injectorIndex` seems to point to what looks like a\n * NodeInjector data structure.\n *\n * @param lView `LView` which should be checked.\n * @param injectorIndex index into the `LView` where the `NodeInjector` is expected.\n */\nfunction assertNodeInjector(lView, injectorIndex) {\n  assertIndexInExpandoRange(lView, injectorIndex);\n  assertIndexInExpandoRange(lView, injectorIndex + 8 /* NodeInjectorOffset.PARENT */);\n  assertNumber(lView[injectorIndex + 0], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 1], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 2], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 3], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 4], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 5], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 6], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 7], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */], 'injectorIndex should point to parent injector');\n}\nfunction getFactoryDef(type, throwNotFound) {\n  const hasFactoryDef = type.hasOwnProperty(NG_FACTORY_DEF);\n  if (!hasFactoryDef && throwNotFound === true && ngDevMode) {\n    throw new Error(`Type ${stringify(type)} does not have 'ɵfac' property.`);\n  }\n  return hasFactoryDef ? type[NG_FACTORY_DEF] : null;\n}\n\n/**\n * Represents a basic change from a previous to a new value for a single\n * property on a directive instance. Passed as a value in a\n * {@link SimpleChanges} object to the `ngOnChanges` hook.\n *\n * @see {@link OnChanges}\n *\n * @publicApi\n */\nclass SimpleChange {\n  constructor(previousValue, currentValue, firstChange) {\n    this.previousValue = previousValue;\n    this.currentValue = currentValue;\n    this.firstChange = firstChange;\n  }\n  /**\n   * Check whether the new value is the first value assigned.\n   */\n  isFirstChange() {\n    return this.firstChange;\n  }\n}\n\n/**\n * The NgOnChangesFeature decorates a component with support for the ngOnChanges\n * lifecycle hook, so it should be included in any component that implements\n * that hook.\n *\n * If the component or directive uses inheritance, the NgOnChangesFeature MUST\n * be included as a feature AFTER {@link InheritDefinitionFeature}, otherwise\n * inherited properties will not be propagated to the ngOnChanges lifecycle\n * hook.\n *\n * Example usage:\n *\n * ```\n * static ɵcmp = defineComponent({\n *   ...\n *   inputs: {name: 'publicName'},\n *   features: [NgOnChangesFeature]\n * });\n * ```\n *\n * @codeGenApi\n */\nfunction ɵɵNgOnChangesFeature() {\n  return NgOnChangesFeatureImpl;\n}\nfunction NgOnChangesFeatureImpl(definition) {\n  if (definition.type.prototype.ngOnChanges) {\n    definition.setInput = ngOnChangesSetInput;\n  }\n  return rememberChangeHistoryAndInvokeOnChangesHook;\n}\n// This option ensures that the ngOnChanges lifecycle hook will be inherited\n// from superclasses (in InheritDefinitionFeature).\n/** @nocollapse */\n// tslint:disable-next-line:no-toplevel-property-access\nɵɵNgOnChangesFeature.ngInherit = true;\n/**\n * This is a synthetic lifecycle hook which gets inserted into `TView.preOrderHooks` to simulate\n * `ngOnChanges`.\n *\n * The hook reads the `NgSimpleChangesStore` data from the component instance and if changes are\n * found it invokes `ngOnChanges` on the component instance.\n *\n * @param this Component instance. Because this function gets inserted into `TView.preOrderHooks`,\n *     it is guaranteed to be called with component instance.\n */\nfunction rememberChangeHistoryAndInvokeOnChangesHook() {\n  const simpleChangesStore = getSimpleChangesStore(this);\n  const current = simpleChangesStore === null || simpleChangesStore === void 0 ? void 0 : simpleChangesStore.current;\n  if (current) {\n    const previous = simpleChangesStore.previous;\n    if (previous === EMPTY_OBJ) {\n      simpleChangesStore.previous = current;\n    } else {\n      // New changes are copied to the previous store, so that we don't lose history for inputs\n      // which were not changed this time\n      for (let key in current) {\n        previous[key] = current[key];\n      }\n    }\n    simpleChangesStore.current = null;\n    this.ngOnChanges(current);\n  }\n}\nfunction ngOnChangesSetInput(instance, value, publicName, privateName) {\n  const declaredName = this.declaredInputs[publicName];\n  ngDevMode && assertString(declaredName, 'Name of input in ngOnChanges has to be a string');\n  const simpleChangesStore = getSimpleChangesStore(instance) || setSimpleChangesStore(instance, {\n    previous: EMPTY_OBJ,\n    current: null\n  });\n  const current = simpleChangesStore.current || (simpleChangesStore.current = {});\n  const previous = simpleChangesStore.previous;\n  const previousChange = previous[declaredName];\n  current[declaredName] = new SimpleChange(previousChange && previousChange.currentValue, value, previous === EMPTY_OBJ);\n  instance[privateName] = value;\n}\nconst SIMPLE_CHANGES_STORE = '__ngSimpleChanges__';\nfunction getSimpleChangesStore(instance) {\n  return instance[SIMPLE_CHANGES_STORE] || null;\n}\nfunction setSimpleChangesStore(instance, store) {\n  return instance[SIMPLE_CHANGES_STORE] = store;\n}\nlet profilerCallback = null;\n/**\n * Sets the callback function which will be invoked before and after performing certain actions at\n * runtime (for example, before and after running change detection).\n *\n * Warning: this function is *INTERNAL* and should not be relied upon in application's code.\n * The contract of the function might be changed in any release and/or the function can be removed\n * completely.\n *\n * @param profiler function provided by the caller or null value to disable profiling.\n */\nconst setProfiler = profiler => {\n  profilerCallback = profiler;\n};\n/**\n * Profiler function which wraps user code executed by the runtime.\n *\n * @param event ProfilerEvent corresponding to the execution context\n * @param instance component instance\n * @param hookOrListener lifecycle hook function or output listener. The value depends on the\n *  execution context\n * @returns\n */\nconst profiler = function (event, instance, hookOrListener) {\n  if (profilerCallback != null /* both `null` and `undefined` */) {\n    profilerCallback(event, instance, hookOrListener);\n  }\n};\nconst SVG_NAMESPACE = 'svg';\nconst MATH_ML_NAMESPACE = 'math';\n\n// TODO(atscott): flip default internally ASAP and externally for v18 (#52928)\nlet _ensureDirtyViewsAreAlwaysReachable = false;\nfunction getEnsureDirtyViewsAreAlwaysReachable() {\n  return _ensureDirtyViewsAreAlwaysReachable;\n}\nfunction setEnsureDirtyViewsAreAlwaysReachable(v) {\n  _ensureDirtyViewsAreAlwaysReachable = v;\n}\n\n/**\n * For efficiency reasons we often put several different data types (`RNode`, `LView`, `LContainer`)\n * in same location in `LView`. This is because we don't want to pre-allocate space for it\n * because the storage is sparse. This file contains utilities for dealing with such data types.\n *\n * How do we know what is stored at a given location in `LView`.\n * - `Array.isArray(value) === false` => `RNode` (The normal storage value)\n * - `Array.isArray(value) === true` => then the `value[0]` represents the wrapped value.\n *   - `typeof value[TYPE] === 'object'` => `LView`\n *      - This happens when we have a component at a given location\n *   - `typeof value[TYPE] === true` => `LContainer`\n *      - This happens when we have `LContainer` binding at a given location.\n *\n *\n * NOTE: it is assumed that `Array.isArray` and `typeof` operations are very efficient.\n */\n/**\n * Returns `RNode`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nfunction unwrapRNode(value) {\n  while (Array.isArray(value)) {\n    value = value[HOST];\n  }\n  return value;\n}\n/**\n * Returns `LView` or `null` if not found.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nfunction unwrapLView(value) {\n  while (Array.isArray(value)) {\n    // This check is same as `isLView()` but we don't call at as we don't want to call\n    // `Array.isArray()` twice and give JITer more work for inlining.\n    if (typeof value[TYPE] === 'object') return value;\n    value = value[HOST];\n  }\n  return null;\n}\n/**\n * Retrieves an element value from the provided `viewData`, by unwrapping\n * from any containers, component views, or style contexts.\n */\nfunction getNativeByIndex(index, lView) {\n  ngDevMode && assertIndexInRange(lView, index);\n  ngDevMode && assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Expected to be past HEADER_OFFSET');\n  return unwrapRNode(lView[index]);\n}\n/**\n * Retrieve an `RNode` for a given `TNode` and `LView`.\n *\n * This function guarantees in dev mode to retrieve a non-null `RNode`.\n *\n * @param tNode\n * @param lView\n */\nfunction getNativeByTNode(tNode, lView) {\n  ngDevMode && assertTNodeForLView(tNode, lView);\n  ngDevMode && assertIndexInRange(lView, tNode.index);\n  const node = unwrapRNode(lView[tNode.index]);\n  return node;\n}\n/**\n * Retrieve an `RNode` or `null` for a given `TNode` and `LView`.\n *\n * Some `TNode`s don't have associated `RNode`s. For example `Projection`\n *\n * @param tNode\n * @param lView\n */\nfunction getNativeByTNodeOrNull(tNode, lView) {\n  const index = tNode === null ? -1 : tNode.index;\n  if (index !== -1) {\n    ngDevMode && assertTNodeForLView(tNode, lView);\n    const node = unwrapRNode(lView[index]);\n    return node;\n  }\n  return null;\n}\n// fixme(misko): The return Type should be `TNode|null`\nfunction getTNode(tView, index) {\n  ngDevMode && assertGreaterThan(index, -1, 'wrong index for TNode');\n  ngDevMode && assertLessThan(index, tView.data.length, 'wrong index for TNode');\n  const tNode = tView.data[index];\n  ngDevMode && tNode !== null && assertTNode(tNode);\n  return tNode;\n}\n/** Retrieves a value from any `LView` or `TData`. */\nfunction load(view, index) {\n  ngDevMode && assertIndexInRange(view, index);\n  return view[index];\n}\nfunction getComponentLViewByIndex(nodeIndex, hostView) {\n  // Could be an LView or an LContainer. If LContainer, unwrap to find LView.\n  ngDevMode && assertIndexInRange(hostView, nodeIndex);\n  const slotValue = hostView[nodeIndex];\n  const lView = isLView(slotValue) ? slotValue : slotValue[HOST];\n  return lView;\n}\n/** Checks whether a given view is in creation mode */\nfunction isCreationMode(view) {\n  return (view[FLAGS] & 4 /* LViewFlags.CreationMode */) === 4 /* LViewFlags.CreationMode */;\n}\n/**\n * Returns a boolean for whether the view is attached to the change detection tree.\n *\n * Note: This determines whether a view should be checked, not whether it's inserted\n * into a container. For that, you'll want `viewAttachedToContainer` below.\n */\nfunction viewAttachedToChangeDetector(view) {\n  return (view[FLAGS] & 128 /* LViewFlags.Attached */) === 128 /* LViewFlags.Attached */;\n}\n/** Returns a boolean for whether the view is attached to a container. */\nfunction viewAttachedToContainer(view) {\n  return isLContainer(view[PARENT]);\n}\nfunction getConstant(consts, index) {\n  if (index === null || index === undefined) return null;\n  ngDevMode && assertIndexInRange(consts, index);\n  return consts[index];\n}\n/**\n * Resets the pre-order hook flags of the view.\n * @param lView the LView on which the flags are reset\n */\nfunction resetPreOrderHookFlags(lView) {\n  lView[PREORDER_HOOK_FLAGS] = 0;\n}\n/**\n * Adds the `RefreshView` flag from the lView and updates HAS_CHILD_VIEWS_TO_REFRESH flag of\n * parents.\n */\nfunction markViewForRefresh(lView) {\n  if (lView[FLAGS] & 1024 /* LViewFlags.RefreshView */) {\n    return;\n  }\n  lView[FLAGS] |= 1024 /* LViewFlags.RefreshView */;\n  if (viewAttachedToChangeDetector(lView)) {\n    markAncestorsForTraversal(lView);\n  }\n}\n/**\n * Walks up the LView hierarchy.\n * @param nestingLevel Number of times to walk up in hierarchy.\n * @param currentView View from which to start the lookup.\n */\nfunction walkUpViews(nestingLevel, currentView) {\n  while (nestingLevel > 0) {\n    ngDevMode && assertDefined(currentView[DECLARATION_VIEW], 'Declaration view should be defined if nesting level is greater than 0.');\n    currentView = currentView[DECLARATION_VIEW];\n    nestingLevel--;\n  }\n  return currentView;\n}\nfunction requiresRefreshOrTraversal(lView) {\n  var _lView$REACTIVE_TEMPL;\n  return lView[FLAGS] & (1024 /* LViewFlags.RefreshView */ | 8192 /* LViewFlags.HasChildViewsToRefresh */) || ((_lView$REACTIVE_TEMPL = lView[REACTIVE_TEMPLATE_CONSUMER]) === null || _lView$REACTIVE_TEMPL === void 0 ? void 0 : _lView$REACTIVE_TEMPL.dirty);\n}\n/**\n * Updates the `HasChildViewsToRefresh` flag on the parents of the `LView` as well as the\n * parents above.\n */\nfunction updateAncestorTraversalFlagsOnAttach(lView) {\n  // TODO(atscott): Simplify if...else cases once getEnsureDirtyViewsAreAlwaysReachable is always\n  // `true`. When we attach a view that's marked `Dirty`, we should ensure that it is reached during\n  // the next CD traversal so we add the `RefreshView` flag and mark ancestors accordingly.\n  if (requiresRefreshOrTraversal(lView)) {\n    markAncestorsForTraversal(lView);\n  } else if (lView[FLAGS] & 64 /* LViewFlags.Dirty */) {\n    if (getEnsureDirtyViewsAreAlwaysReachable()) {\n      lView[FLAGS] |= 1024 /* LViewFlags.RefreshView */;\n      markAncestorsForTraversal(lView);\n    } else {\n      var _lView$ENVIRONMENT$ch;\n      (_lView$ENVIRONMENT$ch = lView[ENVIRONMENT].changeDetectionScheduler) === null || _lView$ENVIRONMENT$ch === void 0 || _lView$ENVIRONMENT$ch.notify();\n    }\n  }\n}\n/**\n * Ensures views above the given `lView` are traversed during change detection even when they are\n * not dirty.\n *\n * This is done by setting the `HAS_CHILD_VIEWS_TO_REFRESH` flag up to the root, stopping when the\n * flag is already `true` or the `lView` is detached.\n */\nfunction markAncestorsForTraversal(lView) {\n  var _lView$ENVIRONMENT$ch2;\n  (_lView$ENVIRONMENT$ch2 = lView[ENVIRONMENT].changeDetectionScheduler) === null || _lView$ENVIRONMENT$ch2 === void 0 || _lView$ENVIRONMENT$ch2.notify();\n  let parent = lView[PARENT];\n  while (parent !== null) {\n    // We stop adding markers to the ancestors once we reach one that already has the marker. This\n    // is to avoid needlessly traversing all the way to the root when the marker already exists.\n    if (isLContainer(parent) && parent[FLAGS] & LContainerFlags.HasChildViewsToRefresh || isLView(parent) && parent[FLAGS] & 8192 /* LViewFlags.HasChildViewsToRefresh */) {\n      break;\n    }\n    if (isLContainer(parent)) {\n      parent[FLAGS] |= LContainerFlags.HasChildViewsToRefresh;\n    } else {\n      parent[FLAGS] |= 8192 /* LViewFlags.HasChildViewsToRefresh */;\n      if (!viewAttachedToChangeDetector(parent)) {\n        break;\n      }\n    }\n    parent = parent[PARENT];\n  }\n}\n/**\n * Stores a LView-specific destroy callback.\n */\nfunction storeLViewOnDestroy(lView, onDestroyCallback) {\n  if ((lView[FLAGS] & 256 /* LViewFlags.Destroyed */) === 256 /* LViewFlags.Destroyed */) {\n    throw new RuntimeError(911 /* RuntimeErrorCode.VIEW_ALREADY_DESTROYED */, ngDevMode && 'View has already been destroyed.');\n  }\n  if (lView[ON_DESTROY_HOOKS] === null) {\n    lView[ON_DESTROY_HOOKS] = [];\n  }\n  lView[ON_DESTROY_HOOKS].push(onDestroyCallback);\n}\n/**\n * Removes previously registered LView-specific destroy callback.\n */\nfunction removeLViewOnDestroy(lView, onDestroyCallback) {\n  if (lView[ON_DESTROY_HOOKS] === null) return;\n  const destroyCBIdx = lView[ON_DESTROY_HOOKS].indexOf(onDestroyCallback);\n  if (destroyCBIdx !== -1) {\n    lView[ON_DESTROY_HOOKS].splice(destroyCBIdx, 1);\n  }\n}\nconst instructionState = {\n  lFrame: createLFrame(null),\n  bindingsEnabled: true,\n  skipHydrationRootTNode: null\n};\n/**\n * In this mode, any changes in bindings will throw an ExpressionChangedAfterChecked error.\n *\n * Necessary to support ChangeDetectorRef.checkNoChanges().\n *\n * The `checkNoChanges` function is invoked only in ngDevMode=true and verifies that no unintended\n * changes exist in the change detector or its children.\n */\nlet _isInCheckNoChangesMode = false;\n/**\n * Returns true if the instruction state stack is empty.\n *\n * Intended to be called from tests only (tree shaken otherwise).\n */\nfunction specOnlyIsInstructionStateEmpty() {\n  return instructionState.lFrame.parent === null;\n}\nfunction getElementDepthCount() {\n  return instructionState.lFrame.elementDepthCount;\n}\nfunction increaseElementDepthCount() {\n  instructionState.lFrame.elementDepthCount++;\n}\nfunction decreaseElementDepthCount() {\n  instructionState.lFrame.elementDepthCount--;\n}\nfunction getBindingsEnabled() {\n  return instructionState.bindingsEnabled;\n}\n/**\n * Returns true if currently inside a skip hydration block.\n * @returns boolean\n */\nfunction isInSkipHydrationBlock$1() {\n  return instructionState.skipHydrationRootTNode !== null;\n}\n/**\n * Returns true if this is the root TNode of the skip hydration block.\n * @param tNode the current TNode\n * @returns boolean\n */\nfunction isSkipHydrationRootTNode(tNode) {\n  return instructionState.skipHydrationRootTNode === tNode;\n}\n/**\n * Enables directive matching on elements.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- ɵɵdisableBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- ɵɵenableBindings() -->\n * </div>\n * ```\n *\n * @codeGenApi\n */\nfunction ɵɵenableBindings() {\n  instructionState.bindingsEnabled = true;\n}\n/**\n * Sets a flag to specify that the TNode is in a skip hydration block.\n * @param tNode the current TNode\n */\nfunction enterSkipHydrationBlock(tNode) {\n  instructionState.skipHydrationRootTNode = tNode;\n}\n/**\n * Disables directive matching on element.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- ɵɵdisableBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- ɵɵenableBindings() -->\n * </div>\n * ```\n *\n * @codeGenApi\n */\nfunction ɵɵdisableBindings() {\n  instructionState.bindingsEnabled = false;\n}\n/**\n * Clears the root skip hydration node when leaving a skip hydration block.\n */\nfunction leaveSkipHydrationBlock() {\n  instructionState.skipHydrationRootTNode = null;\n}\n/**\n * Return the current `LView`.\n */\nfunction getLView() {\n  return instructionState.lFrame.lView;\n}\n/**\n * Return the current `TView`.\n */\nfunction getTView() {\n  return instructionState.lFrame.tView;\n}\n/**\n * Restores `contextViewData` to the given OpaqueViewState instance.\n *\n * Used in conjunction with the getCurrentView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @param viewToRestore The OpaqueViewState instance to restore.\n * @returns Context of the restored OpaqueViewState instance.\n *\n * @codeGenApi\n */\nfunction ɵɵrestoreView(viewToRestore) {\n  instructionState.lFrame.contextLView = viewToRestore;\n  return viewToRestore[CONTEXT];\n}\n/**\n * Clears the view set in `ɵɵrestoreView` from memory. Returns the passed in\n * value so that it can be used as a return value of an instruction.\n *\n * @codeGenApi\n */\nfunction ɵɵresetView(value) {\n  instructionState.lFrame.contextLView = null;\n  return value;\n}\nfunction getCurrentTNode() {\n  let currentTNode = getCurrentTNodePlaceholderOk();\n  while (currentTNode !== null && currentTNode.type === 64 /* TNodeType.Placeholder */) {\n    currentTNode = currentTNode.parent;\n  }\n  return currentTNode;\n}\nfunction getCurrentTNodePlaceholderOk() {\n  return instructionState.lFrame.currentTNode;\n}\nfunction getCurrentParentTNode() {\n  const lFrame = instructionState.lFrame;\n  const currentTNode = lFrame.currentTNode;\n  return lFrame.isParent ? currentTNode : currentTNode.parent;\n}\nfunction setCurrentTNode(tNode, isParent) {\n  ngDevMode && tNode && assertTNodeForTView(tNode, instructionState.lFrame.tView);\n  const lFrame = instructionState.lFrame;\n  lFrame.currentTNode = tNode;\n  lFrame.isParent = isParent;\n}\nfunction isCurrentTNodeParent() {\n  return instructionState.lFrame.isParent;\n}\nfunction setCurrentTNodeAsNotParent() {\n  instructionState.lFrame.isParent = false;\n}\nfunction getContextLView() {\n  const contextLView = instructionState.lFrame.contextLView;\n  ngDevMode && assertDefined(contextLView, 'contextLView must be defined.');\n  return contextLView;\n}\nfunction isInCheckNoChangesMode() {\n  !ngDevMode && throwError('Must never be called in production mode');\n  return _isInCheckNoChangesMode;\n}\nfunction setIsInCheckNoChangesMode(mode) {\n  !ngDevMode && throwError('Must never be called in production mode');\n  _isInCheckNoChangesMode = mode;\n}\n// top level variables should not be exported for performance reasons (PERF_NOTES.md)\nfunction getBindingRoot() {\n  const lFrame = instructionState.lFrame;\n  let index = lFrame.bindingRootIndex;\n  if (index === -1) {\n    index = lFrame.bindingRootIndex = lFrame.tView.bindingStartIndex;\n  }\n  return index;\n}\nfunction getBindingIndex() {\n  return instructionState.lFrame.bindingIndex;\n}\nfunction setBindingIndex(value) {\n  return instructionState.lFrame.bindingIndex = value;\n}\nfunction nextBindingIndex() {\n  return instructionState.lFrame.bindingIndex++;\n}\nfunction incrementBindingIndex(count) {\n  const lFrame = instructionState.lFrame;\n  const index = lFrame.bindingIndex;\n  lFrame.bindingIndex = lFrame.bindingIndex + count;\n  return index;\n}\nfunction isInI18nBlock() {\n  return instructionState.lFrame.inI18n;\n}\nfunction setInI18nBlock(isInI18nBlock) {\n  instructionState.lFrame.inI18n = isInI18nBlock;\n}\n/**\n * Set a new binding root index so that host template functions can execute.\n *\n * Bindings inside the host template are 0 index. But because we don't know ahead of time\n * how many host bindings we have we can't pre-compute them. For this reason they are all\n * 0 index and we just shift the root so that they match next available location in the LView.\n *\n * @param bindingRootIndex Root index for `hostBindings`\n * @param currentDirectiveIndex `TData[currentDirectiveIndex]` will point to the current directive\n *        whose `hostBindings` are being processed.\n */\nfunction setBindingRootForHostBindings(bindingRootIndex, currentDirectiveIndex) {\n  const lFrame = instructionState.lFrame;\n  lFrame.bindingIndex = lFrame.bindingRootIndex = bindingRootIndex;\n  setCurrentDirectiveIndex(currentDirectiveIndex);\n}\n/**\n * When host binding is executing this points to the directive index.\n * `TView.data[getCurrentDirectiveIndex()]` is `DirectiveDef`\n * `LView[getCurrentDirectiveIndex()]` is directive instance.\n */\nfunction getCurrentDirectiveIndex() {\n  return instructionState.lFrame.currentDirectiveIndex;\n}\n/**\n * Sets an index of a directive whose `hostBindings` are being processed.\n *\n * @param currentDirectiveIndex `TData` index where current directive instance can be found.\n */\nfunction setCurrentDirectiveIndex(currentDirectiveIndex) {\n  instructionState.lFrame.currentDirectiveIndex = currentDirectiveIndex;\n}\n/**\n * Retrieve the current `DirectiveDef` which is active when `hostBindings` instruction is being\n * executed.\n *\n * @param tData Current `TData` where the `DirectiveDef` will be looked up at.\n */\nfunction getCurrentDirectiveDef(tData) {\n  const currentDirectiveIndex = instructionState.lFrame.currentDirectiveIndex;\n  return currentDirectiveIndex === -1 ? null : tData[currentDirectiveIndex];\n}\nfunction getCurrentQueryIndex() {\n  return instructionState.lFrame.currentQueryIndex;\n}\nfunction setCurrentQueryIndex(value) {\n  instructionState.lFrame.currentQueryIndex = value;\n}\n/**\n * Returns a `TNode` of the location where the current `LView` is declared at.\n *\n * @param lView an `LView` that we want to find parent `TNode` for.\n */\nfunction getDeclarationTNode(lView) {\n  const tView = lView[TVIEW];\n  // Return the declaration parent for embedded views\n  if (tView.type === 2 /* TViewType.Embedded */) {\n    ngDevMode && assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');\n    return tView.declTNode;\n  }\n  // Components don't have `TView.declTNode` because each instance of component could be\n  // inserted in different location, hence `TView.declTNode` is meaningless.\n  // Falling back to `T_HOST` in case we cross component boundary.\n  if (tView.type === 1 /* TViewType.Component */) {\n    return lView[T_HOST];\n  }\n  // Remaining TNode type is `TViewType.Root` which doesn't have a parent TNode.\n  return null;\n}\n/**\n * This is a light weight version of the `enterView` which is needed by the DI system.\n *\n * @param lView `LView` location of the DI context.\n * @param tNode `TNode` for DI context\n * @param flags DI context flags. if `SkipSelf` flag is set than we walk up the declaration\n *     tree from `tNode`  until we find parent declared `TElementNode`.\n * @returns `true` if we have successfully entered DI associated with `tNode` (or with declared\n *     `TNode` if `flags` has  `SkipSelf`). Failing to enter DI implies that no associated\n *     `NodeInjector` can be found and we should instead use `ModuleInjector`.\n *     - If `true` than this call must be fallowed by `leaveDI`\n *     - If `false` than this call failed and we should NOT call `leaveDI`\n */\nfunction enterDI(lView, tNode, flags) {\n  ngDevMode && assertLViewOrUndefined(lView);\n  if (flags & InjectFlags.SkipSelf) {\n    ngDevMode && assertTNodeForTView(tNode, lView[TVIEW]);\n    let parentTNode = tNode;\n    let parentLView = lView;\n    while (true) {\n      ngDevMode && assertDefined(parentTNode, 'Parent TNode should be defined');\n      parentTNode = parentTNode.parent;\n      if (parentTNode === null && !(flags & InjectFlags.Host)) {\n        parentTNode = getDeclarationTNode(parentLView);\n        if (parentTNode === null) break;\n        // In this case, a parent exists and is definitely an element. So it will definitely\n        // have an existing lView as the declaration view, which is why we can assume it's defined.\n        ngDevMode && assertDefined(parentLView, 'Parent LView should be defined');\n        parentLView = parentLView[DECLARATION_VIEW];\n        // In Ivy there are Comment nodes that correspond to ngIf and NgFor embedded directives\n        // We want to skip those and look only at Elements and ElementContainers to ensure\n        // we're looking at true parent nodes, and not content or other types.\n        if (parentTNode.type & (2 /* TNodeType.Element */ | 8 /* TNodeType.ElementContainer */)) {\n          break;\n        }\n      } else {\n        break;\n      }\n    }\n    if (parentTNode === null) {\n      // If we failed to find a parent TNode this means that we should use module injector.\n      return false;\n    } else {\n      tNode = parentTNode;\n      lView = parentLView;\n    }\n  }\n  ngDevMode && assertTNodeForLView(tNode, lView);\n  const lFrame = instructionState.lFrame = allocLFrame();\n  lFrame.currentTNode = tNode;\n  lFrame.lView = lView;\n  return true;\n}\n/**\n * Swap the current lView with a new lView.\n *\n * For performance reasons we store the lView in the top level of the module.\n * This way we minimize the number of properties to read. Whenever a new view\n * is entered we have to store the lView for later, and when the view is\n * exited the state has to be restored\n *\n * @param newView New lView to become active\n * @returns the previously active lView;\n */\nfunction enterView(newView) {\n  ngDevMode && assertNotEqual(newView[0], newView[1], '????');\n  ngDevMode && assertLViewOrUndefined(newView);\n  const newLFrame = allocLFrame();\n  if (ngDevMode) {\n    assertEqual(newLFrame.isParent, true, 'Expected clean LFrame');\n    assertEqual(newLFrame.lView, null, 'Expected clean LFrame');\n    assertEqual(newLFrame.tView, null, 'Expected clean LFrame');\n    assertEqual(newLFrame.selectedIndex, -1, 'Expected clean LFrame');\n    assertEqual(newLFrame.elementDepthCount, 0, 'Expected clean LFrame');\n    assertEqual(newLFrame.currentDirectiveIndex, -1, 'Expected clean LFrame');\n    assertEqual(newLFrame.currentNamespace, null, 'Expected clean LFrame');\n    assertEqual(newLFrame.bindingRootIndex, -1, 'Expected clean LFrame');\n    assertEqual(newLFrame.currentQueryIndex, 0, 'Expected clean LFrame');\n  }\n  const tView = newView[TVIEW];\n  instructionState.lFrame = newLFrame;\n  ngDevMode && tView.firstChild && assertTNodeForTView(tView.firstChild, tView);\n  newLFrame.currentTNode = tView.firstChild;\n  newLFrame.lView = newView;\n  newLFrame.tView = tView;\n  newLFrame.contextLView = newView;\n  newLFrame.bindingIndex = tView.bindingStartIndex;\n  newLFrame.inI18n = false;\n}\n/**\n * Allocates next free LFrame. This function tries to reuse the `LFrame`s to lower memory pressure.\n */\nfunction allocLFrame() {\n  const currentLFrame = instructionState.lFrame;\n  const childLFrame = currentLFrame === null ? null : currentLFrame.child;\n  const newLFrame = childLFrame === null ? createLFrame(currentLFrame) : childLFrame;\n  return newLFrame;\n}\nfunction createLFrame(parent) {\n  const lFrame = {\n    currentTNode: null,\n    isParent: true,\n    lView: null,\n    tView: null,\n    selectedIndex: -1,\n    contextLView: null,\n    elementDepthCount: 0,\n    currentNamespace: null,\n    currentDirectiveIndex: -1,\n    bindingRootIndex: -1,\n    bindingIndex: -1,\n    currentQueryIndex: 0,\n    parent: parent,\n    child: null,\n    inI18n: false\n  };\n  parent !== null && (parent.child = lFrame); // link the new LFrame for reuse.\n  return lFrame;\n}\n/**\n * A lightweight version of leave which is used with DI.\n *\n * This function only resets `currentTNode` and `LView` as those are the only properties\n * used with DI (`enterDI()`).\n *\n * NOTE: This function is reexported as `leaveDI`. However `leaveDI` has return type of `void` where\n * as `leaveViewLight` has `LFrame`. This is so that `leaveViewLight` can be used in `leaveView`.\n */\nfunction leaveViewLight() {\n  const oldLFrame = instructionState.lFrame;\n  instructionState.lFrame = oldLFrame.parent;\n  oldLFrame.currentTNode = null;\n  oldLFrame.lView = null;\n  return oldLFrame;\n}\n/**\n * This is a lightweight version of the `leaveView` which is needed by the DI system.\n *\n * NOTE: this function is an alias so that we can change the type of the function to have `void`\n * return type.\n */\nconst leaveDI = leaveViewLight;\n/**\n * Leave the current `LView`\n *\n * This pops the `LFrame` with the associated `LView` from the stack.\n *\n * IMPORTANT: We must zero out the `LFrame` values here otherwise they will be retained. This is\n * because for performance reasons we don't release `LFrame` but rather keep it for next use.\n */\nfunction leaveView() {\n  const oldLFrame = leaveViewLight();\n  oldLFrame.isParent = true;\n  oldLFrame.tView = null;\n  oldLFrame.selectedIndex = -1;\n  oldLFrame.contextLView = null;\n  oldLFrame.elementDepthCount = 0;\n  oldLFrame.currentDirectiveIndex = -1;\n  oldLFrame.currentNamespace = null;\n  oldLFrame.bindingRootIndex = -1;\n  oldLFrame.bindingIndex = -1;\n  oldLFrame.currentQueryIndex = 0;\n}\nfunction nextContextImpl(level) {\n  const contextLView = instructionState.lFrame.contextLView = walkUpViews(level, instructionState.lFrame.contextLView);\n  return contextLView[CONTEXT];\n}\n/**\n * Gets the currently selected element index.\n *\n * Used with {@link property} instruction (and more in the future) to identify the index in the\n * current `LView` to act on.\n */\nfunction getSelectedIndex() {\n  return instructionState.lFrame.selectedIndex;\n}\n/**\n * Sets the most recent index passed to {@link select}\n *\n * Used with {@link property} instruction (and more in the future) to identify the index in the\n * current `LView` to act on.\n *\n * (Note that if an \"exit function\" was set earlier (via `setElementExitFn()`) then that will be\n * run if and when the provided `index` value is different from the current selected index value.)\n */\nfunction setSelectedIndex(index) {\n  ngDevMode && index !== -1 && assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Index must be past HEADER_OFFSET (or -1).');\n  ngDevMode && assertLessThan(index, instructionState.lFrame.lView.length, 'Can\\'t set index passed end of LView');\n  instructionState.lFrame.selectedIndex = index;\n}\n/**\n * Gets the `tNode` that represents currently selected element.\n */\nfunction getSelectedTNode() {\n  const lFrame = instructionState.lFrame;\n  return getTNode(lFrame.tView, lFrame.selectedIndex);\n}\n/**\n * Sets the namespace used to create elements to `'http://www.w3.org/2000/svg'` in global state.\n *\n * @codeGenApi\n */\nfunction ɵɵnamespaceSVG() {\n  instructionState.lFrame.currentNamespace = SVG_NAMESPACE;\n}\n/**\n * Sets the namespace used to create elements to `'http://www.w3.org/1998/MathML/'` in global state.\n *\n * @codeGenApi\n */\nfunction ɵɵnamespaceMathML() {\n  instructionState.lFrame.currentNamespace = MATH_ML_NAMESPACE;\n}\n/**\n * Sets the namespace used to create elements to `null`, which forces element creation to use\n * `createElement` rather than `createElementNS`.\n *\n * @codeGenApi\n */\nfunction ɵɵnamespaceHTML() {\n  namespaceHTMLInternal();\n}\n/**\n * Sets the namespace used to create elements to `null`, which forces element creation to use\n * `createElement` rather than `createElementNS`.\n */\nfunction namespaceHTMLInternal() {\n  instructionState.lFrame.currentNamespace = null;\n}\nfunction getNamespace$1() {\n  return instructionState.lFrame.currentNamespace;\n}\nlet _wasLastNodeCreated = true;\n/**\n * Retrieves a global flag that indicates whether the most recent DOM node\n * was created or hydrated.\n */\nfunction wasLastNodeCreated() {\n  return _wasLastNodeCreated;\n}\n/**\n * Sets a global flag to indicate whether the most recent DOM node\n * was created or hydrated.\n */\nfunction lastNodeWasCreated(flag) {\n  _wasLastNodeCreated = flag;\n}\n\n/**\n * Adds all directive lifecycle hooks from the given `DirectiveDef` to the given `TView`.\n *\n * Must be run *only* on the first template pass.\n *\n * Sets up the pre-order hooks on the provided `tView`,\n * see {@link HookData} for details about the data structure.\n *\n * @param directiveIndex The index of the directive in LView\n * @param directiveDef The definition containing the hooks to setup in tView\n * @param tView The current TView\n */\nfunction registerPreOrderHooks(directiveIndex, directiveDef, tView) {\n  ngDevMode && assertFirstCreatePass(tView);\n  const {\n    ngOnChanges,\n    ngOnInit,\n    ngDoCheck\n  } = directiveDef.type.prototype;\n  if (ngOnChanges) {\n    var _tView$preOrderHooks, _tView$preOrderCheckH;\n    const wrappedOnChanges = NgOnChangesFeatureImpl(directiveDef);\n    ((_tView$preOrderHooks = tView.preOrderHooks) !== null && _tView$preOrderHooks !== void 0 ? _tView$preOrderHooks : tView.preOrderHooks = []).push(directiveIndex, wrappedOnChanges);\n    ((_tView$preOrderCheckH = tView.preOrderCheckHooks) !== null && _tView$preOrderCheckH !== void 0 ? _tView$preOrderCheckH : tView.preOrderCheckHooks = []).push(directiveIndex, wrappedOnChanges);\n  }\n  if (ngOnInit) {\n    var _tView$preOrderHooks2;\n    ((_tView$preOrderHooks2 = tView.preOrderHooks) !== null && _tView$preOrderHooks2 !== void 0 ? _tView$preOrderHooks2 : tView.preOrderHooks = []).push(0 - directiveIndex, ngOnInit);\n  }\n  if (ngDoCheck) {\n    var _tView$preOrderHooks3, _tView$preOrderCheckH2;\n    ((_tView$preOrderHooks3 = tView.preOrderHooks) !== null && _tView$preOrderHooks3 !== void 0 ? _tView$preOrderHooks3 : tView.preOrderHooks = []).push(directiveIndex, ngDoCheck);\n    ((_tView$preOrderCheckH2 = tView.preOrderCheckHooks) !== null && _tView$preOrderCheckH2 !== void 0 ? _tView$preOrderCheckH2 : tView.preOrderCheckHooks = []).push(directiveIndex, ngDoCheck);\n  }\n}\n/**\n *\n * Loops through the directives on the provided `tNode` and queues hooks to be\n * run that are not initialization hooks.\n *\n * Should be executed during `elementEnd()` and similar to\n * preserve hook execution order. Content, view, and destroy hooks for projected\n * components and directives must be called *before* their hosts.\n *\n * Sets up the content, view, and destroy hooks on the provided `tView`,\n * see {@link HookData} for details about the data structure.\n *\n * NOTE: This does not set up `onChanges`, `onInit` or `doCheck`, those are set up\n * separately at `elementStart`.\n *\n * @param tView The current TView\n * @param tNode The TNode whose directives are to be searched for hooks to queue\n */\nfunction registerPostOrderHooks(tView, tNode) {\n  ngDevMode && assertFirstCreatePass(tView);\n  // It's necessary to loop through the directives at elementEnd() (rather than processing in\n  // directiveCreate) so we can preserve the current hook order. Content, view, and destroy\n  // hooks for projected components and directives must be called *before* their hosts.\n  for (let i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {\n    const directiveDef = tView.data[i];\n    ngDevMode && assertDefined(directiveDef, 'Expecting DirectiveDef');\n    const lifecycleHooks = directiveDef.type.prototype;\n    const {\n      ngAfterContentInit,\n      ngAfterContentChecked,\n      ngAfterViewInit,\n      ngAfterViewChecked,\n      ngOnDestroy\n    } = lifecycleHooks;\n    if (ngAfterContentInit) {\n      var _tView$contentHooks;\n      ((_tView$contentHooks = tView.contentHooks) !== null && _tView$contentHooks !== void 0 ? _tView$contentHooks : tView.contentHooks = []).push(-i, ngAfterContentInit);\n    }\n    if (ngAfterContentChecked) {\n      var _tView$contentHooks2, _tView$contentCheckHo;\n      ((_tView$contentHooks2 = tView.contentHooks) !== null && _tView$contentHooks2 !== void 0 ? _tView$contentHooks2 : tView.contentHooks = []).push(i, ngAfterContentChecked);\n      ((_tView$contentCheckHo = tView.contentCheckHooks) !== null && _tView$contentCheckHo !== void 0 ? _tView$contentCheckHo : tView.contentCheckHooks = []).push(i, ngAfterContentChecked);\n    }\n    if (ngAfterViewInit) {\n      var _tView$viewHooks;\n      ((_tView$viewHooks = tView.viewHooks) !== null && _tView$viewHooks !== void 0 ? _tView$viewHooks : tView.viewHooks = []).push(-i, ngAfterViewInit);\n    }\n    if (ngAfterViewChecked) {\n      var _tView$viewHooks2, _tView$viewCheckHooks;\n      ((_tView$viewHooks2 = tView.viewHooks) !== null && _tView$viewHooks2 !== void 0 ? _tView$viewHooks2 : tView.viewHooks = []).push(i, ngAfterViewChecked);\n      ((_tView$viewCheckHooks = tView.viewCheckHooks) !== null && _tView$viewCheckHooks !== void 0 ? _tView$viewCheckHooks : tView.viewCheckHooks = []).push(i, ngAfterViewChecked);\n    }\n    if (ngOnDestroy != null) {\n      var _tView$destroyHooks;\n      ((_tView$destroyHooks = tView.destroyHooks) !== null && _tView$destroyHooks !== void 0 ? _tView$destroyHooks : tView.destroyHooks = []).push(i, ngOnDestroy);\n    }\n  }\n}\n/**\n * Executing hooks requires complex logic as we need to deal with 2 constraints.\n *\n * 1. Init hooks (ngOnInit, ngAfterContentInit, ngAfterViewInit) must all be executed once and only\n * once, across many change detection cycles. This must be true even if some hooks throw, or if\n * some recursively trigger a change detection cycle.\n * To solve that, it is required to track the state of the execution of these init hooks.\n * This is done by storing and maintaining flags in the view: the {@link InitPhaseState},\n * and the index within that phase. They can be seen as a cursor in the following structure:\n * [[onInit1, onInit2], [afterContentInit1], [afterViewInit1, afterViewInit2, afterViewInit3]]\n * They are stored as flags in LView[FLAGS].\n *\n * 2. Pre-order hooks can be executed in batches, because of the select instruction.\n * To be able to pause and resume their execution, we also need some state about the hook's array\n * that is being processed:\n * - the index of the next hook to be executed\n * - the number of init hooks already found in the processed part of the  array\n * They are stored as flags in LView[PREORDER_HOOK_FLAGS].\n */\n/**\n * Executes pre-order check hooks ( OnChanges, DoChanges) given a view where all the init hooks were\n * executed once. This is a light version of executeInitAndCheckPreOrderHooks where we can skip read\n * / write of the init-hooks related flags.\n * @param lView The LView where hooks are defined\n * @param hooks Hooks to be run\n * @param nodeIndex 3 cases depending on the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nfunction executeCheckHooks(lView, hooks, nodeIndex) {\n  callHooks(lView, hooks, 3 /* InitPhaseState.InitPhaseCompleted */, nodeIndex);\n}\n/**\n * Executes post-order init and check hooks (one of AfterContentInit, AfterContentChecked,\n * AfterViewInit, AfterViewChecked) given a view where there are pending init hooks to be executed.\n * @param lView The LView where hooks are defined\n * @param hooks Hooks to be run\n * @param initPhase A phase for which hooks should be run\n * @param nodeIndex 3 cases depending on the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nfunction executeInitAndCheckHooks(lView, hooks, initPhase, nodeIndex) {\n  ngDevMode && assertNotEqual(initPhase, 3 /* InitPhaseState.InitPhaseCompleted */, 'Init pre-order hooks should not be called more than once');\n  if ((lView[FLAGS] & 3 /* LViewFlags.InitPhaseStateMask */) === initPhase) {\n    callHooks(lView, hooks, initPhase, nodeIndex);\n  }\n}\nfunction incrementInitPhaseFlags(lView, initPhase) {\n  ngDevMode && assertNotEqual(initPhase, 3 /* InitPhaseState.InitPhaseCompleted */, 'Init hooks phase should not be incremented after all init hooks have been run.');\n  let flags = lView[FLAGS];\n  if ((flags & 3 /* LViewFlags.InitPhaseStateMask */) === initPhase) {\n    flags &= 16383 /* LViewFlags.IndexWithinInitPhaseReset */;\n    flags += 1 /* LViewFlags.InitPhaseStateIncrementer */;\n    lView[FLAGS] = flags;\n  }\n}\n/**\n * Calls lifecycle hooks with their contexts, skipping init hooks if it's not\n * the first LView pass\n *\n * @param currentView The current view\n * @param arr The array in which the hooks are found\n * @param initPhaseState the current state of the init phase\n * @param currentNodeIndex 3 cases depending on the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nfunction callHooks(currentView, arr, initPhase, currentNodeIndex) {\n  ngDevMode && assertEqual(isInCheckNoChangesMode(), false, 'Hooks should never be run when in check no changes mode.');\n  const startIndex = currentNodeIndex !== undefined ? currentView[PREORDER_HOOK_FLAGS] & 65535 /* PreOrderHookFlags.IndexOfTheNextPreOrderHookMaskMask */ : 0;\n  const nodeIndexLimit = currentNodeIndex != null ? currentNodeIndex : -1;\n  const max = arr.length - 1; // Stop the loop at length - 1, because we look for the hook at i + 1\n  let lastNodeIndexFound = 0;\n  for (let i = startIndex; i < max; i++) {\n    const hook = arr[i + 1];\n    if (typeof hook === 'number') {\n      lastNodeIndexFound = arr[i];\n      if (currentNodeIndex != null && lastNodeIndexFound >= currentNodeIndex) {\n        break;\n      }\n    } else {\n      const isInitHook = arr[i] < 0;\n      if (isInitHook) {\n        currentView[PREORDER_HOOK_FLAGS] += 65536 /* PreOrderHookFlags.NumberOfInitHooksCalledIncrementer */;\n      }\n\n      if (lastNodeIndexFound < nodeIndexLimit || nodeIndexLimit == -1) {\n        callHook(currentView, initPhase, arr, i);\n        currentView[PREORDER_HOOK_FLAGS] = (currentView[PREORDER_HOOK_FLAGS] & 4294901760 /* PreOrderHookFlags.NumberOfInitHooksCalledMask */) + i + 2;\n      }\n      i++;\n    }\n  }\n}\n/**\n * Executes a single lifecycle hook, making sure that:\n * - it is called in the non-reactive context;\n * - profiling data are registered.\n */\nfunction callHookInternal(directive, hook) {\n  profiler(4 /* ProfilerEvent.LifecycleHookStart */, directive, hook);\n  const prevConsumer = setActiveConsumer$1(null);\n  try {\n    hook.call(directive);\n  } finally {\n    setActiveConsumer$1(prevConsumer);\n    profiler(5 /* ProfilerEvent.LifecycleHookEnd */, directive, hook);\n  }\n}\n/**\n * Execute one hook against the current `LView`.\n *\n * @param currentView The current view\n * @param initPhaseState the current state of the init phase\n * @param arr The array in which the hooks are found\n * @param i The current index within the hook data array\n */\nfunction callHook(currentView, initPhase, arr, i) {\n  const isInitHook = arr[i] < 0;\n  const hook = arr[i + 1];\n  const directiveIndex = isInitHook ? -arr[i] : arr[i];\n  const directive = currentView[directiveIndex];\n  if (isInitHook) {\n    const indexWithintInitPhase = currentView[FLAGS] >> 14 /* LViewFlags.IndexWithinInitPhaseShift */;\n    // The init phase state must be always checked here as it may have been recursively updated.\n    if (indexWithintInitPhase < currentView[PREORDER_HOOK_FLAGS] >> 16 /* PreOrderHookFlags.NumberOfInitHooksCalledShift */ && (currentView[FLAGS] & 3 /* LViewFlags.InitPhaseStateMask */) === initPhase) {\n      currentView[FLAGS] += 16384 /* LViewFlags.IndexWithinInitPhaseIncrementer */;\n      callHookInternal(directive, hook);\n    }\n  } else {\n    callHookInternal(directive, hook);\n  }\n}\nconst NO_PARENT_INJECTOR = -1;\n/**\n * Each injector is saved in 9 contiguous slots in `LView` and 9 contiguous slots in\n * `TView.data`. This allows us to store information about the current node's tokens (which\n * can be shared in `TView`) as well as the tokens of its ancestor nodes (which cannot be\n * shared, so they live in `LView`).\n *\n * Each of these slots (aside from the last slot) contains a bloom filter. This bloom filter\n * determines whether a directive is available on the associated node or not. This prevents us\n * from searching the directives array at this level unless it's probable the directive is in it.\n *\n * See: https://en.wikipedia.org/wiki/Bloom_filter for more about bloom filters.\n *\n * Because all injectors have been flattened into `LView` and `TViewData`, they cannot typed\n * using interfaces as they were previously. The start index of each `LInjector` and `TInjector`\n * will differ based on where it is flattened into the main array, so it's not possible to know\n * the indices ahead of time and save their types here. The interfaces are still included here\n * for documentation purposes.\n *\n * export interface LInjector extends Array<any> {\n *\n *    // Cumulative bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Cumulative bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Cumulative bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Cumulative bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Cumulative bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Cumulative bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Cumulative bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Cumulative bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // We need to store a reference to the injector's parent so DI can keep looking up\n *    // the injector tree until it finds the dependency it's looking for.\n *    [PARENT_INJECTOR]: number;\n * }\n *\n * export interface TInjector extends Array<any> {\n *\n *    // Shared node bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Shared node bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Shared node bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Shared node bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Shared node bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Shared node bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Shared node bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Shared node bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // Necessary to find directive indices for a particular node.\n *    [TNODE]: TElementNode|TElementContainerNode|TContainerNode;\n *  }\n */\n/**\n * Factory for creating instances of injectors in the NodeInjector.\n *\n * This factory is complicated by the fact that it can resolve `multi` factories as well.\n *\n * NOTE: Some of the fields are optional which means that this class has two hidden classes.\n * - One without `multi` support (most common)\n * - One with `multi` values, (rare).\n *\n * Since VMs can cache up to 4 inline hidden classes this is OK.\n *\n * - Single factory: Only `resolving` and `factory` is defined.\n * - `providers` factory: `componentProviders` is a number and `index = -1`.\n * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.\n */\nclass NodeInjectorFactory {\n  constructor(\n  /**\n   * Factory to invoke in order to create a new instance.\n   */\n  factory,\n  /**\n   * Set to `true` if the token is declared in `viewProviders` (or if it is component).\n   */\n  isViewProvider, injectImplementation) {\n    this.factory = factory;\n    /**\n     * Marker set to true during factory invocation to see if we get into recursive loop.\n     * Recursive loop causes an error to be displayed.\n     */\n    this.resolving = false;\n    ngDevMode && assertDefined(factory, 'Factory not specified');\n    ngDevMode && assertEqual(typeof factory, 'function', 'Expected factory function.');\n    this.canSeeViewProviders = isViewProvider;\n    this.injectImpl = injectImplementation;\n  }\n}\nfunction isFactory(obj) {\n  return obj instanceof NodeInjectorFactory;\n}\n\n/**\n * Converts `TNodeType` into human readable text.\n * Make sure this matches with `TNodeType`\n */\nfunction toTNodeTypeAsString(tNodeType) {\n  let text = '';\n  tNodeType & 1 /* TNodeType.Text */ && (text += '|Text');\n  tNodeType & 2 /* TNodeType.Element */ && (text += '|Element');\n  tNodeType & 4 /* TNodeType.Container */ && (text += '|Container');\n  tNodeType & 8 /* TNodeType.ElementContainer */ && (text += '|ElementContainer');\n  tNodeType & 16 /* TNodeType.Projection */ && (text += '|Projection');\n  tNodeType & 32 /* TNodeType.Icu */ && (text += '|IcuContainer');\n  tNodeType & 64 /* TNodeType.Placeholder */ && (text += '|Placeholder');\n  return text.length > 0 ? text.substring(1) : text;\n}\n/**\n * Helper function to detect if a given value matches a `TNode` shape.\n *\n * The logic uses the `insertBeforeIndex` and its possible values as\n * a way to differentiate a TNode shape from other types of objects\n * within the `TView.data`. This is not a perfect check, but it can\n * be a reasonable differentiator, since we control the shapes of objects\n * within `TView.data`.\n */\nfunction isTNodeShape(value) {\n  return value != null && typeof value === 'object' && (value.insertBeforeIndex === null || typeof value.insertBeforeIndex === 'number' || Array.isArray(value.insertBeforeIndex));\n}\n/**\n * Returns `true` if the `TNode` has a directive which has `@Input()` for `class` binding.\n *\n * ```\n * <div my-dir [class]=\"exp\"></div>\n * ```\n * and\n * ```\n * @Directive({\n * })\n * class MyDirective {\n *   @Input()\n *   class: string;\n * }\n * ```\n *\n * In the above case it is necessary to write the reconciled styling information into the\n * directive's input.\n *\n * @param tNode\n */\nfunction hasClassInput(tNode) {\n  return (tNode.flags & 8 /* TNodeFlags.hasClassInput */) !== 0;\n}\n/**\n * Returns `true` if the `TNode` has a directive which has `@Input()` for `style` binding.\n *\n * ```\n * <div my-dir [style]=\"exp\"></div>\n * ```\n * and\n * ```\n * @Directive({\n * })\n * class MyDirective {\n *   @Input()\n *   class: string;\n * }\n * ```\n *\n * In the above case it is necessary to write the reconciled styling information into the\n * directive's input.\n *\n * @param tNode\n */\nfunction hasStyleInput(tNode) {\n  return (tNode.flags & 16 /* TNodeFlags.hasStyleInput */) !== 0;\n}\nfunction assertTNodeType(tNode, expectedTypes, message) {\n  assertDefined(tNode, 'should be called with a TNode');\n  if ((tNode.type & expectedTypes) === 0) {\n    throwError(message || `Expected [${toTNodeTypeAsString(expectedTypes)}] but got ${toTNodeTypeAsString(tNode.type)}.`);\n  }\n}\nfunction assertPureTNodeType(type) {\n  if (!(type === 2 /* TNodeType.Element */ ||\n  //\n  type === 1 /* TNodeType.Text */ ||\n  //\n  type === 4 /* TNodeType.Container */ ||\n  //\n  type === 8 /* TNodeType.ElementContainer */ ||\n  //\n  type === 32 /* TNodeType.Icu */ ||\n  //\n  type === 16 /* TNodeType.Projection */ ||\n  //\n  type === 64 /* TNodeType.Placeholder */)) {\n    throwError(`Expected TNodeType to have only a single type selected, but got ${toTNodeTypeAsString(type)}.`);\n  }\n}\n\n/// Parent Injector Utils ///////////////////////////////////////////////////////////////\nfunction hasParentInjector(parentLocation) {\n  return parentLocation !== NO_PARENT_INJECTOR;\n}\nfunction getParentInjectorIndex(parentLocation) {\n  ngDevMode && assertNumber(parentLocation, 'Number expected');\n  ngDevMode && assertNotEqual(parentLocation, -1, 'Not a valid state.');\n  const parentInjectorIndex = parentLocation & 32767 /* RelativeInjectorLocationFlags.InjectorIndexMask */;\n  ngDevMode && assertGreaterThan(parentInjectorIndex, HEADER_OFFSET, 'Parent injector must be pointing past HEADER_OFFSET.');\n  return parentLocation & 32767 /* RelativeInjectorLocationFlags.InjectorIndexMask */;\n}\n\nfunction getParentInjectorViewOffset(parentLocation) {\n  return parentLocation >> 16 /* RelativeInjectorLocationFlags.ViewOffsetShift */;\n}\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the view is found that contains the parent\n * injector.\n *\n * @param location The location of the parent injector, which contains the view offset\n * @param startView The LView instance from which to start walking up the view tree\n * @returns The LView instance that contains the parent injector\n */\nfunction getParentInjectorView(location, startView) {\n  let viewOffset = getParentInjectorViewOffset(location);\n  let parentView = startView;\n  // For most cases, the parent injector can be found on the host node (e.g. for component\n  // or container), but we must keep the loop here to support the rarer case of deeply nested\n  // <ng-template> tags or inline views, where the parent injector might live many views\n  // above the child injector.\n  while (viewOffset > 0) {\n    parentView = parentView[DECLARATION_VIEW];\n    viewOffset--;\n  }\n  return parentView;\n}\n\n/**\n * Defines if the call to `inject` should include `viewProviders` in its resolution.\n *\n * This is set to true when we try to instantiate a component. This value is reset in\n * `getNodeInjectable` to a value which matches the declaration location of the token about to be\n * instantiated. This is done so that if we are injecting a token which was declared outside of\n * `viewProviders` we don't accidentally pull `viewProviders` in.\n *\n * Example:\n *\n * ```\n * @Injectable()\n * class MyService {\n *   constructor(public value: String) {}\n * }\n *\n * @Component({\n *   providers: [\n *     MyService,\n *     {provide: String, value: 'providers' }\n *   ]\n *   viewProviders: [\n *     {provide: String, value: 'viewProviders'}\n *   ]\n * })\n * class MyComponent {\n *   constructor(myService: MyService, value: String) {\n *     // We expect that Component can see into `viewProviders`.\n *     expect(value).toEqual('viewProviders');\n *     // `MyService` was not declared in `viewProviders` hence it can't see it.\n *     expect(myService.value).toEqual('providers');\n *   }\n * }\n *\n * ```\n */\nlet includeViewProviders = true;\nfunction setIncludeViewProviders(v) {\n  const oldValue = includeViewProviders;\n  includeViewProviders = v;\n  return oldValue;\n}\n/**\n * The number of slots in each bloom filter (used by DI). The larger this number, the fewer\n * directives that will share slots, and thus, the fewer false positives when checking for\n * the existence of a directive.\n */\nconst BLOOM_SIZE = 256;\nconst BLOOM_MASK = BLOOM_SIZE - 1;\n/**\n * The number of bits that is represented by a single bloom bucket. JS bit operations are 32 bits,\n * so each bucket represents 32 distinct tokens which accounts for log2(32) = 5 bits of a bloom hash\n * number.\n */\nconst BLOOM_BUCKET_BITS = 5;\n/** Counter used to generate unique IDs for directives. */\nlet nextNgElementId = 0;\n/** Value used when something wasn't found by an injector. */\nconst NOT_FOUND = {};\n/**\n * Registers this directive as present in its node's injector by flipping the directive's\n * corresponding bit in the injector's bloom filter.\n *\n * @param injectorIndex The index of the node injector where this token should be registered\n * @param tView The TView for the injector's bloom filters\n * @param type The directive token to register\n */\nfunction bloomAdd(injectorIndex, tView, type) {\n  ngDevMode && assertEqual(tView.firstCreatePass, true, 'expected firstCreatePass to be true');\n  let id;\n  if (typeof type === 'string') {\n    id = type.charCodeAt(0) || 0;\n  } else if (type.hasOwnProperty(NG_ELEMENT_ID)) {\n    id = type[NG_ELEMENT_ID];\n  }\n  // Set a unique ID on the directive type, so if something tries to inject the directive,\n  // we can easily retrieve the ID and hash it into the bloom bit that should be checked.\n  if (id == null) {\n    id = type[NG_ELEMENT_ID] = nextNgElementId++;\n  }\n  // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),\n  // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.\n  const bloomHash = id & BLOOM_MASK;\n  // Create a mask that targets the specific bit associated with the directive.\n  // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n  // to bit positions 0 - 31 in a 32 bit integer.\n  const mask = 1 << bloomHash;\n  // Each bloom bucket in `tData` represents `BLOOM_BUCKET_BITS` number of bits of `bloomHash`.\n  // Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset that the mask\n  // should be written to.\n  tView.data[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)] |= mask;\n}\n/**\n * Creates (or gets an existing) injector for a given element or container.\n *\n * @param tNode for which an injector should be retrieved / created.\n * @param lView View where the node is stored\n * @returns Node injector\n */\nfunction getOrCreateNodeInjectorForNode(tNode, lView) {\n  const existingInjectorIndex = getInjectorIndex(tNode, lView);\n  if (existingInjectorIndex !== -1) {\n    return existingInjectorIndex;\n  }\n  const tView = lView[TVIEW];\n  if (tView.firstCreatePass) {\n    tNode.injectorIndex = lView.length;\n    insertBloom(tView.data, tNode); // foundation for node bloom\n    insertBloom(lView, null); // foundation for cumulative bloom\n    insertBloom(tView.blueprint, null);\n  }\n  const parentLoc = getParentInjectorLocation(tNode, lView);\n  const injectorIndex = tNode.injectorIndex;\n  // If a parent injector can't be found, its location is set to -1.\n  // In that case, we don't need to set up a cumulative bloom\n  if (hasParentInjector(parentLoc)) {\n    const parentIndex = getParentInjectorIndex(parentLoc);\n    const parentLView = getParentInjectorView(parentLoc, lView);\n    const parentData = parentLView[TVIEW].data;\n    // Creates a cumulative bloom filter that merges the parent's bloom filter\n    // and its own cumulative bloom (which contains tokens for all ancestors)\n    for (let i = 0; i < 8 /* NodeInjectorOffset.BLOOM_SIZE */; i++) {\n      lView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];\n    }\n  }\n  lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */] = parentLoc;\n  return injectorIndex;\n}\nfunction insertBloom(arr, footer) {\n  arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);\n}\nfunction getInjectorIndex(tNode, lView) {\n  if (tNode.injectorIndex === -1 ||\n  // If the injector index is the same as its parent's injector index, then the index has been\n  // copied down from the parent node. No injector has been created yet on this node.\n  tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex ||\n  // After the first template pass, the injector index might exist but the parent values\n  // might not have been calculated yet for this instance\n  lView[tNode.injectorIndex + 8 /* NodeInjectorOffset.PARENT */] === null) {\n    return -1;\n  } else {\n    ngDevMode && assertIndexInRange(lView, tNode.injectorIndex);\n    return tNode.injectorIndex;\n  }\n}\n/**\n * Finds the index of the parent injector, with a view offset if applicable. Used to set the\n * parent injector initially.\n *\n * @returns Returns a number that is the combination of the number of LViews that we have to go up\n * to find the LView containing the parent inject AND the index of the injector within that LView.\n */\nfunction getParentInjectorLocation(tNode, lView) {\n  if (tNode.parent && tNode.parent.injectorIndex !== -1) {\n    // If we have a parent `TNode` and there is an injector associated with it we are done, because\n    // the parent injector is within the current `LView`.\n    return tNode.parent.injectorIndex; // ViewOffset is 0\n  }\n  // When parent injector location is computed it may be outside of the current view. (ie it could\n  // be pointing to a declared parent location). This variable stores number of declaration parents\n  // we need to walk up in order to find the parent injector location.\n  let declarationViewOffset = 0;\n  let parentTNode = null;\n  let lViewCursor = lView;\n  // The parent injector is not in the current `LView`. We will have to walk the declared parent\n  // `LView` hierarchy and look for it. If we walk of the top, that means that there is no parent\n  // `NodeInjector`.\n  while (lViewCursor !== null) {\n    parentTNode = getTNodeFromLView(lViewCursor);\n    if (parentTNode === null) {\n      // If we have no parent, than we are done.\n      return NO_PARENT_INJECTOR;\n    }\n    ngDevMode && parentTNode && assertTNodeForLView(parentTNode, lViewCursor[DECLARATION_VIEW]);\n    // Every iteration of the loop requires that we go to the declared parent.\n    declarationViewOffset++;\n    lViewCursor = lViewCursor[DECLARATION_VIEW];\n    if (parentTNode.injectorIndex !== -1) {\n      // We found a NodeInjector which points to something.\n      return parentTNode.injectorIndex | declarationViewOffset << 16 /* RelativeInjectorLocationFlags.ViewOffsetShift */;\n    }\n  }\n\n  return NO_PARENT_INJECTOR;\n}\n/**\n * Makes a type or an injection token public to the DI system by adding it to an\n * injector's bloom filter.\n *\n * @param di The node injector in which a directive will be added\n * @param token The type or the injection token to be made public\n */\nfunction diPublicInInjector(injectorIndex, tView, token) {\n  bloomAdd(injectorIndex, tView, token);\n}\n/**\n * Inject static attribute value into directive constructor.\n *\n * This method is used with `factory` functions which are generated as part of\n * `defineDirective` or `defineComponent`. The method retrieves the static value\n * of an attribute. (Dynamic attributes are not supported since they are not resolved\n *  at the time of injection and can change over time.)\n *\n * # Example\n * Given:\n * ```\n * @Component(...)\n * class MyComponent {\n *   constructor(@Attribute('title') title: string) { ... }\n * }\n * ```\n * When instantiated with\n * ```\n * <my-component title=\"Hello\"></my-component>\n * ```\n *\n * Then factory method generated is:\n * ```\n * MyComponent.ɵcmp = defineComponent({\n *   factory: () => new MyComponent(injectAttribute('title'))\n *   ...\n * })\n * ```\n *\n * @publicApi\n */\nfunction injectAttributeImpl(tNode, attrNameToInject) {\n  ngDevMode && assertTNodeType(tNode, 12 /* TNodeType.AnyContainer */ | 3 /* TNodeType.AnyRNode */);\n  ngDevMode && assertDefined(tNode, 'expecting tNode');\n  if (attrNameToInject === 'class') {\n    return tNode.classes;\n  }\n  if (attrNameToInject === 'style') {\n    return tNode.styles;\n  }\n  const attrs = tNode.attrs;\n  if (attrs) {\n    const attrsLength = attrs.length;\n    let i = 0;\n    while (i < attrsLength) {\n      const value = attrs[i];\n      // If we hit a `Bindings` or `Template` marker then we are done.\n      if (isNameOnlyAttributeMarker(value)) break;\n      // Skip namespaced attributes\n      if (value === 0 /* AttributeMarker.NamespaceURI */) {\n        // we skip the next two values\n        // as namespaced attributes looks like\n        // [..., AttributeMarker.NamespaceURI, 'http://someuri.com/test', 'test:exist',\n        // 'existValue', ...]\n        i = i + 2;\n      } else if (typeof value === 'number') {\n        // Skip to the first value of the marked attribute.\n        i++;\n        while (i < attrsLength && typeof attrs[i] === 'string') {\n          i++;\n        }\n      } else if (value === attrNameToInject) {\n        return attrs[i + 1];\n      } else {\n        i = i + 2;\n      }\n    }\n  }\n  return null;\n}\nfunction notFoundValueOrThrow(notFoundValue, token, flags) {\n  if (flags & InjectFlags.Optional || notFoundValue !== undefined) {\n    return notFoundValue;\n  } else {\n    throwProviderNotFoundError(token, 'NodeInjector');\n  }\n}\n/**\n * Returns the value associated to the given token from the ModuleInjector or throws exception\n *\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector or throws an exception\n */\nfunction lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue) {\n  if (flags & InjectFlags.Optional && notFoundValue === undefined) {\n    // This must be set or the NullInjector will throw for optional deps\n    notFoundValue = null;\n  }\n  if ((flags & (InjectFlags.Self | InjectFlags.Host)) === 0) {\n    const moduleInjector = lView[INJECTOR$1];\n    // switch to `injectInjectorOnly` implementation for module injector, since module injector\n    // should not have access to Component/Directive DI scope (that may happen through\n    // `directiveInject` implementation)\n    const previousInjectImplementation = setInjectImplementation(undefined);\n    try {\n      if (moduleInjector) {\n        return moduleInjector.get(token, notFoundValue, flags & InjectFlags.Optional);\n      } else {\n        return injectRootLimpMode(token, notFoundValue, flags & InjectFlags.Optional);\n      }\n    } finally {\n      setInjectImplementation(previousInjectImplementation);\n    }\n  }\n  return notFoundValueOrThrow(notFoundValue, token, flags);\n}\n/**\n * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.\n *\n * Look for the injector providing the token by walking up the node injector tree and then\n * the module injector tree.\n *\n * This function patches `token` with `__NG_ELEMENT_ID__` which contains the id for the bloom\n * filter. `-1` is reserved for injecting `Injector` (implemented by `NodeInjector`)\n *\n * @param tNode The Node where the search for the injector should start\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nfunction getOrCreateInjectable(tNode, lView, token, flags = InjectFlags.Default, notFoundValue) {\n  if (tNode !== null) {\n    // If the view or any of its ancestors have an embedded\n    // view injector, we have to look it up there first.\n    if (lView[FLAGS] & 2048 /* LViewFlags.HasEmbeddedViewInjector */ &&\n    // The token must be present on the current node injector when the `Self`\n    // flag is set, so the lookup on embedded view injector(s) can be skipped.\n    !(flags & InjectFlags.Self)) {\n      const embeddedInjectorValue = lookupTokenUsingEmbeddedInjector(tNode, lView, token, flags, NOT_FOUND);\n      if (embeddedInjectorValue !== NOT_FOUND) {\n        return embeddedInjectorValue;\n      }\n    }\n    // Otherwise try the node injector.\n    const value = lookupTokenUsingNodeInjector(tNode, lView, token, flags, NOT_FOUND);\n    if (value !== NOT_FOUND) {\n      return value;\n    }\n  }\n  // Finally, fall back to the module injector.\n  return lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);\n}\n/**\n * Returns the value associated to the given token from the node injector.\n *\n * @param tNode The Node where the search for the injector should start\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nfunction lookupTokenUsingNodeInjector(tNode, lView, token, flags, notFoundValue) {\n  const bloomHash = bloomHashBitOrFactory(token);\n  // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef\n  // so just call the factory function to create it.\n  if (typeof bloomHash === 'function') {\n    if (!enterDI(lView, tNode, flags)) {\n      // Failed to enter DI, try module injector instead. If a token is injected with the @Host\n      // flag, the module injector is not searched for that token in Ivy.\n      return flags & InjectFlags.Host ? notFoundValueOrThrow(notFoundValue, token, flags) : lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);\n    }\n    try {\n      let value;\n      if (ngDevMode) {\n        runInInjectorProfilerContext(new NodeInjector(getCurrentTNode(), getLView()), token, () => {\n          value = bloomHash(flags);\n          if (value != null) {\n            emitInstanceCreatedByInjectorEvent(value);\n          }\n        });\n      } else {\n        value = bloomHash(flags);\n      }\n      if (value == null && !(flags & InjectFlags.Optional)) {\n        throwProviderNotFoundError(token);\n      } else {\n        return value;\n      }\n    } finally {\n      leaveDI();\n    }\n  } else if (typeof bloomHash === 'number') {\n    // A reference to the previous injector TView that was found while climbing the element\n    // injector tree. This is used to know if viewProviders can be accessed on the current\n    // injector.\n    let previousTView = null;\n    let injectorIndex = getInjectorIndex(tNode, lView);\n    let parentLocation = NO_PARENT_INJECTOR;\n    let hostTElementNode = flags & InjectFlags.Host ? lView[DECLARATION_COMPONENT_VIEW][T_HOST] : null;\n    // If we should skip this injector, or if there is no injector on this node, start by\n    // searching the parent injector.\n    if (injectorIndex === -1 || flags & InjectFlags.SkipSelf) {\n      parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) : lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */];\n      if (parentLocation === NO_PARENT_INJECTOR || !shouldSearchParent(flags, false)) {\n        injectorIndex = -1;\n      } else {\n        previousTView = lView[TVIEW];\n        injectorIndex = getParentInjectorIndex(parentLocation);\n        lView = getParentInjectorView(parentLocation, lView);\n      }\n    }\n    // Traverse up the injector tree until we find a potential match or until we know there\n    // *isn't* a match.\n    while (injectorIndex !== -1) {\n      ngDevMode && assertNodeInjector(lView, injectorIndex);\n      // Check the current injector. If it matches, see if it contains token.\n      const tView = lView[TVIEW];\n      ngDevMode && assertTNodeForLView(tView.data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */], lView);\n      if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {\n        // At this point, we have an injector which *may* contain the token, so we step through\n        // the providers and directives associated with the injector's corresponding node to get\n        // the instance.\n        const instance = searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode);\n        if (instance !== NOT_FOUND) {\n          return instance;\n        }\n      }\n      parentLocation = lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */];\n      if (parentLocation !== NO_PARENT_INJECTOR && shouldSearchParent(flags, lView[TVIEW].data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */] === hostTElementNode) && bloomHasToken(bloomHash, injectorIndex, lView)) {\n        // The def wasn't found anywhere on this node, so it was a false positive.\n        // Traverse up the tree and continue searching.\n        previousTView = tView;\n        injectorIndex = getParentInjectorIndex(parentLocation);\n        lView = getParentInjectorView(parentLocation, lView);\n      } else {\n        // If we should not search parent OR If the ancestor bloom filter value does not have the\n        // bit corresponding to the directive we can give up on traversing up to find the specific\n        // injector.\n        injectorIndex = -1;\n      }\n    }\n  }\n  return notFoundValue;\n}\nfunction searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode) {\n  const currentTView = lView[TVIEW];\n  const tNode = currentTView.data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */];\n  // First, we need to determine if view providers can be accessed by the starting element.\n  // There are two possibilities\n  const canAccessViewProviders = previousTView == null ?\n  // 1) This is the first invocation `previousTView == null` which means that we are at the\n  // `TNode` of where injector is starting to look. In such a case the only time we are allowed\n  // to look into the ViewProviders is if:\n  // - we are on a component\n  // - AND the injector set `includeViewProviders` to true (implying that the token can see\n  // ViewProviders because it is the Component or a Service which itself was declared in\n  // ViewProviders)\n  isComponentHost(tNode) && includeViewProviders :\n  // 2) `previousTView != null` which means that we are now walking across the parent nodes.\n  // In such a case we are only allowed to look into the ViewProviders if:\n  // - We just crossed from child View to Parent View `previousTView != currentTView`\n  // - AND the parent TNode is an Element.\n  // This means that we just came from the Component's View and therefore are allowed to see\n  // into the ViewProviders.\n  previousTView != currentTView && (tNode.type & 3 /* TNodeType.AnyRNode */) !== 0;\n  // This special case happens when there is a @host on the inject and when we are searching\n  // on the host element node.\n  const isHostSpecialCase = flags & InjectFlags.Host && hostTElementNode === tNode;\n  const injectableIdx = locateDirectiveOrProvider(tNode, currentTView, token, canAccessViewProviders, isHostSpecialCase);\n  if (injectableIdx !== null) {\n    return getNodeInjectable(lView, currentTView, injectableIdx, tNode);\n  } else {\n    return NOT_FOUND;\n  }\n}\n/**\n * Searches for the given token among the node's directives and providers.\n *\n * @param tNode TNode on which directives are present.\n * @param tView The tView we are currently processing\n * @param token Provider token or type of a directive to look for.\n * @param canAccessViewProviders Whether view providers should be considered.\n * @param isHostSpecialCase Whether the host special case applies.\n * @returns Index of a found directive or provider, or null when none found.\n */\nfunction locateDirectiveOrProvider(tNode, tView, token, canAccessViewProviders, isHostSpecialCase) {\n  const nodeProviderIndexes = tNode.providerIndexes;\n  const tInjectables = tView.data;\n  const injectablesStart = nodeProviderIndexes & 1048575 /* TNodeProviderIndexes.ProvidersStartIndexMask */;\n  const directivesStart = tNode.directiveStart;\n  const directiveEnd = tNode.directiveEnd;\n  const cptViewProvidersCount = nodeProviderIndexes >> 20 /* TNodeProviderIndexes.CptViewProvidersCountShift */;\n  const startingIndex = canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount;\n  // When the host special case applies, only the viewProviders and the component are visible\n  const endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;\n  for (let i = startingIndex; i < endIndex; i++) {\n    const providerTokenOrDef = tInjectables[i];\n    if (i < directivesStart && token === providerTokenOrDef || i >= directivesStart && providerTokenOrDef.type === token) {\n      return i;\n    }\n  }\n  if (isHostSpecialCase) {\n    const dirDef = tInjectables[directivesStart];\n    if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {\n      return directivesStart;\n    }\n  }\n  return null;\n}\n/**\n * Retrieve or instantiate the injectable from the `LView` at particular `index`.\n *\n * This function checks to see if the value has already been instantiated and if so returns the\n * cached `injectable`. Otherwise if it detects that the value is still a factory it\n * instantiates the `injectable` and caches the value.\n */\nfunction getNodeInjectable(lView, tView, index, tNode) {\n  let value = lView[index];\n  const tData = tView.data;\n  if (isFactory(value)) {\n    const factory = value;\n    if (factory.resolving) {\n      throwCyclicDependencyError(stringifyForError(tData[index]));\n    }\n    const previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);\n    factory.resolving = true;\n    let prevInjectContext;\n    if (ngDevMode) {\n      // tData indexes mirror the concrete instances in its corresponding LView.\n      // lView[index] here is either the injectable instace itself or a factory,\n      // therefore tData[index] is the constructor of that injectable or a\n      // definition object that contains the constructor in a `.type` field.\n      const token = tData[index].type || tData[index];\n      const injector = new NodeInjector(tNode, lView);\n      prevInjectContext = setInjectorProfilerContext({\n        injector,\n        token\n      });\n    }\n    const previousInjectImplementation = factory.injectImpl ? setInjectImplementation(factory.injectImpl) : null;\n    const success = enterDI(lView, tNode, InjectFlags.Default);\n    ngDevMode && assertEqual(success, true, 'Because flags do not contain \\`SkipSelf\\' we expect this to always succeed.');\n    try {\n      value = lView[index] = factory.factory(undefined, tData, lView, tNode);\n      ngDevMode && emitInstanceCreatedByInjectorEvent(value);\n      // This code path is hit for both directives and providers.\n      // For perf reasons, we want to avoid searching for hooks on providers.\n      // It does no harm to try (the hooks just won't exist), but the extra\n      // checks are unnecessary and this is a hot path. So we check to see\n      // if the index of the dependency is in the directive range for this\n      // tNode. If it's not, we know it's a provider and skip hook registration.\n      if (tView.firstCreatePass && index >= tNode.directiveStart) {\n        ngDevMode && assertDirectiveDef(tData[index]);\n        registerPreOrderHooks(index, tData[index], tView);\n      }\n    } finally {\n      ngDevMode && setInjectorProfilerContext(prevInjectContext);\n      previousInjectImplementation !== null && setInjectImplementation(previousInjectImplementation);\n      setIncludeViewProviders(previousIncludeViewProviders);\n      factory.resolving = false;\n      leaveDI();\n    }\n  }\n  return value;\n}\n/**\n * Returns the bit in an injector's bloom filter that should be used to determine whether or not\n * the directive might be provided by the injector.\n *\n * When a directive is public, it is added to the bloom filter and given a unique ID that can be\n * retrieved on the Type. When the directive isn't public or the token is not a directive `null`\n * is returned as the node injector can not possibly provide that token.\n *\n * @param token the injection token\n * @returns the matching bit to check in the bloom filter or `null` if the token is not known.\n *   When the returned value is negative then it represents special values such as `Injector`.\n */\nfunction bloomHashBitOrFactory(token) {\n  ngDevMode && assertDefined(token, 'token must be defined');\n  if (typeof token === 'string') {\n    return token.charCodeAt(0) || 0;\n  }\n  const tokenId =\n  // First check with `hasOwnProperty` so we don't get an inherited ID.\n  token.hasOwnProperty(NG_ELEMENT_ID) ? token[NG_ELEMENT_ID] : undefined;\n  // Negative token IDs are used for special objects such as `Injector`\n  if (typeof tokenId === 'number') {\n    if (tokenId >= 0) {\n      return tokenId & BLOOM_MASK;\n    } else {\n      ngDevMode && assertEqual(tokenId, -1 /* InjectorMarkers.Injector */, 'Expecting to get Special Injector Id');\n      return createNodeInjector;\n    }\n  } else {\n    return tokenId;\n  }\n}\nfunction bloomHasToken(bloomHash, injectorIndex, injectorView) {\n  // Create a mask that targets the specific bit associated with the directive we're looking for.\n  // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n  // to bit positions 0 - 31 in a 32 bit integer.\n  const mask = 1 << bloomHash;\n  // Each bloom bucket in `injectorView` represents `BLOOM_BUCKET_BITS` number of bits of\n  // `bloomHash`. Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset\n  // that should be used.\n  const value = injectorView[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)];\n  // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,\n  // this injector is a potential match.\n  return !!(value & mask);\n}\n/** Returns true if flags prevent parent injector from being searched for tokens */\nfunction shouldSearchParent(flags, isFirstHostTNode) {\n  return !(flags & InjectFlags.Self) && !(flags & InjectFlags.Host && isFirstHostTNode);\n}\nfunction getNodeInjectorLView(nodeInjector) {\n  return nodeInjector._lView;\n}\nfunction getNodeInjectorTNode(nodeInjector) {\n  return nodeInjector._tNode;\n}\nclass NodeInjector {\n  constructor(_tNode, _lView) {\n    this._tNode = _tNode;\n    this._lView = _lView;\n  }\n  get(token, notFoundValue, flags) {\n    return getOrCreateInjectable(this._tNode, this._lView, token, convertToBitFlags(flags), notFoundValue);\n  }\n}\n/** Creates a `NodeInjector` for the current node. */\nfunction createNodeInjector() {\n  return new NodeInjector(getCurrentTNode(), getLView());\n}\n/**\n * @codeGenApi\n */\nfunction ɵɵgetInheritedFactory(type) {\n  return noSideEffects(() => {\n    const ownConstructor = type.prototype.constructor;\n    const ownFactory = ownConstructor[NG_FACTORY_DEF] || getFactoryOf(ownConstructor);\n    const objectPrototype = Object.prototype;\n    let parent = Object.getPrototypeOf(type.prototype).constructor;\n    // Go up the prototype until we hit `Object`.\n    while (parent && parent !== objectPrototype) {\n      const factory = parent[NG_FACTORY_DEF] || getFactoryOf(parent);\n      // If we hit something that has a factory and the factory isn't the same as the type,\n      // we've found the inherited factory. Note the check that the factory isn't the type's\n      // own factory is redundant in most cases, but if the user has custom decorators on the\n      // class, this lookup will start one level down in the prototype chain, causing us to\n      // find the own factory first and potentially triggering an infinite loop downstream.\n      if (factory && factory !== ownFactory) {\n        return factory;\n      }\n      parent = Object.getPrototypeOf(parent);\n    }\n    // There is no factory defined. Either this was improper usage of inheritance\n    // (no Angular decorator on the superclass) or there is no constructor at all\n    // in the inheritance chain. Since the two cases cannot be distinguished, the\n    // latter has to be assumed.\n    return t => new t();\n  });\n}\nfunction getFactoryOf(type) {\n  if (isForwardRef(type)) {\n    return () => {\n      const factory = getFactoryOf(resolveForwardRef(type));\n      return factory && factory();\n    };\n  }\n  return getFactoryDef(type);\n}\n/**\n * Returns a value from the closest embedded or node injector.\n *\n * @param tNode The Node where the search for the injector should start\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nfunction lookupTokenUsingEmbeddedInjector(tNode, lView, token, flags, notFoundValue) {\n  let currentTNode = tNode;\n  let currentLView = lView;\n  // When an LView with an embedded view injector is inserted, it'll likely be interlaced with\n  // nodes who may have injectors (e.g. node injector -> embedded view injector -> node injector).\n  // Since the bloom filters for the node injectors have already been constructed and we don't\n  // have a way of extracting the records from an injector, the only way to maintain the correct\n  // hierarchy when resolving the value is to walk it node-by-node while attempting to resolve\n  // the token at each level.\n  while (currentTNode !== null && currentLView !== null && currentLView[FLAGS] & 2048 /* LViewFlags.HasEmbeddedViewInjector */ && !(currentLView[FLAGS] & 512 /* LViewFlags.IsRoot */)) {\n    ngDevMode && assertTNodeForLView(currentTNode, currentLView);\n    // Note that this lookup on the node injector is using the `Self` flag, because\n    // we don't want the node injector to look at any parent injectors since we\n    // may hit the embedded view injector first.\n    const nodeInjectorValue = lookupTokenUsingNodeInjector(currentTNode, currentLView, token, flags | InjectFlags.Self, NOT_FOUND);\n    if (nodeInjectorValue !== NOT_FOUND) {\n      return nodeInjectorValue;\n    }\n    // Has an explicit type due to a TS bug: https://github.com/microsoft/TypeScript/issues/33191\n    let parentTNode = currentTNode.parent;\n    // `TNode.parent` includes the parent within the current view only. If it doesn't exist,\n    // it means that we've hit the view boundary and we need to go up to the next view.\n    if (!parentTNode) {\n      // Before we go to the next LView, check if the token exists on the current embedded injector.\n      const embeddedViewInjector = currentLView[EMBEDDED_VIEW_INJECTOR];\n      if (embeddedViewInjector) {\n        const embeddedViewInjectorValue = embeddedViewInjector.get(token, NOT_FOUND, flags);\n        if (embeddedViewInjectorValue !== NOT_FOUND) {\n          return embeddedViewInjectorValue;\n        }\n      }\n      // Otherwise keep going up the tree.\n      parentTNode = getTNodeFromLView(currentLView);\n      currentLView = currentLView[DECLARATION_VIEW];\n    }\n    currentTNode = parentTNode;\n  }\n  return notFoundValue;\n}\n/** Gets the TNode associated with an LView inside of the declaration view. */\nfunction getTNodeFromLView(lView) {\n  const tView = lView[TVIEW];\n  const tViewType = tView.type;\n  // The parent pointer differs based on `TView.type`.\n  if (tViewType === 2 /* TViewType.Embedded */) {\n    ngDevMode && assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');\n    return tView.declTNode;\n  } else if (tViewType === 1 /* TViewType.Component */) {\n    // Components don't have `TView.declTNode` because each instance of component could be\n    // inserted in different location, hence `TView.declTNode` is meaningless.\n    return lView[T_HOST];\n  }\n  return null;\n}\n\n/**\n * Facade for the attribute injection from DI.\n *\n * @codeGenApi\n */\nfunction ɵɵinjectAttribute(attrNameToInject) {\n  return injectAttributeImpl(getCurrentTNode(), attrNameToInject);\n}\nconst ANNOTATIONS = '__annotations__';\nconst PARAMETERS = '__parameters__';\nconst PROP_METADATA = '__prop__metadata__';\n/**\n * @suppress {globalThis}\n */\nfunction makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {\n  return noSideEffects(() => {\n    const metaCtor = makeMetadataCtor(props);\n    function DecoratorFactory(...args) {\n      if (this instanceof DecoratorFactory) {\n        metaCtor.call(this, ...args);\n        return this;\n      }\n      const annotationInstance = new DecoratorFactory(...args);\n      return function TypeDecorator(cls) {\n        if (typeFn) typeFn(cls, ...args);\n        // Use of Object.defineProperty is important since it creates non-enumerable property which\n        // prevents the property is copied during subclassing.\n        const annotations = cls.hasOwnProperty(ANNOTATIONS) ? cls[ANNOTATIONS] : Object.defineProperty(cls, ANNOTATIONS, {\n          value: []\n        })[ANNOTATIONS];\n        annotations.push(annotationInstance);\n        if (additionalProcessing) additionalProcessing(cls);\n        return cls;\n      };\n    }\n    if (parentClass) {\n      DecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    DecoratorFactory.prototype.ngMetadataName = name;\n    DecoratorFactory.annotationCls = DecoratorFactory;\n    return DecoratorFactory;\n  });\n}\nfunction makeMetadataCtor(props) {\n  return function ctor(...args) {\n    if (props) {\n      const values = props(...args);\n      for (const propName in values) {\n        this[propName] = values[propName];\n      }\n    }\n  };\n}\nfunction makeParamDecorator(name, props, parentClass) {\n  return noSideEffects(() => {\n    const metaCtor = makeMetadataCtor(props);\n    function ParamDecoratorFactory(...args) {\n      if (this instanceof ParamDecoratorFactory) {\n        metaCtor.apply(this, args);\n        return this;\n      }\n      const annotationInstance = new ParamDecoratorFactory(...args);\n      ParamDecorator.annotation = annotationInstance;\n      return ParamDecorator;\n      function ParamDecorator(cls, unusedKey, index) {\n        // Use of Object.defineProperty is important since it creates non-enumerable property which\n        // prevents the property is copied during subclassing.\n        const parameters = cls.hasOwnProperty(PARAMETERS) ? cls[PARAMETERS] : Object.defineProperty(cls, PARAMETERS, {\n          value: []\n        })[PARAMETERS];\n        // there might be gaps if some in between parameters do not have annotations.\n        // we pad with nulls.\n        while (parameters.length <= index) {\n          parameters.push(null);\n        }\n        (parameters[index] = parameters[index] || []).push(annotationInstance);\n        return cls;\n      }\n    }\n    if (parentClass) {\n      ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    ParamDecoratorFactory.prototype.ngMetadataName = name;\n    ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;\n    return ParamDecoratorFactory;\n  });\n}\nfunction makePropDecorator(name, props, parentClass, additionalProcessing) {\n  return noSideEffects(() => {\n    const metaCtor = makeMetadataCtor(props);\n    function PropDecoratorFactory(...args) {\n      if (this instanceof PropDecoratorFactory) {\n        metaCtor.apply(this, args);\n        return this;\n      }\n      const decoratorInstance = new PropDecoratorFactory(...args);\n      function PropDecorator(target, name) {\n        // target is undefined with standard decorators. This case is not supported and will throw\n        // if this decorator is used in JIT mode with standard decorators.\n        if (target === undefined) {\n          throw new Error('Standard Angular field decorators are not supported in JIT mode.');\n        }\n        const constructor = target.constructor;\n        // Use of Object.defineProperty is important because it creates a non-enumerable property\n        // which prevents the property from being copied during subclassing.\n        const meta = constructor.hasOwnProperty(PROP_METADATA) ? constructor[PROP_METADATA] : Object.defineProperty(constructor, PROP_METADATA, {\n          value: {}\n        })[PROP_METADATA];\n        meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n        meta[name].unshift(decoratorInstance);\n        if (additionalProcessing) additionalProcessing(target, name, ...args);\n      }\n      return PropDecorator;\n    }\n    if (parentClass) {\n      PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    PropDecoratorFactory.prototype.ngMetadataName = name;\n    PropDecoratorFactory.annotationCls = PropDecoratorFactory;\n    return PropDecoratorFactory;\n  });\n}\n\n/**\n * Attribute decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Attribute = makeParamDecorator('Attribute', attributeName => ({\n  attributeName,\n  __NG_ELEMENT_ID__: () => ɵɵinjectAttribute(attributeName)\n}));\n\n// Stores the default value of `emitDistinctChangesOnly` when the `emitDistinctChangesOnly` is not\n// explicitly set.\nconst emitDistinctChangesOnlyDefaultValue = true;\n/**\n * Base class for query metadata.\n *\n * @see {@link ContentChildren}\n * @see {@link ContentChild}\n * @see {@link ViewChildren}\n * @see {@link ViewChild}\n *\n * @publicApi\n */\nclass Query {}\n/**\n * ContentChildren decorator and metadata.\n *\n *\n * @Annotation\n * @publicApi\n */\nconst ContentChildren = makePropDecorator('ContentChildren', (selector, data = {}) => ({\n  selector,\n  first: false,\n  isViewQuery: false,\n  descendants: false,\n  emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue,\n  ...data\n}), Query);\n/**\n * ContentChild decorator and metadata.\n *\n *\n * @Annotation\n *\n * @publicApi\n */\nconst ContentChild = makePropDecorator('ContentChild', (selector, data = {}) => ({\n  selector,\n  first: true,\n  isViewQuery: false,\n  descendants: true,\n  ...data\n}), Query);\n/**\n * ViewChildren decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst ViewChildren = makePropDecorator('ViewChildren', (selector, data = {}) => ({\n  selector,\n  first: false,\n  isViewQuery: true,\n  descendants: true,\n  emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue,\n  ...data\n}), Query);\n/**\n * ViewChild decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst ViewChild = makePropDecorator('ViewChild', (selector, data) => ({\n  selector,\n  first: true,\n  isViewQuery: true,\n  descendants: true,\n  ...data\n}), Query);\nvar FactoryTarget;\n(function (FactoryTarget) {\n  FactoryTarget[FactoryTarget[\"Directive\"] = 0] = \"Directive\";\n  FactoryTarget[FactoryTarget[\"Component\"] = 1] = \"Component\";\n  FactoryTarget[FactoryTarget[\"Injectable\"] = 2] = \"Injectable\";\n  FactoryTarget[FactoryTarget[\"Pipe\"] = 3] = \"Pipe\";\n  FactoryTarget[FactoryTarget[\"NgModule\"] = 4] = \"NgModule\";\n})(FactoryTarget || (FactoryTarget = {}));\nvar R3TemplateDependencyKind;\n(function (R3TemplateDependencyKind) {\n  R3TemplateDependencyKind[R3TemplateDependencyKind[\"Directive\"] = 0] = \"Directive\";\n  R3TemplateDependencyKind[R3TemplateDependencyKind[\"Pipe\"] = 1] = \"Pipe\";\n  R3TemplateDependencyKind[R3TemplateDependencyKind[\"NgModule\"] = 2] = \"NgModule\";\n})(R3TemplateDependencyKind || (R3TemplateDependencyKind = {}));\nvar ViewEncapsulation;\n(function (ViewEncapsulation) {\n  ViewEncapsulation[ViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\";\n  // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.\n  ViewEncapsulation[ViewEncapsulation[\"None\"] = 2] = \"None\";\n  ViewEncapsulation[ViewEncapsulation[\"ShadowDom\"] = 3] = \"ShadowDom\";\n})(ViewEncapsulation || (ViewEncapsulation = {}));\nfunction getCompilerFacade(request) {\n  const globalNg = _global['ng'];\n  if (globalNg && globalNg.ɵcompilerFacade) {\n    return globalNg.ɵcompilerFacade;\n  }\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    // Log the type as an error so that a developer can easily navigate to the type from the\n    // console.\n    console.error(`JIT compilation failed for ${request.kind}`, request.type);\n    let message = `The ${request.kind} '${request.type.name}' needs to be compiled using the JIT compiler, but '@angular/compiler' is not available.\\n\\n`;\n    if (request.usage === 1 /* JitCompilerUsage.PartialDeclaration */) {\n      message += `The ${request.kind} is part of a library that has been partially compiled.\\n`;\n      message += `However, the Angular Linker has not processed the library such that JIT compilation is used as fallback.\\n`;\n      message += '\\n';\n      message += `Ideally, the library is processed using the Angular Linker to become fully AOT compiled.\\n`;\n    } else {\n      message += `JIT compilation is discouraged for production use-cases! Consider using AOT mode instead.\\n`;\n    }\n    message += `Alternatively, the JIT compiler should be loaded by bootstrapping using '@angular/platform-browser-dynamic' or '@angular/platform-server',\\n`;\n    message += `or manually provide the compiler with 'import \"@angular/compiler\";' before bootstrapping.`;\n    throw new Error(message);\n  } else {\n    throw new Error('JIT compiler unavailable');\n  }\n}\n\n/**\n * @description\n *\n * Represents a type that a Component or other object is instances of.\n *\n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is represented by\n * the `MyCustomComponent` constructor function.\n *\n * @publicApi\n */\nconst Type = Function;\nfunction isType(v) {\n  return typeof v === 'function';\n}\n\n/**\n * Determines if the contents of two arrays is identical\n *\n * @param a first array\n * @param b second array\n * @param identityAccessor Optional function for extracting stable object identity from a value in\n *     the array.\n */\nfunction arrayEquals(a, b, identityAccessor) {\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; i++) {\n    let valueA = a[i];\n    let valueB = b[i];\n    if (identityAccessor) {\n      valueA = identityAccessor(valueA);\n      valueB = identityAccessor(valueB);\n    }\n    if (valueB !== valueA) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Flattens an array.\n */\nfunction flatten(list) {\n  return list.flat(Number.POSITIVE_INFINITY);\n}\nfunction deepForEach(input, fn) {\n  input.forEach(value => Array.isArray(value) ? deepForEach(value, fn) : fn(value));\n}\nfunction addToArray(arr, index, value) {\n  // perf: array.push is faster than array.splice!\n  if (index >= arr.length) {\n    arr.push(value);\n  } else {\n    arr.splice(index, 0, value);\n  }\n}\nfunction removeFromArray(arr, index) {\n  // perf: array.pop is faster than array.splice!\n  if (index >= arr.length - 1) {\n    return arr.pop();\n  } else {\n    return arr.splice(index, 1)[0];\n  }\n}\nfunction newArray(size, value) {\n  const list = [];\n  for (let i = 0; i < size; i++) {\n    list.push(value);\n  }\n  return list;\n}\n/**\n * Remove item from array (Same as `Array.splice()` but faster.)\n *\n * `Array.splice()` is not as fast because it has to allocate an array for the elements which were\n * removed. This causes memory pressure and slows down code when most of the time we don't\n * care about the deleted items array.\n *\n * https://jsperf.com/fast-array-splice (About 20x faster)\n *\n * @param array Array to splice\n * @param index Index of element in array to remove.\n * @param count Number of items to remove.\n */\nfunction arraySplice(array, index, count) {\n  const length = array.length - count;\n  while (index < length) {\n    array[index] = array[index + count];\n    index++;\n  }\n  while (count--) {\n    array.pop(); // shrink the array\n  }\n}\n/**\n * Same as `Array.splice(index, 0, value)` but faster.\n *\n * `Array.splice()` is not fast because it has to allocate an array for the elements which were\n * removed. This causes memory pressure and slows down code when most of the time we don't\n * care about the deleted items array.\n *\n * @param array Array to splice.\n * @param index Index in array where the `value` should be added.\n * @param value Value to add to array.\n */\nfunction arrayInsert(array, index, value) {\n  ngDevMode && assertLessThanOrEqual(index, array.length, 'Can\\'t insert past array end.');\n  let end = array.length;\n  while (end > index) {\n    const previousEnd = end - 1;\n    array[end] = array[previousEnd];\n    end = previousEnd;\n  }\n  array[index] = value;\n}\n/**\n * Same as `Array.splice2(index, 0, value1, value2)` but faster.\n *\n * `Array.splice()` is not fast because it has to allocate an array for the elements which were\n * removed. This causes memory pressure and slows down code when most of the time we don't\n * care about the deleted items array.\n *\n * @param array Array to splice.\n * @param index Index in array where the `value` should be added.\n * @param value1 Value to add to array.\n * @param value2 Value to add to array.\n */\nfunction arrayInsert2(array, index, value1, value2) {\n  ngDevMode && assertLessThanOrEqual(index, array.length, 'Can\\'t insert past array end.');\n  let end = array.length;\n  if (end == index) {\n    // inserting at the end.\n    array.push(value1, value2);\n  } else if (end === 1) {\n    // corner case when we have less items in array than we have items to insert.\n    array.push(value2, array[0]);\n    array[0] = value1;\n  } else {\n    end--;\n    array.push(array[end - 1], array[end]);\n    while (end > index) {\n      const previousEnd = end - 2;\n      array[end] = array[previousEnd];\n      end--;\n    }\n    array[index] = value1;\n    array[index + 1] = value2;\n  }\n}\n/**\n * Get an index of an `value` in a sorted `array`.\n *\n * NOTE:\n * - This uses binary search algorithm for fast removals.\n *\n * @param array A sorted array to binary search.\n * @param value The value to look for.\n * @returns index of the value.\n *   - positive index if value found.\n *   - negative index if value not found. (`~index` to get the value where it should have been\n *     located)\n */\nfunction arrayIndexOfSorted(array, value) {\n  return _arrayIndexOfSorted(array, value, 0);\n}\n/**\n * Set a `value` for a `key`.\n *\n * @param keyValueArray to modify.\n * @param key The key to locate or create.\n * @param value The value to set for a `key`.\n * @returns index (always even) of where the value vas set.\n */\nfunction keyValueArraySet(keyValueArray, key, value) {\n  let index = keyValueArrayIndexOf(keyValueArray, key);\n  if (index >= 0) {\n    // if we found it set it.\n    keyValueArray[index | 1] = value;\n  } else {\n    index = ~index;\n    arrayInsert2(keyValueArray, index, key, value);\n  }\n  return index;\n}\n/**\n * Retrieve a `value` for a `key` (on `undefined` if not found.)\n *\n * @param keyValueArray to search.\n * @param key The key to locate.\n * @return The `value` stored at the `key` location or `undefined if not found.\n */\nfunction keyValueArrayGet(keyValueArray, key) {\n  const index = keyValueArrayIndexOf(keyValueArray, key);\n  if (index >= 0) {\n    // if we found it retrieve it.\n    return keyValueArray[index | 1];\n  }\n  return undefined;\n}\n/**\n * Retrieve a `key` index value in the array or `-1` if not found.\n *\n * @param keyValueArray to search.\n * @param key The key to locate.\n * @returns index of where the key is (or should have been.)\n *   - positive (even) index if key found.\n *   - negative index if key not found. (`~index` (even) to get the index where it should have\n *     been inserted.)\n */\nfunction keyValueArrayIndexOf(keyValueArray, key) {\n  return _arrayIndexOfSorted(keyValueArray, key, 1);\n}\n/**\n * Delete a `key` (and `value`) from the `KeyValueArray`.\n *\n * @param keyValueArray to modify.\n * @param key The key to locate or delete (if exist).\n * @returns index of where the key was (or should have been.)\n *   - positive (even) index if key found and deleted.\n *   - negative index if key not found. (`~index` (even) to get the index where it should have\n *     been.)\n */\nfunction keyValueArrayDelete(keyValueArray, key) {\n  const index = keyValueArrayIndexOf(keyValueArray, key);\n  if (index >= 0) {\n    // if we found it remove it.\n    arraySplice(keyValueArray, index, 2);\n  }\n  return index;\n}\n/**\n * INTERNAL: Get an index of an `value` in a sorted `array` by grouping search by `shift`.\n *\n * NOTE:\n * - This uses binary search algorithm for fast removals.\n *\n * @param array A sorted array to binary search.\n * @param value The value to look for.\n * @param shift grouping shift.\n *   - `0` means look at every location\n *   - `1` means only look at every other (even) location (the odd locations are to be ignored as\n *         they are values.)\n * @returns index of the value.\n *   - positive index if value found.\n *   - negative index if value not found. (`~index` to get the value where it should have been\n * inserted)\n */\nfunction _arrayIndexOfSorted(array, value, shift) {\n  ngDevMode && assertEqual(Array.isArray(array), true, 'Expecting an array');\n  let start = 0;\n  let end = array.length >> shift;\n  while (end !== start) {\n    const middle = start + (end - start >> 1); // find the middle.\n    const current = array[middle << shift];\n    if (value === current) {\n      return middle << shift;\n    } else if (current > value) {\n      end = middle;\n    } else {\n      start = middle + 1; // We already searched middle so make it non-inclusive by adding 1\n    }\n  }\n\n  return ~(end << shift);\n}\n\n/*\n * #########################\n * Attention: These Regular expressions have to hold even if the code is minified!\n * ##########################\n */\n/**\n * Regular expression that detects pass-through constructors for ES5 output. This Regex\n * intends to capture the common delegation pattern emitted by TypeScript and Babel. Also\n * it intends to capture the pattern where existing constructors have been downleveled from\n * ES2015 to ES5 using TypeScript w/ downlevel iteration. e.g.\n *\n * ```\n *   function MyClass() {\n *     var _this = _super.apply(this, arguments) || this;\n * ```\n *\n * downleveled to ES5 with `downlevelIteration` for TypeScript < 4.2:\n * ```\n *   function MyClass() {\n *     var _this = _super.apply(this, __spread(arguments)) || this;\n * ```\n *\n * or downleveled to ES5 with `downlevelIteration` for TypeScript >= 4.2:\n * ```\n *   function MyClass() {\n *     var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;\n * ```\n *\n * More details can be found in: https://github.com/angular/angular/issues/38453.\n */\nconst ES5_DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{[\\s\\S]+\\.apply\\(this,\\s*(arguments|(?:[^()]+\\(\\[\\],)?[^()]+\\(arguments\\).*)\\)/;\n/** Regular expression that detects ES2015 classes which extend from other classes. */\nconst ES2015_INHERITED_CLASS = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{/;\n/**\n * Regular expression that detects ES2015 classes which extend from other classes and\n * have an explicit constructor defined.\n */\nconst ES2015_INHERITED_CLASS_WITH_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(/;\n/**\n * Regular expression that detects ES2015 classes which extend from other classes\n * and inherit a constructor.\n */\nconst ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(\\)\\s*{[^}]*super\\(\\.\\.\\.arguments\\)/;\n/**\n * Determine whether a stringified type is a class which delegates its constructor\n * to its parent.\n *\n * This is not trivial since compiled code can actually contain a constructor function\n * even if the original source code did not. For instance, when the child class contains\n * an initialized instance property.\n */\nfunction isDelegateCtor(typeStr) {\n  return ES5_DELEGATE_CTOR.test(typeStr) || ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR.test(typeStr) || ES2015_INHERITED_CLASS.test(typeStr) && !ES2015_INHERITED_CLASS_WITH_CTOR.test(typeStr);\n}\nclass ReflectionCapabilities {\n  constructor(reflect) {\n    this._reflect = reflect || _global['Reflect'];\n  }\n  factory(t) {\n    return (...args) => new t(...args);\n  }\n  /** @internal */\n  _zipTypesAndAnnotations(paramTypes, paramAnnotations) {\n    let result;\n    if (typeof paramTypes === 'undefined') {\n      result = newArray(paramAnnotations.length);\n    } else {\n      result = newArray(paramTypes.length);\n    }\n    for (let i = 0; i < result.length; i++) {\n      // TS outputs Object for parameters without types, while Traceur omits\n      // the annotations. For now we preserve the Traceur behavior to aid\n      // migration, but this can be revisited.\n      if (typeof paramTypes === 'undefined') {\n        result[i] = [];\n      } else if (paramTypes[i] && paramTypes[i] != Object) {\n        result[i] = [paramTypes[i]];\n      } else {\n        result[i] = [];\n      }\n      if (paramAnnotations && paramAnnotations[i] != null) {\n        result[i] = result[i].concat(paramAnnotations[i]);\n      }\n    }\n    return result;\n  }\n  _ownParameters(type, parentCtor) {\n    const typeStr = type.toString();\n    // If we have no decorators, we only have function.length as metadata.\n    // In that case, to detect whether a child class declared an own constructor or not,\n    // we need to look inside of that constructor to check whether it is\n    // just calling the parent.\n    // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\n    // that sets 'design:paramtypes' to []\n    // if a class inherits from another class but has no ctor declared itself.\n    if (isDelegateCtor(typeStr)) {\n      return null;\n    }\n    // Prefer the direct API.\n    if (type.parameters && type.parameters !== parentCtor.parameters) {\n      return type.parameters;\n    }\n    // API of tsickle for lowering decorators to properties on the class.\n    const tsickleCtorParams = type.ctorParameters;\n    if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\n      // Newer tsickle uses a function closure\n      // Retain the non-function case for compatibility with older tsickle\n      const ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\n      const paramTypes = ctorParameters.map(ctorParam => ctorParam && ctorParam.type);\n      const paramAnnotations = ctorParameters.map(ctorParam => ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators));\n      return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n    }\n    // API for metadata created by invoking the decorators.\n    const paramAnnotations = type.hasOwnProperty(PARAMETERS) && type[PARAMETERS];\n    const paramTypes = this._reflect && this._reflect.getOwnMetadata && this._reflect.getOwnMetadata('design:paramtypes', type);\n    if (paramTypes || paramAnnotations) {\n      return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n    }\n    // If a class has no decorators, at least create metadata\n    // based on function.length.\n    // Note: We know that this is a real constructor as we checked\n    // the content of the constructor above.\n    return newArray(type.length);\n  }\n  parameters(type) {\n    // Note: only report metadata if we have at least one class decorator\n    // to stay in sync with the static reflector.\n    if (!isType(type)) {\n      return [];\n    }\n    const parentCtor = getParentCtor(type);\n    let parameters = this._ownParameters(type, parentCtor);\n    if (!parameters && parentCtor !== Object) {\n      parameters = this.parameters(parentCtor);\n    }\n    return parameters || [];\n  }\n  _ownAnnotations(typeOrFunc, parentCtor) {\n    // Prefer the direct API.\n    if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {\n      let annotations = typeOrFunc.annotations;\n      if (typeof annotations === 'function' && annotations.annotations) {\n        annotations = annotations.annotations;\n      }\n      return annotations;\n    }\n    // API of tsickle for lowering decorators to properties on the class.\n    if (typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators) {\n      return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);\n    }\n    // API for metadata created by invoking the decorators.\n    if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {\n      return typeOrFunc[ANNOTATIONS];\n    }\n    return null;\n  }\n  annotations(typeOrFunc) {\n    if (!isType(typeOrFunc)) {\n      return [];\n    }\n    const parentCtor = getParentCtor(typeOrFunc);\n    const ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\n    const parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\n    return parentAnnotations.concat(ownAnnotations);\n  }\n  _ownPropMetadata(typeOrFunc, parentCtor) {\n    // Prefer the direct API.\n    if (typeOrFunc.propMetadata && typeOrFunc.propMetadata !== parentCtor.propMetadata) {\n      let propMetadata = typeOrFunc.propMetadata;\n      if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\n        propMetadata = propMetadata.propMetadata;\n      }\n      return propMetadata;\n    }\n    // API of tsickle for lowering decorators to properties on the class.\n    if (typeOrFunc.propDecorators && typeOrFunc.propDecorators !== parentCtor.propDecorators) {\n      const propDecorators = typeOrFunc.propDecorators;\n      const propMetadata = {};\n      Object.keys(propDecorators).forEach(prop => {\n        propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);\n      });\n      return propMetadata;\n    }\n    // API for metadata created by invoking the decorators.\n    if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {\n      return typeOrFunc[PROP_METADATA];\n    }\n    return null;\n  }\n  propMetadata(typeOrFunc) {\n    if (!isType(typeOrFunc)) {\n      return {};\n    }\n    const parentCtor = getParentCtor(typeOrFunc);\n    const propMetadata = {};\n    if (parentCtor !== Object) {\n      const parentPropMetadata = this.propMetadata(parentCtor);\n      Object.keys(parentPropMetadata).forEach(propName => {\n        propMetadata[propName] = parentPropMetadata[propName];\n      });\n    }\n    const ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\n    if (ownPropMetadata) {\n      Object.keys(ownPropMetadata).forEach(propName => {\n        const decorators = [];\n        if (propMetadata.hasOwnProperty(propName)) {\n          decorators.push(...propMetadata[propName]);\n        }\n        decorators.push(...ownPropMetadata[propName]);\n        propMetadata[propName] = decorators;\n      });\n    }\n    return propMetadata;\n  }\n  ownPropMetadata(typeOrFunc) {\n    if (!isType(typeOrFunc)) {\n      return {};\n    }\n    return this._ownPropMetadata(typeOrFunc, getParentCtor(typeOrFunc)) || {};\n  }\n  hasLifecycleHook(type, lcProperty) {\n    return type instanceof Type && lcProperty in type.prototype;\n  }\n}\nfunction convertTsickleDecoratorIntoMetadata(decoratorInvocations) {\n  if (!decoratorInvocations) {\n    return [];\n  }\n  return decoratorInvocations.map(decoratorInvocation => {\n    const decoratorType = decoratorInvocation.type;\n    const annotationCls = decoratorType.annotationCls;\n    const annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n    return new annotationCls(...annotationArgs);\n  });\n}\nfunction getParentCtor(ctor) {\n  const parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;\n  const parentCtor = parentProto ? parentProto.constructor : null;\n  // Note: We always use `Object` as the null value\n  // to simplify checking later on.\n  return parentCtor || Object;\n}\n\n/**\n * Inject decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Inject = attachInjectFlag(\n// Disable tslint because `DecoratorFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nmakeParamDecorator('Inject', token => ({\n  token\n})), -1 /* DecoratorFlags.Inject */);\n/**\n * Optional decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Optional =\n// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nattachInjectFlag(makeParamDecorator('Optional'), 8 /* InternalInjectFlags.Optional */);\n/**\n * Self decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Self =\n// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nattachInjectFlag(makeParamDecorator('Self'), 2 /* InternalInjectFlags.Self */);\n/**\n * `SkipSelf` decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst SkipSelf =\n// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nattachInjectFlag(makeParamDecorator('SkipSelf'), 4 /* InternalInjectFlags.SkipSelf */);\n/**\n * Host decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Host =\n// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nattachInjectFlag(makeParamDecorator('Host'), 1 /* InternalInjectFlags.Host */);\n\nlet _reflect = null;\nfunction getReflect() {\n  return _reflect = _reflect || new ReflectionCapabilities();\n}\nfunction reflectDependencies(type) {\n  return convertDependencies(getReflect().parameters(type));\n}\nfunction convertDependencies(deps) {\n  return deps.map(dep => reflectDependency(dep));\n}\nfunction reflectDependency(dep) {\n  const meta = {\n    token: null,\n    attribute: null,\n    host: false,\n    optional: false,\n    self: false,\n    skipSelf: false\n  };\n  if (Array.isArray(dep) && dep.length > 0) {\n    for (let j = 0; j < dep.length; j++) {\n      const param = dep[j];\n      if (param === undefined) {\n        // param may be undefined if type of dep is not set by ngtsc\n        continue;\n      }\n      const proto = Object.getPrototypeOf(param);\n      if (param instanceof Optional || proto.ngMetadataName === 'Optional') {\n        meta.optional = true;\n      } else if (param instanceof SkipSelf || proto.ngMetadataName === 'SkipSelf') {\n        meta.skipSelf = true;\n      } else if (param instanceof Self || proto.ngMetadataName === 'Self') {\n        meta.self = true;\n      } else if (param instanceof Host || proto.ngMetadataName === 'Host') {\n        meta.host = true;\n      } else if (param instanceof Inject) {\n        meta.token = param.token;\n      } else if (param instanceof Attribute) {\n        if (param.attributeName === undefined) {\n          throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && `Attribute name must be defined.`);\n        }\n        meta.attribute = param.attributeName;\n      } else {\n        meta.token = param;\n      }\n    }\n  } else if (dep === undefined || Array.isArray(dep) && dep.length === 0) {\n    meta.token = null;\n  } else {\n    meta.token = dep;\n  }\n  return meta;\n}\n\n/**\n * Used to resolve resource URLs on `@Component` when used with JIT compilation.\n *\n * Example:\n * ```\n * @Component({\n *   selector: 'my-comp',\n *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n * })\n * class MyComponent{\n * }\n *\n * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process\n * // and `MyComponent`'s `@Component.templateUrl` needs to be resolved asynchronously.\n *\n * // Calling `resolveComponentResources()` will resolve `@Component.templateUrl` into\n * // `@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.\n *\n * // Use browser's `fetch()` function as the default resource resolution strategy.\n * resolveComponentResources(fetch).then(() => {\n *   // After resolution all URLs have been converted into `template` strings.\n *   renderComponent(MyComponent);\n * });\n *\n * ```\n *\n * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n * to call this method outside JIT mode.\n *\n * @param resourceResolver a function which is responsible for returning a `Promise` to the\n * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.\n */\nfunction resolveComponentResources(resourceResolver) {\n  // Store all promises which are fetching the resources.\n  const componentResolved = [];\n  // Cache so that we don't fetch the same resource more than once.\n  const urlMap = new Map();\n  function cachedResourceResolve(url) {\n    let promise = urlMap.get(url);\n    if (!promise) {\n      const resp = resourceResolver(url);\n      urlMap.set(url, promise = resp.then(unwrapResponse));\n    }\n    return promise;\n  }\n  componentResourceResolutionQueue.forEach((component, type) => {\n    var _component$styleUrls, _component$styleUrls2;\n    const promises = [];\n    if (component.templateUrl) {\n      promises.push(cachedResourceResolve(component.templateUrl).then(template => {\n        component.template = template;\n      }));\n    }\n    const styles = typeof component.styles === 'string' ? [component.styles] : component.styles || [];\n    component.styles = styles;\n    if (component.styleUrl && (_component$styleUrls = component.styleUrls) !== null && _component$styleUrls !== void 0 && _component$styleUrls.length) {\n      throw new Error('@Component cannot define both `styleUrl` and `styleUrls`. ' + 'Use `styleUrl` if the component has one stylesheet, or `styleUrls` if it has multiple');\n    } else if ((_component$styleUrls2 = component.styleUrls) !== null && _component$styleUrls2 !== void 0 && _component$styleUrls2.length) {\n      const styleOffset = component.styles.length;\n      const styleUrls = component.styleUrls;\n      component.styleUrls.forEach((styleUrl, index) => {\n        styles.push(''); // pre-allocate array.\n        promises.push(cachedResourceResolve(styleUrl).then(style => {\n          styles[styleOffset + index] = style;\n          styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n          if (styleUrls.length == 0) {\n            component.styleUrls = undefined;\n          }\n        }));\n      });\n    } else if (component.styleUrl) {\n      promises.push(cachedResourceResolve(component.styleUrl).then(style => {\n        styles.push(style);\n        component.styleUrl = undefined;\n      }));\n    }\n    const fullyResolved = Promise.all(promises).then(() => componentDefResolved(type));\n    componentResolved.push(fullyResolved);\n  });\n  clearResolutionOfComponentResourcesQueue();\n  return Promise.all(componentResolved).then(() => undefined);\n}\nlet componentResourceResolutionQueue = new Map();\n// Track when existing ɵcmp for a Type is waiting on resources.\nconst componentDefPendingResolution = new Set();\nfunction maybeQueueResolutionOfComponentResources(type, metadata) {\n  if (componentNeedsResolution(metadata)) {\n    componentResourceResolutionQueue.set(type, metadata);\n    componentDefPendingResolution.add(type);\n  }\n}\nfunction isComponentDefPendingResolution(type) {\n  return componentDefPendingResolution.has(type);\n}\nfunction componentNeedsResolution(component) {\n  return !!(component.templateUrl && !component.hasOwnProperty('template') || component.styleUrls && component.styleUrls.length || component.styleUrl);\n}\nfunction clearResolutionOfComponentResourcesQueue() {\n  const old = componentResourceResolutionQueue;\n  componentResourceResolutionQueue = new Map();\n  return old;\n}\nfunction restoreComponentResolutionQueue(queue) {\n  componentDefPendingResolution.clear();\n  queue.forEach((_, type) => componentDefPendingResolution.add(type));\n  componentResourceResolutionQueue = queue;\n}\nfunction isComponentResourceResolutionQueueEmpty() {\n  return componentResourceResolutionQueue.size === 0;\n}\nfunction unwrapResponse(response) {\n  return typeof response == 'string' ? response : response.text();\n}\nfunction componentDefResolved(type) {\n  componentDefPendingResolution.delete(type);\n}\n\n/**\n * A multi-provider token for initialization functions that will run upon construction of an\n * environment injector.\n *\n * @publicApi\n */\nconst ENVIRONMENT_INITIALIZER = new InjectionToken('ENVIRONMENT_INITIALIZER');\n\n/**\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n *\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n * project.\n *\n * @publicApi\n */\nconst INJECTOR = new InjectionToken('INJECTOR',\n// Disable tslint because this is const enum which gets inlined not top level prop access.\n// tslint:disable-next-line: no-toplevel-property-access\n-1 /* InjectorMarkers.Injector */);\n\nconst INJECTOR_DEF_TYPES = new InjectionToken('INJECTOR_DEF_TYPES');\nclass NullInjector {\n  get(token, notFoundValue = THROW_IF_NOT_FOUND) {\n    if (notFoundValue === THROW_IF_NOT_FOUND) {\n      const error = new Error(`NullInjectorError: No provider for ${stringify(token)}!`);\n      error.name = 'NullInjectorError';\n      throw error;\n    }\n    return notFoundValue;\n  }\n}\n\n/**\n * Wrap an array of `Provider`s into `EnvironmentProviders`, preventing them from being accidentally\n * referenced in `@Component` in a component injector.\n */\nfunction makeEnvironmentProviders(providers) {\n  return {\n    ɵproviders: providers\n  };\n}\n/**\n * Collects providers from all NgModules and standalone components, including transitively imported\n * ones.\n *\n * Providers extracted via `importProvidersFrom` are only usable in an application injector or\n * another environment injector (such as a route injector). They should not be used in component\n * providers.\n *\n * More information about standalone components can be found in [this\n * guide](guide/standalone-components).\n *\n * @usageNotes\n * The results of the `importProvidersFrom` call can be used in the `bootstrapApplication` call:\n *\n * ```typescript\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     importProvidersFrom(NgModuleOne, NgModuleTwo)\n *   ]\n * });\n * ```\n *\n * You can also use the `importProvidersFrom` results in the `providers` field of a route, when a\n * standalone component is used:\n *\n * ```typescript\n * export const ROUTES: Route[] = [\n *   {\n *     path: 'foo',\n *     providers: [\n *       importProvidersFrom(NgModuleOne, NgModuleTwo)\n *     ],\n *     component: YourStandaloneComponent\n *   }\n * ];\n * ```\n *\n * @returns Collected providers from the specified list of types.\n * @publicApi\n */\nfunction importProvidersFrom(...sources) {\n  return {\n    ɵproviders: internalImportProvidersFrom(true, sources),\n    ɵfromNgModule: true\n  };\n}\nfunction internalImportProvidersFrom(checkForStandaloneCmp, ...sources) {\n  const providersOut = [];\n  const dedup = new Set(); // already seen types\n  let injectorTypesWithProviders;\n  const collectProviders = provider => {\n    providersOut.push(provider);\n  };\n  deepForEach(sources, source => {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && checkForStandaloneCmp) {\n      const cmpDef = getComponentDef(source);\n      if (cmpDef !== null && cmpDef !== void 0 && cmpDef.standalone) {\n        throw new RuntimeError(800 /* RuntimeErrorCode.IMPORT_PROVIDERS_FROM_STANDALONE */, `Importing providers supports NgModule or ModuleWithProviders but got a standalone component \"${stringifyForError(source)}\"`);\n      }\n    }\n    // Narrow `source` to access the internal type analogue for `ModuleWithProviders`.\n    const internalSource = source;\n    if (walkProviderTree(internalSource, collectProviders, [], dedup)) {\n      injectorTypesWithProviders || (injectorTypesWithProviders = []);\n      injectorTypesWithProviders.push(internalSource);\n    }\n  });\n  // Collect all providers from `ModuleWithProviders` types.\n  if (injectorTypesWithProviders !== undefined) {\n    processInjectorTypesWithProviders(injectorTypesWithProviders, collectProviders);\n  }\n  return providersOut;\n}\n/**\n * Collects all providers from the list of `ModuleWithProviders` and appends them to the provided\n * array.\n */\nfunction processInjectorTypesWithProviders(typesWithProviders, visitor) {\n  for (let i = 0; i < typesWithProviders.length; i++) {\n    const {\n      ngModule,\n      providers\n    } = typesWithProviders[i];\n    deepForEachProvider(providers, provider => {\n      ngDevMode && validateProvider(provider, providers || EMPTY_ARRAY, ngModule);\n      visitor(provider, ngModule);\n    });\n  }\n}\n/**\n * The logic visits an `InjectorType`, an `InjectorTypeWithProviders`, or a standalone\n * `ComponentType`, and all of its transitive providers and collects providers.\n *\n * If an `InjectorTypeWithProviders` that declares providers besides the type is specified,\n * the function will return \"true\" to indicate that the providers of the type definition need\n * to be processed. This allows us to process providers of injector types after all imports of\n * an injector definition are processed. (following View Engine semantics: see FW-1349)\n */\nfunction walkProviderTree(container, visitor, parents, dedup) {\n  container = resolveForwardRef(container);\n  if (!container) return false;\n  // The actual type which had the definition. Usually `container`, but may be an unwrapped type\n  // from `InjectorTypeWithProviders`.\n  let defType = null;\n  let injDef = getInjectorDef(container);\n  const cmpDef = !injDef && getComponentDef(container);\n  if (!injDef && !cmpDef) {\n    // `container` is not an injector type or a component type. It might be:\n    //  * An `InjectorTypeWithProviders` that wraps an injector type.\n    //  * A standalone directive or pipe that got pulled in from a standalone component's\n    //    dependencies.\n    // Try to unwrap it as an `InjectorTypeWithProviders` first.\n    const ngModule = container.ngModule;\n    injDef = getInjectorDef(ngModule);\n    if (injDef) {\n      defType = ngModule;\n    } else {\n      // Not a component or injector type, so ignore it.\n      return false;\n    }\n  } else if (cmpDef && !cmpDef.standalone) {\n    return false;\n  } else {\n    defType = container;\n  }\n  // Check for circular dependencies.\n  if (ngDevMode && parents.indexOf(defType) !== -1) {\n    const defName = stringify(defType);\n    const path = parents.map(stringify);\n    throwCyclicDependencyError(defName, path);\n  }\n  // Check for multiple imports of the same module\n  const isDuplicate = dedup.has(defType);\n  if (cmpDef) {\n    if (isDuplicate) {\n      // This component definition has already been processed.\n      return false;\n    }\n    dedup.add(defType);\n    if (cmpDef.dependencies) {\n      const deps = typeof cmpDef.dependencies === 'function' ? cmpDef.dependencies() : cmpDef.dependencies;\n      for (const dep of deps) {\n        walkProviderTree(dep, visitor, parents, dedup);\n      }\n    }\n  } else if (injDef) {\n    // First, include providers from any imports.\n    if (injDef.imports != null && !isDuplicate) {\n      // Before processing defType's imports, add it to the set of parents. This way, if it ends\n      // up deeply importing itself, this can be detected.\n      ngDevMode && parents.push(defType);\n      // Add it to the set of dedups. This way we can detect multiple imports of the same module\n      dedup.add(defType);\n      let importTypesWithProviders;\n      try {\n        deepForEach(injDef.imports, imported => {\n          if (walkProviderTree(imported, visitor, parents, dedup)) {\n            importTypesWithProviders || (importTypesWithProviders = []);\n            // If the processed import is an injector type with providers, we store it in the\n            // list of import types with providers, so that we can process those afterwards.\n            importTypesWithProviders.push(imported);\n          }\n        });\n      } finally {\n        // Remove it from the parents set when finished.\n        ngDevMode && parents.pop();\n      }\n      // Imports which are declared with providers (TypeWithProviders) need to be processed\n      // after all imported modules are processed. This is similar to how View Engine\n      // processes/merges module imports in the metadata resolver. See: FW-1349.\n      if (importTypesWithProviders !== undefined) {\n        processInjectorTypesWithProviders(importTypesWithProviders, visitor);\n      }\n    }\n    if (!isDuplicate) {\n      // Track the InjectorType and add a provider for it.\n      // It's important that this is done after the def's imports.\n      const factory = getFactoryDef(defType) || (() => new defType());\n      // Append extra providers to make more info available for consumers (to retrieve an injector\n      // type), as well as internally (to calculate an injection scope correctly and eagerly\n      // instantiate a `defType` when an injector is created).\n      // Provider to create `defType` using its factory.\n      visitor({\n        provide: defType,\n        useFactory: factory,\n        deps: EMPTY_ARRAY\n      }, defType);\n      // Make this `defType` available to an internal logic that calculates injector scope.\n      visitor({\n        provide: INJECTOR_DEF_TYPES,\n        useValue: defType,\n        multi: true\n      }, defType);\n      // Provider to eagerly instantiate `defType` via `INJECTOR_INITIALIZER`.\n      visitor({\n        provide: ENVIRONMENT_INITIALIZER,\n        useValue: () => ɵɵinject(defType),\n        multi: true\n      }, defType);\n    }\n    // Next, include providers listed on the definition itself.\n    const defProviders = injDef.providers;\n    if (defProviders != null && !isDuplicate) {\n      const injectorType = container;\n      deepForEachProvider(defProviders, provider => {\n        ngDevMode && validateProvider(provider, defProviders, injectorType);\n        visitor(provider, injectorType);\n      });\n    }\n  } else {\n    // Should not happen, but just in case.\n    return false;\n  }\n  return defType !== container && container.providers !== undefined;\n}\nfunction validateProvider(provider, providers, containerType) {\n  if (isTypeProvider(provider) || isValueProvider(provider) || isFactoryProvider(provider) || isExistingProvider(provider)) {\n    return;\n  }\n  // Here we expect the provider to be a `useClass` provider (by elimination).\n  const classRef = resolveForwardRef(provider && (provider.useClass || provider.provide));\n  if (!classRef) {\n    throwInvalidProviderError(containerType, providers, provider);\n  }\n}\nfunction deepForEachProvider(providers, fn) {\n  for (let provider of providers) {\n    if (isEnvironmentProviders(provider)) {\n      provider = provider.ɵproviders;\n    }\n    if (Array.isArray(provider)) {\n      deepForEachProvider(provider, fn);\n    } else {\n      fn(provider);\n    }\n  }\n}\nconst USE_VALUE$1 = getClosureSafeProperty({\n  provide: String,\n  useValue: getClosureSafeProperty\n});\nfunction isValueProvider(value) {\n  return value !== null && typeof value == 'object' && USE_VALUE$1 in value;\n}\nfunction isExistingProvider(value) {\n  return !!(value && value.useExisting);\n}\nfunction isFactoryProvider(value) {\n  return !!(value && value.useFactory);\n}\nfunction isTypeProvider(value) {\n  return typeof value === 'function';\n}\nfunction isClassProvider(value) {\n  return !!value.useClass;\n}\n\n/**\n * An internal token whose presence in an injector indicates that the injector should treat itself\n * as a root scoped injector when processing requests for unknown tokens which may indicate\n * they are provided in the root scope.\n */\nconst INJECTOR_SCOPE = new InjectionToken('Set Injector scope.');\n\n/**\n * Marker which indicates that a value has not yet been created from the factory function.\n */\nconst NOT_YET = {};\n/**\n * Marker which indicates that the factory function for a token is in the process of being called.\n *\n * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates\n * injection of a dependency has recursively attempted to inject the original token, and there is\n * a circular dependency among the providers.\n */\nconst CIRCULAR = {};\n/**\n * A lazily initialized NullInjector.\n */\nlet NULL_INJECTOR = undefined;\nfunction getNullInjector() {\n  if (NULL_INJECTOR === undefined) {\n    NULL_INJECTOR = new NullInjector();\n  }\n  return NULL_INJECTOR;\n}\n/**\n * An `Injector` that's part of the environment injector hierarchy, which exists outside of the\n * component tree.\n */\nclass EnvironmentInjector {}\nclass R3Injector extends EnvironmentInjector {\n  /**\n   * Flag indicating that this injector was previously destroyed.\n   */\n  get destroyed() {\n    return this._destroyed;\n  }\n  constructor(providers, parent, source, scopes) {\n    super();\n    this.parent = parent;\n    this.source = source;\n    this.scopes = scopes;\n    /**\n     * Map of tokens to records which contain the instances of those tokens.\n     * - `null` value implies that we don't have the record. Used by tree-shakable injectors\n     * to prevent further searches.\n     */\n    this.records = new Map();\n    /**\n     * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\n     */\n    this._ngOnDestroyHooks = new Set();\n    this._onDestroyHooks = [];\n    this._destroyed = false;\n    // Start off by creating Records for every provider.\n    forEachSingleProvider(providers, provider => this.processProvider(provider));\n    // Make sure the INJECTOR token provides this injector.\n    this.records.set(INJECTOR, makeRecord(undefined, this));\n    // And `EnvironmentInjector` if the current injector is supposed to be env-scoped.\n    if (scopes.has('environment')) {\n      this.records.set(EnvironmentInjector, makeRecord(undefined, this));\n    }\n    // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide\n    // any injectable scoped to APP_ROOT_SCOPE.\n    const record = this.records.get(INJECTOR_SCOPE);\n    if (record != null && typeof record.value === 'string') {\n      this.scopes.add(record.value);\n    }\n    this.injectorDefTypes = new Set(this.get(INJECTOR_DEF_TYPES, EMPTY_ARRAY, InjectFlags.Self));\n  }\n  /**\n   * Destroy the injector and release references to every instance or provider associated with it.\n   *\n   * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n   * hook was found.\n   */\n  destroy() {\n    this.assertNotDestroyed();\n    // Set destroyed = true first, in case lifecycle hooks re-enter destroy().\n    this._destroyed = true;\n    try {\n      // Call all the lifecycle hooks.\n      for (const service of this._ngOnDestroyHooks) {\n        service.ngOnDestroy();\n      }\n      const onDestroyHooks = this._onDestroyHooks;\n      // Reset the _onDestroyHooks array before iterating over it to prevent hooks that unregister\n      // themselves from mutating the array during iteration.\n      this._onDestroyHooks = [];\n      for (const hook of onDestroyHooks) {\n        hook();\n      }\n    } finally {\n      // Release all references.\n      this.records.clear();\n      this._ngOnDestroyHooks.clear();\n      this.injectorDefTypes.clear();\n    }\n  }\n  onDestroy(callback) {\n    this.assertNotDestroyed();\n    this._onDestroyHooks.push(callback);\n    return () => this.removeOnDestroy(callback);\n  }\n  runInContext(fn) {\n    this.assertNotDestroyed();\n    const previousInjector = setCurrentInjector(this);\n    const previousInjectImplementation = setInjectImplementation(undefined);\n    let prevInjectContext;\n    if (ngDevMode) {\n      prevInjectContext = setInjectorProfilerContext({\n        injector: this,\n        token: null\n      });\n    }\n    try {\n      return fn();\n    } finally {\n      setCurrentInjector(previousInjector);\n      setInjectImplementation(previousInjectImplementation);\n      ngDevMode && setInjectorProfilerContext(prevInjectContext);\n    }\n  }\n  get(token, notFoundValue = THROW_IF_NOT_FOUND, flags = InjectFlags.Default) {\n    this.assertNotDestroyed();\n    if (token.hasOwnProperty(NG_ENV_ID)) {\n      return token[NG_ENV_ID](this);\n    }\n    flags = convertToBitFlags(flags);\n    // Set the injection context.\n    let prevInjectContext;\n    if (ngDevMode) {\n      prevInjectContext = setInjectorProfilerContext({\n        injector: this,\n        token: token\n      });\n    }\n    const previousInjector = setCurrentInjector(this);\n    const previousInjectImplementation = setInjectImplementation(undefined);\n    try {\n      // Check for the SkipSelf flag.\n      if (!(flags & InjectFlags.SkipSelf)) {\n        // SkipSelf isn't set, check if the record belongs to this injector.\n        let record = this.records.get(token);\n        if (record === undefined) {\n          // No record, but maybe the token is scoped to this injector. Look for an injectable\n          // def with a scope matching this injector.\n          const def = couldBeInjectableType(token) && getInjectableDef(token);\n          if (def && this.injectableDefInScope(def)) {\n            // Found an injectable def and it's scoped to this injector. Pretend as if it was here\n            // all along.\n            if (ngDevMode) {\n              runInInjectorProfilerContext(this, token, () => {\n                emitProviderConfiguredEvent(token);\n              });\n            }\n            record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);\n          } else {\n            record = null;\n          }\n          this.records.set(token, record);\n        }\n        // If a record was found, get the instance for it and return it.\n        if (record != null /* NOT null || undefined */) {\n          return this.hydrate(token, record);\n        }\n      }\n      // Select the next injector based on the Self flag - if self is set, the next injector is\n      // the NullInjector, otherwise it's the parent.\n      const nextInjector = !(flags & InjectFlags.Self) ? this.parent : getNullInjector();\n      // Set the notFoundValue based on the Optional flag - if optional is set and notFoundValue\n      // is undefined, the value is null, otherwise it's the notFoundValue.\n      notFoundValue = flags & InjectFlags.Optional && notFoundValue === THROW_IF_NOT_FOUND ? null : notFoundValue;\n      return nextInjector.get(token, notFoundValue);\n    } catch (e) {\n      if (e.name === 'NullInjectorError') {\n        const path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n        path.unshift(stringify(token));\n        if (previousInjector) {\n          // We still have a parent injector, keep throwing\n          throw e;\n        } else {\n          // Format & throw the final error message when we don't have any previous injector\n          return catchInjectorError(e, token, 'R3InjectorError', this.source);\n        }\n      } else {\n        throw e;\n      }\n    } finally {\n      // Lastly, restore the previous injection context.\n      setInjectImplementation(previousInjectImplementation);\n      setCurrentInjector(previousInjector);\n      ngDevMode && setInjectorProfilerContext(prevInjectContext);\n    }\n  }\n  /** @internal */\n  resolveInjectorInitializers() {\n    const previousInjector = setCurrentInjector(this);\n    const previousInjectImplementation = setInjectImplementation(undefined);\n    let prevInjectContext;\n    if (ngDevMode) {\n      prevInjectContext = setInjectorProfilerContext({\n        injector: this,\n        token: null\n      });\n    }\n    try {\n      const initializers = this.get(ENVIRONMENT_INITIALIZER, EMPTY_ARRAY, InjectFlags.Self);\n      if (ngDevMode && !Array.isArray(initializers)) {\n        throw new RuntimeError(-209 /* RuntimeErrorCode.INVALID_MULTI_PROVIDER */, 'Unexpected type of the `ENVIRONMENT_INITIALIZER` token value ' + `(expected an array, but got ${typeof initializers}). ` + 'Please check that the `ENVIRONMENT_INITIALIZER` token is configured as a ' + '`multi: true` provider.');\n      }\n      for (const initializer of initializers) {\n        initializer();\n      }\n    } finally {\n      setCurrentInjector(previousInjector);\n      setInjectImplementation(previousInjectImplementation);\n      ngDevMode && setInjectorProfilerContext(prevInjectContext);\n    }\n  }\n  toString() {\n    const tokens = [];\n    const records = this.records;\n    for (const token of records.keys()) {\n      tokens.push(stringify(token));\n    }\n    return `R3Injector[${tokens.join(', ')}]`;\n  }\n  assertNotDestroyed() {\n    if (this._destroyed) {\n      throw new RuntimeError(205 /* RuntimeErrorCode.INJECTOR_ALREADY_DESTROYED */, ngDevMode && 'Injector has already been destroyed.');\n    }\n  }\n  /**\n   * Process a `SingleProvider` and add it.\n   */\n  processProvider(provider) {\n    // Determine the token from the provider. Either it's its own token, or has a {provide: ...}\n    // property.\n    provider = resolveForwardRef(provider);\n    let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider && provider.provide);\n    // Construct a `Record` for the provider.\n    const record = providerToRecord(provider);\n    if (ngDevMode) {\n      runInInjectorProfilerContext(this, token, () => {\n        // Emit InjectorProfilerEventType.Create if provider is a value provider because\n        // these are the only providers that do not go through the value hydration logic\n        // where this event would normally be emitted from.\n        if (isValueProvider(provider)) {\n          emitInstanceCreatedByInjectorEvent(provider.useValue);\n        }\n        emitProviderConfiguredEvent(provider);\n      });\n    }\n    if (!isTypeProvider(provider) && provider.multi === true) {\n      // If the provider indicates that it's a multi-provider, process it specially.\n      // First check whether it's been defined already.\n      let multiRecord = this.records.get(token);\n      if (multiRecord) {\n        // It has. Throw a nice error if\n        if (ngDevMode && multiRecord.multi === undefined) {\n          throwMixedMultiProviderError();\n        }\n      } else {\n        multiRecord = makeRecord(undefined, NOT_YET, true);\n        multiRecord.factory = () => injectArgs(multiRecord.multi);\n        this.records.set(token, multiRecord);\n      }\n      token = provider;\n      multiRecord.multi.push(provider);\n    } else {\n      const existing = this.records.get(token);\n      if (ngDevMode && existing && existing.multi !== undefined) {\n        throwMixedMultiProviderError();\n      }\n    }\n    this.records.set(token, record);\n  }\n  hydrate(token, record) {\n    if (ngDevMode && record.value === CIRCULAR) {\n      throwCyclicDependencyError(stringify(token));\n    } else if (record.value === NOT_YET) {\n      record.value = CIRCULAR;\n      if (ngDevMode) {\n        runInInjectorProfilerContext(this, token, () => {\n          record.value = record.factory();\n          emitInstanceCreatedByInjectorEvent(record.value);\n        });\n      } else {\n        record.value = record.factory();\n      }\n    }\n    if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {\n      this._ngOnDestroyHooks.add(record.value);\n    }\n    return record.value;\n  }\n  injectableDefInScope(def) {\n    if (!def.providedIn) {\n      return false;\n    }\n    const providedIn = resolveForwardRef(def.providedIn);\n    if (typeof providedIn === 'string') {\n      return providedIn === 'any' || this.scopes.has(providedIn);\n    } else {\n      return this.injectorDefTypes.has(providedIn);\n    }\n  }\n  removeOnDestroy(callback) {\n    const destroyCBIdx = this._onDestroyHooks.indexOf(callback);\n    if (destroyCBIdx !== -1) {\n      this._onDestroyHooks.splice(destroyCBIdx, 1);\n    }\n  }\n}\nfunction injectableDefOrInjectorDefFactory(token) {\n  // Most tokens will have an injectable def directly on them, which specifies a factory directly.\n  const injectableDef = getInjectableDef(token);\n  const factory = injectableDef !== null ? injectableDef.factory : getFactoryDef(token);\n  if (factory !== null) {\n    return factory;\n  }\n  // InjectionTokens should have an injectable def (ɵprov) and thus should be handled above.\n  // If it's missing that, it's an error.\n  if (token instanceof InjectionToken) {\n    throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && `Token ${stringify(token)} is missing a ɵprov definition.`);\n  }\n  // Undecorated types can sometimes be created if they have no constructor arguments.\n  if (token instanceof Function) {\n    return getUndecoratedInjectableFactory(token);\n  }\n  // There was no way to resolve a factory for this token.\n  throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && 'unreachable');\n}\nfunction getUndecoratedInjectableFactory(token) {\n  // If the token has parameters then it has dependencies that we cannot resolve implicitly.\n  const paramLength = token.length;\n  if (paramLength > 0) {\n    const args = newArray(paramLength, '?');\n    throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && `Can't resolve all parameters for ${stringify(token)}: (${args.join(', ')}).`);\n  }\n  // The constructor function appears to have no parameters.\n  // This might be because it inherits from a super-class. In which case, use an injectable\n  // def from an ancestor if there is one.\n  // Otherwise this really is a simple class with no dependencies, so return a factory that\n  // just instantiates the zero-arg constructor.\n  const inheritedInjectableDef = getInheritedInjectableDef(token);\n  if (inheritedInjectableDef !== null) {\n    return () => inheritedInjectableDef.factory(token);\n  } else {\n    return () => new token();\n  }\n}\nfunction providerToRecord(provider) {\n  if (isValueProvider(provider)) {\n    return makeRecord(undefined, provider.useValue);\n  } else {\n    const factory = providerToFactory(provider);\n    return makeRecord(factory, NOT_YET);\n  }\n}\n/**\n * Converts a `SingleProvider` into a factory function.\n *\n * @param provider provider to convert to factory\n */\nfunction providerToFactory(provider, ngModuleType, providers) {\n  let factory = undefined;\n  if (ngDevMode && isEnvironmentProviders(provider)) {\n    throwInvalidProviderError(undefined, providers, provider);\n  }\n  if (isTypeProvider(provider)) {\n    const unwrappedProvider = resolveForwardRef(provider);\n    return getFactoryDef(unwrappedProvider) || injectableDefOrInjectorDefFactory(unwrappedProvider);\n  } else {\n    if (isValueProvider(provider)) {\n      factory = () => resolveForwardRef(provider.useValue);\n    } else if (isFactoryProvider(provider)) {\n      factory = () => provider.useFactory(...injectArgs(provider.deps || []));\n    } else if (isExistingProvider(provider)) {\n      factory = () => ɵɵinject(resolveForwardRef(provider.useExisting));\n    } else {\n      const classRef = resolveForwardRef(provider && (provider.useClass || provider.provide));\n      if (ngDevMode && !classRef) {\n        throwInvalidProviderError(ngModuleType, providers, provider);\n      }\n      if (hasDeps(provider)) {\n        factory = () => new classRef(...injectArgs(provider.deps));\n      } else {\n        return getFactoryDef(classRef) || injectableDefOrInjectorDefFactory(classRef);\n      }\n    }\n  }\n  return factory;\n}\nfunction makeRecord(factory, value, multi = false) {\n  return {\n    factory: factory,\n    value: value,\n    multi: multi ? [] : undefined\n  };\n}\nfunction hasDeps(value) {\n  return !!value.deps;\n}\nfunction hasOnDestroy(value) {\n  return value !== null && typeof value === 'object' && typeof value.ngOnDestroy === 'function';\n}\nfunction couldBeInjectableType(value) {\n  return typeof value === 'function' || typeof value === 'object' && value instanceof InjectionToken;\n}\nfunction forEachSingleProvider(providers, fn) {\n  for (const provider of providers) {\n    if (Array.isArray(provider)) {\n      forEachSingleProvider(provider, fn);\n    } else if (provider && isEnvironmentProviders(provider)) {\n      forEachSingleProvider(provider.ɵproviders, fn);\n    } else {\n      fn(provider);\n    }\n  }\n}\n\n/**\n * Runs the given function in the [context](guide/dependency-injection-context) of the given\n * `Injector`.\n *\n * Within the function's stack frame, [`inject`](api/core/inject) can be used to inject dependencies\n * from the given `Injector`. Note that `inject` is only usable synchronously, and cannot be used in\n * any asynchronous callbacks or after any `await` points.\n *\n * @param injector the injector which will satisfy calls to [`inject`](api/core/inject) while `fn`\n *     is executing\n * @param fn the closure to be run in the context of `injector`\n * @returns the return value of the function, if any\n * @publicApi\n */\nfunction runInInjectionContext(injector, fn) {\n  if (injector instanceof R3Injector) {\n    injector.assertNotDestroyed();\n  }\n  let prevInjectorProfilerContext;\n  if (ngDevMode) {\n    prevInjectorProfilerContext = setInjectorProfilerContext({\n      injector,\n      token: null\n    });\n  }\n  const prevInjector = setCurrentInjector(injector);\n  const previousInjectImplementation = setInjectImplementation(undefined);\n  try {\n    return fn();\n  } finally {\n    setCurrentInjector(prevInjector);\n    ngDevMode && setInjectorProfilerContext(prevInjectorProfilerContext);\n    setInjectImplementation(previousInjectImplementation);\n  }\n}\n/**\n * Asserts that the current stack frame is within an [injection\n * context](guide/dependency-injection-context) and has access to `inject`.\n *\n * @param debugFn a reference to the function making the assertion (used for the error message).\n *\n * @publicApi\n */\nfunction assertInInjectionContext(debugFn) {\n  // Taking a `Function` instead of a string name here prevents the unminified name of the function\n  // from being retained in the bundle regardless of minification.\n  if (!getInjectImplementation() && !getCurrentInjector()) {\n    throw new RuntimeError(-203 /* RuntimeErrorCode.MISSING_INJECTION_CONTEXT */, ngDevMode && debugFn.name + '() can only be used within an injection context such as a constructor, a factory function, a field initializer, or a function used with `runInInjectionContext`');\n  }\n}\n\n/**\n * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.\n *\n * This should be kept up to date with the public exports of @angular/core.\n */\nconst angularCoreDiEnv = {\n  'ɵɵdefineInjectable': ɵɵdefineInjectable,\n  'ɵɵdefineInjector': ɵɵdefineInjector,\n  'ɵɵinject': ɵɵinject,\n  'ɵɵinvalidFactoryDep': ɵɵinvalidFactoryDep,\n  'resolveForwardRef': resolveForwardRef\n};\n\n/**\n * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting\n * injectable def (`ɵprov`) onto the injectable type.\n */\nfunction compileInjectable(type, meta) {\n  let ngInjectableDef = null;\n  let ngFactoryDef = null;\n  // if NG_PROV_DEF is already defined on this class then don't overwrite it\n  if (!type.hasOwnProperty(NG_PROV_DEF)) {\n    Object.defineProperty(type, NG_PROV_DEF, {\n      get: () => {\n        if (ngInjectableDef === null) {\n          const compiler = getCompilerFacade({\n            usage: 0 /* JitCompilerUsage.Decorator */,\n            kind: 'injectable',\n            type\n          });\n          ngInjectableDef = compiler.compileInjectable(angularCoreDiEnv, `ng:///${type.name}/ɵprov.js`, getInjectableMetadata(type, meta));\n        }\n        return ngInjectableDef;\n      }\n    });\n  }\n  // if NG_FACTORY_DEF is already defined on this class then don't overwrite it\n  if (!type.hasOwnProperty(NG_FACTORY_DEF)) {\n    Object.defineProperty(type, NG_FACTORY_DEF, {\n      get: () => {\n        if (ngFactoryDef === null) {\n          const compiler = getCompilerFacade({\n            usage: 0 /* JitCompilerUsage.Decorator */,\n            kind: 'injectable',\n            type\n          });\n          ngFactoryDef = compiler.compileFactory(angularCoreDiEnv, `ng:///${type.name}/ɵfac.js`, {\n            name: type.name,\n            type,\n            typeArgumentCount: 0,\n            deps: reflectDependencies(type),\n            target: compiler.FactoryTarget.Injectable\n          });\n        }\n        return ngFactoryDef;\n      },\n      // Leave this configurable so that the factories from directives or pipes can take precedence.\n      configurable: true\n    });\n  }\n}\nconst USE_VALUE = getClosureSafeProperty({\n  provide: String,\n  useValue: getClosureSafeProperty\n});\nfunction isUseClassProvider(meta) {\n  return meta.useClass !== undefined;\n}\nfunction isUseValueProvider(meta) {\n  return USE_VALUE in meta;\n}\nfunction isUseFactoryProvider(meta) {\n  return meta.useFactory !== undefined;\n}\nfunction isUseExistingProvider(meta) {\n  return meta.useExisting !== undefined;\n}\nfunction getInjectableMetadata(type, srcMeta) {\n  // Allow the compilation of a class with a `@Injectable()` decorator without parameters\n  const meta = srcMeta || {\n    providedIn: null\n  };\n  const compilerMeta = {\n    name: type.name,\n    type: type,\n    typeArgumentCount: 0,\n    providedIn: meta.providedIn\n  };\n  if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== undefined) {\n    compilerMeta.deps = convertDependencies(meta.deps);\n  }\n  // Check to see if the user explicitly provided a `useXxxx` property.\n  if (isUseClassProvider(meta)) {\n    compilerMeta.useClass = meta.useClass;\n  } else if (isUseValueProvider(meta)) {\n    compilerMeta.useValue = meta.useValue;\n  } else if (isUseFactoryProvider(meta)) {\n    compilerMeta.useFactory = meta.useFactory;\n  } else if (isUseExistingProvider(meta)) {\n    compilerMeta.useExisting = meta.useExisting;\n  }\n  return compilerMeta;\n}\n\n/**\n * Injectable decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Injectable = makeDecorator('Injectable', undefined, undefined, undefined, (type, meta) => compileInjectable(type, meta));\n\n/**\n * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.\n */\nfunction createInjector(defType, parent = null, additionalProviders = null, name) {\n  const injector = createInjectorWithoutInjectorInstances(defType, parent, additionalProviders, name);\n  injector.resolveInjectorInitializers();\n  return injector;\n}\n/**\n * Creates a new injector without eagerly resolving its injector types. Can be used in places\n * where resolving the injector types immediately can lead to an infinite loop. The injector types\n * should be resolved at a later point by calling `_resolveInjectorDefTypes`.\n */\nfunction createInjectorWithoutInjectorInstances(defType, parent = null, additionalProviders = null, name, scopes = new Set()) {\n  const providers = [additionalProviders || EMPTY_ARRAY, importProvidersFrom(defType)];\n  name = name || (typeof defType === 'object' ? undefined : stringify(defType));\n  return new R3Injector(providers, parent || getNullInjector(), name || null, scopes);\n}\n\n/**\n * Concrete injectors implement this interface. Injectors are configured\n * with [providers](guide/glossary#provider) that associate\n * dependencies of various types with [injection tokens](guide/glossary#di-token).\n *\n * @see [\"DI Providers\"](guide/dependency-injection-providers).\n * @see {@link StaticProvider}\n *\n * @usageNotes\n *\n *  The following example creates a service injector instance.\n *\n * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n *\n * ### Usage example\n *\n * {@example core/di/ts/injector_spec.ts region='Injector'}\n *\n * `Injector` returns itself when given `Injector` as a token:\n *\n * {@example core/di/ts/injector_spec.ts region='injectInjector'}\n *\n * @publicApi\n */\nclass Injector {\n  static create(options, parent) {\n    if (Array.isArray(options)) {\n      return createInjector({\n        name: ''\n      }, parent, options, '');\n    } else {\n      var _options$name;\n      const name = (_options$name = options.name) !== null && _options$name !== void 0 ? _options$name : '';\n      return createInjector({\n        name\n      }, options.parent, options.providers, name);\n    }\n  }\n  /** @nocollapse */\n}\n\n/**\n * @module\n * @description\n * The `di` module provides dependency injection container services.\n */\n\n/**\n * This file should not be necessary because node resolution should just default to `./di/index`!\n *\n * However it does not seem to work and it breaks:\n *  - //packages/animations/browser/test:test_web_chromium-local\n *  - //packages/compiler-cli/test:extract_i18n\n *  - //packages/compiler-cli/test:ngc\n *  - //packages/compiler-cli/test:perform_watch\n *  - //packages/compiler-cli/test/diagnostics:check_types\n *  - //packages/compiler-cli/test/transformers:test\n *  - //packages/compiler/test:test\n *  - //tools/public_api_guard:core_api\n *\n * Remove this file once the above is solved or wait until `ngc` is deleted and then it should be\n * safe to delete this file.\n */\n_class = Injector;\n_class.THROW_IF_NOT_FOUND = THROW_IF_NOT_FOUND;\n_class.NULL = /* @__PURE__ */new NullInjector();\n_class.ɵprov = ɵɵdefineInjectable({\n  token: _class,\n  providedIn: 'any',\n  factory: () => ɵɵinject(INJECTOR)\n});\n/**\n * @internal\n * @nocollapse\n */\n_class.__NG_ELEMENT_ID__ = -1 /* InjectorMarkers.Injector */;\n\nfunction isModuleWithProviders(value) {\n  return value.ngModule !== undefined;\n}\nfunction isNgModule(value) {\n  return !!getNgModuleDef(value);\n}\nfunction isPipe(value) {\n  return !!getPipeDef$1(value);\n}\nfunction isDirective(value) {\n  return !!getDirectiveDef(value);\n}\nfunction isComponent(value) {\n  return !!getComponentDef(value);\n}\nfunction getDependencyTypeForError(type) {\n  if (getComponentDef(type)) return 'component';\n  if (getDirectiveDef(type)) return 'directive';\n  if (getPipeDef$1(type)) return 'pipe';\n  return 'type';\n}\nfunction verifyStandaloneImport(depType, importingType) {\n  if (isForwardRef(depType)) {\n    depType = resolveForwardRef(depType);\n    if (!depType) {\n      throw new Error(`Expected forwardRef function, imported from \"${stringifyForError(importingType)}\", to return a standalone entity or NgModule but got \"${stringifyForError(depType) || depType}\".`);\n    }\n  }\n  if (getNgModuleDef(depType) == null) {\n    const def = getComponentDef(depType) || getDirectiveDef(depType) || getPipeDef$1(depType);\n    if (def != null) {\n      // if a component, directive or pipe is imported make sure that it is standalone\n      if (!def.standalone) {\n        throw new Error(`The \"${stringifyForError(depType)}\" ${getDependencyTypeForError(depType)}, imported from \"${stringifyForError(importingType)}\", is not standalone. Did you forget to add the standalone: true flag?`);\n      }\n    } else {\n      // it can be either a module with provider or an unknown (not annotated) type\n      if (isModuleWithProviders(depType)) {\n        throw new Error(`A module with providers was imported from \"${stringifyForError(importingType)}\". Modules with providers are not supported in standalone components imports.`);\n      } else {\n        throw new Error(`The \"${stringifyForError(depType)}\" type, imported from \"${stringifyForError(importingType)}\", must be a standalone component / directive / pipe or an NgModule. Did you forget to add the required @Component / @Directive / @Pipe or @NgModule annotation?`);\n      }\n    }\n  }\n}\n\n/**\n * Most of the use of `document` in Angular is from within the DI system so it is possible to simply\n * inject the `DOCUMENT` token and are done.\n *\n * Ivy is special because it does not rely upon the DI and must get hold of the document some other\n * way.\n *\n * The solution is to define `getDocument()` and `setDocument()` top-level functions for ivy.\n * Wherever ivy needs the global document, it calls `getDocument()` instead.\n *\n * When running ivy outside of a browser environment, it is necessary to call `setDocument()` to\n * tell ivy what the global `document` is.\n *\n * Angular does this for us in each of the standard platforms (`Browser` and `Server`)\n * by calling `setDocument()` when providing the `DOCUMENT` token.\n */\nlet DOCUMENT = undefined;\n/**\n * Tell ivy what the `document` is for this platform.\n *\n * It is only necessary to call this if the current platform is not a browser.\n *\n * @param document The object representing the global `document` in this environment.\n */\nfunction setDocument(document) {\n  DOCUMENT = document;\n}\n/**\n * Access the object that represents the `document` for this platform.\n *\n * Ivy calls this whenever it needs to access the `document` object.\n * For example to create the renderer or to do sanitization.\n */\nfunction getDocument() {\n  if (DOCUMENT !== undefined) {\n    return DOCUMENT;\n  } else if (typeof document !== 'undefined') {\n    return document;\n  }\n  throw new RuntimeError(210 /* RuntimeErrorCode.MISSING_DOCUMENT */, (typeof ngDevMode === 'undefined' || ngDevMode) && `The document object is not available in this context. Make sure the DOCUMENT injection token is provided.`);\n  // No \"document\" can be found. This should only happen if we are running ivy outside Angular and\n  // the current platform is not a browser. Since this is not a supported scenario at the moment\n  // this should not happen in Angular apps.\n  // Once we support running ivy outside of Angular we will need to publish `setDocument()` as a\n  // public API.\n}\n\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") representing a string ID, used\n * primarily for prefixing application attributes and CSS styles when\n * {@link ViewEncapsulation#Emulated} is being used.\n *\n * The token is needed in cases when multiple applications are bootstrapped on a page\n * (for example, using `bootstrapApplication` calls). In this case, ensure that those applications\n * have different `APP_ID` value setup. For example:\n *\n * ```\n * bootstrapApplication(ComponentA, {\n *   providers: [\n *     { provide: APP_ID, useValue: 'app-a' },\n *     // ... other providers ...\n *   ]\n * });\n *\n * bootstrapApplication(ComponentB, {\n *   providers: [\n *     { provide: APP_ID, useValue: 'app-b' },\n *     // ... other providers ...\n *   ]\n * });\n * ```\n *\n * By default, when there is only one application bootstrapped, you don't need to provide the\n * `APP_ID` token (the `ng` will be used as an app ID).\n *\n * @publicApi\n */\nconst APP_ID = new InjectionToken('AppId', {\n  providedIn: 'root',\n  factory: () => DEFAULT_APP_ID\n});\n/** Default value of the `APP_ID` token. */\nconst DEFAULT_APP_ID = 'ng';\n/**\n * A function that is executed when a platform is initialized.\n * @publicApi\n */\nconst PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');\n/**\n * A token that indicates an opaque platform ID.\n * @publicApi\n */\nconst PLATFORM_ID = new InjectionToken('Platform ID', {\n  providedIn: 'platform',\n  factory: () => 'unknown' // set a default platform name, when none set explicitly\n});\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") that indicates the root directory of\n * the application\n * @publicApi\n * @deprecated\n */\nconst PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');\n// We keep this token here, rather than the animations package, so that modules that only care\n// about which animations module is loaded (e.g. the CDK) can retrieve it without having to\n// include extra dependencies. See #44970 for more context.\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") that indicates which animations\n * module has been loaded.\n * @publicApi\n */\nconst ANIMATION_MODULE_TYPE = new InjectionToken('AnimationModuleType');\n// TODO(crisbeto): link to CSP guide here.\n/**\n * Token used to configure the [Content Security Policy](https://web.dev/strict-csp/) nonce that\n * Angular will apply when inserting inline styles. If not provided, Angular will look up its value\n * from the `ngCspNonce` attribute of the application root node.\n *\n * @publicApi\n */\nconst CSP_NONCE = new InjectionToken('CSP nonce', {\n  providedIn: 'root',\n  factory: () => {\n    var _getDocument$body;\n    // Ideally we wouldn't have to use `querySelector` here since we know that the nonce will be on\n    // the root node, but because the token value is used in renderers, it has to be available\n    // *very* early in the bootstrapping process. This should be a fairly shallow search, because\n    // the app won't have been added to the DOM yet. Some approaches that were considered:\n    // 1. Find the root node through `ApplicationRef.components[i].location` - normally this would\n    // be enough for our purposes, but the token is injected very early so the `components` array\n    // isn't populated yet.\n    // 2. Find the root `LView` through the current `LView` - renderers are a prerequisite to\n    // creating the `LView`. This means that no `LView` will have been entered when this factory is\n    // invoked for the root component.\n    // 3. Have the token factory return `() => string` which is invoked when a nonce is requested -\n    // the slightly later execution does allow us to get an `LView` reference, but the fact that\n    // it is a function means that it could be executed at *any* time (including immediately) which\n    // may lead to weird bugs.\n    // 4. Have the `ComponentFactory` read the attribute and provide it to the injector under the\n    // hood - has the same problem as #1 and #2 in that the renderer is used to query for the root\n    // node and the nonce value needs to be available when the renderer is created.\n    return ((_getDocument$body = getDocument().body) === null || _getDocument$body === void 0 || (_getDocument$body = _getDocument$body.querySelector('[ngCspNonce]')) === null || _getDocument$body === void 0 ? void 0 : _getDocument$body.getAttribute('ngCspNonce')) || null;\n  }\n});\nconst IMAGE_CONFIG_DEFAULTS = {\n  breakpoints: [16, 32, 48, 64, 96, 128, 256, 384, 640, 750, 828, 1080, 1200, 1920, 2048, 3840],\n  disableImageSizeWarning: false,\n  disableImageLazyLoadWarning: false\n};\n/**\n * Injection token that configures the image optimized image functionality.\n * See {@link ImageConfig} for additional information about parameters that\n * can be used.\n *\n * @see {@link NgOptimizedImage}\n * @see {@link ImageConfig}\n * @publicApi\n */\nconst IMAGE_CONFIG = new InjectionToken('ImageConfig', {\n  providedIn: 'root',\n  factory: () => IMAGE_CONFIG_DEFAULTS\n});\n\n/**\n *\n * @codeGenApi\n */\nfunction ɵɵresolveWindow(element) {\n  return element.ownerDocument.defaultView;\n}\n/**\n *\n * @codeGenApi\n */\nfunction ɵɵresolveDocument(element) {\n  return element.ownerDocument;\n}\n/**\n *\n * @codeGenApi\n */\nfunction ɵɵresolveBody(element) {\n  return element.ownerDocument.body;\n}\n/**\n * The special delimiter we use to separate property names, prefixes, and suffixes\n * in property binding metadata. See storeBindingMetadata().\n *\n * We intentionally use the Unicode \"REPLACEMENT CHARACTER\" (U+FFFD) as a delimiter\n * because it is a very uncommon character that is unlikely to be part of a user's\n * property names or interpolation strings. If it is in fact used in a property\n * binding, DebugElement.properties will not return the correct value for that\n * binding. However, there should be no runtime effect for real applications.\n *\n * This character is typically rendered as a question mark inside of a diamond.\n * See https://en.wikipedia.org/wiki/Specials_(Unicode_block)\n *\n */\nconst INTERPOLATION_DELIMITER = `�`;\n/**\n * Unwrap a value which might be behind a closure (for forward declaration reasons).\n */\nfunction maybeUnwrapFn(value) {\n  if (value instanceof Function) {\n    return value();\n  } else {\n    return value;\n  }\n}\n/**\n * Detects whether the code is invoked in a browser.\n * Later on, this check should be replaced with a tree-shakable\n * flag (e.g. `!isServer`).\n */\nfunction isPlatformBrowser(injector) {\n  return (injector !== null && injector !== void 0 ? injector : inject(Injector)).get(PLATFORM_ID) === 'browser';\n}\n\n/**\n * Indicates whether to use the runtime dependency tracker for scope calculation in JIT compilation.\n * The value \"false\" means the old code path based on patching scope info into the types will be\n * used.\n *\n * @deprecated For migration purposes only, to be removed soon.\n */\nconst USE_RUNTIME_DEPS_TRACKER_FOR_JIT = true;\n/**\n * An implementation of DepsTrackerApi which will be used for JIT and local compilation.\n */\nclass DepsTracker {\n  constructor() {\n    this.ownerNgModule = new Map();\n    this.ngModulesWithSomeUnresolvedDecls = new Set();\n    this.ngModulesScopeCache = new Map();\n    this.standaloneComponentsScopeCache = new Map();\n  }\n  /**\n   * Attempts to resolve ng module's forward ref declarations as much as possible and add them to\n   * the `ownerNgModule` map. This method normally should be called after the initial parsing when\n   * all the forward refs are resolved (e.g., when trying to render a component)\n   */\n  resolveNgModulesDecls() {\n    if (this.ngModulesWithSomeUnresolvedDecls.size === 0) {\n      return;\n    }\n    for (const moduleType of this.ngModulesWithSomeUnresolvedDecls) {\n      const def = getNgModuleDef(moduleType);\n      if (def !== null && def !== void 0 && def.declarations) {\n        for (const decl of maybeUnwrapFn(def.declarations)) {\n          if (isComponent(decl)) {\n            this.ownerNgModule.set(decl, moduleType);\n          }\n        }\n      }\n    }\n    this.ngModulesWithSomeUnresolvedDecls.clear();\n  }\n  /** @override */\n  getComponentDependencies(type, rawImports) {\n    this.resolveNgModulesDecls();\n    const def = getComponentDef(type);\n    if (def === null) {\n      throw new Error(`Attempting to get component dependencies for a type that is not a component: ${type}`);\n    }\n    if (def.standalone) {\n      const scope = this.getStandaloneComponentScope(type, rawImports);\n      if (scope.compilation.isPoisoned) {\n        return {\n          dependencies: []\n        };\n      }\n      return {\n        dependencies: [...scope.compilation.directives, ...scope.compilation.pipes, ...scope.compilation.ngModules]\n      };\n    } else {\n      if (!this.ownerNgModule.has(type)) {\n        // This component is orphan! No need to handle the error since the component rendering\n        // pipeline (e.g., view_container_ref) will check for this error based on configs.\n        return {\n          dependencies: []\n        };\n      }\n      const scope = this.getNgModuleScope(this.ownerNgModule.get(type));\n      if (scope.compilation.isPoisoned) {\n        return {\n          dependencies: []\n        };\n      }\n      return {\n        dependencies: [...scope.compilation.directives, ...scope.compilation.pipes]\n      };\n    }\n  }\n  /**\n   * @override\n   * This implementation does not make use of param scopeInfo since it assumes the scope info is\n   * already added to the type itself through methods like {@link ɵɵsetNgModuleScope}\n   */\n  registerNgModule(type, scopeInfo) {\n    if (!isNgModule(type)) {\n      throw new Error(`Attempting to register a Type which is not NgModule as NgModule: ${type}`);\n    }\n    // Lazily process the NgModules later when needed.\n    this.ngModulesWithSomeUnresolvedDecls.add(type);\n  }\n  /** @override */\n  clearScopeCacheFor(type) {\n    this.ngModulesScopeCache.delete(type);\n    this.standaloneComponentsScopeCache.delete(type);\n  }\n  /** @override */\n  getNgModuleScope(type) {\n    if (this.ngModulesScopeCache.has(type)) {\n      return this.ngModulesScopeCache.get(type);\n    }\n    const scope = this.computeNgModuleScope(type);\n    this.ngModulesScopeCache.set(type, scope);\n    return scope;\n  }\n  /** Compute NgModule scope afresh. */\n  computeNgModuleScope(type) {\n    const def = getNgModuleDef(type, true);\n    const scope = {\n      exported: {\n        directives: new Set(),\n        pipes: new Set()\n      },\n      compilation: {\n        directives: new Set(),\n        pipes: new Set()\n      }\n    };\n    // Analyzing imports\n    for (const imported of maybeUnwrapFn(def.imports)) {\n      if (isNgModule(imported)) {\n        const importedScope = this.getNgModuleScope(imported);\n        // When this module imports another, the imported module's exported directives and pipes\n        // are added to the compilation scope of this module.\n        addSet(importedScope.exported.directives, scope.compilation.directives);\n        addSet(importedScope.exported.pipes, scope.compilation.pipes);\n      } else if (isStandalone(imported)) {\n        if (isDirective(imported) || isComponent(imported)) {\n          scope.compilation.directives.add(imported);\n        } else if (isPipe(imported)) {\n          scope.compilation.pipes.add(imported);\n        } else {\n          // The standalone thing is neither a component nor a directive nor a pipe ... (what?)\n          throw new RuntimeError(1000 /* RuntimeErrorCode.RUNTIME_DEPS_INVALID_IMPORTED_TYPE */, 'The standalone imported type is neither a component nor a directive nor a pipe');\n        }\n      } else {\n        // The import is neither a module nor a module-with-providers nor a standalone thing. This\n        // is going to be an error. So we short circuit.\n        scope.compilation.isPoisoned = true;\n        break;\n      }\n    }\n    // Analyzing declarations\n    if (!scope.compilation.isPoisoned) {\n      for (const decl of maybeUnwrapFn(def.declarations)) {\n        // Cannot declare another NgModule or a standalone thing\n        if (isNgModule(decl) || isStandalone(decl)) {\n          scope.compilation.isPoisoned = true;\n          break;\n        }\n        if (isPipe(decl)) {\n          scope.compilation.pipes.add(decl);\n        } else {\n          // decl is either a directive or a component. The component may not yet have the ɵcmp due\n          // to async compilation.\n          scope.compilation.directives.add(decl);\n        }\n      }\n    }\n    // Analyzing exports\n    for (const exported of maybeUnwrapFn(def.exports)) {\n      if (isNgModule(exported)) {\n        // When this module exports another, the exported module's exported directives and pipes\n        // are added to both the compilation and exported scopes of this module.\n        const exportedScope = this.getNgModuleScope(exported);\n        // Based on the current logic there is no way to have poisoned exported scope. So no need to\n        // check for it.\n        addSet(exportedScope.exported.directives, scope.exported.directives);\n        addSet(exportedScope.exported.pipes, scope.exported.pipes);\n        // Some test toolings which run in JIT mode depend on this behavior that the exported scope\n        // should also be present in the compilation scope, even though AoT does not support this\n        // and it is also in odds with NgModule metadata definitions. Without this some tests in\n        // Google will fail.\n        addSet(exportedScope.exported.directives, scope.compilation.directives);\n        addSet(exportedScope.exported.pipes, scope.compilation.pipes);\n      } else if (isPipe(exported)) {\n        scope.exported.pipes.add(exported);\n      } else {\n        scope.exported.directives.add(exported);\n      }\n    }\n    return scope;\n  }\n  /** @override */\n  getStandaloneComponentScope(type, rawImports) {\n    if (this.standaloneComponentsScopeCache.has(type)) {\n      return this.standaloneComponentsScopeCache.get(type);\n    }\n    const ans = this.computeStandaloneComponentScope(type, rawImports);\n    this.standaloneComponentsScopeCache.set(type, ans);\n    return ans;\n  }\n  computeStandaloneComponentScope(type, rawImports) {\n    const ans = {\n      compilation: {\n        // Standalone components are always able to self-reference.\n        directives: new Set([type]),\n        pipes: new Set(),\n        ngModules: new Set()\n      }\n    };\n    for (const rawImport of flatten(rawImports !== null && rawImports !== void 0 ? rawImports : [])) {\n      const imported = resolveForwardRef(rawImport);\n      try {\n        verifyStandaloneImport(imported, type);\n      } catch (e) {\n        // Short-circuit if an import is not valid\n        ans.compilation.isPoisoned = true;\n        return ans;\n      }\n      if (isNgModule(imported)) {\n        ans.compilation.ngModules.add(imported);\n        const importedScope = this.getNgModuleScope(imported);\n        // Short-circuit if an imported NgModule has corrupted exported scope.\n        if (importedScope.exported.isPoisoned) {\n          ans.compilation.isPoisoned = true;\n          return ans;\n        }\n        addSet(importedScope.exported.directives, ans.compilation.directives);\n        addSet(importedScope.exported.pipes, ans.compilation.pipes);\n      } else if (isPipe(imported)) {\n        ans.compilation.pipes.add(imported);\n      } else if (isDirective(imported) || isComponent(imported)) {\n        ans.compilation.directives.add(imported);\n      } else {\n        // The imported thing is not module/pipe/directive/component, so we error and short-circuit\n        // here\n        ans.compilation.isPoisoned = true;\n        return ans;\n      }\n    }\n    return ans;\n  }\n  /** @override */\n  isOrphanComponent(cmp) {\n    const def = getComponentDef(cmp);\n    if (!def || def.standalone) {\n      return false;\n    }\n    this.resolveNgModulesDecls();\n    return !this.ownerNgModule.has(cmp);\n  }\n}\nfunction addSet(sourceSet, targetSet) {\n  for (const m of sourceSet) {\n    targetSet.add(m);\n  }\n}\n/** The deps tracker to be used in the current Angular app in dev mode. */\nconst depsTracker = new DepsTracker();\nconst TEST_ONLY = {\n  DepsTracker\n};\n\n/**\n * Map of module-id to the corresponding NgModule.\n */\nconst modules = new Map();\n/**\n * Whether to check for duplicate NgModule registrations.\n *\n * This can be disabled for testing.\n */\nlet checkForDuplicateNgModules = true;\nfunction assertSameOrNotExisting(id, type, incoming) {\n  if (type && type !== incoming && checkForDuplicateNgModules) {\n    throw new Error(`Duplicate module registered for ${id} - ${stringify(type)} vs ${stringify(type.name)}`);\n  }\n}\n/**\n * Adds the given NgModule type to Angular's NgModule registry.\n *\n * This is generated as a side-effect of NgModule compilation. Note that the `id` is passed in\n * explicitly and not read from the NgModule definition. This is for two reasons: it avoids a\n * megamorphic read, and in JIT there's a chicken-and-egg problem where the NgModule may not be\n * fully resolved when it's registered.\n *\n * @codeGenApi\n */\nfunction registerNgModuleType(ngModuleType, id) {\n  const existing = modules.get(id) || null;\n  assertSameOrNotExisting(id, existing, ngModuleType);\n  modules.set(id, ngModuleType);\n}\nfunction clearModulesForTest() {\n  modules.clear();\n}\nfunction getRegisteredNgModuleType(id) {\n  return modules.get(id);\n}\n/**\n * Control whether the NgModule registration system enforces that each NgModule type registered has\n * a unique id.\n *\n * This is useful for testing as the NgModule registry cannot be properly reset between tests with\n * Angular's current API.\n */\nfunction setAllowDuplicateNgModuleIdsForTest(allowDuplicates) {\n  checkForDuplicateNgModules = !allowDuplicates;\n}\n\n/**\n * Defines a schema that allows an NgModule to contain the following:\n * - Non-Angular elements named with dash case (`-`).\n * - Element properties named with dash case (`-`).\n * Dash case is the naming convention for custom elements.\n *\n * @publicApi\n */\nconst CUSTOM_ELEMENTS_SCHEMA = {\n  name: 'custom-elements'\n};\n/**\n * Defines a schema that allows any property on any element.\n *\n * This schema allows you to ignore the errors related to any unknown elements or properties in a\n * template. The usage of this schema is generally discouraged because it prevents useful validation\n * and may hide real errors in your template. Consider using the `CUSTOM_ELEMENTS_SCHEMA` instead.\n *\n * @publicApi\n */\nconst NO_ERRORS_SCHEMA = {\n  name: 'no-errors-schema'\n};\nlet shouldThrowErrorOnUnknownElement = false;\n/**\n * Sets a strict mode for JIT-compiled components to throw an error on unknown elements,\n * instead of just logging the error.\n * (for AOT-compiled ones this check happens at build time).\n */\nfunction ɵsetUnknownElementStrictMode(shouldThrow) {\n  shouldThrowErrorOnUnknownElement = shouldThrow;\n}\n/**\n * Gets the current value of the strict mode.\n */\nfunction ɵgetUnknownElementStrictMode() {\n  return shouldThrowErrorOnUnknownElement;\n}\nlet shouldThrowErrorOnUnknownProperty = false;\n/**\n * Sets a strict mode for JIT-compiled components to throw an error on unknown properties,\n * instead of just logging the error.\n * (for AOT-compiled ones this check happens at build time).\n */\nfunction ɵsetUnknownPropertyStrictMode(shouldThrow) {\n  shouldThrowErrorOnUnknownProperty = shouldThrow;\n}\n/**\n * Gets the current value of the strict mode.\n */\nfunction ɵgetUnknownPropertyStrictMode() {\n  return shouldThrowErrorOnUnknownProperty;\n}\n/**\n * Validates that the element is known at runtime and produces\n * an error if it's not the case.\n * This check is relevant for JIT-compiled components (for AOT-compiled\n * ones this check happens at build time).\n *\n * The element is considered known if either:\n * - it's a known HTML element\n * - it's a known custom element\n * - the element matches any directive\n * - the element is allowed by one of the schemas\n *\n * @param element Element to validate\n * @param lView An `LView` that represents a current component that is being rendered\n * @param tagName Name of the tag to check\n * @param schemas Array of schemas\n * @param hasDirectives Boolean indicating that the element matches any directive\n */\nfunction validateElementIsKnown(element, lView, tagName, schemas, hasDirectives) {\n  // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT\n  // mode where this check happens at compile time. In JIT mode, `schemas` is always present and\n  // defined as an array (as an empty array in case `schemas` field is not defined) and we should\n  // execute the check below.\n  if (schemas === null) return;\n  // If the element matches any directive, it's considered as valid.\n  if (!hasDirectives && tagName !== null) {\n    // The element is unknown if it's an instance of HTMLUnknownElement, or it isn't registered\n    // as a custom element. Note that unknown elements with a dash in their name won't be instances\n    // of HTMLUnknownElement in browsers that support web components.\n    const isUnknown =\n    // Note that we can't check for `typeof HTMLUnknownElement === 'function'` because\n    // Domino doesn't expose HTMLUnknownElement globally.\n    typeof HTMLUnknownElement !== 'undefined' && HTMLUnknownElement && element instanceof HTMLUnknownElement || typeof customElements !== 'undefined' && tagName.indexOf('-') > -1 && !customElements.get(tagName);\n    if (isUnknown && !matchingSchemas(schemas, tagName)) {\n      const isHostStandalone = isHostComponentStandalone(lView);\n      const templateLocation = getTemplateLocationDetails(lView);\n      const schemas = `'${isHostStandalone ? '@Component' : '@NgModule'}.schemas'`;\n      let message = `'${tagName}' is not a known element${templateLocation}:\\n`;\n      message += `1. If '${tagName}' is an Angular component, then verify that it is ${isHostStandalone ? 'included in the \\'@Component.imports\\' of this component' : 'a part of an @NgModule where this component is declared'}.\\n`;\n      if (tagName && tagName.indexOf('-') > -1) {\n        message += `2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the ${schemas} of this component to suppress this message.`;\n      } else {\n        message += `2. To allow any element add 'NO_ERRORS_SCHEMA' to the ${schemas} of this component.`;\n      }\n      if (shouldThrowErrorOnUnknownElement) {\n        throw new RuntimeError(304 /* RuntimeErrorCode.UNKNOWN_ELEMENT */, message);\n      } else {\n        console.error(formatRuntimeError(304 /* RuntimeErrorCode.UNKNOWN_ELEMENT */, message));\n      }\n    }\n  }\n}\n/**\n * Validates that the property of the element is known at runtime and returns\n * false if it's not the case.\n * This check is relevant for JIT-compiled components (for AOT-compiled\n * ones this check happens at build time).\n *\n * The property is considered known if either:\n * - it's a known property of the element\n * - the element is allowed by one of the schemas\n * - the property is used for animations\n *\n * @param element Element to validate\n * @param propName Name of the property to check\n * @param tagName Name of the tag hosting the property\n * @param schemas Array of schemas\n */\nfunction isPropertyValid(element, propName, tagName, schemas) {\n  // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT\n  // mode where this check happens at compile time. In JIT mode, `schemas` is always present and\n  // defined as an array (as an empty array in case `schemas` field is not defined) and we should\n  // execute the check below.\n  if (schemas === null) return true;\n  // The property is considered valid if the element matches the schema, it exists on the element,\n  // or it is synthetic.\n  if (matchingSchemas(schemas, tagName) || propName in element || isAnimationProp(propName)) {\n    return true;\n  }\n  // Note: `typeof Node` returns 'function' in most browsers, but is undefined with domino.\n  return typeof Node === 'undefined' || Node === null || !(element instanceof Node);\n}\n/**\n * Logs or throws an error that a property is not supported on an element.\n *\n * @param propName Name of the invalid property\n * @param tagName Name of the tag hosting the property\n * @param nodeType Type of the node hosting the property\n * @param lView An `LView` that represents a current component\n */\nfunction handleUnknownPropertyError(propName, tagName, nodeType, lView) {\n  // Special-case a situation when a structural directive is applied to\n  // an `<ng-template>` element, for example: `<ng-template *ngIf=\"true\">`.\n  // In this case the compiler generates the `ɵɵtemplate` instruction with\n  // the `null` as the tagName. The directive matching logic at runtime relies\n  // on this effect (see `isInlineTemplate`), thus using the 'ng-template' as\n  // a default value of the `tNode.value` is not feasible at this moment.\n  if (!tagName && nodeType === 4 /* TNodeType.Container */) {\n    tagName = 'ng-template';\n  }\n  const isHostStandalone = isHostComponentStandalone(lView);\n  const templateLocation = getTemplateLocationDetails(lView);\n  let message = `Can't bind to '${propName}' since it isn't a known property of '${tagName}'${templateLocation}.`;\n  const schemas = `'${isHostStandalone ? '@Component' : '@NgModule'}.schemas'`;\n  const importLocation = isHostStandalone ? 'included in the \\'@Component.imports\\' of this component' : 'a part of an @NgModule where this component is declared';\n  if (KNOWN_CONTROL_FLOW_DIRECTIVES.has(propName)) {\n    // Most likely this is a control flow directive (such as `*ngIf`) used in\n    // a template, but the directive or the `CommonModule` is not imported.\n    const correspondingImport = KNOWN_CONTROL_FLOW_DIRECTIVES.get(propName);\n    message += `\\nIf the '${propName}' is an Angular control flow directive, ` + `please make sure that either the '${correspondingImport}' directive or the 'CommonModule' is ${importLocation}.`;\n  } else {\n    // May be an Angular component, which is not imported/declared?\n    message += `\\n1. If '${tagName}' is an Angular component and it has the ` + `'${propName}' input, then verify that it is ${importLocation}.`;\n    // May be a Web Component?\n    if (tagName && tagName.indexOf('-') > -1) {\n      message += `\\n2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' ` + `to the ${schemas} of this component to suppress this message.`;\n      message += `\\n3. To allow any property add 'NO_ERRORS_SCHEMA' to ` + `the ${schemas} of this component.`;\n    } else {\n      // If it's expected, the error can be suppressed by the `NO_ERRORS_SCHEMA` schema.\n      message += `\\n2. To allow any property add 'NO_ERRORS_SCHEMA' to ` + `the ${schemas} of this component.`;\n    }\n  }\n  reportUnknownPropertyError(message);\n}\nfunction reportUnknownPropertyError(message) {\n  if (shouldThrowErrorOnUnknownProperty) {\n    throw new RuntimeError(303 /* RuntimeErrorCode.UNKNOWN_BINDING */, message);\n  } else {\n    console.error(formatRuntimeError(303 /* RuntimeErrorCode.UNKNOWN_BINDING */, message));\n  }\n}\n/**\n * WARNING: this is a **dev-mode only** function (thus should always be guarded by the `ngDevMode`)\n * and must **not** be used in production bundles. The function makes megamorphic reads, which might\n * be too slow for production mode and also it relies on the constructor function being available.\n *\n * Gets a reference to the host component def (where a current component is declared).\n *\n * @param lView An `LView` that represents a current component that is being rendered.\n */\nfunction getDeclarationComponentDef(lView) {\n  !ngDevMode && throwError('Must never be called in production mode');\n  const declarationLView = lView[DECLARATION_COMPONENT_VIEW];\n  const context = declarationLView[CONTEXT];\n  // Unable to obtain a context.\n  if (!context) return null;\n  return context.constructor ? getComponentDef(context.constructor) : null;\n}\n/**\n * WARNING: this is a **dev-mode only** function (thus should always be guarded by the `ngDevMode`)\n * and must **not** be used in production bundles. The function makes megamorphic reads, which might\n * be too slow for production mode.\n *\n * Checks if the current component is declared inside of a standalone component template.\n *\n * @param lView An `LView` that represents a current component that is being rendered.\n */\nfunction isHostComponentStandalone(lView) {\n  !ngDevMode && throwError('Must never be called in production mode');\n  const componentDef = getDeclarationComponentDef(lView);\n  // Treat host component as non-standalone if we can't obtain the def.\n  return !!(componentDef !== null && componentDef !== void 0 && componentDef.standalone);\n}\n/**\n * WARNING: this is a **dev-mode only** function (thus should always be guarded by the `ngDevMode`)\n * and must **not** be used in production bundles. The function makes megamorphic reads, which might\n * be too slow for production mode.\n *\n * Constructs a string describing the location of the host component template. The function is used\n * in dev mode to produce error messages.\n *\n * @param lView An `LView` that represents a current component that is being rendered.\n */\nfunction getTemplateLocationDetails(lView) {\n  var _hostComponentDef$typ;\n  !ngDevMode && throwError('Must never be called in production mode');\n  const hostComponentDef = getDeclarationComponentDef(lView);\n  const componentClassName = hostComponentDef === null || hostComponentDef === void 0 || (_hostComponentDef$typ = hostComponentDef.type) === null || _hostComponentDef$typ === void 0 ? void 0 : _hostComponentDef$typ.name;\n  return componentClassName ? ` (used in the '${componentClassName}' component template)` : '';\n}\n/**\n * The set of known control flow directives and their corresponding imports.\n * We use this set to produce a more precises error message with a note\n * that the `CommonModule` should also be included.\n */\nconst KNOWN_CONTROL_FLOW_DIRECTIVES = new Map([['ngIf', 'NgIf'], ['ngFor', 'NgFor'], ['ngSwitchCase', 'NgSwitchCase'], ['ngSwitchDefault', 'NgSwitchDefault']]);\n/**\n * Returns true if the tag name is allowed by specified schemas.\n * @param schemas Array of schemas\n * @param tagName Name of the tag\n */\nfunction matchingSchemas(schemas, tagName) {\n  if (schemas !== null) {\n    for (let i = 0; i < schemas.length; i++) {\n      const schema = schemas[i];\n      if (schema === NO_ERRORS_SCHEMA || schema === CUSTOM_ELEMENTS_SCHEMA && tagName && tagName.indexOf('-') > -1) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/**\n * The name of an attribute that can be added to the hydration boundary node\n * (component host node) to disable hydration for the content within that boundary.\n */\nconst SKIP_HYDRATION_ATTR_NAME = 'ngSkipHydration';\n/** Lowercase name of the `ngSkipHydration` attribute used for case-insensitive comparisons. */\nconst SKIP_HYDRATION_ATTR_NAME_LOWER_CASE = 'ngskiphydration';\n/**\n * Helper function to check if a given TNode has the 'ngSkipHydration' attribute.\n */\nfunction hasSkipHydrationAttrOnTNode(tNode) {\n  const attrs = tNode.mergedAttrs;\n  if (attrs === null) return false;\n  // only ever look at the attribute name and skip the values\n  for (let i = 0; i < attrs.length; i += 2) {\n    const value = attrs[i];\n    // This is a marker, which means that the static attributes section is over,\n    // so we can exit early.\n    if (typeof value === 'number') return false;\n    if (typeof value === 'string' && value.toLowerCase() === SKIP_HYDRATION_ATTR_NAME_LOWER_CASE) {\n      return true;\n    }\n  }\n  return false;\n}\n/**\n * Helper function to check if a given RElement has the 'ngSkipHydration' attribute.\n */\nfunction hasSkipHydrationAttrOnRElement(rNode) {\n  return rNode.hasAttribute(SKIP_HYDRATION_ATTR_NAME);\n}\n/**\n * Checks whether a TNode has a flag to indicate that it's a part of\n * a skip hydration block.\n */\nfunction hasInSkipHydrationBlockFlag(tNode) {\n  return (tNode.flags & 128 /* TNodeFlags.inSkipHydrationBlock */) === 128 /* TNodeFlags.inSkipHydrationBlock */;\n}\n/**\n * Helper function that determines if a given node is within a skip hydration block\n * by navigating up the TNode tree to see if any parent nodes have skip hydration\n * attribute.\n */\nfunction isInSkipHydrationBlock(tNode) {\n  if (hasInSkipHydrationBlockFlag(tNode)) {\n    return true;\n  }\n  let currentTNode = tNode.parent;\n  while (currentTNode) {\n    if (hasInSkipHydrationBlockFlag(tNode) || hasSkipHydrationAttrOnTNode(currentTNode)) {\n      return true;\n    }\n    currentTNode = currentTNode.parent;\n  }\n  return false;\n}\n\n/**\n * Flags for renderer-specific style modifiers.\n * @publicApi\n */\nvar RendererStyleFlags2;\n(function (RendererStyleFlags2) {\n  // TODO(misko): This needs to be refactored into a separate file so that it can be imported from\n  // `node_manipulation.ts` Currently doing the import cause resolution order to change and fails\n  // the tests. The work around is to have hard coded value in `node_manipulation.ts` for now.\n  /**\n   * Marks a style as important.\n   */\n  RendererStyleFlags2[RendererStyleFlags2[\"Important\"] = 1] = \"Important\";\n  /**\n   * Marks a style as using dash case naming (this-is-dash-case).\n   */\n  RendererStyleFlags2[RendererStyleFlags2[\"DashCase\"] = 2] = \"DashCase\";\n})(RendererStyleFlags2 || (RendererStyleFlags2 = {}));\n\n/**\n * Disallowed strings in the comment.\n *\n * see: https://html.spec.whatwg.org/multipage/syntax.html#comments\n */\nconst COMMENT_DISALLOWED = /^>|^->|<!--|-->|--!>|<!-$/g;\n/**\n * Delimiter in the disallowed strings which needs to be wrapped with zero with character.\n */\nconst COMMENT_DELIMITER = /(<|>)/g;\nconst COMMENT_DELIMITER_ESCAPED = '\\u200B$1\\u200B';\n/**\n * Escape the content of comment strings so that it can be safely inserted into a comment node.\n *\n * The issue is that HTML does not specify any way to escape comment end text inside the comment.\n * Consider: `<!-- The way you close a comment is with \">\", and \"->\" at the beginning or by \"-->\" or\n * \"--!>\" at the end. -->`. Above the `\"-->\"` is meant to be text not an end to the comment. This\n * can be created programmatically through DOM APIs. (`<!--` are also disallowed.)\n *\n * see: https://html.spec.whatwg.org/multipage/syntax.html#comments\n *\n * ```\n * div.innerHTML = div.innerHTML\n * ```\n *\n * One would expect that the above code would be safe to do, but it turns out that because comment\n * text is not escaped, the comment may contain text which will prematurely close the comment\n * opening up the application for XSS attack. (In SSR we programmatically create comment nodes which\n * may contain such text and expect them to be safe.)\n *\n * This function escapes the comment text by looking for comment delimiters (`<` and `>`) and\n * surrounding them with `_>_` where the `_` is a zero width space `\\u200B`. The result is that if a\n * comment contains any of the comment start/end delimiters (such as `<!--`, `-->` or `--!>`) the\n * text it will render normally but it will not cause the HTML parser to close/open the comment.\n *\n * @param value text to make safe for comment node by escaping the comment open/close character\n *     sequence.\n */\nfunction escapeCommentText(value) {\n  return value.replace(COMMENT_DISALLOWED, text => text.replace(COMMENT_DELIMITER, COMMENT_DELIMITER_ESCAPED));\n}\n\n// Keeps track of the currently-active LViews.\nconst TRACKED_LVIEWS = new Map();\n// Used for generating unique IDs for LViews.\nlet uniqueIdCounter = 0;\n/** Gets a unique ID that can be assigned to an LView. */\nfunction getUniqueLViewId() {\n  return uniqueIdCounter++;\n}\n/** Starts tracking an LView. */\nfunction registerLView(lView) {\n  ngDevMode && assertNumber(lView[ID], 'LView must have an ID in order to be registered');\n  TRACKED_LVIEWS.set(lView[ID], lView);\n}\n/** Gets an LView by its unique ID. */\nfunction getLViewById(id) {\n  ngDevMode && assertNumber(id, 'ID used for LView lookup must be a number');\n  return TRACKED_LVIEWS.get(id) || null;\n}\n/** Stops tracking an LView. */\nfunction unregisterLView(lView) {\n  ngDevMode && assertNumber(lView[ID], 'Cannot stop tracking an LView that does not have an ID');\n  TRACKED_LVIEWS.delete(lView[ID]);\n}\n\n/**\n * The internal view context which is specific to a given DOM element, directive or\n * component instance. Each value in here (besides the LView and element node details)\n * can be present, null or undefined. If undefined then it implies the value has not been\n * looked up yet, otherwise, if null, then a lookup was executed and nothing was found.\n *\n * Each value will get filled when the respective value is examined within the getContext\n * function. The component, element and each directive instance will share the same instance\n * of the context.\n */\nclass LContext {\n  /** Component's parent view data. */\n  get lView() {\n    return getLViewById(this.lViewId);\n  }\n  constructor(\n  /**\n   * ID of the component's parent view data.\n   */\n  lViewId,\n  /**\n   * The index instance of the node.\n   */\n  nodeIndex,\n  /**\n   * The instance of the DOM node that is attached to the lNode.\n   */\n  native) {\n    this.lViewId = lViewId;\n    this.nodeIndex = nodeIndex;\n    this.native = native;\n  }\n}\n\n/**\n * Returns the matching `LContext` data for a given DOM node, directive or component instance.\n *\n * This function will examine the provided DOM element, component, or directive instance\\'s\n * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched\n * value will be that of the newly created `LContext`.\n *\n * If the monkey-patched value is the `LView` instance then the context value for that\n * target will be created and the monkey-patch reference will be updated. Therefore when this\n * function is called it may mutate the provided element\\'s, component\\'s or any of the associated\n * directive\\'s monkey-patch values.\n *\n * If the monkey-patch value is not detected then the code will walk up the DOM until an element\n * is found which contains a monkey-patch reference. When that occurs then the provided element\n * will be updated with a new context (which is then returned). If the monkey-patch value is not\n * detected for a component/directive instance then it will throw an error (all components and\n * directives should be automatically monkey-patched by ivy).\n *\n * @param target Component, Directive or DOM Node.\n */\nfunction getLContext(target) {\n  let mpValue = readPatchedData(target);\n  if (mpValue) {\n    // only when it's an array is it considered an LView instance\n    // ... otherwise it's an already constructed LContext instance\n    if (isLView(mpValue)) {\n      const lView = mpValue;\n      let nodeIndex;\n      let component = undefined;\n      let directives = undefined;\n      if (isComponentInstance(target)) {\n        nodeIndex = findViaComponent(lView, target);\n        if (nodeIndex == -1) {\n          throw new Error('The provided component was not found in the application');\n        }\n        component = target;\n      } else if (isDirectiveInstance(target)) {\n        nodeIndex = findViaDirective(lView, target);\n        if (nodeIndex == -1) {\n          throw new Error('The provided directive was not found in the application');\n        }\n        directives = getDirectivesAtNodeIndex(nodeIndex, lView);\n      } else {\n        nodeIndex = findViaNativeElement(lView, target);\n        if (nodeIndex == -1) {\n          return null;\n        }\n      }\n      // the goal is not to fill the entire context full of data because the lookups\n      // are expensive. Instead, only the target data (the element, component, container, ICU\n      // expression or directive details) are filled into the context. If called multiple times\n      // with different target values then the missing target data will be filled in.\n      const native = unwrapRNode(lView[nodeIndex]);\n      const existingCtx = readPatchedData(native);\n      const context = existingCtx && !Array.isArray(existingCtx) ? existingCtx : createLContext(lView, nodeIndex, native);\n      // only when the component has been discovered then update the monkey-patch\n      if (component && context.component === undefined) {\n        context.component = component;\n        attachPatchData(context.component, context);\n      }\n      // only when the directives have been discovered then update the monkey-patch\n      if (directives && context.directives === undefined) {\n        context.directives = directives;\n        for (let i = 0; i < directives.length; i++) {\n          attachPatchData(directives[i], context);\n        }\n      }\n      attachPatchData(context.native, context);\n      mpValue = context;\n    }\n  } else {\n    const rElement = target;\n    ngDevMode && assertDomNode(rElement);\n    // if the context is not found then we need to traverse upwards up the DOM\n    // to find the nearest element that has already been monkey patched with data\n    let parent = rElement;\n    while (parent = parent.parentNode) {\n      const parentContext = readPatchedData(parent);\n      if (parentContext) {\n        const lView = Array.isArray(parentContext) ? parentContext : parentContext.lView;\n        // the edge of the app was also reached here through another means\n        // (maybe because the DOM was changed manually).\n        if (!lView) {\n          return null;\n        }\n        const index = findViaNativeElement(lView, rElement);\n        if (index >= 0) {\n          const native = unwrapRNode(lView[index]);\n          const context = createLContext(lView, index, native);\n          attachPatchData(native, context);\n          mpValue = context;\n          break;\n        }\n      }\n    }\n  }\n  return mpValue || null;\n}\n/**\n * Creates an empty instance of a `LContext` context\n */\nfunction createLContext(lView, nodeIndex, native) {\n  return new LContext(lView[ID], nodeIndex, native);\n}\n/**\n * Takes a component instance and returns the view for that component.\n *\n * @param componentInstance\n * @returns The component's view\n */\nfunction getComponentViewByInstance(componentInstance) {\n  let patchedData = readPatchedData(componentInstance);\n  let lView;\n  if (isLView(patchedData)) {\n    const contextLView = patchedData;\n    const nodeIndex = findViaComponent(contextLView, componentInstance);\n    lView = getComponentLViewByIndex(nodeIndex, contextLView);\n    const context = createLContext(contextLView, nodeIndex, lView[HOST]);\n    context.component = componentInstance;\n    attachPatchData(componentInstance, context);\n    attachPatchData(context.native, context);\n  } else {\n    const context = patchedData;\n    const contextLView = context.lView;\n    ngDevMode && assertLView(contextLView);\n    lView = getComponentLViewByIndex(context.nodeIndex, contextLView);\n  }\n  return lView;\n}\n/**\n * This property will be monkey-patched on elements, components and directives.\n */\nconst MONKEY_PATCH_KEY_NAME = '__ngContext__';\n/**\n * Assigns the given data to the given target (which could be a component,\n * directive or DOM node instance) using monkey-patching.\n */\nfunction attachPatchData(target, data) {\n  ngDevMode && assertDefined(target, 'Target expected');\n  // Only attach the ID of the view in order to avoid memory leaks (see #41047). We only do this\n  // for `LView`, because we have control over when an `LView` is created and destroyed, whereas\n  // we can't know when to remove an `LContext`.\n  if (isLView(data)) {\n    target[MONKEY_PATCH_KEY_NAME] = data[ID];\n    registerLView(data);\n  } else {\n    target[MONKEY_PATCH_KEY_NAME] = data;\n  }\n}\n/**\n * Returns the monkey-patch value data present on the target (which could be\n * a component, directive or a DOM node).\n */\nfunction readPatchedData(target) {\n  ngDevMode && assertDefined(target, 'Target expected');\n  const data = target[MONKEY_PATCH_KEY_NAME];\n  return typeof data === 'number' ? getLViewById(data) : data || null;\n}\nfunction readPatchedLView(target) {\n  const value = readPatchedData(target);\n  if (value) {\n    return isLView(value) ? value : value.lView;\n  }\n  return null;\n}\nfunction isComponentInstance(instance) {\n  return instance && instance.constructor && instance.constructor.ɵcmp;\n}\nfunction isDirectiveInstance(instance) {\n  return instance && instance.constructor && instance.constructor.ɵdir;\n}\n/**\n * Locates the element within the given LView and returns the matching index\n */\nfunction findViaNativeElement(lView, target) {\n  const tView = lView[TVIEW];\n  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {\n    if (unwrapRNode(lView[i]) === target) {\n      return i;\n    }\n  }\n  return -1;\n}\n/**\n * Locates the next tNode (child, sibling or parent).\n */\nfunction traverseNextElement(tNode) {\n  if (tNode.child) {\n    return tNode.child;\n  } else if (tNode.next) {\n    return tNode.next;\n  } else {\n    // Let's take the following template: <div><span>text</span></div><component/>\n    // After checking the text node, we need to find the next parent that has a \"next\" TNode,\n    // in this case the parent `div`, so that we can find the component.\n    while (tNode.parent && !tNode.parent.next) {\n      tNode = tNode.parent;\n    }\n    return tNode.parent && tNode.parent.next;\n  }\n}\n/**\n * Locates the component within the given LView and returns the matching index\n */\nfunction findViaComponent(lView, componentInstance) {\n  const componentIndices = lView[TVIEW].components;\n  if (componentIndices) {\n    for (let i = 0; i < componentIndices.length; i++) {\n      const elementComponentIndex = componentIndices[i];\n      const componentView = getComponentLViewByIndex(elementComponentIndex, lView);\n      if (componentView[CONTEXT] === componentInstance) {\n        return elementComponentIndex;\n      }\n    }\n  } else {\n    const rootComponentView = getComponentLViewByIndex(HEADER_OFFSET, lView);\n    const rootComponent = rootComponentView[CONTEXT];\n    if (rootComponent === componentInstance) {\n      // we are dealing with the root element here therefore we know that the\n      // element is the very first element after the HEADER data in the lView\n      return HEADER_OFFSET;\n    }\n  }\n  return -1;\n}\n/**\n * Locates the directive within the given LView and returns the matching index\n */\nfunction findViaDirective(lView, directiveInstance) {\n  // if a directive is monkey patched then it will (by default)\n  // have a reference to the LView of the current view. The\n  // element bound to the directive being search lives somewhere\n  // in the view data. We loop through the nodes and check their\n  // list of directives for the instance.\n  let tNode = lView[TVIEW].firstChild;\n  while (tNode) {\n    const directiveIndexStart = tNode.directiveStart;\n    const directiveIndexEnd = tNode.directiveEnd;\n    for (let i = directiveIndexStart; i < directiveIndexEnd; i++) {\n      if (lView[i] === directiveInstance) {\n        return tNode.index;\n      }\n    }\n    tNode = traverseNextElement(tNode);\n  }\n  return -1;\n}\n/**\n * Returns a list of directives applied to a node at a specific index. The list includes\n * directives matched by selector and any host directives, but it excludes components.\n * Use `getComponentAtNodeIndex` to find the component applied to a node.\n *\n * @param nodeIndex The node index\n * @param lView The target view data\n */\nfunction getDirectivesAtNodeIndex(nodeIndex, lView) {\n  const tNode = lView[TVIEW].data[nodeIndex];\n  if (tNode.directiveStart === 0) return EMPTY_ARRAY;\n  const results = [];\n  for (let i = tNode.directiveStart; i < tNode.directiveEnd; i++) {\n    const directiveInstance = lView[i];\n    if (!isComponentInstance(directiveInstance)) {\n      results.push(directiveInstance);\n    }\n  }\n  return results;\n}\nfunction getComponentAtNodeIndex(nodeIndex, lView) {\n  const tNode = lView[TVIEW].data[nodeIndex];\n  const {\n    directiveStart,\n    componentOffset\n  } = tNode;\n  return componentOffset > -1 ? lView[directiveStart + componentOffset] : null;\n}\n/**\n * Returns a map of local references (local reference name => element or directive instance) that\n * exist on a given element.\n */\nfunction discoverLocalRefs(lView, nodeIndex) {\n  const tNode = lView[TVIEW].data[nodeIndex];\n  if (tNode && tNode.localNames) {\n    const result = {};\n    let localIndex = tNode.index + 1;\n    for (let i = 0; i < tNode.localNames.length; i += 2) {\n      result[tNode.localNames[i]] = lView[localIndex];\n      localIndex++;\n    }\n    return result;\n  }\n  return null;\n}\nlet _icuContainerIterate;\n/**\n * Iterator which provides ability to visit all of the `TIcuContainerNode` root `RNode`s.\n */\nfunction icuContainerIterate(tIcuContainerNode, lView) {\n  return _icuContainerIterate(tIcuContainerNode, lView);\n}\n/**\n * Ensures that `IcuContainerVisitor`'s implementation is present.\n *\n * This function is invoked when i18n instruction comes across an ICU. The purpose is to allow the\n * bundler to tree shake ICU logic and only load it if ICU instruction is executed.\n */\nfunction ensureIcuContainerVisitorLoaded(loader) {\n  if (_icuContainerIterate === undefined) {\n    // Do not inline this function. We want to keep `ensureIcuContainerVisitorLoaded` light, so it\n    // can be inlined into call-site.\n    _icuContainerIterate = loader();\n  }\n}\n\n/**\n * Gets the parent LView of the passed LView, if the PARENT is an LContainer, will get the parent of\n * that LContainer, which is an LView\n * @param lView the lView whose parent to get\n */\nfunction getLViewParent(lView) {\n  ngDevMode && assertLView(lView);\n  const parent = lView[PARENT];\n  return isLContainer(parent) ? parent[PARENT] : parent;\n}\n/**\n * Retrieve the root view from any component or `LView` by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param componentOrLView any component or `LView`\n */\nfunction getRootView(componentOrLView) {\n  ngDevMode && assertDefined(componentOrLView, 'component');\n  let lView = isLView(componentOrLView) ? componentOrLView : readPatchedLView(componentOrLView);\n  while (lView && !(lView[FLAGS] & 512 /* LViewFlags.IsRoot */)) {\n    lView = getLViewParent(lView);\n  }\n  ngDevMode && assertLView(lView);\n  return lView;\n}\n/**\n * Returns the context information associated with the application where the target is situated. It\n * does this by walking the parent views until it gets to the root view, then getting the context\n * off of that.\n *\n * @param viewOrComponent the `LView` or component to get the root context for.\n */\nfunction getRootContext(viewOrComponent) {\n  const rootView = getRootView(viewOrComponent);\n  ngDevMode && assertDefined(rootView[CONTEXT], 'Root view has no context. Perhaps it is disconnected?');\n  return rootView[CONTEXT];\n}\n/**\n * Gets the first `LContainer` in the LView or `null` if none exists.\n */\nfunction getFirstLContainer(lView) {\n  return getNearestLContainer(lView[CHILD_HEAD]);\n}\n/**\n * Gets the next `LContainer` that is a sibling of the given container.\n */\nfunction getNextLContainer(container) {\n  return getNearestLContainer(container[NEXT]);\n}\nfunction getNearestLContainer(viewOrContainer) {\n  while (viewOrContainer !== null && !isLContainer(viewOrContainer)) {\n    viewOrContainer = viewOrContainer[NEXT];\n  }\n  return viewOrContainer;\n}\n\n/**\n * NOTE: for performance reasons, the possible actions are inlined within the function instead of\n * being passed as an argument.\n */\nfunction applyToElementOrContainer(action, renderer, parent, lNodeToHandle, beforeNode) {\n  // If this slot was allocated for a text node dynamically created by i18n, the text node itself\n  // won't be created until i18nApply() in the update block, so this node should be skipped.\n  // For more info, see \"ICU expressions should work inside an ngTemplateOutlet inside an ngFor\"\n  // in `i18n_spec.ts`.\n  if (lNodeToHandle != null) {\n    let lContainer;\n    let isComponent = false;\n    // We are expecting an RNode, but in the case of a component or LContainer the `RNode` is\n    // wrapped in an array which needs to be unwrapped. We need to know if it is a component and if\n    // it has LContainer so that we can process all of those cases appropriately.\n    if (isLContainer(lNodeToHandle)) {\n      lContainer = lNodeToHandle;\n    } else if (isLView(lNodeToHandle)) {\n      isComponent = true;\n      ngDevMode && assertDefined(lNodeToHandle[HOST], 'HOST must be defined for a component LView');\n      lNodeToHandle = lNodeToHandle[HOST];\n    }\n    const rNode = unwrapRNode(lNodeToHandle);\n    if (action === 0 /* WalkTNodeTreeAction.Create */ && parent !== null) {\n      if (beforeNode == null) {\n        nativeAppendChild(renderer, parent, rNode);\n      } else {\n        nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);\n      }\n    } else if (action === 1 /* WalkTNodeTreeAction.Insert */ && parent !== null) {\n      nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);\n    } else if (action === 2 /* WalkTNodeTreeAction.Detach */) {\n      nativeRemoveNode(renderer, rNode, isComponent);\n    } else if (action === 3 /* WalkTNodeTreeAction.Destroy */) {\n      ngDevMode && ngDevMode.rendererDestroyNode++;\n      renderer.destroyNode(rNode);\n    }\n    if (lContainer != null) {\n      applyContainer(renderer, action, lContainer, parent, beforeNode);\n    }\n  }\n}\nfunction createTextNode(renderer, value) {\n  ngDevMode && ngDevMode.rendererCreateTextNode++;\n  ngDevMode && ngDevMode.rendererSetText++;\n  return renderer.createText(value);\n}\nfunction updateTextNode(renderer, rNode, value) {\n  ngDevMode && ngDevMode.rendererSetText++;\n  renderer.setValue(rNode, value);\n}\nfunction createCommentNode(renderer, value) {\n  ngDevMode && ngDevMode.rendererCreateComment++;\n  return renderer.createComment(escapeCommentText(value));\n}\n/**\n * Creates a native element from a tag name, using a renderer.\n * @param renderer A renderer to use\n * @param name the tag name\n * @param namespace Optional namespace for element.\n * @returns the element created\n */\nfunction createElementNode(renderer, name, namespace) {\n  ngDevMode && ngDevMode.rendererCreateElement++;\n  return renderer.createElement(name, namespace);\n}\n/**\n * Removes all DOM elements associated with a view.\n *\n * Because some root nodes of the view may be containers, we sometimes need\n * to propagate deeply into the nested containers to remove all elements in the\n * views beneath it.\n *\n * @param tView The `TView' of the `LView` from which elements should be added or removed\n * @param lView The view from which elements should be added or removed\n */\nfunction removeViewFromDOM(tView, lView) {\n  const renderer = lView[RENDERER];\n  applyView(tView, lView, renderer, 2 /* WalkTNodeTreeAction.Detach */, null, null);\n  lView[HOST] = null;\n  lView[T_HOST] = null;\n}\n/**\n * Adds all DOM elements associated with a view.\n *\n * Because some root nodes of the view may be containers, we sometimes need\n * to propagate deeply into the nested containers to add all elements in the\n * views beneath it.\n *\n * @param tView The `TView' of the `LView` from which elements should be added or removed\n * @param parentTNode The `TNode` where the `LView` should be attached to.\n * @param renderer Current renderer to use for DOM manipulations.\n * @param lView The view from which elements should be added or removed\n * @param parentNativeNode The parent `RElement` where it should be inserted into.\n * @param beforeNode The node before which elements should be added, if insert mode\n */\nfunction addViewToDOM(tView, parentTNode, renderer, lView, parentNativeNode, beforeNode) {\n  lView[HOST] = parentNativeNode;\n  lView[T_HOST] = parentTNode;\n  applyView(tView, lView, renderer, 1 /* WalkTNodeTreeAction.Insert */, parentNativeNode, beforeNode);\n}\n/**\n * Detach a `LView` from the DOM by detaching its nodes.\n *\n * @param tView The `TView' of the `LView` to be detached\n * @param lView the `LView` to be detached.\n */\nfunction detachViewFromDOM(tView, lView) {\n  applyView(tView, lView, lView[RENDERER], 2 /* WalkTNodeTreeAction.Detach */, null, null);\n}\n/**\n * Traverses down and up the tree of views and containers to remove listeners and\n * call onDestroy callbacks.\n *\n * Notes:\n *  - Because it's used for onDestroy calls, it needs to be bottom-up.\n *  - Must process containers instead of their views to avoid splicing\n *  when views are destroyed and re-added.\n *  - Using a while loop because it's faster than recursion\n *  - Destroy only called on movement to sibling or movement to parent (laterally or up)\n *\n *  @param rootView The view to destroy\n */\nfunction destroyViewTree(rootView) {\n  // If the view has no children, we can clean it up and return early.\n  let lViewOrLContainer = rootView[CHILD_HEAD];\n  if (!lViewOrLContainer) {\n    return cleanUpView(rootView[TVIEW], rootView);\n  }\n  while (lViewOrLContainer) {\n    let next = null;\n    if (isLView(lViewOrLContainer)) {\n      // If LView, traverse down to child.\n      next = lViewOrLContainer[CHILD_HEAD];\n    } else {\n      ngDevMode && assertLContainer(lViewOrLContainer);\n      // If container, traverse down to its first LView.\n      const firstView = lViewOrLContainer[CONTAINER_HEADER_OFFSET];\n      if (firstView) next = firstView;\n    }\n    if (!next) {\n      // Only clean up view when moving to the side or up, as destroy hooks\n      // should be called in order from the bottom up.\n      while (lViewOrLContainer && !lViewOrLContainer[NEXT] && lViewOrLContainer !== rootView) {\n        if (isLView(lViewOrLContainer)) {\n          cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);\n        }\n        lViewOrLContainer = lViewOrLContainer[PARENT];\n      }\n      if (lViewOrLContainer === null) lViewOrLContainer = rootView;\n      if (isLView(lViewOrLContainer)) {\n        cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);\n      }\n      next = lViewOrLContainer && lViewOrLContainer[NEXT];\n    }\n    lViewOrLContainer = next;\n  }\n}\n/**\n * Inserts a view into a container.\n *\n * This adds the view to the container's array of active views in the correct\n * position. It also adds the view's elements to the DOM if the container isn't a\n * root node of another view (in that case, the view's elements will be added when\n * the container's parent view is added later).\n *\n * @param tView The `TView' of the `LView` to insert\n * @param lView The view to insert\n * @param lContainer The container into which the view should be inserted\n * @param index Which index in the container to insert the child view into\n */\nfunction insertView(tView, lView, lContainer, index) {\n  ngDevMode && assertLView(lView);\n  ngDevMode && assertLContainer(lContainer);\n  const indexInContainer = CONTAINER_HEADER_OFFSET + index;\n  const containerLength = lContainer.length;\n  if (index > 0) {\n    // This is a new view, we need to add it to the children.\n    lContainer[indexInContainer - 1][NEXT] = lView;\n  }\n  if (index < containerLength - CONTAINER_HEADER_OFFSET) {\n    lView[NEXT] = lContainer[indexInContainer];\n    addToArray(lContainer, CONTAINER_HEADER_OFFSET + index, lView);\n  } else {\n    lContainer.push(lView);\n    lView[NEXT] = null;\n  }\n  lView[PARENT] = lContainer;\n  // track views where declaration and insertion points are different\n  const declarationLContainer = lView[DECLARATION_LCONTAINER];\n  if (declarationLContainer !== null && lContainer !== declarationLContainer) {\n    trackMovedView(declarationLContainer, lView);\n  }\n  // notify query that a new view has been added\n  const lQueries = lView[QUERIES];\n  if (lQueries !== null) {\n    lQueries.insertView(tView);\n  }\n  updateAncestorTraversalFlagsOnAttach(lView);\n  // Sets the attached flag\n  lView[FLAGS] |= 128 /* LViewFlags.Attached */;\n}\n/**\n * Track views created from the declaration container (TemplateRef) and inserted into a\n * different LContainer.\n */\nfunction trackMovedView(declarationContainer, lView) {\n  ngDevMode && assertDefined(lView, 'LView required');\n  ngDevMode && assertLContainer(declarationContainer);\n  const movedViews = declarationContainer[MOVED_VIEWS];\n  const insertedLContainer = lView[PARENT];\n  ngDevMode && assertLContainer(insertedLContainer);\n  const insertedComponentLView = insertedLContainer[PARENT][DECLARATION_COMPONENT_VIEW];\n  ngDevMode && assertDefined(insertedComponentLView, 'Missing insertedComponentLView');\n  const declaredComponentLView = lView[DECLARATION_COMPONENT_VIEW];\n  ngDevMode && assertDefined(declaredComponentLView, 'Missing declaredComponentLView');\n  if (declaredComponentLView !== insertedComponentLView) {\n    // At this point the declaration-component is not same as insertion-component; this means that\n    // this is a transplanted view. Mark the declared lView as having transplanted views so that\n    // those views can participate in CD.\n    declarationContainer[FLAGS] |= LContainerFlags.HasTransplantedViews;\n  }\n  if (movedViews === null) {\n    declarationContainer[MOVED_VIEWS] = [lView];\n  } else {\n    movedViews.push(lView);\n  }\n}\nfunction detachMovedView(declarationContainer, lView) {\n  ngDevMode && assertLContainer(declarationContainer);\n  ngDevMode && assertDefined(declarationContainer[MOVED_VIEWS], 'A projected view should belong to a non-empty projected views collection');\n  const movedViews = declarationContainer[MOVED_VIEWS];\n  const declarationViewIndex = movedViews.indexOf(lView);\n  const insertionLContainer = lView[PARENT];\n  ngDevMode && assertLContainer(insertionLContainer);\n  movedViews.splice(declarationViewIndex, 1);\n}\n/**\n * Detaches a view from a container.\n *\n * This method removes the view from the container's array of active views. It also\n * removes the view's elements from the DOM.\n *\n * @param lContainer The container from which to detach a view\n * @param removeIndex The index of the view to detach\n * @returns Detached LView instance.\n */\nfunction detachView(lContainer, removeIndex) {\n  if (lContainer.length <= CONTAINER_HEADER_OFFSET) return;\n  const indexInContainer = CONTAINER_HEADER_OFFSET + removeIndex;\n  const viewToDetach = lContainer[indexInContainer];\n  if (viewToDetach) {\n    const declarationLContainer = viewToDetach[DECLARATION_LCONTAINER];\n    if (declarationLContainer !== null && declarationLContainer !== lContainer) {\n      detachMovedView(declarationLContainer, viewToDetach);\n    }\n    if (removeIndex > 0) {\n      lContainer[indexInContainer - 1][NEXT] = viewToDetach[NEXT];\n    }\n    const removedLView = removeFromArray(lContainer, CONTAINER_HEADER_OFFSET + removeIndex);\n    removeViewFromDOM(viewToDetach[TVIEW], viewToDetach);\n    // notify query that a view has been removed\n    const lQueries = removedLView[QUERIES];\n    if (lQueries !== null) {\n      lQueries.detachView(removedLView[TVIEW]);\n    }\n    viewToDetach[PARENT] = null;\n    viewToDetach[NEXT] = null;\n    // Unsets the attached flag\n    viewToDetach[FLAGS] &= ~128 /* LViewFlags.Attached */;\n  }\n\n  return viewToDetach;\n}\n/**\n * A standalone function which destroys an LView,\n * conducting clean up (e.g. removing listeners, calling onDestroys).\n *\n * @param tView The `TView' of the `LView` to be destroyed\n * @param lView The view to be destroyed.\n */\nfunction destroyLView(tView, lView) {\n  if (!(lView[FLAGS] & 256 /* LViewFlags.Destroyed */)) {\n    const renderer = lView[RENDERER];\n    if (renderer.destroyNode) {\n      applyView(tView, lView, renderer, 3 /* WalkTNodeTreeAction.Destroy */, null, null);\n    }\n    destroyViewTree(lView);\n  }\n}\n/**\n * Calls onDestroys hooks for all directives and pipes in a given view and then removes all\n * listeners. Listeners are removed as the last step so events delivered in the onDestroys hooks\n * can be propagated to @Output listeners.\n *\n * @param tView `TView` for the `LView` to clean up.\n * @param lView The LView to clean up\n */\nfunction cleanUpView(tView, lView) {\n  if (!(lView[FLAGS] & 256 /* LViewFlags.Destroyed */)) {\n    // Usually the Attached flag is removed when the view is detached from its parent, however\n    // if it's a root view, the flag won't be unset hence why we're also removing on destroy.\n    lView[FLAGS] &= ~128 /* LViewFlags.Attached */;\n    // Mark the LView as destroyed *before* executing the onDestroy hooks. An onDestroy hook\n    // runs arbitrary user code, which could include its own `viewRef.destroy()` (or similar). If\n    // We don't flag the view as destroyed before the hooks, this could lead to an infinite loop.\n    // This also aligns with the ViewEngine behavior. It also means that the onDestroy hook is\n    // really more of an \"afterDestroy\" hook if you think about it.\n    lView[FLAGS] |= 256 /* LViewFlags.Destroyed */;\n    lView[REACTIVE_TEMPLATE_CONSUMER] && consumerDestroy$1(lView[REACTIVE_TEMPLATE_CONSUMER]);\n    executeOnDestroys(tView, lView);\n    processCleanups(tView, lView);\n    // For component views only, the local renderer is destroyed at clean up time.\n    if (lView[TVIEW].type === 1 /* TViewType.Component */) {\n      ngDevMode && ngDevMode.rendererDestroy++;\n      lView[RENDERER].destroy();\n    }\n    const declarationContainer = lView[DECLARATION_LCONTAINER];\n    // we are dealing with an embedded view that is still inserted into a container\n    if (declarationContainer !== null && isLContainer(lView[PARENT])) {\n      // and this is a projected view\n      if (declarationContainer !== lView[PARENT]) {\n        detachMovedView(declarationContainer, lView);\n      }\n      // For embedded views still attached to a container: remove query result from this view.\n      const lQueries = lView[QUERIES];\n      if (lQueries !== null) {\n        lQueries.detachView(tView);\n      }\n    }\n    // Unregister the view once everything else has been cleaned up.\n    unregisterLView(lView);\n  }\n}\n/** Removes listeners and unsubscribes from output subscriptions */\nfunction processCleanups(tView, lView) {\n  const tCleanup = tView.cleanup;\n  const lCleanup = lView[CLEANUP];\n  if (tCleanup !== null) {\n    for (let i = 0; i < tCleanup.length - 1; i += 2) {\n      if (typeof tCleanup[i] === 'string') {\n        // This is a native DOM listener. It will occupy 4 entries in the TCleanup array (hence i +=\n        // 2 at the end of this block).\n        const targetIdx = tCleanup[i + 3];\n        ngDevMode && assertNumber(targetIdx, 'cleanup target must be a number');\n        if (targetIdx >= 0) {\n          // unregister\n          lCleanup[targetIdx]();\n        } else {\n          // Subscription\n          lCleanup[-targetIdx].unsubscribe();\n        }\n        i += 2;\n      } else {\n        // This is a cleanup function that is grouped with the index of its context\n        const context = lCleanup[tCleanup[i + 1]];\n        tCleanup[i].call(context);\n      }\n    }\n  }\n  if (lCleanup !== null) {\n    lView[CLEANUP] = null;\n  }\n  const destroyHooks = lView[ON_DESTROY_HOOKS];\n  if (destroyHooks !== null) {\n    // Reset the ON_DESTROY_HOOKS array before iterating over it to prevent hooks that unregister\n    // themselves from mutating the array during iteration.\n    lView[ON_DESTROY_HOOKS] = null;\n    for (let i = 0; i < destroyHooks.length; i++) {\n      const destroyHooksFn = destroyHooks[i];\n      ngDevMode && assertFunction(destroyHooksFn, 'Expecting destroy hook to be a function.');\n      destroyHooksFn();\n    }\n  }\n}\n/** Calls onDestroy hooks for this view */\nfunction executeOnDestroys(tView, lView) {\n  let destroyHooks;\n  if (tView != null && (destroyHooks = tView.destroyHooks) != null) {\n    for (let i = 0; i < destroyHooks.length; i += 2) {\n      const context = lView[destroyHooks[i]];\n      // Only call the destroy hook if the context has been requested.\n      if (!(context instanceof NodeInjectorFactory)) {\n        const toCall = destroyHooks[i + 1];\n        if (Array.isArray(toCall)) {\n          for (let j = 0; j < toCall.length; j += 2) {\n            const callContext = context[toCall[j]];\n            const hook = toCall[j + 1];\n            profiler(4 /* ProfilerEvent.LifecycleHookStart */, callContext, hook);\n            try {\n              hook.call(callContext);\n            } finally {\n              profiler(5 /* ProfilerEvent.LifecycleHookEnd */, callContext, hook);\n            }\n          }\n        } else {\n          profiler(4 /* ProfilerEvent.LifecycleHookStart */, context, toCall);\n          try {\n            toCall.call(context);\n          } finally {\n            profiler(5 /* ProfilerEvent.LifecycleHookEnd */, context, toCall);\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Returns a native element if a node can be inserted into the given parent.\n *\n * There are two reasons why we may not be able to insert a element immediately.\n * - Projection: When creating a child content element of a component, we have to skip the\n *   insertion because the content of a component will be projected.\n *   `<component><content>delayed due to projection</content></component>`\n * - Parent container is disconnected: This can happen when we are inserting a view into\n *   parent container, which itself is disconnected. For example the parent container is part\n *   of a View which has not be inserted or is made for projection but has not been inserted\n *   into destination.\n *\n * @param tView: Current `TView`.\n * @param tNode: `TNode` for which we wish to retrieve render parent.\n * @param lView: Current `LView`.\n */\nfunction getParentRElement(tView, tNode, lView) {\n  return getClosestRElement(tView, tNode.parent, lView);\n}\n/**\n * Get closest `RElement` or `null` if it can't be found.\n *\n * If `TNode` is `TNodeType.Element` => return `RElement` at `LView[tNode.index]` location.\n * If `TNode` is `TNodeType.ElementContainer|IcuContain` => return the parent (recursively).\n * If `TNode` is `null` then return host `RElement`:\n *   - return `null` if projection\n *   - return `null` if parent container is disconnected (we have no parent.)\n *\n * @param tView: Current `TView`.\n * @param tNode: `TNode` for which we wish to retrieve `RElement` (or `null` if host element is\n *     needed).\n * @param lView: Current `LView`.\n * @returns `null` if the `RElement` can't be determined at this time (no parent / projection)\n */\nfunction getClosestRElement(tView, tNode, lView) {\n  let parentTNode = tNode;\n  // Skip over element and ICU containers as those are represented by a comment node and\n  // can't be used as a render parent.\n  while (parentTNode !== null && parentTNode.type & (8 /* TNodeType.ElementContainer */ | 32 /* TNodeType.Icu */)) {\n    tNode = parentTNode;\n    parentTNode = tNode.parent;\n  }\n  // If the parent tNode is null, then we are inserting across views: either into an embedded view\n  // or a component view.\n  if (parentTNode === null) {\n    // We are inserting a root element of the component view into the component host element and\n    // it should always be eager.\n    return lView[HOST];\n  } else {\n    ngDevMode && assertTNodeType(parentTNode, 3 /* TNodeType.AnyRNode */ | 4 /* TNodeType.Container */);\n    const {\n      componentOffset\n    } = parentTNode;\n    if (componentOffset > -1) {\n      ngDevMode && assertTNodeForLView(parentTNode, lView);\n      const {\n        encapsulation\n      } = tView.data[parentTNode.directiveStart + componentOffset];\n      // We've got a parent which is an element in the current view. We just need to verify if the\n      // parent element is not a component. Component's content nodes are not inserted immediately\n      // because they will be projected, and so doing insert at this point would be wasteful.\n      // Since the projection would then move it to its final destination. Note that we can't\n      // make this assumption when using the Shadow DOM, because the native projection placeholders\n      // (<content> or <slot>) have to be in place as elements are being inserted.\n      if (encapsulation === ViewEncapsulation$1.None || encapsulation === ViewEncapsulation$1.Emulated) {\n        return null;\n      }\n    }\n    return getNativeByTNode(parentTNode, lView);\n  }\n}\n/**\n * Inserts a native node before another native node for a given parent.\n * This is a utility function that can be used when native nodes were determined.\n */\nfunction nativeInsertBefore(renderer, parent, child, beforeNode, isMove) {\n  ngDevMode && ngDevMode.rendererInsertBefore++;\n  renderer.insertBefore(parent, child, beforeNode, isMove);\n}\nfunction nativeAppendChild(renderer, parent, child) {\n  ngDevMode && ngDevMode.rendererAppendChild++;\n  ngDevMode && assertDefined(parent, 'parent node must be defined');\n  renderer.appendChild(parent, child);\n}\nfunction nativeAppendOrInsertBefore(renderer, parent, child, beforeNode, isMove) {\n  if (beforeNode !== null) {\n    nativeInsertBefore(renderer, parent, child, beforeNode, isMove);\n  } else {\n    nativeAppendChild(renderer, parent, child);\n  }\n}\n/** Removes a node from the DOM given its native parent. */\nfunction nativeRemoveChild(renderer, parent, child, isHostElement) {\n  renderer.removeChild(parent, child, isHostElement);\n}\n/** Checks if an element is a `<template>` node. */\nfunction isTemplateNode(node) {\n  return node.tagName === 'TEMPLATE' && node.content !== undefined;\n}\n/**\n * Returns a native parent of a given native node.\n */\nfunction nativeParentNode(renderer, node) {\n  return renderer.parentNode(node);\n}\n/**\n * Returns a native sibling of a given native node.\n */\nfunction nativeNextSibling(renderer, node) {\n  return renderer.nextSibling(node);\n}\n/**\n * Find a node in front of which `currentTNode` should be inserted.\n *\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\n * takes `TNode.insertBeforeIndex` into account if i18n code has been invoked.\n *\n * @param parentTNode parent `TNode`\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\n * @param lView current `LView`\n */\nfunction getInsertInFrontOfRNode(parentTNode, currentTNode, lView) {\n  return _getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView);\n}\n/**\n * Find a node in front of which `currentTNode` should be inserted. (Does not take i18n into\n * account)\n *\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\n * does not take `TNode.insertBeforeIndex` into account.\n *\n * @param parentTNode parent `TNode`\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\n * @param lView current `LView`\n */\nfunction getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView) {\n  if (parentTNode.type & (8 /* TNodeType.ElementContainer */ | 32 /* TNodeType.Icu */)) {\n    return getNativeByTNode(parentTNode, lView);\n  }\n  return null;\n}\n/**\n * Tree shakable boundary for `getInsertInFrontOfRNodeWithI18n` function.\n *\n * This function will only be set if i18n code runs.\n */\nlet _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithNoI18n;\n/**\n * Tree shakable boundary for `processI18nInsertBefore` function.\n *\n * This function will only be set if i18n code runs.\n */\nlet _processI18nInsertBefore;\nfunction setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore) {\n  _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithI18n;\n  _processI18nInsertBefore = processI18nInsertBefore;\n}\n/**\n * Appends the `child` native node (or a collection of nodes) to the `parent`.\n *\n * @param tView The `TView' to be appended\n * @param lView The current LView\n * @param childRNode The native child (or children) that should be appended\n * @param childTNode The TNode of the child element\n */\nfunction appendChild(tView, lView, childRNode, childTNode) {\n  const parentRNode = getParentRElement(tView, childTNode, lView);\n  const renderer = lView[RENDERER];\n  const parentTNode = childTNode.parent || lView[T_HOST];\n  const anchorNode = getInsertInFrontOfRNode(parentTNode, childTNode, lView);\n  if (parentRNode != null) {\n    if (Array.isArray(childRNode)) {\n      for (let i = 0; i < childRNode.length; i++) {\n        nativeAppendOrInsertBefore(renderer, parentRNode, childRNode[i], anchorNode, false);\n      }\n    } else {\n      nativeAppendOrInsertBefore(renderer, parentRNode, childRNode, anchorNode, false);\n    }\n  }\n  _processI18nInsertBefore !== undefined && _processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRNode);\n}\n/**\n * Returns the first native node for a given LView, starting from the provided TNode.\n *\n * Native nodes are returned in the order in which those appear in the native tree (DOM).\n */\nfunction getFirstNativeNode(lView, tNode) {\n  if (tNode !== null) {\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */ | 32 /* TNodeType.Icu */ | 16 /* TNodeType.Projection */);\n    const tNodeType = tNode.type;\n    if (tNodeType & 3 /* TNodeType.AnyRNode */) {\n      return getNativeByTNode(tNode, lView);\n    } else if (tNodeType & 4 /* TNodeType.Container */) {\n      return getBeforeNodeForView(-1, lView[tNode.index]);\n    } else if (tNodeType & 8 /* TNodeType.ElementContainer */) {\n      const elIcuContainerChild = tNode.child;\n      if (elIcuContainerChild !== null) {\n        return getFirstNativeNode(lView, elIcuContainerChild);\n      } else {\n        const rNodeOrLContainer = lView[tNode.index];\n        if (isLContainer(rNodeOrLContainer)) {\n          return getBeforeNodeForView(-1, rNodeOrLContainer);\n        } else {\n          return unwrapRNode(rNodeOrLContainer);\n        }\n      }\n    } else if (tNodeType & 32 /* TNodeType.Icu */) {\n      let nextRNode = icuContainerIterate(tNode, lView);\n      let rNode = nextRNode();\n      // If the ICU container has no nodes, than we use the ICU anchor as the node.\n      return rNode || unwrapRNode(lView[tNode.index]);\n    } else {\n      const projectionNodes = getProjectionNodes(lView, tNode);\n      if (projectionNodes !== null) {\n        if (Array.isArray(projectionNodes)) {\n          return projectionNodes[0];\n        }\n        const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);\n        ngDevMode && assertParentView(parentView);\n        return getFirstNativeNode(parentView, projectionNodes);\n      } else {\n        return getFirstNativeNode(lView, tNode.next);\n      }\n    }\n  }\n  return null;\n}\nfunction getProjectionNodes(lView, tNode) {\n  if (tNode !== null) {\n    const componentView = lView[DECLARATION_COMPONENT_VIEW];\n    const componentHost = componentView[T_HOST];\n    const slotIdx = tNode.projection;\n    ngDevMode && assertProjectionSlots(lView);\n    return componentHost.projection[slotIdx];\n  }\n  return null;\n}\nfunction getBeforeNodeForView(viewIndexInContainer, lContainer) {\n  const nextViewIndex = CONTAINER_HEADER_OFFSET + viewIndexInContainer + 1;\n  if (nextViewIndex < lContainer.length) {\n    const lView = lContainer[nextViewIndex];\n    const firstTNodeOfView = lView[TVIEW].firstChild;\n    if (firstTNodeOfView !== null) {\n      return getFirstNativeNode(lView, firstTNodeOfView);\n    }\n  }\n  return lContainer[NATIVE];\n}\n/**\n * Removes a native node itself using a given renderer. To remove the node we are looking up its\n * parent from the native tree as not all platforms / browsers support the equivalent of\n * node.remove().\n *\n * @param renderer A renderer to be used\n * @param rNode The native node that should be removed\n * @param isHostElement A flag indicating if a node to be removed is a host of a component.\n */\nfunction nativeRemoveNode(renderer, rNode, isHostElement) {\n  ngDevMode && ngDevMode.rendererRemoveNode++;\n  const nativeParent = nativeParentNode(renderer, rNode);\n  if (nativeParent) {\n    nativeRemoveChild(renderer, nativeParent, rNode, isHostElement);\n  }\n}\n/**\n * Clears the contents of a given RElement.\n *\n * @param rElement the native RElement to be cleared\n */\nfunction clearElementContents(rElement) {\n  rElement.textContent = '';\n}\n/**\n * Performs the operation of `action` on the node. Typically this involves inserting or removing\n * nodes on the LView or projection boundary.\n */\nfunction applyNodes(renderer, action, tNode, lView, parentRElement, beforeNode, isProjection) {\n  while (tNode != null) {\n    ngDevMode && assertTNodeForLView(tNode, lView);\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */ | 16 /* TNodeType.Projection */ | 32 /* TNodeType.Icu */);\n    const rawSlotValue = lView[tNode.index];\n    const tNodeType = tNode.type;\n    if (isProjection) {\n      if (action === 0 /* WalkTNodeTreeAction.Create */) {\n        rawSlotValue && attachPatchData(unwrapRNode(rawSlotValue), lView);\n        tNode.flags |= 2 /* TNodeFlags.isProjected */;\n      }\n    }\n\n    if ((tNode.flags & 32 /* TNodeFlags.isDetached */) !== 32 /* TNodeFlags.isDetached */) {\n      if (tNodeType & 8 /* TNodeType.ElementContainer */) {\n        applyNodes(renderer, action, tNode.child, lView, parentRElement, beforeNode, false);\n        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n      } else if (tNodeType & 32 /* TNodeType.Icu */) {\n        const nextRNode = icuContainerIterate(tNode, lView);\n        let rNode;\n        while (rNode = nextRNode()) {\n          applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);\n        }\n        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n      } else if (tNodeType & 16 /* TNodeType.Projection */) {\n        applyProjectionRecursive(renderer, action, lView, tNode, parentRElement, beforeNode);\n      } else {\n        ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 4 /* TNodeType.Container */);\n        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n      }\n    }\n    tNode = isProjection ? tNode.projectionNext : tNode.next;\n  }\n}\nfunction applyView(tView, lView, renderer, action, parentRElement, beforeNode) {\n  applyNodes(renderer, action, tView.firstChild, lView, parentRElement, beforeNode, false);\n}\n/**\n * `applyProjection` performs operation on the projection.\n *\n * Inserting a projection requires us to locate the projected nodes from the parent component. The\n * complication is that those nodes themselves could be re-projected from their parent component.\n *\n * @param tView The `TView` of `LView` which needs to be inserted, detached, destroyed\n * @param lView The `LView` which needs to be inserted, detached, destroyed.\n * @param tProjectionNode node to project\n */\nfunction applyProjection(tView, lView, tProjectionNode) {\n  const renderer = lView[RENDERER];\n  const parentRNode = getParentRElement(tView, tProjectionNode, lView);\n  const parentTNode = tProjectionNode.parent || lView[T_HOST];\n  let beforeNode = getInsertInFrontOfRNode(parentTNode, tProjectionNode, lView);\n  applyProjectionRecursive(renderer, 0 /* WalkTNodeTreeAction.Create */, lView, tProjectionNode, parentRNode, beforeNode);\n}\n/**\n * `applyProjectionRecursive` performs operation on the projection specified by `action` (insert,\n * detach, destroy)\n *\n * Inserting a projection requires us to locate the projected nodes from the parent component. The\n * complication is that those nodes themselves could be re-projected from their parent component.\n *\n * @param renderer Render to use\n * @param action action to perform (insert, detach, destroy)\n * @param lView The LView which needs to be inserted, detached, destroyed.\n * @param tProjectionNode node to project\n * @param parentRElement parent DOM element for insertion/removal.\n * @param beforeNode Before which node the insertions should happen.\n */\nfunction applyProjectionRecursive(renderer, action, lView, tProjectionNode, parentRElement, beforeNode) {\n  const componentLView = lView[DECLARATION_COMPONENT_VIEW];\n  const componentNode = componentLView[T_HOST];\n  ngDevMode && assertEqual(typeof tProjectionNode.projection, 'number', 'expecting projection index');\n  const nodeToProjectOrRNodes = componentNode.projection[tProjectionNode.projection];\n  if (Array.isArray(nodeToProjectOrRNodes)) {\n    // This should not exist, it is a bit of a hack. When we bootstrap a top level node and we\n    // need to support passing projectable nodes, so we cheat and put them in the TNode\n    // of the Host TView. (Yes we put instance info at the T Level). We can get away with it\n    // because we know that TView is not shared and therefore it will not be a problem.\n    // This should be refactored and cleaned up.\n    for (let i = 0; i < nodeToProjectOrRNodes.length; i++) {\n      const rNode = nodeToProjectOrRNodes[i];\n      applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);\n    }\n  } else {\n    let nodeToProject = nodeToProjectOrRNodes;\n    const projectedComponentLView = componentLView[PARENT];\n    // If a parent <ng-content> is located within a skip hydration block,\n    // annotate an actual node that is being projected with the same flag too.\n    if (hasInSkipHydrationBlockFlag(tProjectionNode)) {\n      nodeToProject.flags |= 128 /* TNodeFlags.inSkipHydrationBlock */;\n    }\n\n    applyNodes(renderer, action, nodeToProject, projectedComponentLView, parentRElement, beforeNode, true);\n  }\n}\n/**\n * `applyContainer` performs an operation on the container and its views as specified by\n * `action` (insert, detach, destroy)\n *\n * Inserting a Container is complicated by the fact that the container may have Views which\n * themselves have containers or projections.\n *\n * @param renderer Renderer to use\n * @param action action to perform (insert, detach, destroy)\n * @param lContainer The LContainer which needs to be inserted, detached, destroyed.\n * @param parentRElement parent DOM element for insertion/removal.\n * @param beforeNode Before which node the insertions should happen.\n */\nfunction applyContainer(renderer, action, lContainer, parentRElement, beforeNode) {\n  ngDevMode && assertLContainer(lContainer);\n  const anchor = lContainer[NATIVE]; // LContainer has its own before node.\n  const native = unwrapRNode(lContainer);\n  // An LContainer can be created dynamically on any node by injecting ViewContainerRef.\n  // Asking for a ViewContainerRef on an element will result in a creation of a separate anchor\n  // node (comment in the DOM) that will be different from the LContainer's host node. In this\n  // particular case we need to execute action on 2 nodes:\n  // - container's host node (this is done in the executeActionOnElementOrContainer)\n  // - container's host node (this is done here)\n  if (anchor !== native) {\n    // This is very strange to me (Misko). I would expect that the native is same as anchor. I\n    // don't see a reason why they should be different, but they are.\n    //\n    // If they are we need to process the second anchor as well.\n    applyToElementOrContainer(action, renderer, parentRElement, anchor, beforeNode);\n  }\n  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n    const lView = lContainer[i];\n    applyView(lView[TVIEW], lView, renderer, action, parentRElement, anchor);\n  }\n}\n/**\n * Writes class/style to element.\n *\n * @param renderer Renderer to use.\n * @param isClassBased `true` if it should be written to `class` (`false` to write to `style`)\n * @param rNode The Node to write to.\n * @param prop Property to write to. This would be the class/style name.\n * @param value Value to write. If `null`/`undefined`/`false` this is considered a remove (set/add\n *        otherwise).\n */\nfunction applyStyling(renderer, isClassBased, rNode, prop, value) {\n  if (isClassBased) {\n    // We actually want JS true/false here because any truthy value should add the class\n    if (!value) {\n      ngDevMode && ngDevMode.rendererRemoveClass++;\n      renderer.removeClass(rNode, prop);\n    } else {\n      ngDevMode && ngDevMode.rendererAddClass++;\n      renderer.addClass(rNode, prop);\n    }\n  } else {\n    let flags = prop.indexOf('-') === -1 ? undefined : RendererStyleFlags2.DashCase;\n    if (value == null /** || value === undefined */) {\n      ngDevMode && ngDevMode.rendererRemoveStyle++;\n      renderer.removeStyle(rNode, prop, flags);\n    } else {\n      // A value is important if it ends with `!important`. The style\n      // parser strips any semicolons at the end of the value.\n      const isImportant = typeof value === 'string' ? value.endsWith('!important') : false;\n      if (isImportant) {\n        // !important has to be stripped from the value for it to be valid.\n        value = value.slice(0, -10);\n        flags |= RendererStyleFlags2.Important;\n      }\n      ngDevMode && ngDevMode.rendererSetStyle++;\n      renderer.setStyle(rNode, prop, value, flags);\n    }\n  }\n}\n/**\n * Write `cssText` to `RElement`.\n *\n * This function does direct write without any reconciliation. Used for writing initial values, so\n * that static styling values do not pull in the style parser.\n *\n * @param renderer Renderer to use\n * @param element The element which needs to be updated.\n * @param newValue The new class list to write.\n */\nfunction writeDirectStyle(renderer, element, newValue) {\n  ngDevMode && assertString(newValue, '\\'newValue\\' should be a string');\n  renderer.setAttribute(element, 'style', newValue);\n  ngDevMode && ngDevMode.rendererSetStyle++;\n}\n/**\n * Write `className` to `RElement`.\n *\n * This function does direct write without any reconciliation. Used for writing initial values, so\n * that static styling values do not pull in the style parser.\n *\n * @param renderer Renderer to use\n * @param element The element which needs to be updated.\n * @param newValue The new class list to write.\n */\nfunction writeDirectClass(renderer, element, newValue) {\n  ngDevMode && assertString(newValue, '\\'newValue\\' should be a string');\n  if (newValue === '') {\n    // There are tests in `google3` which expect `element.getAttribute('class')` to be `null`.\n    renderer.removeAttribute(element, 'class');\n  } else {\n    renderer.setAttribute(element, 'class', newValue);\n  }\n  ngDevMode && ngDevMode.rendererSetClassName++;\n}\n/** Sets up the static DOM attributes on an `RNode`. */\nfunction setupStaticAttributes(renderer, element, tNode) {\n  const {\n    mergedAttrs,\n    classes,\n    styles\n  } = tNode;\n  if (mergedAttrs !== null) {\n    setUpAttributes(renderer, element, mergedAttrs);\n  }\n  if (classes !== null) {\n    writeDirectClass(renderer, element, classes);\n  }\n  if (styles !== null) {\n    writeDirectStyle(renderer, element, styles);\n  }\n}\n\n/**\n * @fileoverview\n * A module to facilitate use of a Trusted Types policy internally within\n * Angular. It lazily constructs the Trusted Types policy, providing helper\n * utilities for promoting strings to Trusted Types. When Trusted Types are not\n * available, strings are used as a fallback.\n * @security All use of this module is security-sensitive and should go through\n * security review.\n */\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy$1;\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy$1() {\n  if (policy$1 === undefined) {\n    policy$1 = null;\n    if (_global.trustedTypes) {\n      try {\n        policy$1 = _global.trustedTypes.createPolicy('angular', {\n          createHTML: s => s,\n          createScript: s => s,\n          createScriptURL: s => s\n        });\n      } catch {\n        // trustedTypes.createPolicy throws if called with a name that is\n        // already registered, even in report-only mode. Until the API changes,\n        // catch the error not to break the applications functionally. In such\n        // cases, the code will fall back to using strings.\n      }\n    }\n  }\n  return policy$1;\n}\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will be interpreted as HTML by a browser, e.g. when assigning to\n * element.innerHTML.\n */\nfunction trustedHTMLFromString(html) {\n  var _getPolicy$;\n  return ((_getPolicy$ = getPolicy$1()) === null || _getPolicy$ === void 0 ? void 0 : _getPolicy$.createHTML(html)) || html;\n}\n/**\n * Unsafely promote a string to a TrustedScript, falling back to strings when\n * Trusted Types are not available.\n * @security In particular, it must be assured that the provided string will\n * never cause an XSS vulnerability if used in a context that will be\n * interpreted and executed as a script by a browser, e.g. when calling eval.\n */\nfunction trustedScriptFromString(script) {\n  var _getPolicy$2;\n  return ((_getPolicy$2 = getPolicy$1()) === null || _getPolicy$2 === void 0 ? void 0 : _getPolicy$2.createScript(script)) || script;\n}\n/**\n * Unsafely promote a string to a TrustedScriptURL, falling back to strings\n * when Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will cause a browser to load and execute a resource, e.g. when\n * assigning to script.src.\n */\nfunction trustedScriptURLFromString(url) {\n  var _getPolicy$3;\n  return ((_getPolicy$3 = getPolicy$1()) === null || _getPolicy$3 === void 0 ? void 0 : _getPolicy$3.createScriptURL(url)) || url;\n}\n/**\n * Unsafely call the Function constructor with the given string arguments. It\n * is only available in development mode, and should be stripped out of\n * production code.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only called from development code, as use in production code can lead to\n * XSS vulnerabilities.\n */\nfunction newTrustedFunctionForDev(...args) {\n  if (typeof ngDevMode === 'undefined') {\n    throw new Error('newTrustedFunctionForDev should never be called in production');\n  }\n  if (!_global.trustedTypes) {\n    // In environments that don't support Trusted Types, fall back to the most\n    // straightforward implementation:\n    return new Function(...args);\n  }\n  // Chrome currently does not support passing TrustedScript to the Function\n  // constructor. The following implements the workaround proposed on the page\n  // below, where the Chromium bug is also referenced:\n  // https://github.com/w3c/webappsec-trusted-types/wiki/Trusted-Types-for-function-constructor\n  const fnArgs = args.slice(0, -1).join(',');\n  const fnBody = args[args.length - 1];\n  const body = `(function anonymous(${fnArgs}\n) { ${fnBody}\n})`;\n  // Using eval directly confuses the compiler and prevents this module from\n  // being stripped out of JS binaries even if not used. The global['eval']\n  // indirection fixes that.\n  const fn = _global['eval'](trustedScriptFromString(body));\n  if (fn.bind === undefined) {\n    // Workaround for a browser bug that only exists in Chrome 83, where passing\n    // a TrustedScript to eval just returns the TrustedScript back without\n    // evaluating it. In that case, fall back to the most straightforward\n    // implementation:\n    return new Function(...args);\n  }\n  // To completely mimic the behavior of calling \"new Function\", two more\n  // things need to happen:\n  // 1. Stringifying the resulting function should return its source code\n  fn.toString = () => body;\n  // 2. When calling the resulting function, `this` should refer to `global`\n  return fn.bind(_global);\n  // When Trusted Types support in Function constructors is widely available,\n  // the implementation of this function can be simplified to:\n  // return new Function(...args.map(a => trustedScriptFromString(a)));\n}\n\n/**\n * Validation function invoked at runtime for each binding that might potentially\n * represent a security-sensitive attribute of an <iframe>.\n * See `IFRAME_SECURITY_SENSITIVE_ATTRS` in the\n * `packages/compiler/src/schema/dom_security_schema.ts` script for the full list\n * of such attributes.\n *\n * @codeGenApi\n */\nfunction ɵɵvalidateIframeAttribute(attrValue, tagName, attrName) {\n  const lView = getLView();\n  const tNode = getSelectedTNode();\n  const element = getNativeByTNode(tNode, lView);\n  // Restrict any dynamic bindings of security-sensitive attributes/properties\n  // on an <iframe> for security reasons.\n  if (tNode.type === 2 /* TNodeType.Element */ && tagName.toLowerCase() === 'iframe') {\n    const iframe = element;\n    // Unset previously applied `src` and `srcdoc` if we come across a situation when\n    // a security-sensitive attribute is set later via an attribute/property binding.\n    iframe.src = '';\n    iframe.srcdoc = trustedHTMLFromString('');\n    // Also remove the <iframe> from the document.\n    nativeRemoveNode(lView[RENDERER], iframe);\n    const errorMessage = ngDevMode && `Angular has detected that the \\`${attrName}\\` was applied ` + `as a binding to an <iframe>${getTemplateLocationDetails(lView)}. ` + `For security reasons, the \\`${attrName}\\` can be set on an <iframe> ` + `as a static attribute only. \\n` + `To fix this, switch the \\`${attrName}\\` binding to a static attribute ` + `in a template or in host bindings section.`;\n    throw new RuntimeError(-910 /* RuntimeErrorCode.UNSAFE_IFRAME_ATTRS */, errorMessage);\n  }\n  return attrValue;\n}\n\n/**\n * @fileoverview\n * A module to facilitate use of a Trusted Types policy internally within\n * Angular specifically for bypassSecurityTrust* and custom sanitizers. It\n * lazily constructs the Trusted Types policy, providing helper utilities for\n * promoting strings to Trusted Types. When Trusted Types are not available,\n * strings are used as a fallback.\n * @security All use of this module is security-sensitive and should go through\n * security review.\n */\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy;\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy() {\n  if (policy === undefined) {\n    policy = null;\n    if (_global.trustedTypes) {\n      try {\n        policy = _global.trustedTypes.createPolicy('angular#unsafe-bypass', {\n          createHTML: s => s,\n          createScript: s => s,\n          createScriptURL: s => s\n        });\n      } catch {\n        // trustedTypes.createPolicy throws if called with a name that is\n        // already registered, even in report-only mode. Until the API changes,\n        // catch the error not to break the applications functionally. In such\n        // cases, the code will fall back to using strings.\n      }\n    }\n  }\n  return policy;\n}\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only passed strings that come directly from custom sanitizers or the\n * bypassSecurityTrust* functions.\n */\nfunction trustedHTMLFromStringBypass(html) {\n  var _getPolicy;\n  return ((_getPolicy = getPolicy()) === null || _getPolicy === void 0 ? void 0 : _getPolicy.createHTML(html)) || html;\n}\n/**\n * Unsafely promote a string to a TrustedScript, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only passed strings that come directly from custom sanitizers or the\n * bypassSecurityTrust* functions.\n */\nfunction trustedScriptFromStringBypass(script) {\n  var _getPolicy2;\n  return ((_getPolicy2 = getPolicy()) === null || _getPolicy2 === void 0 ? void 0 : _getPolicy2.createScript(script)) || script;\n}\n/**\n * Unsafely promote a string to a TrustedScriptURL, falling back to strings\n * when Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only passed strings that come directly from custom sanitizers or the\n * bypassSecurityTrust* functions.\n */\nfunction trustedScriptURLFromStringBypass(url) {\n  var _getPolicy3;\n  return ((_getPolicy3 = getPolicy()) === null || _getPolicy3 === void 0 ? void 0 : _getPolicy3.createScriptURL(url)) || url;\n}\nclass SafeValueImpl {\n  constructor(changingThisBreaksApplicationSecurity) {\n    this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;\n  }\n  toString() {\n    return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}` + ` (see ${XSS_SECURITY_URL})`;\n  }\n}\nclass SafeHtmlImpl extends SafeValueImpl {\n  getTypeName() {\n    return \"HTML\" /* BypassType.Html */;\n  }\n}\n\nclass SafeStyleImpl extends SafeValueImpl {\n  getTypeName() {\n    return \"Style\" /* BypassType.Style */;\n  }\n}\n\nclass SafeScriptImpl extends SafeValueImpl {\n  getTypeName() {\n    return \"Script\" /* BypassType.Script */;\n  }\n}\n\nclass SafeUrlImpl extends SafeValueImpl {\n  getTypeName() {\n    return \"URL\" /* BypassType.Url */;\n  }\n}\n\nclass SafeResourceUrlImpl extends SafeValueImpl {\n  getTypeName() {\n    return \"ResourceURL\" /* BypassType.ResourceUrl */;\n  }\n}\n\nfunction unwrapSafeValue(value) {\n  return value instanceof SafeValueImpl ? value.changingThisBreaksApplicationSecurity : value;\n}\nfunction allowSanitizationBypassAndThrow(value, type) {\n  const actualType = getSanitizationBypassType(value);\n  if (actualType != null && actualType !== type) {\n    // Allow ResourceURLs in URL contexts, they are strictly more trusted.\n    if (actualType === \"ResourceURL\" /* BypassType.ResourceUrl */ && type === \"URL\" /* BypassType.Url */) return true;\n    throw new Error(`Required a safe ${type}, got a ${actualType} (see ${XSS_SECURITY_URL})`);\n  }\n  return actualType === type;\n}\nfunction getSanitizationBypassType(value) {\n  return value instanceof SafeValueImpl && value.getTypeName() || null;\n}\n/**\n * Mark `html` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link htmlSanitizer} to be trusted implicitly.\n *\n * @param trustedHtml `html` string which needs to be implicitly trusted.\n * @returns a `html` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustHtml(trustedHtml) {\n  return new SafeHtmlImpl(trustedHtml);\n}\n/**\n * Mark `style` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link styleSanitizer} to be trusted implicitly.\n *\n * @param trustedStyle `style` string which needs to be implicitly trusted.\n * @returns a `style` hich has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustStyle(trustedStyle) {\n  return new SafeStyleImpl(trustedStyle);\n}\n/**\n * Mark `script` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link scriptSanitizer} to be trusted implicitly.\n *\n * @param trustedScript `script` string which needs to be implicitly trusted.\n * @returns a `script` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustScript(trustedScript) {\n  return new SafeScriptImpl(trustedScript);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link urlSanitizer} to be trusted implicitly.\n *\n * @param trustedUrl `url` string which needs to be implicitly trusted.\n * @returns a `url`  which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustUrl(trustedUrl) {\n  return new SafeUrlImpl(trustedUrl);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link resourceUrlSanitizer} to be trusted implicitly.\n *\n * @param trustedResourceUrl `url` string which needs to be implicitly trusted.\n * @returns a `url` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustResourceUrl(trustedResourceUrl) {\n  return new SafeResourceUrlImpl(trustedResourceUrl);\n}\n\n/**\n * This helper is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we use one of two strategies for doing this.\n * Default: DOMParser strategy\n * Fallback: InertDocument strategy\n */\nfunction getInertBodyHelper(defaultDoc) {\n  const inertDocumentHelper = new InertDocumentHelper(defaultDoc);\n  return isDOMParserAvailable() ? new DOMParserHelper(inertDocumentHelper) : inertDocumentHelper;\n}\n/**\n * Uses DOMParser to create and fill an inert body element.\n * This is the default strategy used in browsers that support it.\n */\nclass DOMParserHelper {\n  constructor(inertDocumentHelper) {\n    this.inertDocumentHelper = inertDocumentHelper;\n  }\n  getInertBodyElement(html) {\n    // We add these extra elements to ensure that the rest of the content is parsed as expected\n    // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n    // `<head>` tag. Note that the `<body>` tag is closed implicitly to prevent unclosed tags\n    // in `html` from consuming the otherwise explicit `</body>` tag.\n    html = '<body><remove></remove>' + html;\n    try {\n      const body = new window.DOMParser().parseFromString(trustedHTMLFromString(html), 'text/html').body;\n      if (body === null) {\n        // In some browsers (e.g. Mozilla/5.0 iPad AppleWebKit Mobile) the `body` property only\n        // becomes available in the following tick of the JS engine. In that case we fall back to\n        // the `inertDocumentHelper` instead.\n        return this.inertDocumentHelper.getInertBodyElement(html);\n      }\n      body.removeChild(body.firstChild);\n      return body;\n    } catch {\n      return null;\n    }\n  }\n}\n/**\n * Use an HTML5 `template` element to create and fill an inert DOM element.\n * This is the fallback strategy if the browser does not support DOMParser.\n */\nclass InertDocumentHelper {\n  constructor(defaultDoc) {\n    this.defaultDoc = defaultDoc;\n    this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');\n  }\n  getInertBodyElement(html) {\n    const templateEl = this.inertDocument.createElement('template');\n    templateEl.innerHTML = trustedHTMLFromString(html);\n    return templateEl;\n  }\n}\n/**\n * We need to determine whether the DOMParser exists in the global context and\n * supports parsing HTML; HTML parsing support is not as wide as other formats, see\n * https://developer.mozilla.org/en-US/docs/Web/API/DOMParser#Browser_compatibility.\n *\n * @suppress {uselessCode}\n */\nfunction isDOMParserAvailable() {\n  try {\n    return !!new window.DOMParser().parseFromString(trustedHTMLFromString(''), 'text/html');\n  } catch {\n    return false;\n  }\n}\n\n/**\n * A pattern that recognizes URLs that are safe wrt. XSS in URL navigation\n * contexts.\n *\n * This regular expression matches a subset of URLs that will not cause script\n * execution if used in URL context within a HTML document. Specifically, this\n * regular expression matches if:\n * (1) Either a protocol that is not javascript:, and that has valid characters\n *     (alphanumeric or [+-.]).\n * (2) or no protocol.  A protocol must be followed by a colon. The below\n *     allows that by allowing colons only after one of the characters [/?#].\n *     A colon after a hash (#) must be in the fragment.\n *     Otherwise, a colon after a (?) must be in a query.\n *     Otherwise, a colon after a single solidus (/) must be in a path.\n *     Otherwise, a colon after a double solidus (//) must be in the authority\n *     (before port).\n *\n * The pattern disallows &, used in HTML entity declarations before\n * one of the characters in [/?#]. This disallows HTML entities used in the\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n * It also disallows HTML entities in the first path part of a relative path,\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n * that. More importantly, it disallows masking of a colon,\n * e.g. \"javascript&#58;...\".\n *\n * This regular expression was taken from the Closure sanitization library.\n */\nconst SAFE_URL_PATTERN = /^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:\\/?#]*(?:[\\/?#]|$))/i;\nfunction _sanitizeUrl(url) {\n  url = String(url);\n  if (url.match(SAFE_URL_PATTERN)) return url;\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    console.warn(`WARNING: sanitizing unsafe URL value ${url} (see ${XSS_SECURITY_URL})`);\n  }\n  return 'unsafe:' + url;\n}\nfunction tagSet(tags) {\n  const res = {};\n  for (const t of tags.split(',')) res[t] = true;\n  return res;\n}\nfunction merge(...sets) {\n  const res = {};\n  for (const s of sets) {\n    for (const v in s) {\n      if (s.hasOwnProperty(v)) res[v] = true;\n    }\n  }\n  return res;\n}\n// Good source of info about elements and attributes\n// https://html.spec.whatwg.org/#semantics\n// https://simon.html5.org/html-elements\n// Safe Void Elements - HTML5\n// https://html.spec.whatwg.org/#void-elements\nconst VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n// Elements that you can, intentionally, leave open (and which close themselves)\n// https://html.spec.whatwg.org/#optional-tags\nconst OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\nconst OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\nconst OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n// Safe Block Elements - HTML5\nconst BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' + 'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' + 'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n// Inline Elements - HTML5\nconst INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' + 'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' + 'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\nconst VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n// Attributes that have href and hence need to be sanitized\nconst URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\nconst HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' + 'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' + 'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' + 'scope,scrolling,shape,size,sizes,span,srclang,srcset,start,summary,tabindex,target,title,translate,type,usemap,' + 'valign,value,vspace,width');\n// Accessibility attributes as per WAI-ARIA 1.1 (W3C Working Draft 14 December 2018)\nconst ARIA_ATTRS = tagSet('aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,' + 'aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,' + 'aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,' + 'aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,' + 'aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,' + 'aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,' + 'aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext');\n// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security\n// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\n// innerHTML is required, SVG attributes should be added here.\n// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\n// can be sanitized, but they increase security surface area without a legitimate use case, so they\n// are left out here.\nconst VALID_ATTRS = merge(URI_ATTRS, HTML_ATTRS, ARIA_ATTRS);\n// Elements whose content should not be traversed/preserved, if the elements themselves are invalid.\n//\n// Typically, `<invalid>Some content</invalid>` would traverse (and in this case preserve)\n// `Some content`, but strip `invalid-element` opening/closing tags. For some elements, though, we\n// don't want to preserve the content, if the elements themselves are going to be removed.\nconst SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = tagSet('script,style,template');\n/**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nclass SanitizingHtmlSerializer {\n  constructor() {\n    // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just\n    // because characters were re-encoded.\n    this.sanitizedSomething = false;\n    this.buf = [];\n  }\n  sanitizeChildren(el) {\n    // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\n    // However this code never accesses properties off of `document` before deleting its contents\n    // again, so it shouldn't be vulnerable to DOM clobbering.\n    let current = el.firstChild;\n    let traverseContent = true;\n    while (current) {\n      if (current.nodeType === Node.ELEMENT_NODE) {\n        traverseContent = this.startElement(current);\n      } else if (current.nodeType === Node.TEXT_NODE) {\n        this.chars(current.nodeValue);\n      } else {\n        // Strip non-element, non-text nodes.\n        this.sanitizedSomething = true;\n      }\n      if (traverseContent && current.firstChild) {\n        current = current.firstChild;\n        continue;\n      }\n      while (current) {\n        // Leaving the element. Walk up and to the right, closing tags as we go.\n        if (current.nodeType === Node.ELEMENT_NODE) {\n          this.endElement(current);\n        }\n        let next = this.checkClobberedElement(current, current.nextSibling);\n        if (next) {\n          current = next;\n          break;\n        }\n        current = this.checkClobberedElement(current, current.parentNode);\n      }\n    }\n    return this.buf.join('');\n  }\n  /**\n   * Sanitizes an opening element tag (if valid) and returns whether the element's contents should\n   * be traversed. Element content must always be traversed (even if the element itself is not\n   * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.\n   *\n   * @param element The element to sanitize.\n   * @return True if the element's contents should be traversed.\n   */\n  startElement(element) {\n    const tagName = element.nodeName.toLowerCase();\n    if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n      this.sanitizedSomething = true;\n      return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);\n    }\n    this.buf.push('<');\n    this.buf.push(tagName);\n    const elAttrs = element.attributes;\n    for (let i = 0; i < elAttrs.length; i++) {\n      const elAttr = elAttrs.item(i);\n      const attrName = elAttr.name;\n      const lower = attrName.toLowerCase();\n      if (!VALID_ATTRS.hasOwnProperty(lower)) {\n        this.sanitizedSomething = true;\n        continue;\n      }\n      let value = elAttr.value;\n      // TODO(martinprobst): Special case image URIs for data:image/...\n      if (URI_ATTRS[lower]) value = _sanitizeUrl(value);\n      this.buf.push(' ', attrName, '=\"', encodeEntities(value), '\"');\n    }\n    this.buf.push('>');\n    return true;\n  }\n  endElement(current) {\n    const tagName = current.nodeName.toLowerCase();\n    if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n      this.buf.push('</');\n      this.buf.push(tagName);\n      this.buf.push('>');\n    }\n  }\n  chars(chars) {\n    this.buf.push(encodeEntities(chars));\n  }\n  checkClobberedElement(node, nextNode) {\n    if (nextNode && (node.compareDocumentPosition(nextNode) & Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {\n      throw new Error(`Failed to sanitize html because the element is clobbered: ${node.outerHTML}`);\n    }\n    return nextNode;\n  }\n}\n// Regular Expressions for parsing tags and attributes\nconst SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n// ! to ~ is the ASCII range.\nconst NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param value\n */\nfunction encodeEntities(value) {\n  return value.replace(/&/g, '&amp;').replace(SURROGATE_PAIR_REGEXP, function (match) {\n    const hi = match.charCodeAt(0);\n    const low = match.charCodeAt(1);\n    return '&#' + ((hi - 0xD800) * 0x400 + (low - 0xDC00) + 0x10000) + ';';\n  }).replace(NON_ALPHANUMERIC_REGEXP, function (match) {\n    return '&#' + match.charCodeAt(0) + ';';\n  }).replace(/</g, '&lt;').replace(/>/g, '&gt;');\n}\nlet inertBodyHelper;\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n */\nfunction _sanitizeHtml(defaultDoc, unsafeHtmlInput) {\n  let inertBodyElement = null;\n  try {\n    inertBodyHelper = inertBodyHelper || getInertBodyHelper(defaultDoc);\n    // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\n    let unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n    inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n    // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\n    // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\n    let mXSSAttempts = 5;\n    let parsedHtml = unsafeHtml;\n    do {\n      if (mXSSAttempts === 0) {\n        throw new Error('Failed to sanitize html because the input is unstable');\n      }\n      mXSSAttempts--;\n      unsafeHtml = parsedHtml;\n      parsedHtml = inertBodyElement.innerHTML;\n      inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n    } while (unsafeHtml !== parsedHtml);\n    const sanitizer = new SanitizingHtmlSerializer();\n    const safeHtml = sanitizer.sanitizeChildren(getTemplateContent(inertBodyElement) || inertBodyElement);\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && sanitizer.sanitizedSomething) {\n      console.warn(`WARNING: sanitizing HTML stripped some content, see ${XSS_SECURITY_URL}`);\n    }\n    return trustedHTMLFromString(safeHtml);\n  } finally {\n    // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n    if (inertBodyElement) {\n      const parent = getTemplateContent(inertBodyElement) || inertBodyElement;\n      while (parent.firstChild) {\n        parent.removeChild(parent.firstChild);\n      }\n    }\n  }\n}\nfunction getTemplateContent(el) {\n  return 'content' in el /** Microsoft/TypeScript#21517 */ && isTemplateElement(el) ? el.content : null;\n}\nfunction isTemplateElement(el) {\n  return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';\n}\n\n/**\n * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property\n * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly\n * handled.\n *\n * See DomSanitizer for more details on security in Angular applications.\n *\n * @publicApi\n */\nvar SecurityContext;\n(function (SecurityContext) {\n  SecurityContext[SecurityContext[\"NONE\"] = 0] = \"NONE\";\n  SecurityContext[SecurityContext[\"HTML\"] = 1] = \"HTML\";\n  SecurityContext[SecurityContext[\"STYLE\"] = 2] = \"STYLE\";\n  SecurityContext[SecurityContext[\"SCRIPT\"] = 3] = \"SCRIPT\";\n  SecurityContext[SecurityContext[\"URL\"] = 4] = \"URL\";\n  SecurityContext[SecurityContext[\"RESOURCE_URL\"] = 5] = \"RESOURCE_URL\";\n})(SecurityContext || (SecurityContext = {}));\n\n/**\n * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `html` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustHtml}.\n *\n * @param unsafeHtml untrusted `html`, typically from the user.\n * @returns `html` string which is safe to display to user, because all of the dangerous javascript\n * and urls have been removed.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeHtml(unsafeHtml) {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return trustedHTMLFromStringBypass(sanitizer.sanitize(SecurityContext.HTML, unsafeHtml) || '');\n  }\n  if (allowSanitizationBypassAndThrow(unsafeHtml, \"HTML\" /* BypassType.Html */)) {\n    return trustedHTMLFromStringBypass(unwrapSafeValue(unsafeHtml));\n  }\n  return _sanitizeHtml(getDocument(), renderStringify(unsafeHtml));\n}\n/**\n * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\n * dangerous content.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustStyle}.\n *\n * @param unsafeStyle untrusted `style`, typically from the user.\n * @returns `style` string which is safe to bind to the `style` properties.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeStyle(unsafeStyle) {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return sanitizer.sanitize(SecurityContext.STYLE, unsafeStyle) || '';\n  }\n  if (allowSanitizationBypassAndThrow(unsafeStyle, \"Style\" /* BypassType.Style */)) {\n    return unwrapSafeValue(unsafeStyle);\n  }\n  return renderStringify(unsafeStyle);\n}\n/**\n * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\n * dangerous\n * content.\n *\n * This method parses the `url` and locates potentially dangerous content (such as javascript) and\n * removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustUrl}.\n *\n * @param unsafeUrl untrusted `url`, typically from the user.\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * all of the dangerous javascript has been removed.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeUrl(unsafeUrl) {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return sanitizer.sanitize(SecurityContext.URL, unsafeUrl) || '';\n  }\n  if (allowSanitizationBypassAndThrow(unsafeUrl, \"URL\" /* BypassType.Url */)) {\n    return unwrapSafeValue(unsafeUrl);\n  }\n  return _sanitizeUrl(renderStringify(unsafeUrl));\n}\n/**\n * A `url` sanitizer which only lets trusted `url`s through.\n *\n * This passes only `url`s marked trusted by calling {@link bypassSanitizationTrustResourceUrl}.\n *\n * @param unsafeResourceUrl untrusted `url`, typically from the user.\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * only trusted `url`s have been allowed to pass.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeResourceUrl(unsafeResourceUrl) {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return trustedScriptURLFromStringBypass(sanitizer.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '');\n  }\n  if (allowSanitizationBypassAndThrow(unsafeResourceUrl, \"ResourceURL\" /* BypassType.ResourceUrl */)) {\n    return trustedScriptURLFromStringBypass(unwrapSafeValue(unsafeResourceUrl));\n  }\n  throw new RuntimeError(904 /* RuntimeErrorCode.UNSAFE_VALUE_IN_RESOURCE_URL */, ngDevMode && `unsafe value used in a resource URL context (see ${XSS_SECURITY_URL})`);\n}\n/**\n * A `script` sanitizer which only lets trusted javascript through.\n *\n * This passes only `script`s marked trusted by calling {@link\n * bypassSanitizationTrustScript}.\n *\n * @param unsafeScript untrusted `script`, typically from the user.\n * @returns `url` string which is safe to bind to the `<script>` element such as `<img src>`,\n * because only trusted `scripts` have been allowed to pass.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeScript(unsafeScript) {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return trustedScriptFromStringBypass(sanitizer.sanitize(SecurityContext.SCRIPT, unsafeScript) || '');\n  }\n  if (allowSanitizationBypassAndThrow(unsafeScript, \"Script\" /* BypassType.Script */)) {\n    return trustedScriptFromStringBypass(unwrapSafeValue(unsafeScript));\n  }\n  throw new RuntimeError(905 /* RuntimeErrorCode.UNSAFE_VALUE_IN_SCRIPT */, ngDevMode && 'unsafe value used in a script context');\n}\n/**\n * A template tag function for promoting the associated constant literal to a\n * TrustedHTML. Interpolation is explicitly not allowed.\n *\n * @param html constant template literal containing trusted HTML.\n * @returns TrustedHTML wrapping `html`.\n *\n * @security This is a security-sensitive function and should only be used to\n * convert constant values of attributes and properties found in\n * application-provided Angular templates to TrustedHTML.\n *\n * @codeGenApi\n */\nfunction ɵɵtrustConstantHtml(html) {\n  // The following runtime check ensures that the function was called as a\n  // template tag (e.g. ɵɵtrustConstantHtml`content`), without any interpolation\n  // (e.g. not ɵɵtrustConstantHtml`content ${variable}`). A TemplateStringsArray\n  // is an array with a `raw` property that is also an array. The associated\n  // template literal has no interpolation if and only if the length of the\n  // TemplateStringsArray is 1.\n  if (ngDevMode && (!Array.isArray(html) || !Array.isArray(html.raw) || html.length !== 1)) {\n    throw new Error(`Unexpected interpolation in trusted HTML constant: ${html.join('?')}`);\n  }\n  return trustedHTMLFromString(html[0]);\n}\n/**\n * A template tag function for promoting the associated constant literal to a\n * TrustedScriptURL. Interpolation is explicitly not allowed.\n *\n * @param url constant template literal containing a trusted script URL.\n * @returns TrustedScriptURL wrapping `url`.\n *\n * @security This is a security-sensitive function and should only be used to\n * convert constant values of attributes and properties found in\n * application-provided Angular templates to TrustedScriptURL.\n *\n * @codeGenApi\n */\nfunction ɵɵtrustConstantResourceUrl(url) {\n  // The following runtime check ensures that the function was called as a\n  // template tag (e.g. ɵɵtrustConstantResourceUrl`content`), without any\n  // interpolation (e.g. not ɵɵtrustConstantResourceUrl`content ${variable}`). A\n  // TemplateStringsArray is an array with a `raw` property that is also an\n  // array. The associated template literal has no interpolation if and only if\n  // the length of the TemplateStringsArray is 1.\n  if (ngDevMode && (!Array.isArray(url) || !Array.isArray(url.raw) || url.length !== 1)) {\n    throw new Error(`Unexpected interpolation in trusted URL constant: ${url.join('?')}`);\n  }\n  return trustedScriptURLFromString(url[0]);\n}\n/**\n * Detects which sanitizer to use for URL property, based on tag name and prop name.\n *\n * The rules are based on the RESOURCE_URL context config from\n * `packages/compiler/src/schema/dom_security_schema.ts`.\n * If tag and prop names don't match Resource URL schema, use URL sanitizer.\n */\nfunction getUrlSanitizer(tag, prop) {\n  if (prop === 'src' && (tag === 'embed' || tag === 'frame' || tag === 'iframe' || tag === 'media' || tag === 'script') || prop === 'href' && (tag === 'base' || tag === 'link')) {\n    return ɵɵsanitizeResourceUrl;\n  }\n  return ɵɵsanitizeUrl;\n}\n/**\n * Sanitizes URL, selecting sanitizer function based on tag and property names.\n *\n * This function is used in case we can't define security context at compile time, when only prop\n * name is available. This happens when we generate host bindings for Directives/Components. The\n * host element is unknown at compile time, so we defer calculation of specific sanitizer to\n * runtime.\n *\n * @param unsafeUrl untrusted `url`, typically from the user.\n * @param tag target element tag name.\n * @param prop name of the property that contains the value.\n * @returns `url` string which is safe to bind.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeUrlOrResourceUrl(unsafeUrl, tag, prop) {\n  return getUrlSanitizer(tag, prop)(unsafeUrl);\n}\nfunction validateAgainstEventProperties(name) {\n  if (name.toLowerCase().startsWith('on')) {\n    const errorMessage = `Binding to event property '${name}' is disallowed for security reasons, ` + `please use (${name.slice(2)})=...` + `\\nIf '${name}' is a directive input, make sure the directive is imported by the` + ` current module.`;\n    throw new RuntimeError(306 /* RuntimeErrorCode.INVALID_EVENT_BINDING */, errorMessage);\n  }\n}\nfunction validateAgainstEventAttributes(name) {\n  if (name.toLowerCase().startsWith('on')) {\n    const errorMessage = `Binding to event attribute '${name}' is disallowed for security reasons, ` + `please use (${name.slice(2)})=...`;\n    throw new RuntimeError(306 /* RuntimeErrorCode.INVALID_EVENT_BINDING */, errorMessage);\n  }\n}\nfunction getSanitizer() {\n  const lView = getLView();\n  return lView && lView[ENVIRONMENT].sanitizer;\n}\n\n/**\n * Injectable that is notified when an `LView` is made aware of changes to application state.\n */\nclass ChangeDetectionScheduler {}\n\n/**\n * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n *\n * @publicApi\n */\nfunction makeStateKey(key) {\n  return key;\n}\nfunction initTransferState() {\n  const transferState = new TransferState();\n  if (inject(PLATFORM_ID) === 'browser') {\n    transferState.store = retrieveTransferredState(getDocument(), inject(APP_ID));\n  }\n  return transferState;\n}\n/**\n * A key value store that is transferred from the application on the server side to the application\n * on the client side.\n *\n * The `TransferState` is available as an injectable token.\n * On the client, just inject this token using DI and use it, it will be lazily initialized.\n * On the server it's already included if `renderApplication` function is used. Otherwise, import\n * the `ServerTransferStateModule` module to make the `TransferState` available.\n *\n * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only\n * boolean, number, string, null and non-class objects will be serialized and deserialized in a\n * non-lossy manner.\n *\n * @publicApi\n */\nclass TransferState {\n  constructor() {\n    /** @internal */\n    this.store = {};\n    this.onSerializeCallbacks = {};\n  }\n  /** @nocollapse */\n\n  /**\n   * Get the value corresponding to a key. Return `defaultValue` if key is not found.\n   */\n  get(key, defaultValue) {\n    return this.store[key] !== undefined ? this.store[key] : defaultValue;\n  }\n  /**\n   * Set the value corresponding to a key.\n   */\n  set(key, value) {\n    this.store[key] = value;\n  }\n  /**\n   * Remove a key from the store.\n   */\n  remove(key) {\n    delete this.store[key];\n  }\n  /**\n   * Test whether a key exists in the store.\n   */\n  hasKey(key) {\n    return this.store.hasOwnProperty(key);\n  }\n  /**\n   * Indicates whether the state is empty.\n   */\n  get isEmpty() {\n    return Object.keys(this.store).length === 0;\n  }\n  /**\n   * Register a callback to provide the value for a key when `toJson` is called.\n   */\n  onSerialize(key, callback) {\n    this.onSerializeCallbacks[key] = callback;\n  }\n  /**\n   * Serialize the current state of the store to JSON.\n   */\n  toJson() {\n    // Call the onSerialize callbacks and put those values into the store.\n    for (const key in this.onSerializeCallbacks) {\n      if (this.onSerializeCallbacks.hasOwnProperty(key)) {\n        try {\n          this.store[key] = this.onSerializeCallbacks[key]();\n        } catch (e) {\n          console.warn('Exception in onSerialize callback: ', e);\n        }\n      }\n    }\n    // Escape script tag to avoid break out of <script> tag in serialized output.\n    // Encoding of `<` is the same behaviour as G3 script_builders.\n    return JSON.stringify(this.store).replace(/</g, '\\\\u003C');\n  }\n}\n_class2 = TransferState;\n_class2.ɵprov = /** @pureOrBreakMyCode */ɵɵdefineInjectable({\n  token: _class2,\n  providedIn: 'root',\n  factory: initTransferState\n});\nfunction retrieveTransferredState(doc, appId) {\n  // Locate the script tag with the JSON data transferred from the server.\n  // The id of the script tag is set to the Angular appId + 'state'.\n  const script = doc.getElementById(appId + '-state');\n  if (script !== null && script !== void 0 && script.textContent) {\n    try {\n      // Avoid using any here as it triggers lint errors in google3 (any is not allowed).\n      // Decoding of `<` is done of the box by browsers and node.js, same behaviour as G3\n      // script_builders.\n      return JSON.parse(script.textContent);\n    } catch (e) {\n      console.warn('Exception while restoring TransferState for app ' + appId, e);\n    }\n  }\n  return {};\n}\n\n/** Encodes that the node lookup should start from the host node of this component. */\nconst REFERENCE_NODE_HOST = 'h';\n/** Encodes that the node lookup should start from the document body node. */\nconst REFERENCE_NODE_BODY = 'b';\n/**\n * Describes navigation steps that the runtime logic need to perform,\n * starting from a given (known) element.\n */\nvar NodeNavigationStep;\n(function (NodeNavigationStep) {\n  NodeNavigationStep[\"FirstChild\"] = \"f\";\n  NodeNavigationStep[\"NextSibling\"] = \"n\";\n})(NodeNavigationStep || (NodeNavigationStep = {}));\n/**\n * Keys within serialized view data structure to represent various\n * parts. See the `SerializedView` interface below for additional information.\n */\nconst ELEMENT_CONTAINERS = 'e';\nconst TEMPLATES = 't';\nconst CONTAINERS = 'c';\nconst MULTIPLIER = 'x';\nconst NUM_ROOT_NODES = 'r';\nconst TEMPLATE_ID = 'i'; // as it's also an \"id\"\nconst NODES = 'n';\nconst DISCONNECTED_NODES = 'd';\n\n/**\n * The name of the key used in the TransferState collection,\n * where hydration information is located.\n */\nconst TRANSFER_STATE_TOKEN_ID = '__nghData__';\n/**\n * Lookup key used to reference DOM hydration data (ngh) in `TransferState`.\n */\nconst NGH_DATA_KEY = makeStateKey(TRANSFER_STATE_TOKEN_ID);\n/**\n * The name of the attribute that would be added to host component\n * nodes and contain a reference to a particular slot in transferred\n * state that contains the necessary hydration info for this component.\n */\nconst NGH_ATTR_NAME = 'ngh';\n/**\n * Marker used in a comment node to ensure hydration content integrity\n */\nconst SSR_CONTENT_INTEGRITY_MARKER = 'nghm';\n/**\n * Reference to a function that reads `ngh` attribute value from a given RNode\n * and retrieves hydration information from the TransferState using that value\n * as an index. Returns `null` by default, when hydration is not enabled.\n *\n * @param rNode Component's host element.\n * @param injector Injector that this component has access to.\n * @param isRootView Specifies whether we trying to read hydration info for the root view.\n */\nlet _retrieveHydrationInfoImpl = (rNode, injector, isRootView) => null;\nfunction retrieveHydrationInfoImpl(rNode, injector, isRootView = false) {\n  var _rNode$firstChild;\n  let nghAttrValue = rNode.getAttribute(NGH_ATTR_NAME);\n  if (nghAttrValue == null) return null;\n  // For cases when a root component also acts as an anchor node for a ViewContainerRef\n  // (for example, when ViewContainerRef is injected in a root component), there is a need\n  // to serialize information about the component itself, as well as an LContainer that\n  // represents this ViewContainerRef. Effectively, we need to serialize 2 pieces of info:\n  // (1) hydration info for the root component itself and (2) hydration info for the\n  // ViewContainerRef instance (an LContainer). Each piece of information is included into\n  // the hydration data (in the TransferState object) separately, thus we end up with 2 ids.\n  // Since we only have 1 root element, we encode both bits of info into a single string:\n  // ids are separated by the `|` char (e.g. `10|25`, where `10` is the ngh for a component view\n  // and 25 is the `ngh` for a root view which holds LContainer).\n  const [componentViewNgh, rootViewNgh] = nghAttrValue.split('|');\n  nghAttrValue = isRootView ? rootViewNgh : componentViewNgh;\n  if (!nghAttrValue) return null;\n  // We've read one of the ngh ids, keep the remaining one, so that\n  // we can set it back on the DOM element.\n  const remainingNgh = isRootView ? componentViewNgh : rootViewNgh ? `|${rootViewNgh}` : '';\n  let data = {};\n  // An element might have an empty `ngh` attribute value (e.g. `<comp ngh=\"\" />`),\n  // which means that no special annotations are required. Do not attempt to read\n  // from the TransferState in this case.\n  if (nghAttrValue !== '') {\n    const transferState = injector.get(TransferState, null, {\n      optional: true\n    });\n    if (transferState !== null) {\n      const nghData = transferState.get(NGH_DATA_KEY, []);\n      // The nghAttrValue is always a number referencing an index\n      // in the hydration TransferState data.\n      data = nghData[Number(nghAttrValue)];\n      // If the `ngh` attribute exists and has a non-empty value,\n      // the hydration info *must* be present in the TransferState.\n      // If there is no data for some reasons, this is an error.\n      ngDevMode && assertDefined(data, 'Unable to retrieve hydration info from the TransferState.');\n    }\n  }\n  const dehydratedView = {\n    data,\n    firstChild: (_rNode$firstChild = rNode.firstChild) !== null && _rNode$firstChild !== void 0 ? _rNode$firstChild : null\n  };\n  if (isRootView) {\n    // If there is hydration info present for the root view, it means that there was\n    // a ViewContainerRef injected in the root component. The root component host element\n    // acted as an anchor node in this scenario. As a result, the DOM nodes that represent\n    // embedded views in this ViewContainerRef are located as siblings to the host node,\n    // i.e. `<app-root /><#VIEW1><#VIEW2>...<!--container-->`. In this case, the current\n    // node becomes the first child of this root view and the next sibling is the first\n    // element in the DOM segment.\n    dehydratedView.firstChild = rNode;\n    // We use `0` here, since this is the slot (right after the HEADER_OFFSET)\n    // where a component LView or an LContainer is located in a root LView.\n    setSegmentHead(dehydratedView, 0, rNode.nextSibling);\n  }\n  if (remainingNgh) {\n    // If we have only used one of the ngh ids, store the remaining one\n    // back on this RNode.\n    rNode.setAttribute(NGH_ATTR_NAME, remainingNgh);\n  } else {\n    // The `ngh` attribute is cleared from the DOM node now\n    // that the data has been retrieved for all indices.\n    rNode.removeAttribute(NGH_ATTR_NAME);\n  }\n  // Note: don't check whether this node was claimed for hydration,\n  // because this node might've been previously claimed while processing\n  // template instructions.\n  ngDevMode && markRNodeAsClaimedByHydration(rNode, /* checkIfAlreadyClaimed */false);\n  ngDevMode && ngDevMode.hydratedComponents++;\n  return dehydratedView;\n}\n/**\n * Sets the implementation for the `retrieveHydrationInfo` function.\n */\nfunction enableRetrieveHydrationInfoImpl() {\n  _retrieveHydrationInfoImpl = retrieveHydrationInfoImpl;\n}\n/**\n * Retrieves hydration info by reading the value from the `ngh` attribute\n * and accessing a corresponding slot in TransferState storage.\n */\nfunction retrieveHydrationInfo(rNode, injector, isRootView = false) {\n  return _retrieveHydrationInfoImpl(rNode, injector, isRootView);\n}\n/**\n * Retrieves the necessary object from a given ViewRef to serialize:\n *  - an LView for component views\n *  - an LContainer for cases when component acts as a ViewContainerRef anchor\n *  - `null` in case of an embedded view\n */\nfunction getLNodeForHydration(viewRef) {\n  // Reading an internal field from `ViewRef` instance.\n  let lView = viewRef._lView;\n  const tView = lView[TVIEW];\n  // A registered ViewRef might represent an instance of an\n  // embedded view, in which case we do not need to annotate it.\n  if (tView.type === 2 /* TViewType.Embedded */) {\n    return null;\n  }\n  // Check if it's a root view and if so, retrieve component's\n  // LView from the first slot after the header.\n  if (isRootView(lView)) {\n    lView = lView[HEADER_OFFSET];\n  }\n  return lView;\n}\nfunction getTextNodeContent(node) {\n  var _node$textContent;\n  return (_node$textContent = node.textContent) === null || _node$textContent === void 0 ? void 0 : _node$textContent.replace(/\\s/gm, '');\n}\n/**\n * Restores text nodes and separators into the DOM that were lost during SSR\n * serialization. The hydration process replaces empty text nodes and text\n * nodes that are immediately adjacent to other text nodes with comment nodes\n * that this method filters on to restore those missing nodes that the\n * hydration process is expecting to be present.\n *\n * @param node The app's root HTML Element\n */\nfunction processTextNodeMarkersBeforeHydration(node) {\n  const doc = getDocument();\n  const commentNodesIterator = doc.createNodeIterator(node, NodeFilter.SHOW_COMMENT, {\n    acceptNode(node) {\n      const content = getTextNodeContent(node);\n      const isTextNodeMarker = content === \"ngetn\" /* TextNodeMarker.EmptyNode */ || content === \"ngtns\" /* TextNodeMarker.Separator */;\n      return isTextNodeMarker ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;\n    }\n  });\n  let currentNode;\n  // We cannot modify the DOM while using the commentIterator,\n  // because it throws off the iterator state.\n  // So we collect all marker nodes first and then follow up with\n  // applying the changes to the DOM: either inserting an empty node\n  // or just removing the marker if it was used as a separator.\n  const nodes = [];\n  while (currentNode = commentNodesIterator.nextNode()) {\n    nodes.push(currentNode);\n  }\n  for (const node of nodes) {\n    if (node.textContent === \"ngetn\" /* TextNodeMarker.EmptyNode */) {\n      node.replaceWith(doc.createTextNode(''));\n    } else {\n      node.remove();\n    }\n  }\n}\n/**\n * Marks a node as \"claimed\" by hydration process.\n * This is needed to make assessments in tests whether\n * the hydration process handled all nodes.\n */\nfunction markRNodeAsClaimedByHydration(node, checkIfAlreadyClaimed = true) {\n  if (!ngDevMode) {\n    throw new Error('Calling `markRNodeAsClaimedByHydration` in prod mode ' + 'is not supported and likely a mistake.');\n  }\n  if (checkIfAlreadyClaimed && isRNodeClaimedForHydration(node)) {\n    throw new Error('Trying to claim a node, which was claimed already.');\n  }\n  node.__claimed = true;\n  ngDevMode.hydratedNodes++;\n}\nfunction isRNodeClaimedForHydration(node) {\n  return !!node.__claimed;\n}\nfunction setSegmentHead(hydrationInfo, index, node) {\n  var _hydrationInfo$segmen;\n  (_hydrationInfo$segmen = hydrationInfo.segmentHeads) !== null && _hydrationInfo$segmen !== void 0 ? _hydrationInfo$segmen : hydrationInfo.segmentHeads = {};\n  hydrationInfo.segmentHeads[index] = node;\n}\nfunction getSegmentHead(hydrationInfo, index) {\n  var _hydrationInfo$segmen2, _hydrationInfo$segmen3;\n  return (_hydrationInfo$segmen2 = (_hydrationInfo$segmen3 = hydrationInfo.segmentHeads) === null || _hydrationInfo$segmen3 === void 0 ? void 0 : _hydrationInfo$segmen3[index]) !== null && _hydrationInfo$segmen2 !== void 0 ? _hydrationInfo$segmen2 : null;\n}\n/**\n * Returns the size of an <ng-container>, using either the information\n * serialized in `ELEMENT_CONTAINERS` (element container size) or by\n * computing the sum of root nodes in all dehydrated views in a given\n * container (in case this `<ng-container>` was also used as a view\n * container host node, e.g. <ng-container *ngIf>).\n */\nfunction getNgContainerSize(hydrationInfo, index) {\n  var _data$ELEMENT_CONTAIN, _data$ELEMENT_CONTAIN2, _data$CONTAINERS;\n  const data = hydrationInfo.data;\n  let size = (_data$ELEMENT_CONTAIN = (_data$ELEMENT_CONTAIN2 = data[ELEMENT_CONTAINERS]) === null || _data$ELEMENT_CONTAIN2 === void 0 ? void 0 : _data$ELEMENT_CONTAIN2[index]) !== null && _data$ELEMENT_CONTAIN !== void 0 ? _data$ELEMENT_CONTAIN : null;\n  // If there is no serialized information available in the `ELEMENT_CONTAINERS` slot,\n  // check if we have info about view containers at this location (e.g.\n  // `<ng-container *ngIf>`) and use container size as a number of root nodes in this\n  // element container.\n  if (size === null && (_data$CONTAINERS = data[CONTAINERS]) !== null && _data$CONTAINERS !== void 0 && _data$CONTAINERS[index]) {\n    size = calcSerializedContainerSize(hydrationInfo, index);\n  }\n  return size;\n}\nfunction getSerializedContainerViews(hydrationInfo, index) {\n  var _hydrationInfo$data$C, _hydrationInfo$data$C2;\n  return (_hydrationInfo$data$C = (_hydrationInfo$data$C2 = hydrationInfo.data[CONTAINERS]) === null || _hydrationInfo$data$C2 === void 0 ? void 0 : _hydrationInfo$data$C2[index]) !== null && _hydrationInfo$data$C !== void 0 ? _hydrationInfo$data$C : null;\n}\n/**\n * Computes the size of a serialized container (the number of root nodes)\n * by calculating the sum of root nodes in all dehydrated views in this container.\n */\nfunction calcSerializedContainerSize(hydrationInfo, index) {\n  var _getSerializedContain;\n  const views = (_getSerializedContain = getSerializedContainerViews(hydrationInfo, index)) !== null && _getSerializedContain !== void 0 ? _getSerializedContain : [];\n  let numNodes = 0;\n  for (let view of views) {\n    var _view$MULTIPLIER;\n    numNodes += view[NUM_ROOT_NODES] * ((_view$MULTIPLIER = view[MULTIPLIER]) !== null && _view$MULTIPLIER !== void 0 ? _view$MULTIPLIER : 1);\n  }\n  return numNodes;\n}\n/**\n * Checks whether a node is annotated as \"disconnected\", i.e. not present\n * in the DOM at serialization time. We should not attempt hydration for\n * such nodes and instead, use a regular \"creation mode\".\n */\nfunction isDisconnectedNode$1(hydrationInfo, index) {\n  var _hydrationInfo$discon;\n  // Check if we are processing disconnected info for the first time.\n  if (typeof hydrationInfo.disconnectedNodes === 'undefined') {\n    const nodeIds = hydrationInfo.data[DISCONNECTED_NODES];\n    hydrationInfo.disconnectedNodes = nodeIds ? new Set(nodeIds) : null;\n  }\n  return !!((_hydrationInfo$discon = hydrationInfo.disconnectedNodes) !== null && _hydrationInfo$discon !== void 0 && _hydrationInfo$discon.has(index));\n}\n\n/**\n * Represents a component created by a `ComponentFactory`.\n * Provides access to the component instance and related objects,\n * and provides the means of destroying the instance.\n *\n * @publicApi\n */\nclass ComponentRef$1 {}\n/**\n * Base class for a factory that can create a component dynamically.\n * Instantiate a factory for a given type of component with `resolveComponentFactory()`.\n * Use the resulting `ComponentFactory.create()` method to create a component of that type.\n *\n * @publicApi\n *\n * @deprecated Angular no longer requires Component factories. Please use other APIs where\n *     Component class can be used directly.\n */\nclass ComponentFactory$1 {}\nfunction noComponentFactoryError(component) {\n  const error = Error(`No component factory found for ${stringify(component)}.`);\n  error[ERROR_COMPONENT] = component;\n  return error;\n}\nconst ERROR_COMPONENT = 'ngComponent';\nfunction getComponent$1(error) {\n  return error[ERROR_COMPONENT];\n}\nclass _NullComponentFactoryResolver {\n  resolveComponentFactory(component) {\n    throw noComponentFactoryError(component);\n  }\n}\n/**\n * A simple registry that maps `Components` to generated `ComponentFactory` classes\n * that can be used to create instances of components.\n * Use to obtain the factory for a given component type,\n * then use the factory's `create()` method to create a component of that type.\n *\n * Note: since v13, dynamic component creation via\n * [`ViewContainerRef.createComponent`](api/core/ViewContainerRef#createComponent)\n * does **not** require resolving component factory: component class can be used directly.\n *\n * @publicApi\n *\n * @deprecated Angular no longer requires Component factories. Please use other APIs where\n *     Component class can be used directly.\n */\nclass ComponentFactoryResolver$1 {}\n\n/**\n * Creates an ElementRef from the most recent node.\n *\n * @returns The ElementRef instance to use\n */\n_class3 = ComponentFactoryResolver$1;\n_class3.NULL = /* @__PURE__ */new _NullComponentFactoryResolver();\nfunction injectElementRef() {\n  return createElementRef(getCurrentTNode(), getLView());\n}\n/**\n * Creates an ElementRef given a node.\n *\n * @param tNode The node for which you'd like an ElementRef\n * @param lView The view to which the node belongs\n * @returns The ElementRef instance to use\n */\nfunction createElementRef(tNode, lView) {\n  return new ElementRef(getNativeByTNode(tNode, lView));\n}\n/**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * @security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](https://g.co/ng/security).\n *\n * @publicApi\n */\n// Note: We don't expose things like `Injector`, `ViewContainer`, ... here,\n// i.e. users have to ask for what they need. With that, we can build better analysis tools\n// and could do better codegen in the future.\nclass ElementRef {\n  constructor(nativeElement) {\n    this.nativeElement = nativeElement;\n  }\n  /**\n   * @internal\n   * @nocollapse\n   */\n}\n/**\n * Unwraps `ElementRef` and return the `nativeElement`.\n *\n * @param value value to unwrap\n * @returns `nativeElement` if `ElementRef` otherwise returns value as is.\n */\n_class4 = ElementRef;\n_class4.__NG_ELEMENT_ID__ = injectElementRef;\nfunction unwrapElementRef(value) {\n  return value instanceof ElementRef ? value.nativeElement : value;\n}\n\n/**\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n *\n * @publicApi\n */\nclass RendererFactory2 {}\n/**\n * Extend this base class to implement custom rendering. By default, Angular\n * renders a template into DOM. You can use custom rendering to intercept\n * rendering calls, or to render to something other than DOM.\n *\n * Create your custom renderer using `RendererFactory2`.\n *\n * Use a custom renderer to bypass Angular's templating and\n * make custom UI changes that can't be expressed declaratively.\n * For example if you need to set a property or an attribute whose name is\n * not statically known, use the `setProperty()` or\n * `setAttribute()` method.\n *\n * @publicApi\n */\nclass Renderer2 {\n  constructor() {\n    /**\n     * If null or undefined, the view engine won't call it.\n     * This is used as a performance optimization for production mode.\n     */\n    this.destroyNode = null;\n  }\n  /**\n   * @internal\n   * @nocollapse\n   */\n}\n/** Injects a Renderer2 for the current component. */\n_class5 = Renderer2;\n_class5.__NG_ELEMENT_ID__ = () => injectRenderer2();\nfunction injectRenderer2() {\n  // We need the Renderer to be based on the component that it's being injected into, however since\n  // DI happens before we've entered its view, `getLView` will return the parent view instead.\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  const nodeAtIndex = getComponentLViewByIndex(tNode.index, lView);\n  return (isLView(nodeAtIndex) ? nodeAtIndex : lView)[RENDERER];\n}\n\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n * @publicApi\n */\nclass Sanitizer {}\n\n// This default value is when checking the hierarchy for a token.\n//\n// It means both:\n// - the token is not provided by the current injector,\n// - only the element injectors should be checked (ie do not check module injectors\n//\n//          mod1\n//         /\n//       el1   mod2\n//         \\  /\n//         el2\n//\n// When requesting el2.injector.get(token), we should check in the following order and return the\n// first found value:\n// - el2.injector.get(token, default)\n// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module\n// - mod2.injector.get(token, default)\n_class6 = Sanitizer;\n/** @nocollapse */\n_class6.ɵprov = ɵɵdefineInjectable({\n  token: _class6,\n  providedIn: 'root',\n  factory: () => null\n});\nconst NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\n\n/**\n * Checks if the given `value` is a reactive `Signal`.\n */\nfunction isSignal(value) {\n  return typeof value === 'function' && value[SIGNAL$1] !== undefined;\n}\n\n/**\n * Create a computed `Signal` which derives a reactive value from an expression.\n */\nfunction computed(computation, options) {\n  const getter = createComputed$1(computation);\n  if (options !== null && options !== void 0 && options.equal) {\n    getter[SIGNAL$1].equal = options.equal;\n  }\n  return getter;\n}\n\n/**\n * Create a `Signal` that can be set or updated directly.\n */\nfunction signal(initialValue, options) {\n  const signalFn = createSignal$1(initialValue);\n  const node = signalFn[SIGNAL$1];\n  if (options !== null && options !== void 0 && options.equal) {\n    node.equal = options.equal;\n  }\n  signalFn.set = newValue => signalSetFn$1(node, newValue);\n  signalFn.update = updateFn => signalUpdateFn$1(node, updateFn);\n  signalFn.asReadonly = signalAsReadonlyFn.bind(signalFn);\n  return signalFn;\n}\nfunction signalAsReadonlyFn() {\n  const node = this[SIGNAL$1];\n  if (node.readonlyFn === undefined) {\n    const readonlyFn = () => this();\n    readonlyFn[SIGNAL$1] = node;\n    node.readonlyFn = readonlyFn;\n  }\n  return node.readonlyFn;\n}\n\n/**\n * Execute an arbitrary function in a non-reactive (non-tracking) context. The executed function\n * can, optionally, return a value.\n */\nfunction untracked(nonReactiveReadsFn) {\n  const prevConsumer = setActiveConsumer$1(null);\n  // We are not trying to catch any particular errors here, just making sure that the consumers\n  // stack is restored in case of errors.\n  try {\n    return nonReactiveReadsFn();\n  } finally {\n    setActiveConsumer$1(prevConsumer);\n  }\n}\nfunction isIterable(obj) {\n  return obj !== null && typeof obj === 'object' && obj[Symbol.iterator] !== undefined;\n}\nfunction isListLikeIterable(obj) {\n  if (!isJsObject(obj)) return false;\n  return Array.isArray(obj) || !(obj instanceof Map) &&\n  // JS Map are iterables but return entries as [k, v]\n  Symbol.iterator in obj; // JS Iterable have a Symbol.iterator prop\n}\n\nfunction areIterablesEqual(a, b, comparator) {\n  const iterator1 = a[Symbol.iterator]();\n  const iterator2 = b[Symbol.iterator]();\n  while (true) {\n    const item1 = iterator1.next();\n    const item2 = iterator2.next();\n    if (item1.done && item2.done) return true;\n    if (item1.done || item2.done) return false;\n    if (!comparator(item1.value, item2.value)) return false;\n  }\n}\nfunction iterateListLike(obj, fn) {\n  if (Array.isArray(obj)) {\n    for (let i = 0; i < obj.length; i++) {\n      fn(obj[i]);\n    }\n  } else {\n    const iterator = obj[Symbol.iterator]();\n    let item;\n    while (!(item = iterator.next()).done) {\n      fn(item.value);\n    }\n  }\n}\nfunction isJsObject(o) {\n  return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\nclass DefaultIterableDifferFactory {\n  constructor() {}\n  supports(obj) {\n    return isListLikeIterable(obj);\n  }\n  create(trackByFn) {\n    return new DefaultIterableDiffer(trackByFn);\n  }\n}\nconst trackByIdentity = (index, item) => item;\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n * @publicApi\n */\nclass DefaultIterableDiffer {\n  constructor(trackByFn) {\n    this.length = 0;\n    // Keeps track of the used records at any point in time (during & across `_check()` calls)\n    this._linkedRecords = null;\n    // Keeps track of the removed records at any point in time during `_check()` calls.\n    this._unlinkedRecords = null;\n    this._previousItHead = null;\n    this._itHead = null;\n    this._itTail = null;\n    this._additionsHead = null;\n    this._additionsTail = null;\n    this._movesHead = null;\n    this._movesTail = null;\n    this._removalsHead = null;\n    this._removalsTail = null;\n    // Keeps track of records where custom track by is the same, but item identity has changed\n    this._identityChangesHead = null;\n    this._identityChangesTail = null;\n    this._trackByFn = trackByFn || trackByIdentity;\n  }\n  forEachItem(fn) {\n    let record;\n    for (record = this._itHead; record !== null; record = record._next) {\n      fn(record);\n    }\n  }\n  forEachOperation(fn) {\n    let nextIt = this._itHead;\n    let nextRemove = this._removalsHead;\n    let addRemoveOffset = 0;\n    let moveOffsets = null;\n    while (nextIt || nextRemove) {\n      // Figure out which is the next record to process\n      // Order: remove, add, move\n      const record = !nextRemove || nextIt && nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? nextIt : nextRemove;\n      const adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n      const currentIndex = record.currentIndex;\n      // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n      if (record === nextRemove) {\n        addRemoveOffset--;\n        nextRemove = nextRemove._nextRemoved;\n      } else {\n        nextIt = nextIt._next;\n        if (record.previousIndex == null) {\n          addRemoveOffset++;\n        } else {\n          // INVARIANT:  currentIndex < previousIndex\n          if (!moveOffsets) moveOffsets = [];\n          const localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n          const localCurrentIndex = currentIndex - addRemoveOffset;\n          if (localMovePreviousIndex != localCurrentIndex) {\n            for (let i = 0; i < localMovePreviousIndex; i++) {\n              const offset = i < moveOffsets.length ? moveOffsets[i] : moveOffsets[i] = 0;\n              const index = offset + i;\n              if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n                moveOffsets[i] = offset + 1;\n              }\n            }\n            const previousIndex = record.previousIndex;\n            moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n          }\n        }\n      }\n      if (adjPreviousIndex !== currentIndex) {\n        fn(record, adjPreviousIndex, currentIndex);\n      }\n    }\n  }\n  forEachPreviousItem(fn) {\n    let record;\n    for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n      fn(record);\n    }\n  }\n  forEachAddedItem(fn) {\n    let record;\n    for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n      fn(record);\n    }\n  }\n  forEachMovedItem(fn) {\n    let record;\n    for (record = this._movesHead; record !== null; record = record._nextMoved) {\n      fn(record);\n    }\n  }\n  forEachRemovedItem(fn) {\n    let record;\n    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n      fn(record);\n    }\n  }\n  forEachIdentityChange(fn) {\n    let record;\n    for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n      fn(record);\n    }\n  }\n  diff(collection) {\n    if (collection == null) collection = [];\n    if (!isListLikeIterable(collection)) {\n      throw new RuntimeError(900 /* RuntimeErrorCode.INVALID_DIFFER_INPUT */, ngDevMode && `Error trying to diff '${stringify(collection)}'. Only arrays and iterables are allowed`);\n    }\n    if (this.check(collection)) {\n      return this;\n    } else {\n      return null;\n    }\n  }\n  onDestroy() {}\n  check(collection) {\n    this._reset();\n    let record = this._itHead;\n    let mayBeDirty = false;\n    let index;\n    let item;\n    let itemTrackBy;\n    if (Array.isArray(collection)) {\n      this.length = collection.length;\n      for (let index = 0; index < this.length; index++) {\n        item = collection[index];\n        itemTrackBy = this._trackByFn(index, item);\n        if (record === null || !Object.is(record.trackById, itemTrackBy)) {\n          record = this._mismatch(record, item, itemTrackBy, index);\n          mayBeDirty = true;\n        } else {\n          if (mayBeDirty) {\n            // TODO(misko): can we limit this to duplicates only?\n            record = this._verifyReinsertion(record, item, itemTrackBy, index);\n          }\n          if (!Object.is(record.item, item)) this._addIdentityChange(record, item);\n        }\n        record = record._next;\n      }\n    } else {\n      index = 0;\n      iterateListLike(collection, item => {\n        itemTrackBy = this._trackByFn(index, item);\n        if (record === null || !Object.is(record.trackById, itemTrackBy)) {\n          record = this._mismatch(record, item, itemTrackBy, index);\n          mayBeDirty = true;\n        } else {\n          if (mayBeDirty) {\n            // TODO(misko): can we limit this to duplicates only?\n            record = this._verifyReinsertion(record, item, itemTrackBy, index);\n          }\n          if (!Object.is(record.item, item)) this._addIdentityChange(record, item);\n        }\n        record = record._next;\n        index++;\n      });\n      this.length = index;\n    }\n    this._truncate(record);\n    this.collection = collection;\n    return this.isDirty;\n  }\n  /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity\n   * changes.\n   */\n  get isDirty() {\n    return this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null || this._identityChangesHead !== null;\n  }\n  /**\n   * Reset the state of the change objects to show no changes. This means set previousKey to\n   * currentKey, and clear all of the queues (additions, moves, removals).\n   * Set the previousIndexes of moved and added items to their currentIndexes\n   * Reset the list of additions, moves and removals\n   *\n   * @internal\n   */\n  _reset() {\n    if (this.isDirty) {\n      let record;\n      for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n        record._nextPrevious = record._next;\n      }\n      for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n        record.previousIndex = record.currentIndex;\n      }\n      this._additionsHead = this._additionsTail = null;\n      for (record = this._movesHead; record !== null; record = record._nextMoved) {\n        record.previousIndex = record.currentIndex;\n      }\n      this._movesHead = this._movesTail = null;\n      this._removalsHead = this._removalsTail = null;\n      this._identityChangesHead = this._identityChangesTail = null;\n      // TODO(vicb): when assert gets supported\n      // assert(!this.isDirty);\n    }\n  }\n  /**\n   * This is the core function which handles differences between collections.\n   *\n   * - `record` is the record which we saw at this position last time. If null then it is a new\n   *   item.\n   * - `item` is the current item in the collection\n   * - `index` is the position of the item in the collection\n   *\n   * @internal\n   */\n  _mismatch(record, item, itemTrackBy, index) {\n    // The previous record after which we will append the current one.\n    let previousRecord;\n    if (record === null) {\n      previousRecord = this._itTail;\n    } else {\n      previousRecord = record._prev;\n      // Remove the record from the collection since we know it does not match the item.\n      this._remove(record);\n    }\n    // See if we have evicted the item, which used to be at some anterior position of _itHead list.\n    record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n    if (record !== null) {\n      // It is an item which we have evicted earlier: reinsert it back into the list.\n      // But first we need to check if identity changed, so we can update in view if necessary.\n      if (!Object.is(record.item, item)) this._addIdentityChange(record, item);\n      this._reinsertAfter(record, previousRecord, index);\n    } else {\n      // Attempt to see if the item is at some posterior position of _itHead list.\n      record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n      if (record !== null) {\n        // We have the item in _itHead at/after `index` position. We need to move it forward in the\n        // collection.\n        // But first we need to check if identity changed, so we can update in view if necessary.\n        if (!Object.is(record.item, item)) this._addIdentityChange(record, item);\n        this._moveAfter(record, previousRecord, index);\n      } else {\n        // It is a new item: add it.\n        record = this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);\n      }\n    }\n    return record;\n  }\n  /**\n   * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n   *\n   * Use case: `[a, a]` => `[b, a, a]`\n   *\n   * If we did not have this check then the insertion of `b` would:\n   *   1) evict first `a`\n   *   2) insert `b` at `0` index.\n   *   3) leave `a` at index `1` as is. <-- this is wrong!\n   *   3) reinsert `a` at index 2. <-- this is wrong!\n   *\n   * The correct behavior is:\n   *   1) evict first `a`\n   *   2) insert `b` at `0` index.\n   *   3) reinsert `a` at index 1.\n   *   3) move `a` at from `1` to `2`.\n   *\n   *\n   * Double check that we have not evicted a duplicate item. We need to check if the item type may\n   * have already been removed:\n   * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n   * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n   * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n   * at the end.\n   *\n   * @internal\n   */\n  _verifyReinsertion(record, item, itemTrackBy, index) {\n    let reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n    if (reinsertRecord !== null) {\n      record = this._reinsertAfter(reinsertRecord, record._prev, index);\n    } else if (record.currentIndex != index) {\n      record.currentIndex = index;\n      this._addToMoves(record, index);\n    }\n    return record;\n  }\n  /**\n   * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection\n   *\n   * - `record` The first excess {@link IterableChangeRecord_}.\n   *\n   * @internal\n   */\n  _truncate(record) {\n    // Anything after that needs to be removed;\n    while (record !== null) {\n      const nextRecord = record._next;\n      this._addToRemovals(this._unlink(record));\n      record = nextRecord;\n    }\n    if (this._unlinkedRecords !== null) {\n      this._unlinkedRecords.clear();\n    }\n    if (this._additionsTail !== null) {\n      this._additionsTail._nextAdded = null;\n    }\n    if (this._movesTail !== null) {\n      this._movesTail._nextMoved = null;\n    }\n    if (this._itTail !== null) {\n      this._itTail._next = null;\n    }\n    if (this._removalsTail !== null) {\n      this._removalsTail._nextRemoved = null;\n    }\n    if (this._identityChangesTail !== null) {\n      this._identityChangesTail._nextIdentityChange = null;\n    }\n  }\n  /** @internal */\n  _reinsertAfter(record, prevRecord, index) {\n    if (this._unlinkedRecords !== null) {\n      this._unlinkedRecords.remove(record);\n    }\n    const prev = record._prevRemoved;\n    const next = record._nextRemoved;\n    if (prev === null) {\n      this._removalsHead = next;\n    } else {\n      prev._nextRemoved = next;\n    }\n    if (next === null) {\n      this._removalsTail = prev;\n    } else {\n      next._prevRemoved = prev;\n    }\n    this._insertAfter(record, prevRecord, index);\n    this._addToMoves(record, index);\n    return record;\n  }\n  /** @internal */\n  _moveAfter(record, prevRecord, index) {\n    this._unlink(record);\n    this._insertAfter(record, prevRecord, index);\n    this._addToMoves(record, index);\n    return record;\n  }\n  /** @internal */\n  _addAfter(record, prevRecord, index) {\n    this._insertAfter(record, prevRecord, index);\n    if (this._additionsTail === null) {\n      // TODO(vicb):\n      // assert(this._additionsHead === null);\n      this._additionsTail = this._additionsHead = record;\n    } else {\n      // TODO(vicb):\n      // assert(_additionsTail._nextAdded === null);\n      // assert(record._nextAdded === null);\n      this._additionsTail = this._additionsTail._nextAdded = record;\n    }\n    return record;\n  }\n  /** @internal */\n  _insertAfter(record, prevRecord, index) {\n    // TODO(vicb):\n    // assert(record != prevRecord);\n    // assert(record._next === null);\n    // assert(record._prev === null);\n    const next = prevRecord === null ? this._itHead : prevRecord._next;\n    // TODO(vicb):\n    // assert(next != record);\n    // assert(prevRecord != record);\n    record._next = next;\n    record._prev = prevRecord;\n    if (next === null) {\n      this._itTail = record;\n    } else {\n      next._prev = record;\n    }\n    if (prevRecord === null) {\n      this._itHead = record;\n    } else {\n      prevRecord._next = record;\n    }\n    if (this._linkedRecords === null) {\n      this._linkedRecords = new _DuplicateMap();\n    }\n    this._linkedRecords.put(record);\n    record.currentIndex = index;\n    return record;\n  }\n  /** @internal */\n  _remove(record) {\n    return this._addToRemovals(this._unlink(record));\n  }\n  /** @internal */\n  _unlink(record) {\n    if (this._linkedRecords !== null) {\n      this._linkedRecords.remove(record);\n    }\n    const prev = record._prev;\n    const next = record._next;\n    // TODO(vicb):\n    // assert((record._prev = null) === null);\n    // assert((record._next = null) === null);\n    if (prev === null) {\n      this._itHead = next;\n    } else {\n      prev._next = next;\n    }\n    if (next === null) {\n      this._itTail = prev;\n    } else {\n      next._prev = prev;\n    }\n    return record;\n  }\n  /** @internal */\n  _addToMoves(record, toIndex) {\n    // TODO(vicb):\n    // assert(record._nextMoved === null);\n    if (record.previousIndex === toIndex) {\n      return record;\n    }\n    if (this._movesTail === null) {\n      // TODO(vicb):\n      // assert(_movesHead === null);\n      this._movesTail = this._movesHead = record;\n    } else {\n      // TODO(vicb):\n      // assert(_movesTail._nextMoved === null);\n      this._movesTail = this._movesTail._nextMoved = record;\n    }\n    return record;\n  }\n  _addToRemovals(record) {\n    if (this._unlinkedRecords === null) {\n      this._unlinkedRecords = new _DuplicateMap();\n    }\n    this._unlinkedRecords.put(record);\n    record.currentIndex = null;\n    record._nextRemoved = null;\n    if (this._removalsTail === null) {\n      // TODO(vicb):\n      // assert(_removalsHead === null);\n      this._removalsTail = this._removalsHead = record;\n      record._prevRemoved = null;\n    } else {\n      // TODO(vicb):\n      // assert(_removalsTail._nextRemoved === null);\n      // assert(record._nextRemoved === null);\n      record._prevRemoved = this._removalsTail;\n      this._removalsTail = this._removalsTail._nextRemoved = record;\n    }\n    return record;\n  }\n  /** @internal */\n  _addIdentityChange(record, item) {\n    record.item = item;\n    if (this._identityChangesTail === null) {\n      this._identityChangesTail = this._identityChangesHead = record;\n    } else {\n      this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n    }\n    return record;\n  }\n}\nclass IterableChangeRecord_ {\n  constructor(item, trackById) {\n    this.item = item;\n    this.trackById = trackById;\n    this.currentIndex = null;\n    this.previousIndex = null;\n    /** @internal */\n    this._nextPrevious = null;\n    /** @internal */\n    this._prev = null;\n    /** @internal */\n    this._next = null;\n    /** @internal */\n    this._prevDup = null;\n    /** @internal */\n    this._nextDup = null;\n    /** @internal */\n    this._prevRemoved = null;\n    /** @internal */\n    this._nextRemoved = null;\n    /** @internal */\n    this._nextAdded = null;\n    /** @internal */\n    this._nextMoved = null;\n    /** @internal */\n    this._nextIdentityChange = null;\n  }\n}\n// A linked list of IterableChangeRecords with the same IterableChangeRecord_.item\nclass _DuplicateItemRecordList {\n  constructor() {\n    /** @internal */\n    this._head = null;\n    /** @internal */\n    this._tail = null;\n  }\n  /**\n   * Append the record to the list of duplicates.\n   *\n   * Note: by design all records in the list of duplicates hold the same value in record.item.\n   */\n  add(record) {\n    if (this._head === null) {\n      this._head = this._tail = record;\n      record._nextDup = null;\n      record._prevDup = null;\n    } else {\n      // TODO(vicb):\n      // assert(record.item ==  _head.item ||\n      //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n      this._tail._nextDup = record;\n      record._prevDup = this._tail;\n      record._nextDup = null;\n      this._tail = record;\n    }\n  }\n  // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and\n  // IterableChangeRecord_.currentIndex >= atOrAfterIndex\n  get(trackById, atOrAfterIndex) {\n    let record;\n    for (record = this._head; record !== null; record = record._nextDup) {\n      if ((atOrAfterIndex === null || atOrAfterIndex <= record.currentIndex) && Object.is(record.trackById, trackById)) {\n        return record;\n      }\n    }\n    return null;\n  }\n  /**\n   * Remove one {@link IterableChangeRecord_} from the list of duplicates.\n   *\n   * Returns whether the list of duplicates is empty.\n   */\n  remove(record) {\n    // TODO(vicb):\n    // assert(() {\n    //  // verify that the record being removed is in the list.\n    //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\n    //    if (identical(cursor, record)) return true;\n    //  }\n    //  return false;\n    //});\n    const prev = record._prevDup;\n    const next = record._nextDup;\n    if (prev === null) {\n      this._head = next;\n    } else {\n      prev._nextDup = next;\n    }\n    if (next === null) {\n      this._tail = prev;\n    } else {\n      next._prevDup = prev;\n    }\n    return this._head === null;\n  }\n}\nclass _DuplicateMap {\n  constructor() {\n    this.map = new Map();\n  }\n  put(record) {\n    const key = record.trackById;\n    let duplicates = this.map.get(key);\n    if (!duplicates) {\n      duplicates = new _DuplicateItemRecordList();\n      this.map.set(key, duplicates);\n    }\n    duplicates.add(record);\n  }\n  /**\n   * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n   * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n   *\n   * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n   * have any more `a`s needs to return the second `a`.\n   */\n  get(trackById, atOrAfterIndex) {\n    const key = trackById;\n    const recordList = this.map.get(key);\n    return recordList ? recordList.get(trackById, atOrAfterIndex) : null;\n  }\n  /**\n   * Removes a {@link IterableChangeRecord_} from the list of duplicates.\n   *\n   * The list of duplicates also is removed from the map if it gets empty.\n   */\n  remove(record) {\n    const key = record.trackById;\n    const recordList = this.map.get(key);\n    // Remove the list of duplicates when it gets empty\n    if (recordList.remove(record)) {\n      this.map.delete(key);\n    }\n    return record;\n  }\n  get isEmpty() {\n    return this.map.size === 0;\n  }\n  clear() {\n    this.map.clear();\n  }\n}\nfunction getPreviousIndex(item, addRemoveOffset, moveOffsets) {\n  const previousIndex = item.previousIndex;\n  if (previousIndex === null) return previousIndex;\n  let moveOffset = 0;\n  if (moveOffsets && previousIndex < moveOffsets.length) {\n    moveOffset = moveOffsets[previousIndex];\n  }\n  return previousIndex + addRemoveOffset + moveOffset;\n}\nclass DefaultKeyValueDifferFactory {\n  constructor() {}\n  supports(obj) {\n    return obj instanceof Map || isJsObject(obj);\n  }\n  create() {\n    return new DefaultKeyValueDiffer();\n  }\n}\nclass DefaultKeyValueDiffer {\n  constructor() {\n    this._records = new Map();\n    this._mapHead = null;\n    // _appendAfter is used in the check loop\n    this._appendAfter = null;\n    this._previousMapHead = null;\n    this._changesHead = null;\n    this._changesTail = null;\n    this._additionsHead = null;\n    this._additionsTail = null;\n    this._removalsHead = null;\n    this._removalsTail = null;\n  }\n  get isDirty() {\n    return this._additionsHead !== null || this._changesHead !== null || this._removalsHead !== null;\n  }\n  forEachItem(fn) {\n    let record;\n    for (record = this._mapHead; record !== null; record = record._next) {\n      fn(record);\n    }\n  }\n  forEachPreviousItem(fn) {\n    let record;\n    for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n      fn(record);\n    }\n  }\n  forEachChangedItem(fn) {\n    let record;\n    for (record = this._changesHead; record !== null; record = record._nextChanged) {\n      fn(record);\n    }\n  }\n  forEachAddedItem(fn) {\n    let record;\n    for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n      fn(record);\n    }\n  }\n  forEachRemovedItem(fn) {\n    let record;\n    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n      fn(record);\n    }\n  }\n  diff(map) {\n    if (!map) {\n      map = new Map();\n    } else if (!(map instanceof Map || isJsObject(map))) {\n      throw new RuntimeError(900 /* RuntimeErrorCode.INVALID_DIFFER_INPUT */, ngDevMode && `Error trying to diff '${stringify(map)}'. Only maps and objects are allowed`);\n    }\n    return this.check(map) ? this : null;\n  }\n  onDestroy() {}\n  /**\n   * Check the current state of the map vs the previous.\n   * The algorithm is optimised for when the keys do no change.\n   */\n  check(map) {\n    this._reset();\n    let insertBefore = this._mapHead;\n    this._appendAfter = null;\n    this._forEach(map, (value, key) => {\n      if (insertBefore && insertBefore.key === key) {\n        this._maybeAddToChanges(insertBefore, value);\n        this._appendAfter = insertBefore;\n        insertBefore = insertBefore._next;\n      } else {\n        const record = this._getOrCreateRecordForKey(key, value);\n        insertBefore = this._insertBeforeOrAppend(insertBefore, record);\n      }\n    });\n    // Items remaining at the end of the list have been deleted\n    if (insertBefore) {\n      if (insertBefore._prev) {\n        insertBefore._prev._next = null;\n      }\n      this._removalsHead = insertBefore;\n      for (let record = insertBefore; record !== null; record = record._nextRemoved) {\n        if (record === this._mapHead) {\n          this._mapHead = null;\n        }\n        this._records.delete(record.key);\n        record._nextRemoved = record._next;\n        record.previousValue = record.currentValue;\n        record.currentValue = null;\n        record._prev = null;\n        record._next = null;\n      }\n    }\n    // Make sure tails have no next records from previous runs\n    if (this._changesTail) this._changesTail._nextChanged = null;\n    if (this._additionsTail) this._additionsTail._nextAdded = null;\n    return this.isDirty;\n  }\n  /**\n   * Inserts a record before `before` or append at the end of the list when `before` is null.\n   *\n   * Notes:\n   * - This method appends at `this._appendAfter`,\n   * - This method updates `this._appendAfter`,\n   * - The return value is the new value for the insertion pointer.\n   */\n  _insertBeforeOrAppend(before, record) {\n    if (before) {\n      const prev = before._prev;\n      record._next = before;\n      record._prev = prev;\n      before._prev = record;\n      if (prev) {\n        prev._next = record;\n      }\n      if (before === this._mapHead) {\n        this._mapHead = record;\n      }\n      this._appendAfter = before;\n      return before;\n    }\n    if (this._appendAfter) {\n      this._appendAfter._next = record;\n      record._prev = this._appendAfter;\n    } else {\n      this._mapHead = record;\n    }\n    this._appendAfter = record;\n    return null;\n  }\n  _getOrCreateRecordForKey(key, value) {\n    if (this._records.has(key)) {\n      const record = this._records.get(key);\n      this._maybeAddToChanges(record, value);\n      const prev = record._prev;\n      const next = record._next;\n      if (prev) {\n        prev._next = next;\n      }\n      if (next) {\n        next._prev = prev;\n      }\n      record._next = null;\n      record._prev = null;\n      return record;\n    }\n    const record = new KeyValueChangeRecord_(key);\n    this._records.set(key, record);\n    record.currentValue = value;\n    this._addToAdditions(record);\n    return record;\n  }\n  /** @internal */\n  _reset() {\n    if (this.isDirty) {\n      let record;\n      // let `_previousMapHead` contain the state of the map before the changes\n      this._previousMapHead = this._mapHead;\n      for (record = this._previousMapHead; record !== null; record = record._next) {\n        record._nextPrevious = record._next;\n      }\n      // Update `record.previousValue` with the value of the item before the changes\n      // We need to update all changed items (that's those which have been added and changed)\n      for (record = this._changesHead; record !== null; record = record._nextChanged) {\n        record.previousValue = record.currentValue;\n      }\n      for (record = this._additionsHead; record != null; record = record._nextAdded) {\n        record.previousValue = record.currentValue;\n      }\n      this._changesHead = this._changesTail = null;\n      this._additionsHead = this._additionsTail = null;\n      this._removalsHead = null;\n    }\n  }\n  // Add the record or a given key to the list of changes only when the value has actually changed\n  _maybeAddToChanges(record, newValue) {\n    if (!Object.is(newValue, record.currentValue)) {\n      record.previousValue = record.currentValue;\n      record.currentValue = newValue;\n      this._addToChanges(record);\n    }\n  }\n  _addToAdditions(record) {\n    if (this._additionsHead === null) {\n      this._additionsHead = this._additionsTail = record;\n    } else {\n      this._additionsTail._nextAdded = record;\n      this._additionsTail = record;\n    }\n  }\n  _addToChanges(record) {\n    if (this._changesHead === null) {\n      this._changesHead = this._changesTail = record;\n    } else {\n      this._changesTail._nextChanged = record;\n      this._changesTail = record;\n    }\n  }\n  /** @internal */\n  _forEach(obj, fn) {\n    if (obj instanceof Map) {\n      obj.forEach(fn);\n    } else {\n      Object.keys(obj).forEach(k => fn(obj[k], k));\n    }\n  }\n}\nclass KeyValueChangeRecord_ {\n  constructor(key) {\n    this.key = key;\n    this.previousValue = null;\n    this.currentValue = null;\n    /** @internal */\n    this._nextPrevious = null;\n    /** @internal */\n    this._next = null;\n    /** @internal */\n    this._prev = null;\n    /** @internal */\n    this._nextAdded = null;\n    /** @internal */\n    this._nextRemoved = null;\n    /** @internal */\n    this._nextChanged = null;\n  }\n}\nfunction defaultIterableDiffersFactory() {\n  return new IterableDiffers([new DefaultIterableDifferFactory()]);\n}\n/**\n * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n *\n * @publicApi\n */\nclass IterableDiffers {\n  constructor(factories) {\n    this.factories = factories;\n  }\n  static create(factories, parent) {\n    if (parent != null) {\n      const copied = parent.factories.slice();\n      factories = factories.concat(copied);\n    }\n    return new IterableDiffers(factories);\n  }\n  /**\n   * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the\n   * inherited {@link IterableDiffers} instance with the provided factories and return a new\n   * {@link IterableDiffers} instance.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example shows how to extend an existing list of factories,\n   * which will only be applied to the injector for this component and its children.\n   * This step is all that's required to make a new {@link IterableDiffer} available.\n   *\n   * ```\n   * @Component({\n   *   viewProviders: [\n   *     IterableDiffers.extend([new ImmutableListDiffer()])\n   *   ]\n   * })\n   * ```\n   */\n  static extend(factories) {\n    return {\n      provide: IterableDiffers,\n      useFactory: parent => {\n        // if parent is null, it means that we are in the root injector and we have just overridden\n        // the default injection mechanism for IterableDiffers, in such a case just assume\n        // `defaultIterableDiffersFactory`.\n        return IterableDiffers.create(factories, parent || defaultIterableDiffersFactory());\n      },\n      // Dependency technically isn't optional, but we can provide a better error message this way.\n      deps: [[IterableDiffers, new SkipSelf(), new Optional()]]\n    };\n  }\n  find(iterable) {\n    const factory = this.factories.find(f => f.supports(iterable));\n    if (factory != null) {\n      return factory;\n    } else {\n      throw new RuntimeError(901 /* RuntimeErrorCode.NO_SUPPORTING_DIFFER_FACTORY */, ngDevMode && `Cannot find a differ supporting object '${iterable}' of type '${getTypeNameForDebugging(iterable)}'`);\n    }\n  }\n}\n_class7 = IterableDiffers;\n/** @nocollapse */\n_class7.ɵprov = ɵɵdefineInjectable({\n  token: _class7,\n  providedIn: 'root',\n  factory: defaultIterableDiffersFactory\n});\nfunction getTypeNameForDebugging(type) {\n  return type['name'] || typeof type;\n}\nfunction defaultKeyValueDiffersFactory() {\n  return new KeyValueDiffers([new DefaultKeyValueDifferFactory()]);\n}\n/**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n *\n * @publicApi\n */\nclass KeyValueDiffers {\n  constructor(factories) {\n    this.factories = factories;\n  }\n  static create(factories, parent) {\n    if (parent) {\n      const copied = parent.factories.slice();\n      factories = factories.concat(copied);\n    }\n    return new KeyValueDiffers(factories);\n  }\n  /**\n   * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the\n   * inherited {@link KeyValueDiffers} instance with the provided factories and return a new\n   * {@link KeyValueDiffers} instance.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example shows how to extend an existing list of factories,\n   * which will only be applied to the injector for this component and its children.\n   * This step is all that's required to make a new {@link KeyValueDiffer} available.\n   *\n   * ```\n   * @Component({\n   *   viewProviders: [\n   *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n   *   ]\n   * })\n   * ```\n   */\n  static extend(factories) {\n    return {\n      provide: KeyValueDiffers,\n      useFactory: parent => {\n        // if parent is null, it means that we are in the root injector and we have just overridden\n        // the default injection mechanism for KeyValueDiffers, in such a case just assume\n        // `defaultKeyValueDiffersFactory`.\n        return KeyValueDiffers.create(factories, parent || defaultKeyValueDiffersFactory());\n      },\n      // Dependency technically isn't optional, but we can provide a better error message this way.\n      deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\n    };\n  }\n  find(kv) {\n    const factory = this.factories.find(f => f.supports(kv));\n    if (factory) {\n      return factory;\n    }\n    throw new RuntimeError(901 /* RuntimeErrorCode.NO_SUPPORTING_DIFFER_FACTORY */, ngDevMode && `Cannot find a differ supporting object '${kv}'`);\n  }\n}\n_class8 = KeyValueDiffers;\n/** @nocollapse */\n_class8.ɵprov = ɵɵdefineInjectable({\n  token: _class8,\n  providedIn: 'root',\n  factory: defaultKeyValueDiffersFactory\n});\nfunction devModeEqual(a, b) {\n  const isListLikeIterableA = isListLikeIterable(a);\n  const isListLikeIterableB = isListLikeIterable(b);\n  if (isListLikeIterableA && isListLikeIterableB) {\n    return areIterablesEqual(a, b, devModeEqual);\n  } else {\n    const isAObject = a && (typeof a === 'object' || typeof a === 'function');\n    const isBObject = b && (typeof b === 'object' || typeof b === 'function');\n    if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n      return true;\n    } else {\n      return Object.is(a, b);\n    }\n  }\n}\nfunction collectNativeNodes(tView, lView, tNode, result, isProjection = false) {\n  while (tNode !== null) {\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */ | 16 /* TNodeType.Projection */ | 32 /* TNodeType.Icu */);\n    const lNode = lView[tNode.index];\n    if (lNode !== null) {\n      result.push(unwrapRNode(lNode));\n    }\n    // A given lNode can represent either a native node or a LContainer (when it is a host of a\n    // ViewContainerRef). When we find a LContainer we need to descend into it to collect root nodes\n    // from the views in this container.\n    if (isLContainer(lNode)) {\n      collectNativeNodesInLContainer(lNode, result);\n    }\n    const tNodeType = tNode.type;\n    if (tNodeType & 8 /* TNodeType.ElementContainer */) {\n      collectNativeNodes(tView, lView, tNode.child, result);\n    } else if (tNodeType & 32 /* TNodeType.Icu */) {\n      const nextRNode = icuContainerIterate(tNode, lView);\n      let rNode;\n      while (rNode = nextRNode()) {\n        result.push(rNode);\n      }\n    } else if (tNodeType & 16 /* TNodeType.Projection */) {\n      const nodesInSlot = getProjectionNodes(lView, tNode);\n      if (Array.isArray(nodesInSlot)) {\n        result.push(...nodesInSlot);\n      } else {\n        const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);\n        ngDevMode && assertParentView(parentView);\n        collectNativeNodes(parentView[TVIEW], parentView, nodesInSlot, result, true);\n      }\n    }\n    tNode = isProjection ? tNode.projectionNext : tNode.next;\n  }\n  return result;\n}\n/**\n * Collects all root nodes in all views in a given LContainer.\n */\nfunction collectNativeNodesInLContainer(lContainer, result) {\n  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n    const lViewInAContainer = lContainer[i];\n    const lViewFirstChildTNode = lViewInAContainer[TVIEW].firstChild;\n    if (lViewFirstChildTNode !== null) {\n      collectNativeNodes(lViewInAContainer[TVIEW], lViewInAContainer, lViewFirstChildTNode, result);\n    }\n  }\n  // When an LContainer is created, the anchor (comment) node is:\n  // - (1) either reused in case of an ElementContainer (<ng-container>)\n  // - (2) or a new comment node is created\n  // In the first case, the anchor comment node would be added to the final\n  // list by the code in the `collectNativeNodes` function\n  // (see the `result.push(unwrapRNode(lNode))` line), but the second\n  // case requires extra handling: the anchor node needs to be added to the\n  // final list manually. See additional information in the `createAnchorNode`\n  // function in the `view_container_ref.ts`.\n  //\n  // In the first case, the same reference would be stored in the `NATIVE`\n  // and `HOST` slots in an LContainer. Otherwise, this is the second case and\n  // we should add an element to the final list.\n  if (lContainer[NATIVE] !== lContainer[HOST]) {\n    result.push(lContainer[NATIVE]);\n  }\n}\nlet freeConsumers = [];\n/**\n * Create a new template consumer pointing at the specified LView.\n * Sometimes, a previously created consumer may be reused, in order to save on allocations. In that\n * case, the LView will be updated.\n */\nfunction getOrBorrowReactiveLViewConsumer(lView) {\n  var _lView$REACTIVE_TEMPL2;\n  return (_lView$REACTIVE_TEMPL2 = lView[REACTIVE_TEMPLATE_CONSUMER]) !== null && _lView$REACTIVE_TEMPL2 !== void 0 ? _lView$REACTIVE_TEMPL2 : borrowReactiveLViewConsumer(lView);\n}\nfunction borrowReactiveLViewConsumer(lView) {\n  var _freeConsumers$pop;\n  const consumer = (_freeConsumers$pop = freeConsumers.pop()) !== null && _freeConsumers$pop !== void 0 ? _freeConsumers$pop : Object.create(REACTIVE_LVIEW_CONSUMER_NODE);\n  consumer.lView = lView;\n  return consumer;\n}\nfunction maybeReturnReactiveLViewConsumer(consumer) {\n  if (consumer.lView[REACTIVE_TEMPLATE_CONSUMER] === consumer) {\n    // The consumer got committed.\n    return;\n  }\n  consumer.lView = null;\n  freeConsumers.push(consumer);\n}\nconst REACTIVE_LVIEW_CONSUMER_NODE = {\n  ...REACTIVE_NODE$1,\n  consumerIsAlwaysLive: true,\n  consumerMarkedDirty: node => {\n    markAncestorsForTraversal(node.lView);\n  },\n  consumerOnSignalRead() {\n    this.lView[REACTIVE_TEMPLATE_CONSUMER] = this;\n  }\n};\nconst ERROR_ORIGINAL_ERROR = 'ngOriginalError';\nfunction wrappedError(message, originalError) {\n  const msg = `${message} caused by: ${originalError instanceof Error ? originalError.message : originalError}`;\n  const error = Error(msg);\n  error[ERROR_ORIGINAL_ERROR] = originalError;\n  return error;\n}\nfunction getOriginalError(error) {\n  return error[ERROR_ORIGINAL_ERROR];\n}\n\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * @NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n * @publicApi\n */\nclass ErrorHandler {\n  constructor() {\n    /**\n     * @internal\n     */\n    this._console = console;\n  }\n  handleError(error) {\n    const originalError = this._findOriginalError(error);\n    this._console.error('ERROR', error);\n    if (originalError) {\n      this._console.error('ORIGINAL ERROR', originalError);\n    }\n  }\n  /** @internal */\n  _findOriginalError(error) {\n    let e = error && getOriginalError(error);\n    while (e && getOriginalError(e)) {\n      e = getOriginalError(e);\n    }\n    return e || null;\n  }\n}\n/**\n * `InjectionToken` used to configure how to call the `ErrorHandler`.\n *\n * `NgZone` is provided by default today so the default (and only) implementation for this\n * is calling `ErrorHandler.handleError` outside of the Angular zone.\n */\nconst INTERNAL_APPLICATION_ERROR_HANDLER = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'internal error handler' : '', {\n  providedIn: 'root',\n  factory: () => {\n    const userErrorHandler = inject(ErrorHandler);\n    return userErrorHandler.handleError.bind(undefined);\n  }\n});\n\n/**\n * Internal token that specifies whether DOM reuse logic\n * during hydration is enabled.\n */\nconst IS_HYDRATION_DOM_REUSE_ENABLED = new InjectionToken(typeof ngDevMode === 'undefined' || !!ngDevMode ? 'IS_HYDRATION_DOM_REUSE_ENABLED' : '');\n// By default (in client rendering mode), we remove all the contents\n// of the host element and render an application after that.\nconst PRESERVE_HOST_CONTENT_DEFAULT = false;\n/**\n * Internal token that indicates whether host element content should be\n * retained during the bootstrap.\n */\nconst PRESERVE_HOST_CONTENT = new InjectionToken(typeof ngDevMode === 'undefined' || !!ngDevMode ? 'PRESERVE_HOST_CONTENT' : '', {\n  providedIn: 'root',\n  factory: () => PRESERVE_HOST_CONTENT_DEFAULT\n});\nfunction normalizeDebugBindingName(name) {\n  // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers\n  name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));\n  return `ng-reflect-${name}`;\n}\nconst CAMEL_CASE_REGEXP = /([A-Z])/g;\nfunction camelCaseToDashCase(input) {\n  return input.replace(CAMEL_CASE_REGEXP, (...m) => '-' + m[1].toLowerCase());\n}\nfunction normalizeDebugBindingValue(value) {\n  try {\n    // Limit the size of the value as otherwise the DOM just gets polluted.\n    return value != null ? value.toString().slice(0, 30) : value;\n  } catch (e) {\n    return '[ERROR] Exception while trying to serialize the value';\n  }\n}\n\n/**\n * The max length of the string representation of a value in an error message\n */\nconst VALUE_STRING_LENGTH_LIMIT = 200;\n/** Verifies that a given type is a Standalone Component. */\nfunction assertStandaloneComponentType(type) {\n  assertComponentDef(type);\n  const componentDef = getComponentDef(type);\n  if (!componentDef.standalone) {\n    throw new RuntimeError(907 /* RuntimeErrorCode.TYPE_IS_NOT_STANDALONE */, `The ${stringifyForError(type)} component is not marked as standalone, ` + `but Angular expects to have a standalone component here. ` + `Please make sure the ${stringifyForError(type)} component has ` + `the \\`standalone: true\\` flag in the decorator.`);\n  }\n}\n/** Verifies whether a given type is a component */\nfunction assertComponentDef(type) {\n  if (!getComponentDef(type)) {\n    throw new RuntimeError(906 /* RuntimeErrorCode.MISSING_GENERATED_DEF */, `The ${stringifyForError(type)} is not an Angular component, ` + `make sure it has the \\`@Component\\` decorator.`);\n  }\n}\n/** Called when there are multiple component selectors that match a given node */\nfunction throwMultipleComponentError(tNode, first, second) {\n  throw new RuntimeError(-300 /* RuntimeErrorCode.MULTIPLE_COMPONENTS_MATCH */, `Multiple components match node with tagname ${tNode.value}: ` + `${stringifyForError(first)} and ` + `${stringifyForError(second)}`);\n}\n/** Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on. */\nfunction throwErrorIfNoChangesMode(creationMode, oldValue, currValue, propName, lView) {\n  var _hostComponentDef$typ2;\n  const hostComponentDef = getDeclarationComponentDef(lView);\n  const componentClassName = hostComponentDef === null || hostComponentDef === void 0 || (_hostComponentDef$typ2 = hostComponentDef.type) === null || _hostComponentDef$typ2 === void 0 ? void 0 : _hostComponentDef$typ2.name;\n  const field = propName ? ` for '${propName}'` : '';\n  let msg = `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value${field}: '${formatValue(oldValue)}'. Current value: '${formatValue(currValue)}'.${componentClassName ? ` Expression location: ${componentClassName} component` : ''}`;\n  if (creationMode) {\n    msg += ` It seems like the view has been created after its parent and its children have been dirty checked.` + ` Has it been created in a change detection hook?`;\n  }\n  throw new RuntimeError(-100 /* RuntimeErrorCode.EXPRESSION_CHANGED_AFTER_CHECKED */, msg);\n}\nfunction formatValue(value) {\n  let strValue = String(value);\n  // JSON.stringify will throw on circular references\n  try {\n    if (Array.isArray(value) || strValue === '[object Object]') {\n      strValue = JSON.stringify(value);\n    }\n  } catch (error) {}\n  return strValue.length > VALUE_STRING_LENGTH_LIMIT ? strValue.substring(0, VALUE_STRING_LENGTH_LIMIT) + '…' : strValue;\n}\nfunction constructDetailsForInterpolation(lView, rootIndex, expressionIndex, meta, changedValue) {\n  const [propName, prefix, ...chunks] = meta.split(INTERPOLATION_DELIMITER);\n  let oldValue = prefix,\n    newValue = prefix;\n  for (let i = 0; i < chunks.length; i++) {\n    const slotIdx = rootIndex + i;\n    oldValue += `${lView[slotIdx]}${chunks[i]}`;\n    newValue += `${slotIdx === expressionIndex ? changedValue : lView[slotIdx]}${chunks[i]}`;\n  }\n  return {\n    propName,\n    oldValue,\n    newValue\n  };\n}\n/**\n * Constructs an object that contains details for the ExpressionChangedAfterItHasBeenCheckedError:\n * - property name (for property bindings or interpolations)\n * - old and new values, enriched using information from metadata\n *\n * More information on the metadata storage format can be found in `storePropertyBindingMetadata`\n * function description.\n */\nfunction getExpressionChangedErrorDetails(lView, bindingIndex, oldValue, newValue) {\n  const tData = lView[TVIEW].data;\n  const metadata = tData[bindingIndex];\n  if (typeof metadata === 'string') {\n    // metadata for property interpolation\n    if (metadata.indexOf(INTERPOLATION_DELIMITER) > -1) {\n      return constructDetailsForInterpolation(lView, bindingIndex, bindingIndex, metadata, newValue);\n    }\n    // metadata for property binding\n    return {\n      propName: metadata,\n      oldValue,\n      newValue\n    };\n  }\n  // metadata is not available for this expression, check if this expression is a part of the\n  // property interpolation by going from the current binding index left and look for a string that\n  // contains INTERPOLATION_DELIMITER, the layout in tView.data for this case will look like this:\n  // [..., 'id�Prefix � and � suffix', null, null, null, ...]\n  if (metadata === null) {\n    let idx = bindingIndex - 1;\n    while (typeof tData[idx] !== 'string' && tData[idx + 1] === null) {\n      idx--;\n    }\n    const meta = tData[idx];\n    if (typeof meta === 'string') {\n      const matches = meta.match(new RegExp(INTERPOLATION_DELIMITER, 'g'));\n      // first interpolation delimiter separates property name from interpolation parts (in case of\n      // property interpolations), so we subtract one from total number of found delimiters\n      if (matches && matches.length - 1 > bindingIndex - idx) {\n        return constructDetailsForInterpolation(lView, idx, bindingIndex, meta, newValue);\n      }\n    }\n  }\n  return {\n    propName: undefined,\n    oldValue,\n    newValue\n  };\n}\n\n/** A special value which designates that a value has not changed. */\nconst NO_CHANGE = typeof ngDevMode === 'undefined' || ngDevMode ? {\n  __brand__: 'NO_CHANGE'\n} : {};\n\n/**\n * Advances to an element for later binding instructions.\n *\n * Used in conjunction with instructions like {@link property} to act on elements with specified\n * indices, for example those created with {@link element} or {@link elementStart}.\n *\n * ```ts\n * (rf: RenderFlags, ctx: any) => {\n *   if (rf & 1) {\n *     text(0, 'Hello');\n *     text(1, 'Goodbye')\n *     element(2, 'div');\n *   }\n *   if (rf & 2) {\n *     advance(2); // Advance twice to the <div>.\n *     property('title', 'test');\n *   }\n *  }\n * ```\n * @param delta Number of elements to advance forwards by.\n *\n * @codeGenApi\n */\nfunction ɵɵadvance(delta) {\n  ngDevMode && assertGreaterThan(delta, 0, 'Can only advance forward');\n  selectIndexInternal(getTView(), getLView(), getSelectedIndex() + delta, !!ngDevMode && isInCheckNoChangesMode());\n}\nfunction selectIndexInternal(tView, lView, index, checkNoChangesMode) {\n  ngDevMode && assertIndexInDeclRange(lView[TVIEW], index);\n  // Flush the initial hooks for elements in the view that have been added up to this point.\n  // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n  if (!checkNoChangesMode) {\n    const hooksInitPhaseCompleted = (lView[FLAGS] & 3 /* LViewFlags.InitPhaseStateMask */) === 3 /* InitPhaseState.InitPhaseCompleted */;\n    if (hooksInitPhaseCompleted) {\n      const preOrderCheckHooks = tView.preOrderCheckHooks;\n      if (preOrderCheckHooks !== null) {\n        executeCheckHooks(lView, preOrderCheckHooks, index);\n      }\n    } else {\n      const preOrderHooks = tView.preOrderHooks;\n      if (preOrderHooks !== null) {\n        executeInitAndCheckHooks(lView, preOrderHooks, 0 /* InitPhaseState.OnInitHooksToBeRun */, index);\n      }\n    }\n  }\n  // We must set the selected index *after* running the hooks, because hooks may have side-effects\n  // that cause other template functions to run, thus updating the selected index, which is global\n  // state. If we run `setSelectedIndex` *before* we run the hooks, in some cases the selected index\n  // will be altered by the time we leave the `ɵɵadvance` instruction.\n  setSelectedIndex(index);\n}\nfunction ɵɵdirectiveInject(token, flags = InjectFlags.Default) {\n  const lView = getLView();\n  // Fall back to inject() if view hasn't been created. This situation can happen in tests\n  // if inject utilities are used before bootstrapping.\n  if (lView === null) {\n    // Verify that we will not get into infinite loop.\n    ngDevMode && assertInjectImplementationNotEqual(ɵɵdirectiveInject);\n    return ɵɵinject(token, flags);\n  }\n  const tNode = getCurrentTNode();\n  const value = getOrCreateInjectable(tNode, lView, resolveForwardRef(token), flags);\n  ngDevMode && emitInjectEvent(token, value, flags);\n  return value;\n}\n/**\n * Throws an error indicating that a factory function could not be generated by the compiler for a\n * particular class.\n *\n * This instruction allows the actual error message to be optimized away when ngDevMode is turned\n * off, saving bytes of generated code while still providing a good experience in dev mode.\n *\n * The name of the class is not mentioned here, but will be in the generated factory function name\n * and thus in the stack trace.\n *\n * @codeGenApi\n */\nfunction ɵɵinvalidFactory() {\n  const msg = ngDevMode ? `This constructor was not compatible with Dependency Injection.` : 'invalid';\n  throw new Error(msg);\n}\n\n/**\n * Invoke `HostBindingsFunction`s for view.\n *\n * This methods executes `TView.hostBindingOpCodes`. It is used to execute the\n * `HostBindingsFunction`s associated with the current `LView`.\n *\n * @param tView Current `TView`.\n * @param lView Current `LView`.\n */\nfunction processHostBindingOpCodes(tView, lView) {\n  const hostBindingOpCodes = tView.hostBindingOpCodes;\n  if (hostBindingOpCodes === null) return;\n  try {\n    for (let i = 0; i < hostBindingOpCodes.length; i++) {\n      const opCode = hostBindingOpCodes[i];\n      if (opCode < 0) {\n        // Negative numbers are element indexes.\n        setSelectedIndex(~opCode);\n      } else {\n        // Positive numbers are NumberTuple which store bindingRootIndex and directiveIndex.\n        const directiveIdx = opCode;\n        const bindingRootIndx = hostBindingOpCodes[++i];\n        const hostBindingFn = hostBindingOpCodes[++i];\n        setBindingRootForHostBindings(bindingRootIndx, directiveIdx);\n        const context = lView[directiveIdx];\n        hostBindingFn(2 /* RenderFlags.Update */, context);\n      }\n    }\n  } finally {\n    setSelectedIndex(-1);\n  }\n}\nfunction createLView(parentLView, tView, context, flags, host, tHostNode, environment, renderer, injector, embeddedViewInjector, hydrationInfo) {\n  const lView = tView.blueprint.slice();\n  lView[HOST] = host;\n  lView[FLAGS] = flags | 4 /* LViewFlags.CreationMode */ | 128 /* LViewFlags.Attached */ | 8 /* LViewFlags.FirstLViewPass */ | 64 /* LViewFlags.Dirty */;\n  if (embeddedViewInjector !== null || parentLView && parentLView[FLAGS] & 2048 /* LViewFlags.HasEmbeddedViewInjector */) {\n    lView[FLAGS] |= 2048 /* LViewFlags.HasEmbeddedViewInjector */;\n  }\n\n  resetPreOrderHookFlags(lView);\n  ngDevMode && tView.declTNode && parentLView && assertTNodeForLView(tView.declTNode, parentLView);\n  lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;\n  lView[CONTEXT] = context;\n  lView[ENVIRONMENT] = environment || parentLView && parentLView[ENVIRONMENT];\n  ngDevMode && assertDefined(lView[ENVIRONMENT], 'LViewEnvironment is required');\n  lView[RENDERER] = renderer || parentLView && parentLView[RENDERER];\n  ngDevMode && assertDefined(lView[RENDERER], 'Renderer is required');\n  lView[INJECTOR$1] = injector || parentLView && parentLView[INJECTOR$1] || null;\n  lView[T_HOST] = tHostNode;\n  lView[ID] = getUniqueLViewId();\n  lView[HYDRATION] = hydrationInfo;\n  lView[EMBEDDED_VIEW_INJECTOR] = embeddedViewInjector;\n  ngDevMode && assertEqual(tView.type == 2 /* TViewType.Embedded */ ? parentLView !== null : true, true, 'Embedded views must have parentLView');\n  lView[DECLARATION_COMPONENT_VIEW] = tView.type == 2 /* TViewType.Embedded */ ? parentLView[DECLARATION_COMPONENT_VIEW] : lView;\n  return lView;\n}\nfunction getOrCreateTNode(tView, index, type, name, attrs) {\n  ngDevMode && index !== 0 &&\n  // 0 are bogus nodes and they are OK. See `createContainerRef` in\n  // `view_engine_compatibility` for additional context.\n  assertGreaterThanOrEqual(index, HEADER_OFFSET, 'TNodes can\\'t be in the LView header.');\n  // Keep this function short, so that the VM will inline it.\n  ngDevMode && assertPureTNodeType(type);\n  let tNode = tView.data[index];\n  if (tNode === null) {\n    tNode = createTNodeAtIndex(tView, index, type, name, attrs);\n    if (isInI18nBlock()) {\n      // If we are in i18n block then all elements should be pre declared through `Placeholder`\n      // See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.\n      // If the `TNode` was not pre-declared than it means it was not mentioned which means it was\n      // removed, so we mark it as detached.\n      tNode.flags |= 32 /* TNodeFlags.isDetached */;\n    }\n  } else if (tNode.type & 64 /* TNodeType.Placeholder */) {\n    tNode.type = type;\n    tNode.value = name;\n    tNode.attrs = attrs;\n    const parent = getCurrentParentTNode();\n    tNode.injectorIndex = parent === null ? -1 : parent.injectorIndex;\n    ngDevMode && assertTNodeForTView(tNode, tView);\n    ngDevMode && assertEqual(index, tNode.index, 'Expecting same index');\n  }\n  setCurrentTNode(tNode, true);\n  return tNode;\n}\nfunction createTNodeAtIndex(tView, index, type, name, attrs) {\n  const currentTNode = getCurrentTNodePlaceholderOk();\n  const isParent = isCurrentTNodeParent();\n  const parent = isParent ? currentTNode : currentTNode && currentTNode.parent;\n  // Parents cannot cross component boundaries because components will be used in multiple places.\n  const tNode = tView.data[index] = createTNode(tView, parent, type, index, name, attrs);\n  // Assign a pointer to the first child node of a given view. The first node is not always the one\n  // at index 0, in case of i18n, index 0 can be the instruction `i18nStart` and the first node has\n  // the index 1 or more, so we can't just check node index.\n  if (tView.firstChild === null) {\n    tView.firstChild = tNode;\n  }\n  if (currentTNode !== null) {\n    if (isParent) {\n      // FIXME(misko): This logic looks unnecessarily complicated. Could we simplify?\n      if (currentTNode.child == null && tNode.parent !== null) {\n        // We are in the same view, which means we are adding content node to the parent view.\n        currentTNode.child = tNode;\n      }\n    } else {\n      if (currentTNode.next === null) {\n        // In the case of i18n the `currentTNode` may already be linked, in which case we don't want\n        // to break the links which i18n created.\n        currentTNode.next = tNode;\n        tNode.prev = currentTNode;\n      }\n    }\n  }\n  return tNode;\n}\n/**\n * When elements are created dynamically after a view blueprint is created (e.g. through\n * i18nApply()), we need to adjust the blueprint for future\n * template passes.\n *\n * @param tView `TView` associated with `LView`\n * @param lView The `LView` containing the blueprint to adjust\n * @param numSlotsToAlloc The number of slots to alloc in the LView, should be >0\n * @param initialValue Initial value to store in blueprint\n */\nfunction allocExpando(tView, lView, numSlotsToAlloc, initialValue) {\n  if (numSlotsToAlloc === 0) return -1;\n  if (ngDevMode) {\n    assertFirstCreatePass(tView);\n    assertSame(tView, lView[TVIEW], '`LView` must be associated with `TView`!');\n    assertEqual(tView.data.length, lView.length, 'Expecting LView to be same size as TView');\n    assertEqual(tView.data.length, tView.blueprint.length, 'Expecting Blueprint to be same size as TView');\n    assertFirstUpdatePass(tView);\n  }\n  const allocIdx = lView.length;\n  for (let i = 0; i < numSlotsToAlloc; i++) {\n    lView.push(initialValue);\n    tView.blueprint.push(initialValue);\n    tView.data.push(null);\n  }\n  return allocIdx;\n}\nfunction executeTemplate(tView, lView, templateFn, rf, context) {\n  const prevSelectedIndex = getSelectedIndex();\n  const isUpdatePhase = rf & 2 /* RenderFlags.Update */;\n  try {\n    setSelectedIndex(-1);\n    if (isUpdatePhase && lView.length > HEADER_OFFSET) {\n      // When we're updating, inherently select 0 so we don't\n      // have to generate that instruction for most update blocks.\n      selectIndexInternal(tView, lView, HEADER_OFFSET, !!ngDevMode && isInCheckNoChangesMode());\n    }\n    const preHookType = isUpdatePhase ? 2 /* ProfilerEvent.TemplateUpdateStart */ : 0 /* ProfilerEvent.TemplateCreateStart */;\n    profiler(preHookType, context);\n    templateFn(rf, context);\n  } finally {\n    setSelectedIndex(prevSelectedIndex);\n    const postHookType = isUpdatePhase ? 3 /* ProfilerEvent.TemplateUpdateEnd */ : 1 /* ProfilerEvent.TemplateCreateEnd */;\n    profiler(postHookType, context);\n  }\n}\n//////////////////////////\n//// Element\n//////////////////////////\nfunction executeContentQueries(tView, tNode, lView) {\n  if (isContentQueryHost(tNode)) {\n    const prevConsumer = setActiveConsumer$1(null);\n    try {\n      const start = tNode.directiveStart;\n      const end = tNode.directiveEnd;\n      for (let directiveIndex = start; directiveIndex < end; directiveIndex++) {\n        const def = tView.data[directiveIndex];\n        if (def.contentQueries) {\n          def.contentQueries(1 /* RenderFlags.Create */, lView[directiveIndex], directiveIndex);\n        }\n      }\n    } finally {\n      setActiveConsumer$1(prevConsumer);\n    }\n  }\n}\n/**\n * Creates directive instances.\n */\nfunction createDirectivesInstances(tView, lView, tNode) {\n  if (!getBindingsEnabled()) return;\n  instantiateAllDirectives(tView, lView, tNode, getNativeByTNode(tNode, lView));\n  if ((tNode.flags & 64 /* TNodeFlags.hasHostBindings */) === 64 /* TNodeFlags.hasHostBindings */) {\n    invokeDirectivesHostBindings(tView, lView, tNode);\n  }\n}\n/**\n * Takes a list of local names and indices and pushes the resolved local variable values\n * to LView in the same order as they are loaded in the template with load().\n */\nfunction saveResolvedLocalsInData(viewData, tNode, localRefExtractor = getNativeByTNode) {\n  const localNames = tNode.localNames;\n  if (localNames !== null) {\n    let localIndex = tNode.index + 1;\n    for (let i = 0; i < localNames.length; i += 2) {\n      const index = localNames[i + 1];\n      const value = index === -1 ? localRefExtractor(tNode, viewData) : viewData[index];\n      viewData[localIndex++] = value;\n    }\n  }\n}\n/**\n * Gets TView from a template function or creates a new TView\n * if it doesn't already exist.\n *\n * @param def ComponentDef\n * @returns TView\n */\nfunction getOrCreateComponentTView(def) {\n  const tView = def.tView;\n  // Create a TView if there isn't one, or recreate it if the first create pass didn't\n  // complete successfully since we can't know for sure whether it's in a usable shape.\n  if (tView === null || tView.incompleteFirstPass) {\n    // Declaration node here is null since this function is called when we dynamically create a\n    // component and hence there is no declaration.\n    const declTNode = null;\n    return def.tView = createTView(1 /* TViewType.Component */, declTNode, def.template, def.decls, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery, def.schemas, def.consts, def.id);\n  }\n  return tView;\n}\n/**\n * Creates a TView instance\n *\n * @param type Type of `TView`.\n * @param declTNode Declaration location of this `TView`.\n * @param templateFn Template function\n * @param decls The number of nodes, local refs, and pipes in this template\n * @param directives Registry of directives for this view\n * @param pipes Registry of pipes for this view\n * @param viewQuery View queries for this view\n * @param schemas Schemas for this view\n * @param consts Constants for this view\n */\nfunction createTView(type, declTNode, templateFn, decls, vars, directives, pipes, viewQuery, schemas, constsOrFactory, ssrId) {\n  ngDevMode && ngDevMode.tView++;\n  const bindingStartIndex = HEADER_OFFSET + decls;\n  // This length does not yet contain host bindings from child directives because at this point,\n  // we don't know which directives are active on this template. As soon as a directive is matched\n  // that has a host binding, we will update the blueprint with that def's hostVars count.\n  const initialViewLength = bindingStartIndex + vars;\n  const blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);\n  const consts = typeof constsOrFactory === 'function' ? constsOrFactory() : constsOrFactory;\n  const tView = blueprint[TVIEW] = {\n    type: type,\n    blueprint: blueprint,\n    template: templateFn,\n    queries: null,\n    viewQuery: viewQuery,\n    declTNode: declTNode,\n    data: blueprint.slice().fill(null, bindingStartIndex),\n    bindingStartIndex: bindingStartIndex,\n    expandoStartIndex: initialViewLength,\n    hostBindingOpCodes: null,\n    firstCreatePass: true,\n    firstUpdatePass: true,\n    staticViewQueries: false,\n    staticContentQueries: false,\n    preOrderHooks: null,\n    preOrderCheckHooks: null,\n    contentHooks: null,\n    contentCheckHooks: null,\n    viewHooks: null,\n    viewCheckHooks: null,\n    destroyHooks: null,\n    cleanup: null,\n    contentQueries: null,\n    components: null,\n    directiveRegistry: typeof directives === 'function' ? directives() : directives,\n    pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,\n    firstChild: null,\n    schemas: schemas,\n    consts: consts,\n    incompleteFirstPass: false,\n    ssrId\n  };\n  if (ngDevMode) {\n    // For performance reasons it is important that the tView retains the same shape during runtime.\n    // (To make sure that all of the code is monomorphic.) For this reason we seal the object to\n    // prevent class transitions.\n    Object.seal(tView);\n  }\n  return tView;\n}\nfunction createViewBlueprint(bindingStartIndex, initialViewLength) {\n  const blueprint = [];\n  for (let i = 0; i < initialViewLength; i++) {\n    blueprint.push(i < bindingStartIndex ? null : NO_CHANGE);\n  }\n  return blueprint;\n}\n/**\n * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\n *\n * @param renderer the renderer used to locate the element.\n * @param elementOrSelector Render element or CSS selector to locate the element.\n * @param encapsulation View Encapsulation defined for component that requests host element.\n * @param injector Root view injector instance.\n */\nfunction locateHostElement(renderer, elementOrSelector, encapsulation, injector) {\n  // Note: we use default value for the `PRESERVE_HOST_CONTENT` here even though it's a\n  // tree-shakable one (providedIn:'root'). This code path can be triggered during dynamic\n  // component creation (after calling ViewContainerRef.createComponent) when an injector\n  // instance can be provided. The injector instance might be disconnected from the main DI\n  // tree, thus the `PRESERVE_HOST_CONTENT` would not be able to instantiate. In this case, the\n  // default value will be used.\n  const preserveHostContent = injector.get(PRESERVE_HOST_CONTENT, PRESERVE_HOST_CONTENT_DEFAULT);\n  // When using native Shadow DOM, do not clear host element to allow native slot\n  // projection.\n  const preserveContent = preserveHostContent || encapsulation === ViewEncapsulation$1.ShadowDom;\n  const rootElement = renderer.selectRootElement(elementOrSelector, preserveContent);\n  applyRootElementTransform(rootElement);\n  return rootElement;\n}\n/**\n * Applies any root element transformations that are needed. If hydration is enabled,\n * this will process corrupted text nodes.\n *\n * @param rootElement the app root HTML Element\n */\nfunction applyRootElementTransform(rootElement) {\n  _applyRootElementTransformImpl(rootElement);\n}\n/**\n * Reference to a function that applies transformations to the root HTML element\n * of an app. When hydration is enabled, this processes any corrupt text nodes\n * so they are properly hydratable on the client.\n *\n * @param rootElement the app root HTML Element\n */\nlet _applyRootElementTransformImpl = rootElement => null;\n/**\n * Processes text node markers before hydration begins. This replaces any special comment\n * nodes that were added prior to serialization are swapped out to restore proper text\n * nodes before hydration.\n *\n * @param rootElement the app root HTML Element\n */\nfunction applyRootElementTransformImpl(rootElement) {\n  if (hasSkipHydrationAttrOnRElement(rootElement)) {\n    // Handle a situation when the `ngSkipHydration` attribute is applied\n    // to the root node of an application. In this case, we should clear\n    // the contents and render everything from scratch.\n    clearElementContents(rootElement);\n  } else {\n    processTextNodeMarkersBeforeHydration(rootElement);\n  }\n}\n/**\n * Sets the implementation for the `applyRootElementTransform` function.\n */\nfunction enableApplyRootElementTransformImpl() {\n  _applyRootElementTransformImpl = applyRootElementTransformImpl;\n}\n/**\n * Saves context for this cleanup function in LView.cleanupInstances.\n *\n * On the first template pass, saves in TView:\n * - Cleanup function\n * - Index of context we just saved in LView.cleanupInstances\n */\nfunction storeCleanupWithContext(tView, lView, context, cleanupFn) {\n  const lCleanup = getOrCreateLViewCleanup(lView);\n  // Historically the `storeCleanupWithContext` was used to register both framework-level and\n  // user-defined cleanup callbacks, but over time those two types of cleanups were separated.\n  // This dev mode checks assures that user-level cleanup callbacks are _not_ stored in data\n  // structures reserved for framework-specific hooks.\n  ngDevMode && assertDefined(context, 'Cleanup context is mandatory when registering framework-level destroy hooks');\n  lCleanup.push(context);\n  if (tView.firstCreatePass) {\n    getOrCreateTViewCleanup(tView).push(cleanupFn, lCleanup.length - 1);\n  } else {\n    // Make sure that no new framework-level cleanup functions are registered after the first\n    // template pass is done (and TView data structures are meant to fully constructed).\n    if (ngDevMode) {\n      Object.freeze(getOrCreateTViewCleanup(tView));\n    }\n  }\n}\nfunction createTNode(tView, tParent, type, index, value, attrs) {\n  ngDevMode && index !== 0 &&\n  // 0 are bogus nodes and they are OK. See `createContainerRef` in\n  // `view_engine_compatibility` for additional context.\n  assertGreaterThanOrEqual(index, HEADER_OFFSET, 'TNodes can\\'t be in the LView header.');\n  ngDevMode && assertNotSame(attrs, undefined, '\\'undefined\\' is not valid value for \\'attrs\\'');\n  ngDevMode && ngDevMode.tNode++;\n  ngDevMode && tParent && assertTNodeForTView(tParent, tView);\n  let injectorIndex = tParent ? tParent.injectorIndex : -1;\n  let flags = 0;\n  if (isInSkipHydrationBlock$1()) {\n    flags |= 128 /* TNodeFlags.inSkipHydrationBlock */;\n  }\n\n  const tNode = {\n    type,\n    index,\n    insertBeforeIndex: null,\n    injectorIndex,\n    directiveStart: -1,\n    directiveEnd: -1,\n    directiveStylingLast: -1,\n    componentOffset: -1,\n    propertyBindings: null,\n    flags,\n    providerIndexes: 0,\n    value: value,\n    attrs: attrs,\n    mergedAttrs: null,\n    localNames: null,\n    initialInputs: undefined,\n    inputs: null,\n    outputs: null,\n    tView: null,\n    next: null,\n    prev: null,\n    projectionNext: null,\n    child: null,\n    parent: tParent,\n    projection: null,\n    styles: null,\n    stylesWithoutHost: null,\n    residualStyles: undefined,\n    classes: null,\n    classesWithoutHost: null,\n    residualClasses: undefined,\n    classBindings: 0,\n    styleBindings: 0\n  };\n  if (ngDevMode) {\n    // For performance reasons it is important that the tNode retains the same shape during runtime.\n    // (To make sure that all of the code is monomorphic.) For this reason we seal the object to\n    // prevent class transitions.\n    Object.seal(tNode);\n  }\n  return tNode;\n}\n/**\n * Generates the `PropertyAliases` data structure from the provided input/output mapping.\n * @param aliasMap Input/output mapping from the directive definition.\n * @param directiveIndex Index of the directive.\n * @param propertyAliases Object in which to store the results.\n * @param hostDirectiveAliasMap Object used to alias or filter out properties for host directives.\n * If the mapping is provided, it'll act as an allowlist, as well as a mapping of what public\n * name inputs/outputs should be exposed under.\n */\nfunction generatePropertyAliases(aliasMap, directiveIndex, propertyAliases, hostDirectiveAliasMap) {\n  for (let publicName in aliasMap) {\n    if (aliasMap.hasOwnProperty(publicName)) {\n      propertyAliases = propertyAliases === null ? {} : propertyAliases;\n      const internalName = aliasMap[publicName];\n      // If there are no host directive mappings, we want to remap using the alias map from the\n      // definition itself. If there is an alias map, it has two functions:\n      // 1. It serves as an allowlist of bindings that are exposed by the host directives. Only the\n      // ones inside the host directive map will be exposed on the host.\n      // 2. The public name of the property is aliased using the host directive alias map, rather\n      // than the alias map from the definition.\n      if (hostDirectiveAliasMap === null) {\n        addPropertyAlias(propertyAliases, directiveIndex, publicName, internalName);\n      } else if (hostDirectiveAliasMap.hasOwnProperty(publicName)) {\n        addPropertyAlias(propertyAliases, directiveIndex, hostDirectiveAliasMap[publicName], internalName);\n      }\n    }\n  }\n  return propertyAliases;\n}\nfunction addPropertyAlias(propertyAliases, directiveIndex, publicName, internalName) {\n  if (propertyAliases.hasOwnProperty(publicName)) {\n    propertyAliases[publicName].push(directiveIndex, internalName);\n  } else {\n    propertyAliases[publicName] = [directiveIndex, internalName];\n  }\n}\n/**\n * Initializes data structures required to work with directive inputs and outputs.\n * Initialization is done for all directives matched on a given TNode.\n */\nfunction initializeInputAndOutputAliases(tView, tNode, hostDirectiveDefinitionMap) {\n  ngDevMode && assertFirstCreatePass(tView);\n  const start = tNode.directiveStart;\n  const end = tNode.directiveEnd;\n  const tViewData = tView.data;\n  const tNodeAttrs = tNode.attrs;\n  const inputsFromAttrs = [];\n  let inputsStore = null;\n  let outputsStore = null;\n  for (let directiveIndex = start; directiveIndex < end; directiveIndex++) {\n    const directiveDef = tViewData[directiveIndex];\n    const aliasData = hostDirectiveDefinitionMap ? hostDirectiveDefinitionMap.get(directiveDef) : null;\n    const aliasedInputs = aliasData ? aliasData.inputs : null;\n    const aliasedOutputs = aliasData ? aliasData.outputs : null;\n    inputsStore = generatePropertyAliases(directiveDef.inputs, directiveIndex, inputsStore, aliasedInputs);\n    outputsStore = generatePropertyAliases(directiveDef.outputs, directiveIndex, outputsStore, aliasedOutputs);\n    // Do not use unbound attributes as inputs to structural directives, since structural\n    // directive inputs can only be set using microsyntax (e.g. `<div *dir=\"exp\">`).\n    // TODO(FW-1930): microsyntax expressions may also contain unbound/static attributes, which\n    // should be set for inline templates.\n    const initialInputs = inputsStore !== null && tNodeAttrs !== null && !isInlineTemplate(tNode) ? generateInitialInputs(inputsStore, directiveIndex, tNodeAttrs) : null;\n    inputsFromAttrs.push(initialInputs);\n  }\n  if (inputsStore !== null) {\n    if (inputsStore.hasOwnProperty('class')) {\n      tNode.flags |= 8 /* TNodeFlags.hasClassInput */;\n    }\n\n    if (inputsStore.hasOwnProperty('style')) {\n      tNode.flags |= 16 /* TNodeFlags.hasStyleInput */;\n    }\n  }\n\n  tNode.initialInputs = inputsFromAttrs;\n  tNode.inputs = inputsStore;\n  tNode.outputs = outputsStore;\n}\n/**\n * Mapping between attributes names that don't correspond to their element property names.\n *\n * Performance note: this function is written as a series of if checks (instead of, say, a property\n * object lookup) for performance reasons - the series of `if` checks seems to be the fastest way of\n * mapping property names. Do NOT change without benchmarking.\n *\n * Note: this mapping has to be kept in sync with the equally named mapping in the template\n * type-checking machinery of ngtsc.\n */\nfunction mapPropName(name) {\n  if (name === 'class') return 'className';\n  if (name === 'for') return 'htmlFor';\n  if (name === 'formaction') return 'formAction';\n  if (name === 'innerHtml') return 'innerHTML';\n  if (name === 'readonly') return 'readOnly';\n  if (name === 'tabindex') return 'tabIndex';\n  return name;\n}\nfunction elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, nativeOnly) {\n  ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n  const element = getNativeByTNode(tNode, lView);\n  let inputData = tNode.inputs;\n  let dataValue;\n  if (!nativeOnly && inputData != null && (dataValue = inputData[propName])) {\n    setInputsForProperty(tView, lView, dataValue, propName, value);\n    if (isComponentHost(tNode)) markDirtyIfOnPush(lView, tNode.index);\n    if (ngDevMode) {\n      setNgReflectProperties(lView, element, tNode.type, dataValue, value);\n    }\n  } else if (tNode.type & 3 /* TNodeType.AnyRNode */) {\n    propName = mapPropName(propName);\n    if (ngDevMode) {\n      validateAgainstEventProperties(propName);\n      if (!isPropertyValid(element, propName, tNode.value, tView.schemas)) {\n        handleUnknownPropertyError(propName, tNode.value, tNode.type, lView);\n      }\n      ngDevMode.rendererSetProperty++;\n    }\n    // It is assumed that the sanitizer is only added when the compiler determines that the\n    // property is risky, so sanitization can be done without further checks.\n    value = sanitizer != null ? sanitizer(value, tNode.value || '', propName) : value;\n    renderer.setProperty(element, propName, value);\n  } else if (tNode.type & 12 /* TNodeType.AnyContainer */) {\n    // If the node is a container and the property didn't\n    // match any of the inputs or schemas we should throw.\n    if (ngDevMode && !matchingSchemas(tView.schemas, tNode.value)) {\n      handleUnknownPropertyError(propName, tNode.value, tNode.type, lView);\n    }\n  }\n}\n/** If node is an OnPush component, marks its LView dirty. */\nfunction markDirtyIfOnPush(lView, viewIndex) {\n  ngDevMode && assertLView(lView);\n  const childComponentLView = getComponentLViewByIndex(viewIndex, lView);\n  if (!(childComponentLView[FLAGS] & 16 /* LViewFlags.CheckAlways */)) {\n    childComponentLView[FLAGS] |= 64 /* LViewFlags.Dirty */;\n  }\n}\n\nfunction setNgReflectProperty(lView, element, type, attrName, value) {\n  const renderer = lView[RENDERER];\n  attrName = normalizeDebugBindingName(attrName);\n  const debugValue = normalizeDebugBindingValue(value);\n  if (type & 3 /* TNodeType.AnyRNode */) {\n    if (value == null) {\n      renderer.removeAttribute(element, attrName);\n    } else {\n      renderer.setAttribute(element, attrName, debugValue);\n    }\n  } else {\n    const textContent = escapeCommentText(`bindings=${JSON.stringify({\n      [attrName]: debugValue\n    }, null, 2)}`);\n    renderer.setValue(element, textContent);\n  }\n}\nfunction setNgReflectProperties(lView, element, type, dataValue, value) {\n  if (type & (3 /* TNodeType.AnyRNode */ | 4 /* TNodeType.Container */)) {\n    /**\n     * dataValue is an array containing runtime input or output names for the directives:\n     * i+0: directive instance index\n     * i+1: privateName\n     *\n     * e.g. [0, 'change', 'change-minified']\n     * we want to set the reflected property with the privateName: dataValue[i+1]\n     */\n    for (let i = 0; i < dataValue.length; i += 2) {\n      setNgReflectProperty(lView, element, type, dataValue[i + 1], value);\n    }\n  }\n}\n/**\n * Resolve the matched directives on a node.\n */\nfunction resolveDirectives(tView, lView, tNode, localRefs) {\n  // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in\n  // tsickle.\n  ngDevMode && assertFirstCreatePass(tView);\n  if (getBindingsEnabled()) {\n    const exportsMap = localRefs === null ? null : {\n      '': -1\n    };\n    const matchResult = findDirectiveDefMatches(tView, tNode);\n    let directiveDefs;\n    let hostDirectiveDefs;\n    if (matchResult === null) {\n      directiveDefs = hostDirectiveDefs = null;\n    } else {\n      [directiveDefs, hostDirectiveDefs] = matchResult;\n    }\n    if (directiveDefs !== null) {\n      initializeDirectives(tView, lView, tNode, directiveDefs, exportsMap, hostDirectiveDefs);\n    }\n    if (exportsMap) cacheMatchingLocalNames(tNode, localRefs, exportsMap);\n  }\n  // Merge the template attrs last so that they have the highest priority.\n  tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);\n}\n/** Initializes the data structures necessary for a list of directives to be instantiated. */\nfunction initializeDirectives(tView, lView, tNode, directives, exportsMap, hostDirectiveDefs) {\n  ngDevMode && assertFirstCreatePass(tView);\n  // Publishes the directive types to DI so they can be injected. Needs to\n  // happen in a separate pass before the TNode flags have been initialized.\n  for (let i = 0; i < directives.length; i++) {\n    diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, directives[i].type);\n  }\n  initTNodeFlags(tNode, tView.data.length, directives.length);\n  // When the same token is provided by several directives on the same node, some rules apply in\n  // the viewEngine:\n  // - viewProviders have priority over providers\n  // - the last directive in NgModule.declarations has priority over the previous one\n  // So to match these rules, the order in which providers are added in the arrays is very\n  // important.\n  for (let i = 0; i < directives.length; i++) {\n    const def = directives[i];\n    if (def.providersResolver) def.providersResolver(def);\n  }\n  let preOrderHooksFound = false;\n  let preOrderCheckHooksFound = false;\n  let directiveIdx = allocExpando(tView, lView, directives.length, null);\n  ngDevMode && assertSame(directiveIdx, tNode.directiveStart, 'TNode.directiveStart should point to just allocated space');\n  for (let i = 0; i < directives.length; i++) {\n    const def = directives[i];\n    // Merge the attrs in the order of matches. This assumes that the first directive is the\n    // component itself, so that the component has the least priority.\n    tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, def.hostAttrs);\n    configureViewWithDirective(tView, tNode, lView, directiveIdx, def);\n    saveNameToExportMap(directiveIdx, def, exportsMap);\n    if (def.contentQueries !== null) tNode.flags |= 4 /* TNodeFlags.hasContentQuery */;\n    if (def.hostBindings !== null || def.hostAttrs !== null || def.hostVars !== 0) tNode.flags |= 64 /* TNodeFlags.hasHostBindings */;\n    const lifeCycleHooks = def.type.prototype;\n    // Only push a node index into the preOrderHooks array if this is the first\n    // pre-order hook found on this node.\n    if (!preOrderHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngOnInit || lifeCycleHooks.ngDoCheck)) {\n      var _tView$preOrderHooks4;\n      // We will push the actual hook function into this array later during dir instantiation.\n      // We cannot do it now because we must ensure hooks are registered in the same\n      // order that directives are created (i.e. injection order).\n      ((_tView$preOrderHooks4 = tView.preOrderHooks) !== null && _tView$preOrderHooks4 !== void 0 ? _tView$preOrderHooks4 : tView.preOrderHooks = []).push(tNode.index);\n      preOrderHooksFound = true;\n    }\n    if (!preOrderCheckHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngDoCheck)) {\n      var _tView$preOrderCheckH3;\n      ((_tView$preOrderCheckH3 = tView.preOrderCheckHooks) !== null && _tView$preOrderCheckH3 !== void 0 ? _tView$preOrderCheckH3 : tView.preOrderCheckHooks = []).push(tNode.index);\n      preOrderCheckHooksFound = true;\n    }\n    directiveIdx++;\n  }\n  initializeInputAndOutputAliases(tView, tNode, hostDirectiveDefs);\n}\n/**\n * Add `hostBindings` to the `TView.hostBindingOpCodes`.\n *\n * @param tView `TView` to which the `hostBindings` should be added.\n * @param tNode `TNode` the element which contains the directive\n * @param directiveIdx Directive index in view.\n * @param directiveVarsIdx Where will the directive's vars be stored\n * @param def `ComponentDef`/`DirectiveDef`, which contains the `hostVars`/`hostBindings` to add.\n */\nfunction registerHostBindingOpCodes(tView, tNode, directiveIdx, directiveVarsIdx, def) {\n  ngDevMode && assertFirstCreatePass(tView);\n  const hostBindings = def.hostBindings;\n  if (hostBindings) {\n    let hostBindingOpCodes = tView.hostBindingOpCodes;\n    if (hostBindingOpCodes === null) {\n      hostBindingOpCodes = tView.hostBindingOpCodes = [];\n    }\n    const elementIndx = ~tNode.index;\n    if (lastSelectedElementIdx(hostBindingOpCodes) != elementIndx) {\n      // Conditionally add select element so that we are more efficient in execution.\n      // NOTE: this is strictly not necessary and it trades code size for runtime perf.\n      // (We could just always add it.)\n      hostBindingOpCodes.push(elementIndx);\n    }\n    hostBindingOpCodes.push(directiveIdx, directiveVarsIdx, hostBindings);\n  }\n}\n/**\n * Returns the last selected element index in the `HostBindingOpCodes`\n *\n * For perf reasons we don't need to update the selected element index in `HostBindingOpCodes` only\n * if it changes. This method returns the last index (or '0' if not found.)\n *\n * Selected element index are only the ones which are negative.\n */\nfunction lastSelectedElementIdx(hostBindingOpCodes) {\n  let i = hostBindingOpCodes.length;\n  while (i > 0) {\n    const value = hostBindingOpCodes[--i];\n    if (typeof value === 'number' && value < 0) {\n      return value;\n    }\n  }\n  return 0;\n}\n/**\n * Instantiate all the directives that were previously resolved on the current node.\n */\nfunction instantiateAllDirectives(tView, lView, tNode, native) {\n  const start = tNode.directiveStart;\n  const end = tNode.directiveEnd;\n  // The component view needs to be created before creating the node injector\n  // since it is used to inject some special symbols like `ChangeDetectorRef`.\n  if (isComponentHost(tNode)) {\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */);\n    addComponentLogic(lView, tNode, tView.data[start + tNode.componentOffset]);\n  }\n  if (!tView.firstCreatePass) {\n    getOrCreateNodeInjectorForNode(tNode, lView);\n  }\n  attachPatchData(native, lView);\n  const initialInputs = tNode.initialInputs;\n  for (let i = start; i < end; i++) {\n    const def = tView.data[i];\n    const directive = getNodeInjectable(lView, tView, i, tNode);\n    attachPatchData(directive, lView);\n    if (initialInputs !== null) {\n      setInputsFromAttrs(lView, i - start, directive, def, tNode, initialInputs);\n    }\n    if (isComponentDef(def)) {\n      const componentView = getComponentLViewByIndex(tNode.index, lView);\n      componentView[CONTEXT] = getNodeInjectable(lView, tView, i, tNode);\n    }\n  }\n}\nfunction invokeDirectivesHostBindings(tView, lView, tNode) {\n  const start = tNode.directiveStart;\n  const end = tNode.directiveEnd;\n  const elementIndex = tNode.index;\n  const currentDirectiveIndex = getCurrentDirectiveIndex();\n  try {\n    setSelectedIndex(elementIndex);\n    for (let dirIndex = start; dirIndex < end; dirIndex++) {\n      const def = tView.data[dirIndex];\n      const directive = lView[dirIndex];\n      setCurrentDirectiveIndex(dirIndex);\n      if (def.hostBindings !== null || def.hostVars !== 0 || def.hostAttrs !== null) {\n        invokeHostBindingsInCreationMode(def, directive);\n      }\n    }\n  } finally {\n    setSelectedIndex(-1);\n    setCurrentDirectiveIndex(currentDirectiveIndex);\n  }\n}\n/**\n * Invoke the host bindings in creation mode.\n *\n * @param def `DirectiveDef` which may contain the `hostBindings` function.\n * @param directive Instance of directive.\n */\nfunction invokeHostBindingsInCreationMode(def, directive) {\n  if (def.hostBindings !== null) {\n    def.hostBindings(1 /* RenderFlags.Create */, directive);\n  }\n}\n/**\n * Matches the current node against all available selectors.\n * If a component is matched (at most one), it is returned in first position in the array.\n */\nfunction findDirectiveDefMatches(tView, tNode) {\n  ngDevMode && assertFirstCreatePass(tView);\n  ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */);\n  const registry = tView.directiveRegistry;\n  let matches = null;\n  let hostDirectiveDefs = null;\n  if (registry) {\n    for (let i = 0; i < registry.length; i++) {\n      const def = registry[i];\n      if (isNodeMatchingSelectorList(tNode, def.selectors, /* isProjectionMode */false)) {\n        matches || (matches = []);\n        if (isComponentDef(def)) {\n          if (ngDevMode) {\n            assertTNodeType(tNode, 2 /* TNodeType.Element */, `\"${tNode.value}\" tags cannot be used as component hosts. ` + `Please use a different tag to activate the ${stringify(def.type)} component.`);\n            if (isComponentHost(tNode)) {\n              throwMultipleComponentError(tNode, matches.find(isComponentDef).type, def.type);\n            }\n          }\n          // Components are inserted at the front of the matches array so that their lifecycle\n          // hooks run before any directive lifecycle hooks. This appears to be for ViewEngine\n          // compatibility. This logic doesn't make sense with host directives, because it\n          // would allow the host directives to undo any overrides the host may have made.\n          // To handle this case, the host directives of components are inserted at the beginning\n          // of the array, followed by the component. As such, the insertion order is as follows:\n          // 1. Host directives belonging to the selector-matched component.\n          // 2. Selector-matched component.\n          // 3. Host directives belonging to selector-matched directives.\n          // 4. Selector-matched directives.\n          if (def.findHostDirectiveDefs !== null) {\n            const hostDirectiveMatches = [];\n            hostDirectiveDefs = hostDirectiveDefs || new Map();\n            def.findHostDirectiveDefs(def, hostDirectiveMatches, hostDirectiveDefs);\n            // Add all host directives declared on this component, followed by the component itself.\n            // Host directives should execute first so the host has a chance to override changes\n            // to the DOM made by them.\n            matches.unshift(...hostDirectiveMatches, def);\n            // Component is offset starting from the beginning of the host directives array.\n            const componentOffset = hostDirectiveMatches.length;\n            markAsComponentHost(tView, tNode, componentOffset);\n          } else {\n            // No host directives on this component, just add the\n            // component def to the beginning of the matches.\n            matches.unshift(def);\n            markAsComponentHost(tView, tNode, 0);\n          }\n        } else {\n          var _def$findHostDirectiv;\n          // Append any host directives to the matches first.\n          hostDirectiveDefs = hostDirectiveDefs || new Map();\n          (_def$findHostDirectiv = def.findHostDirectiveDefs) === null || _def$findHostDirectiv === void 0 || _def$findHostDirectiv.call(def, def, matches, hostDirectiveDefs);\n          matches.push(def);\n        }\n      }\n    }\n  }\n  ngDevMode && matches !== null && assertNoDuplicateDirectives(matches);\n  return matches === null ? null : [matches, hostDirectiveDefs];\n}\n/**\n * Marks a given TNode as a component's host. This consists of:\n * - setting the component offset on the TNode.\n * - storing index of component's host element so it will be queued for view refresh during CD.\n */\nfunction markAsComponentHost(tView, hostTNode, componentOffset) {\n  var _tView$components;\n  ngDevMode && assertFirstCreatePass(tView);\n  ngDevMode && assertGreaterThan(componentOffset, -1, 'componentOffset must be great than -1');\n  hostTNode.componentOffset = componentOffset;\n  ((_tView$components = tView.components) !== null && _tView$components !== void 0 ? _tView$components : tView.components = []).push(hostTNode.index);\n}\n/** Caches local names and their matching directive indices for query and template lookups. */\nfunction cacheMatchingLocalNames(tNode, localRefs, exportsMap) {\n  if (localRefs) {\n    const localNames = tNode.localNames = [];\n    // Local names must be stored in tNode in the same order that localRefs are defined\n    // in the template to ensure the data is loaded in the same slots as their refs\n    // in the template (for template queries).\n    for (let i = 0; i < localRefs.length; i += 2) {\n      const index = exportsMap[localRefs[i + 1]];\n      if (index == null) throw new RuntimeError(-301 /* RuntimeErrorCode.EXPORT_NOT_FOUND */, ngDevMode && `Export of name '${localRefs[i + 1]}' not found!`);\n      localNames.push(localRefs[i], index);\n    }\n  }\n}\n/**\n * Builds up an export map as directives are created, so local refs can be quickly mapped\n * to their directive instances.\n */\nfunction saveNameToExportMap(directiveIdx, def, exportsMap) {\n  if (exportsMap) {\n    if (def.exportAs) {\n      for (let i = 0; i < def.exportAs.length; i++) {\n        exportsMap[def.exportAs[i]] = directiveIdx;\n      }\n    }\n    if (isComponentDef(def)) exportsMap[''] = directiveIdx;\n  }\n}\n/**\n * Initializes the flags on the current node, setting all indices to the initial index,\n * the directive count to 0, and adding the isComponent flag.\n * @param index the initial index\n */\nfunction initTNodeFlags(tNode, index, numberOfDirectives) {\n  ngDevMode && assertNotEqual(numberOfDirectives, tNode.directiveEnd - tNode.directiveStart, 'Reached the max number of directives');\n  tNode.flags |= 1 /* TNodeFlags.isDirectiveHost */;\n  // When the first directive is created on a node, save the index\n  tNode.directiveStart = index;\n  tNode.directiveEnd = index + numberOfDirectives;\n  tNode.providerIndexes = index;\n}\n/**\n * Setup directive for instantiation.\n *\n * We need to create a `NodeInjectorFactory` which is then inserted in both the `Blueprint` as well\n * as `LView`. `TView` gets the `DirectiveDef`.\n *\n * @param tView `TView`\n * @param tNode `TNode`\n * @param lView `LView`\n * @param directiveIndex Index where the directive will be stored in the Expando.\n * @param def `DirectiveDef`\n */\nfunction configureViewWithDirective(tView, tNode, lView, directiveIndex, def) {\n  ngDevMode && assertGreaterThanOrEqual(directiveIndex, HEADER_OFFSET, 'Must be in Expando section');\n  tView.data[directiveIndex] = def;\n  const directiveFactory = def.factory || (def.factory = getFactoryDef(def.type, true));\n  // Even though `directiveFactory` will already be using `ɵɵdirectiveInject` in its generated code,\n  // we also want to support `inject()` directly from the directive constructor context so we set\n  // `ɵɵdirectiveInject` as the inject implementation here too.\n  const nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), ɵɵdirectiveInject);\n  tView.blueprint[directiveIndex] = nodeInjectorFactory;\n  lView[directiveIndex] = nodeInjectorFactory;\n  registerHostBindingOpCodes(tView, tNode, directiveIndex, allocExpando(tView, lView, def.hostVars, NO_CHANGE), def);\n}\nfunction addComponentLogic(lView, hostTNode, def) {\n  const native = getNativeByTNode(hostTNode, lView);\n  const tView = getOrCreateComponentTView(def);\n  // Only component views should be added to the view tree directly. Embedded views are\n  // accessed through their containers because they may be removed / re-added later.\n  const rendererFactory = lView[ENVIRONMENT].rendererFactory;\n  let lViewFlags = 16 /* LViewFlags.CheckAlways */;\n  if (def.signals) {\n    lViewFlags = 4096 /* LViewFlags.SignalView */;\n  } else if (def.onPush) {\n    lViewFlags = 64 /* LViewFlags.Dirty */;\n  }\n\n  const componentView = addToViewTree(lView, createLView(lView, tView, null, lViewFlags, native, hostTNode, null, rendererFactory.createRenderer(native, def), null, null, null));\n  // Component view will always be created before any injected LContainers,\n  // so this is a regular element, wrap it with the component view\n  lView[hostTNode.index] = componentView;\n}\nfunction elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace) {\n  if (ngDevMode) {\n    assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n    validateAgainstEventAttributes(name);\n    assertTNodeType(tNode, 2 /* TNodeType.Element */, `Attempted to set attribute \\`${name}\\` on a container node. ` + `Host bindings are not valid on ng-container or ng-template.`);\n  }\n  const element = getNativeByTNode(tNode, lView);\n  setElementAttribute(lView[RENDERER], element, namespace, tNode.value, name, value, sanitizer);\n}\nfunction setElementAttribute(renderer, element, namespace, tagName, name, value, sanitizer) {\n  if (value == null) {\n    ngDevMode && ngDevMode.rendererRemoveAttribute++;\n    renderer.removeAttribute(element, name, namespace);\n  } else {\n    ngDevMode && ngDevMode.rendererSetAttribute++;\n    const strValue = sanitizer == null ? renderStringify(value) : sanitizer(value, tagName || '', name);\n    renderer.setAttribute(element, name, strValue, namespace);\n  }\n}\n/**\n * Sets initial input properties on directive instances from attribute data\n *\n * @param lView Current LView that is being processed.\n * @param directiveIndex Index of the directive in directives array\n * @param instance Instance of the directive on which to set the initial inputs\n * @param def The directive def that contains the list of inputs\n * @param tNode The static data for this node\n */\nfunction setInputsFromAttrs(lView, directiveIndex, instance, def, tNode, initialInputData) {\n  const initialInputs = initialInputData[directiveIndex];\n  if (initialInputs !== null) {\n    for (let i = 0; i < initialInputs.length;) {\n      const publicName = initialInputs[i++];\n      const privateName = initialInputs[i++];\n      const value = initialInputs[i++];\n      writeToDirectiveInput(def, instance, publicName, privateName, value);\n      if (ngDevMode) {\n        const nativeElement = getNativeByTNode(tNode, lView);\n        setNgReflectProperty(lView, nativeElement, tNode.type, privateName, value);\n      }\n    }\n  }\n}\nfunction writeToDirectiveInput(def, instance, publicName, privateName, value) {\n  const prevConsumer = setActiveConsumer$1(null);\n  try {\n    const inputTransforms = def.inputTransforms;\n    if (inputTransforms !== null && inputTransforms.hasOwnProperty(privateName)) {\n      value = inputTransforms[privateName].call(instance, value);\n    }\n    if (def.setInput !== null) {\n      def.setInput(instance, value, publicName, privateName);\n    } else {\n      instance[privateName] = value;\n    }\n  } finally {\n    setActiveConsumer$1(prevConsumer);\n  }\n}\n/**\n * Generates initialInputData for a node and stores it in the template's static storage\n * so subsequent template invocations don't have to recalculate it.\n *\n * initialInputData is an array containing values that need to be set as input properties\n * for directives on this node, but only once on creation. We need this array to support\n * the case where you set an @Input property of a directive using attribute-like syntax.\n * e.g. if you have a `name` @Input, you can set it once like this:\n *\n * <my-component name=\"Bess\"></my-component>\n *\n * @param inputs Input alias map that was generated from the directive def inputs.\n * @param directiveIndex Index of the directive that is currently being processed.\n * @param attrs Static attrs on this node.\n */\nfunction generateInitialInputs(inputs, directiveIndex, attrs) {\n  let inputsToStore = null;\n  let i = 0;\n  while (i < attrs.length) {\n    const attrName = attrs[i];\n    if (attrName === 0 /* AttributeMarker.NamespaceURI */) {\n      // We do not allow inputs on namespaced attributes.\n      i += 4;\n      continue;\n    } else if (attrName === 5 /* AttributeMarker.ProjectAs */) {\n      // Skip over the `ngProjectAs` value.\n      i += 2;\n      continue;\n    }\n    // If we hit any other attribute markers, we're done anyway. None of those are valid inputs.\n    if (typeof attrName === 'number') break;\n    if (inputs.hasOwnProperty(attrName)) {\n      if (inputsToStore === null) inputsToStore = [];\n      // Find the input's public name from the input store. Note that we can be found easier\n      // through the directive def, but we want to do it using the inputs store so that it can\n      // account for host directive aliases.\n      const inputConfig = inputs[attrName];\n      for (let j = 0; j < inputConfig.length; j += 2) {\n        if (inputConfig[j] === directiveIndex) {\n          inputsToStore.push(attrName, inputConfig[j + 1], attrs[i + 1]);\n          // A directive can't have multiple inputs with the same name so we can break here.\n          break;\n        }\n      }\n    }\n    i += 2;\n  }\n  return inputsToStore;\n}\n//////////////////////////\n//// ViewContainer & View\n//////////////////////////\n/**\n * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.\n *\n * @param hostNative The host element for the LContainer\n * @param hostTNode The host TNode for the LContainer\n * @param currentView The parent view of the LContainer\n * @param native The native comment element\n * @param isForViewContainerRef Optional a flag indicating the ViewContainerRef case\n * @returns LContainer\n */\nfunction createLContainer(hostNative, currentView, native, tNode) {\n  ngDevMode && assertLView(currentView);\n  const lContainer = [hostNative, true, 0, currentView, null, tNode, null, native, null, null // moved views\n  ];\n\n  ngDevMode && assertEqual(lContainer.length, CONTAINER_HEADER_OFFSET, 'Should allocate correct number of slots for LContainer header.');\n  return lContainer;\n}\n/** Refreshes all content queries declared by directives in a given view */\nfunction refreshContentQueries(tView, lView) {\n  const contentQueries = tView.contentQueries;\n  if (contentQueries !== null) {\n    const prevConsumer = setActiveConsumer$1(null);\n    try {\n      for (let i = 0; i < contentQueries.length; i += 2) {\n        const queryStartIdx = contentQueries[i];\n        const directiveDefIdx = contentQueries[i + 1];\n        if (directiveDefIdx !== -1) {\n          const directiveDef = tView.data[directiveDefIdx];\n          ngDevMode && assertDefined(directiveDef, 'DirectiveDef not found.');\n          ngDevMode && assertDefined(directiveDef.contentQueries, 'contentQueries function should be defined');\n          setCurrentQueryIndex(queryStartIdx);\n          directiveDef.contentQueries(2 /* RenderFlags.Update */, lView[directiveDefIdx], directiveDefIdx);\n        }\n      }\n    } finally {\n      setActiveConsumer$1(prevConsumer);\n    }\n  }\n}\n/**\n * Adds LView or LContainer to the end of the current view tree.\n *\n * This structure will be used to traverse through nested views to remove listeners\n * and call onDestroy callbacks.\n *\n * @param lView The view where LView or LContainer should be added\n * @param adjustedHostIndex Index of the view's host node in LView[], adjusted for header\n * @param lViewOrLContainer The LView or LContainer to add to the view tree\n * @returns The state passed in\n */\nfunction addToViewTree(lView, lViewOrLContainer) {\n  // TODO(benlesh/misko): This implementation is incorrect, because it always adds the LContainer\n  // to the end of the queue, which means if the developer retrieves the LContainers from RNodes out\n  // of order, the change detection will run out of order, as the act of retrieving the the\n  // LContainer from the RNode is what adds it to the queue.\n  if (lView[CHILD_HEAD]) {\n    lView[CHILD_TAIL][NEXT] = lViewOrLContainer;\n  } else {\n    lView[CHILD_HEAD] = lViewOrLContainer;\n  }\n  lView[CHILD_TAIL] = lViewOrLContainer;\n  return lViewOrLContainer;\n}\n///////////////////////////////\n//// Change detection\n///////////////////////////////\nfunction executeViewQueryFn(flags, viewQueryFn, component) {\n  ngDevMode && assertDefined(viewQueryFn, 'View queries function to execute must be defined.');\n  setCurrentQueryIndex(0);\n  const prevConsumer = setActiveConsumer$1(null);\n  try {\n    viewQueryFn(flags, component);\n  } finally {\n    setActiveConsumer$1(prevConsumer);\n  }\n}\n///////////////////////////////\n//// Bindings & interpolations\n///////////////////////////////\n/**\n * Stores meta-data for a property binding to be used by TestBed's `DebugElement.properties`.\n *\n * In order to support TestBed's `DebugElement.properties` we need to save, for each binding:\n * - a bound property name;\n * - a static parts of interpolated strings;\n *\n * A given property metadata is saved at the binding's index in the `TView.data` (in other words, a\n * property binding metadata will be stored in `TView.data` at the same index as a bound value in\n * `LView`). Metadata are represented as `INTERPOLATION_DELIMITER`-delimited string with the\n * following format:\n * - `propertyName` for bound properties;\n * - `propertyName�prefix�interpolation_static_part1�..interpolation_static_partN�suffix` for\n * interpolated properties.\n *\n * @param tData `TData` where meta-data will be saved;\n * @param tNode `TNode` that is a target of the binding;\n * @param propertyName bound property name;\n * @param bindingIndex binding index in `LView`\n * @param interpolationParts static interpolation parts (for property interpolations)\n */\nfunction storePropertyBindingMetadata(tData, tNode, propertyName, bindingIndex, ...interpolationParts) {\n  // Binding meta-data are stored only the first time a given property instruction is processed.\n  // Since we don't have a concept of the \"first update pass\" we need to check for presence of the\n  // binding meta-data to decide if one should be stored (or if was stored already).\n  if (tData[bindingIndex] === null) {\n    if (tNode.inputs == null || !tNode.inputs[propertyName]) {\n      const propBindingIdxs = tNode.propertyBindings || (tNode.propertyBindings = []);\n      propBindingIdxs.push(bindingIndex);\n      let bindingMetadata = propertyName;\n      if (interpolationParts.length > 0) {\n        bindingMetadata += INTERPOLATION_DELIMITER + interpolationParts.join(INTERPOLATION_DELIMITER);\n      }\n      tData[bindingIndex] = bindingMetadata;\n    }\n  }\n}\nfunction getOrCreateLViewCleanup(view) {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return view[CLEANUP] || (view[CLEANUP] = []);\n}\nfunction getOrCreateTViewCleanup(tView) {\n  return tView.cleanup || (tView.cleanup = []);\n}\n/**\n * There are cases where the sub component's renderer needs to be included\n * instead of the current renderer (see the componentSyntheticHost* instructions).\n */\nfunction loadComponentRenderer(currentDef, tNode, lView) {\n  // TODO(FW-2043): the `currentDef` is null when host bindings are invoked while creating root\n  // component (see packages/core/src/render3/component.ts). This is not consistent with the process\n  // of creating inner components, when current directive index is available in the state. In order\n  // to avoid relying on current def being `null` (thus special-casing root component creation), the\n  // process of creating root component should be unified with the process of creating inner\n  // components.\n  if (currentDef === null || isComponentDef(currentDef)) {\n    lView = unwrapLView(lView[tNode.index]);\n  }\n  return lView[RENDERER];\n}\n/** Handles an error thrown in an LView. */\nfunction handleError(lView, error) {\n  const injector = lView[INJECTOR$1];\n  const errorHandler = injector ? injector.get(ErrorHandler, null) : null;\n  errorHandler && errorHandler.handleError(error);\n}\n/**\n * Set the inputs of directives at the current node to corresponding value.\n *\n * @param tView The current TView\n * @param lView the `LView` which contains the directives.\n * @param inputs mapping between the public \"input\" name and privately-known,\n *        possibly minified, property names to write to.\n * @param value Value to set.\n */\nfunction setInputsForProperty(tView, lView, inputs, publicName, value) {\n  for (let i = 0; i < inputs.length;) {\n    const index = inputs[i++];\n    const privateName = inputs[i++];\n    const instance = lView[index];\n    ngDevMode && assertIndexInRange(lView, index);\n    const def = tView.data[index];\n    writeToDirectiveInput(def, instance, publicName, privateName, value);\n  }\n}\n/**\n * Updates a text binding at a given index in a given LView.\n */\nfunction textBindingInternal(lView, index, value) {\n  ngDevMode && assertString(value, 'Value should be a string');\n  ngDevMode && assertNotSame(value, NO_CHANGE, 'value should not be NO_CHANGE');\n  ngDevMode && assertIndexInRange(lView, index);\n  const element = getNativeByIndex(index, lView);\n  ngDevMode && assertDefined(element, 'native element should exist');\n  updateTextNode(lView[RENDERER], element, value);\n}\n\n/**\n * The maximum number of times the change detection traversal will rerun before throwing an error.\n */\nconst MAXIMUM_REFRESH_RERUNS = 100;\nfunction detectChangesInternal(lView, notifyErrorHandler = true) {\n  const environment = lView[ENVIRONMENT];\n  const rendererFactory = environment.rendererFactory;\n  const afterRenderEventManager = environment.afterRenderEventManager;\n  // Check no changes mode is a dev only mode used to verify that bindings have not changed\n  // since they were assigned. We do not want to invoke renderer factory functions in that mode\n  // to avoid any possible side-effects.\n  const checkNoChangesMode = !!ngDevMode && isInCheckNoChangesMode();\n  if (!checkNoChangesMode) {\n    var _rendererFactory$begi;\n    (_rendererFactory$begi = rendererFactory.begin) === null || _rendererFactory$begi === void 0 || _rendererFactory$begi.call(rendererFactory);\n    afterRenderEventManager === null || afterRenderEventManager === void 0 || afterRenderEventManager.begin();\n  }\n  try {\n    detectChangesInViewWhileDirty(lView);\n  } catch (error) {\n    if (notifyErrorHandler) {\n      handleError(lView, error);\n    }\n    throw error;\n  } finally {\n    if (!checkNoChangesMode) {\n      var _rendererFactory$end, _environment$inlineEf;\n      (_rendererFactory$end = rendererFactory.end) === null || _rendererFactory$end === void 0 || _rendererFactory$end.call(rendererFactory);\n      // One final flush of the effects queue to catch any effects created in `ngAfterViewInit` or\n      // other post-order hooks.\n      (_environment$inlineEf = environment.inlineEffectRunner) === null || _environment$inlineEf === void 0 || _environment$inlineEf.flush();\n      // Invoke all callbacks registered via `after*Render`, if needed.\n      afterRenderEventManager === null || afterRenderEventManager === void 0 || afterRenderEventManager.end();\n    }\n  }\n}\nfunction detectChangesInViewWhileDirty(lView) {\n  detectChangesInView(lView, 0 /* ChangeDetectionMode.Global */);\n  let retries = 0;\n  // If after running change detection, this view still needs to be refreshed or there are\n  // descendants views that need to be refreshed due to re-dirtying during the change detection\n  // run, detect changes on the view again. We run change detection in `Targeted` mode to only\n  // refresh views with the `RefreshView` flag.\n  while (requiresRefreshOrTraversal(lView)) {\n    if (retries === MAXIMUM_REFRESH_RERUNS) {\n      throw new RuntimeError(103 /* RuntimeErrorCode.INFINITE_CHANGE_DETECTION */, ngDevMode && 'Infinite change detection while trying to refresh views. ' + 'There may be components which each cause the other to require a refresh, ' + 'causing an infinite loop.');\n    }\n    retries++;\n    // Even if this view is detached, we still detect changes in targeted mode because this was\n    // the root of the change detection run.\n    detectChangesInView(lView, 1 /* ChangeDetectionMode.Targeted */);\n  }\n}\n\nfunction checkNoChangesInternal(lView, notifyErrorHandler = true) {\n  setIsInCheckNoChangesMode(true);\n  try {\n    detectChangesInternal(lView, notifyErrorHandler);\n  } finally {\n    setIsInCheckNoChangesMode(false);\n  }\n}\n/**\n * Processes a view in update mode. This includes a number of steps in a specific order:\n * - executing a template function in update mode;\n * - executing hooks;\n * - refreshing queries;\n * - setting host bindings;\n * - refreshing child (embedded and component) views.\n */\nfunction refreshView(tView, lView, templateFn, context) {\n  var _lView$ENVIRONMENT$in;\n  ngDevMode && assertEqual(isCreationMode(lView), false, 'Should be run in update mode');\n  const flags = lView[FLAGS];\n  if ((flags & 256 /* LViewFlags.Destroyed */) === 256 /* LViewFlags.Destroyed */) return;\n  // Check no changes mode is a dev only mode used to verify that bindings have not changed\n  // since they were assigned. We do not want to execute lifecycle hooks in that mode.\n  const isInCheckNoChangesPass = ngDevMode && isInCheckNoChangesMode();\n  !isInCheckNoChangesPass && ((_lView$ENVIRONMENT$in = lView[ENVIRONMENT].inlineEffectRunner) === null || _lView$ENVIRONMENT$in === void 0 ? void 0 : _lView$ENVIRONMENT$in.flush());\n  // Start component reactive context\n  // - We might already be in a reactive context if this is an embedded view of the host.\n  // - We might be descending into a view that needs a consumer.\n  enterView(lView);\n  let prevConsumer = null;\n  let currentConsumer = null;\n  if (!isInCheckNoChangesPass && viewShouldHaveReactiveConsumer(tView)) {\n    currentConsumer = getOrBorrowReactiveLViewConsumer(lView);\n    prevConsumer = consumerBeforeComputation$1(currentConsumer);\n  }\n  try {\n    resetPreOrderHookFlags(lView);\n    setBindingIndex(tView.bindingStartIndex);\n    if (templateFn !== null) {\n      executeTemplate(tView, lView, templateFn, 2 /* RenderFlags.Update */, context);\n    }\n    const hooksInitPhaseCompleted = (flags & 3 /* LViewFlags.InitPhaseStateMask */) === 3 /* InitPhaseState.InitPhaseCompleted */;\n    // execute pre-order hooks (OnInit, OnChanges, DoCheck)\n    // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n    if (!isInCheckNoChangesPass) {\n      if (hooksInitPhaseCompleted) {\n        const preOrderCheckHooks = tView.preOrderCheckHooks;\n        if (preOrderCheckHooks !== null) {\n          executeCheckHooks(lView, preOrderCheckHooks, null);\n        }\n      } else {\n        const preOrderHooks = tView.preOrderHooks;\n        if (preOrderHooks !== null) {\n          executeInitAndCheckHooks(lView, preOrderHooks, 0 /* InitPhaseState.OnInitHooksToBeRun */, null);\n        }\n        incrementInitPhaseFlags(lView, 0 /* InitPhaseState.OnInitHooksToBeRun */);\n      }\n    }\n    // First mark transplanted views that are declared in this lView as needing a refresh at their\n    // insertion points. This is needed to avoid the situation where the template is defined in this\n    // `LView` but its declaration appears after the insertion component.\n    markTransplantedViewsForRefresh(lView);\n    detectChangesInEmbeddedViews(lView, 0 /* ChangeDetectionMode.Global */);\n    // Content query results must be refreshed before content hooks are called.\n    if (tView.contentQueries !== null) {\n      refreshContentQueries(tView, lView);\n    }\n    // execute content hooks (AfterContentInit, AfterContentChecked)\n    // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n    if (!isInCheckNoChangesPass) {\n      if (hooksInitPhaseCompleted) {\n        const contentCheckHooks = tView.contentCheckHooks;\n        if (contentCheckHooks !== null) {\n          executeCheckHooks(lView, contentCheckHooks);\n        }\n      } else {\n        const contentHooks = tView.contentHooks;\n        if (contentHooks !== null) {\n          executeInitAndCheckHooks(lView, contentHooks, 1 /* InitPhaseState.AfterContentInitHooksToBeRun */);\n        }\n\n        incrementInitPhaseFlags(lView, 1 /* InitPhaseState.AfterContentInitHooksToBeRun */);\n      }\n    }\n\n    processHostBindingOpCodes(tView, lView);\n    // Refresh child component views.\n    const components = tView.components;\n    if (components !== null) {\n      detectChangesInChildComponents(lView, components, 0 /* ChangeDetectionMode.Global */);\n    }\n    // View queries must execute after refreshing child components because a template in this view\n    // could be inserted in a child component. If the view query executes before child component\n    // refresh, the template might not yet be inserted.\n    const viewQuery = tView.viewQuery;\n    if (viewQuery !== null) {\n      executeViewQueryFn(2 /* RenderFlags.Update */, viewQuery, context);\n    }\n    // execute view hooks (AfterViewInit, AfterViewChecked)\n    // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n    if (!isInCheckNoChangesPass) {\n      if (hooksInitPhaseCompleted) {\n        const viewCheckHooks = tView.viewCheckHooks;\n        if (viewCheckHooks !== null) {\n          executeCheckHooks(lView, viewCheckHooks);\n        }\n      } else {\n        const viewHooks = tView.viewHooks;\n        if (viewHooks !== null) {\n          executeInitAndCheckHooks(lView, viewHooks, 2 /* InitPhaseState.AfterViewInitHooksToBeRun */);\n        }\n\n        incrementInitPhaseFlags(lView, 2 /* InitPhaseState.AfterViewInitHooksToBeRun */);\n      }\n    }\n\n    if (tView.firstUpdatePass === true) {\n      // We need to make sure that we only flip the flag on successful `refreshView` only\n      // Don't do this in `finally` block.\n      // If we did this in `finally` block then an exception could block the execution of styling\n      // instructions which in turn would be unable to insert themselves into the styling linked\n      // list. The result of this would be that if the exception would not be throw on subsequent CD\n      // the styling would be unable to process it data and reflect to the DOM.\n      tView.firstUpdatePass = false;\n    }\n    // Schedule any effects that are waiting on the update pass of this view.\n    if (lView[EFFECTS_TO_SCHEDULE]) {\n      for (const notifyEffect of lView[EFFECTS_TO_SCHEDULE]) {\n        notifyEffect();\n      }\n      // Once they've been run, we can drop the array.\n      lView[EFFECTS_TO_SCHEDULE] = null;\n    }\n    // Do not reset the dirty state when running in check no changes mode. We don't want components\n    // to behave differently depending on whether check no changes is enabled or not. For example:\n    // Marking an OnPush component as dirty from within the `ngAfterViewInit` hook in order to\n    // refresh a `NgClass` binding should work. If we would reset the dirty state in the check\n    // no changes cycle, the component would be not be dirty for the next update pass. This would\n    // be different in production mode where the component dirty state is not reset.\n    if (!isInCheckNoChangesPass) {\n      lView[FLAGS] &= ~(64 /* LViewFlags.Dirty */ | 8 /* LViewFlags.FirstLViewPass */);\n    }\n  } catch (e) {\n    // If refreshing a view causes an error, we need to remark the ancestors as needing traversal\n    // because the error might have caused a situation where views below the current location are\n    // dirty but will be unreachable because the \"has dirty children\" flag in the ancestors has been\n    // cleared during change detection and we failed to run to completion.\n    markAncestorsForTraversal(lView);\n    throw e;\n  } finally {\n    if (currentConsumer !== null) {\n      consumerAfterComputation$1(currentConsumer, prevConsumer);\n      maybeReturnReactiveLViewConsumer(currentConsumer);\n    }\n    leaveView();\n  }\n}\n/**\n * Indicates if the view should get its own reactive consumer node.\n *\n * In the current design, all embedded views share a consumer with the component view. This allows\n * us to refresh at the component level rather than at a per-view level. In addition, root views get\n * their own reactive node because root component will have a host view that executes the\n * component's host bindings. This needs to be tracked in a consumer as well.\n *\n * To get a more granular change detection than per-component, all we would just need to update the\n * condition here so that a given view gets a reactive consumer which can become dirty independently\n * from its parent component. For example embedded views for signal components could be created with\n * a new type \"SignalEmbeddedView\" and the condition here wouldn't even need updating in order to\n * get granular per-view change detection for signal components.\n */\nfunction viewShouldHaveReactiveConsumer(tView) {\n  return tView.type !== 2 /* TViewType.Embedded */;\n}\n/**\n * Goes over embedded views (ones created through ViewContainerRef APIs) and refreshes\n * them by executing an associated template function.\n */\nfunction detectChangesInEmbeddedViews(lView, mode) {\n  for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {\n    lContainer[FLAGS] &= ~LContainerFlags.HasChildViewsToRefresh;\n    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n      const embeddedLView = lContainer[i];\n      detectChangesInViewIfAttached(embeddedLView, mode);\n    }\n  }\n}\n/**\n * Mark transplanted views as needing to be refreshed at their insertion points.\n *\n * @param lView The `LView` that may have transplanted views.\n */\nfunction markTransplantedViewsForRefresh(lView) {\n  for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {\n    if (!(lContainer[FLAGS] & LContainerFlags.HasTransplantedViews)) continue;\n    const movedViews = lContainer[MOVED_VIEWS];\n    ngDevMode && assertDefined(movedViews, 'Transplanted View flags set but missing MOVED_VIEWS');\n    for (let i = 0; i < movedViews.length; i++) {\n      const movedLView = movedViews[i];\n      const insertionLContainer = movedLView[PARENT];\n      ngDevMode && assertLContainer(insertionLContainer);\n      markViewForRefresh(movedLView);\n    }\n  }\n}\n/**\n * Detects changes in a component by entering the component view and processing its bindings,\n * queries, etc. if it is CheckAlways, OnPush and Dirty, etc.\n *\n * @param componentHostIdx  Element index in LView[] (adjusted for HEADER_OFFSET)\n */\nfunction detectChangesInComponent(hostLView, componentHostIdx, mode) {\n  ngDevMode && assertEqual(isCreationMode(hostLView), false, 'Should be run in update mode');\n  const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);\n  detectChangesInViewIfAttached(componentView, mode);\n}\n/**\n * Visits a view as part of change detection traversal.\n *\n * If the view is detached, no additional traversal happens.\n */\nfunction detectChangesInViewIfAttached(lView, mode) {\n  if (!viewAttachedToChangeDetector(lView)) {\n    return;\n  }\n  detectChangesInView(lView, mode);\n}\n/**\n * Visits a view as part of change detection traversal.\n *\n * The view is refreshed if:\n * - If the view is CheckAlways or Dirty and ChangeDetectionMode is `Global`\n * - If the view has the `RefreshView` flag\n *\n * The view is not refreshed, but descendants are traversed in `ChangeDetectionMode.Targeted` if the\n * view HasChildViewsToRefresh flag is set.\n */\nfunction detectChangesInView(lView, mode) {\n  const isInCheckNoChangesPass = ngDevMode && isInCheckNoChangesMode();\n  const tView = lView[TVIEW];\n  const flags = lView[FLAGS];\n  const consumer = lView[REACTIVE_TEMPLATE_CONSUMER];\n  // Refresh CheckAlways views in Global mode.\n  let shouldRefreshView = !!(mode === 0 /* ChangeDetectionMode.Global */ && flags & 16 /* LViewFlags.CheckAlways */);\n  // Refresh Dirty views in Global mode, as long as we're not in checkNoChanges.\n  // CheckNoChanges never worked with `OnPush` components because the `Dirty` flag was\n  // cleared before checkNoChanges ran. Because there is now a loop for to check for\n  // backwards views, it gives an opportunity for `OnPush` components to be marked `Dirty`\n  // before the CheckNoChanges pass. We don't want existing errors that are hidden by the\n  // current CheckNoChanges bug to surface when making unrelated changes.\n  shouldRefreshView || (shouldRefreshView = !!(flags & 64 /* LViewFlags.Dirty */ && mode === 0 /* ChangeDetectionMode.Global */ && !isInCheckNoChangesPass));\n  // Always refresh views marked for refresh, regardless of mode.\n  shouldRefreshView || (shouldRefreshView = !!(flags & 1024 /* LViewFlags.RefreshView */));\n  // Refresh views when they have a dirty reactive consumer, regardless of mode.\n  shouldRefreshView || (shouldRefreshView = !!(consumer !== null && consumer !== void 0 && consumer.dirty && consumerPollProducersForChange$1(consumer)));\n  // Mark the Flags and `ReactiveNode` as not dirty before refreshing the component, so that they\n  // can be re-dirtied during the refresh process.\n  if (consumer) {\n    consumer.dirty = false;\n  }\n  lView[FLAGS] &= ~(8192 /* LViewFlags.HasChildViewsToRefresh */ | 1024 /* LViewFlags.RefreshView */);\n  if (shouldRefreshView) {\n    refreshView(tView, lView, tView.template, lView[CONTEXT]);\n  } else if (flags & 8192 /* LViewFlags.HasChildViewsToRefresh */) {\n    detectChangesInEmbeddedViews(lView, 1 /* ChangeDetectionMode.Targeted */);\n    const components = tView.components;\n    if (components !== null) {\n      detectChangesInChildComponents(lView, components, 1 /* ChangeDetectionMode.Targeted */);\n    }\n  }\n}\n/** Refreshes child components in the current view (update mode). */\nfunction detectChangesInChildComponents(hostLView, components, mode) {\n  for (let i = 0; i < components.length; i++) {\n    detectChangesInComponent(hostLView, components[i], mode);\n  }\n}\n\n/**\n * Marks current view and all ancestors dirty.\n *\n * Returns the root view because it is found as a byproduct of marking the view tree\n * dirty, and can be used by methods that consume markViewDirty() to easily schedule\n * change detection. Otherwise, such methods would need to traverse up the view tree\n * an additional time to get the root view and schedule a tick on it.\n *\n * @param lView The starting LView to mark dirty\n * @returns the root LView\n */\nfunction markViewDirty(lView) {\n  var _lView$ENVIRONMENT$ch3;\n  (_lView$ENVIRONMENT$ch3 = lView[ENVIRONMENT].changeDetectionScheduler) === null || _lView$ENVIRONMENT$ch3 === void 0 || _lView$ENVIRONMENT$ch3.notify();\n  while (lView) {\n    lView[FLAGS] |= 64 /* LViewFlags.Dirty */;\n    const parent = getLViewParent(lView);\n    // Stop traversing up as soon as you find a root view that wasn't attached to any container\n    if (isRootView(lView) && !parent) {\n      return lView;\n    }\n    // continue otherwise\n    lView = parent;\n  }\n  return null;\n}\nclass ViewRef$1 {\n  get rootNodes() {\n    const lView = this._lView;\n    const tView = lView[TVIEW];\n    return collectNativeNodes(tView, lView, tView.firstChild, []);\n  }\n  constructor(\n  /**\n   * This represents `LView` associated with the component when ViewRef is a ChangeDetectorRef.\n   *\n   * When ViewRef is created for a dynamic component, this also represents the `LView` for the\n   * component.\n   *\n   * For a \"regular\" ViewRef created for an embedded view, this is the `LView` for the embedded\n   * view.\n   *\n   * @internal\n   */\n  _lView,\n  /**\n   * This represents the `LView` associated with the point where `ChangeDetectorRef` was\n   * requested.\n   *\n   * This may be different from `_lView` if the `_cdRefInjectingView` is an embedded view.\n   */\n  _cdRefInjectingView, notifyErrorHandler = true) {\n    this._lView = _lView;\n    this._cdRefInjectingView = _cdRefInjectingView;\n    this.notifyErrorHandler = notifyErrorHandler;\n    this._appRef = null;\n    this._attachedToViewContainer = false;\n  }\n  get context() {\n    return this._lView[CONTEXT];\n  }\n  /**\n   * @deprecated Replacing the full context object is not supported. Modify the context\n   *   directly, or consider using a `Proxy` if you need to replace the full object.\n   * // TODO(devversion): Remove this.\n   */\n  set context(value) {\n    if (ngDevMode) {\n      // Note: We have a warning message here because the `@deprecated` JSDoc will not be picked\n      // up for assignments on the setter. We want to let users know about the deprecated usage.\n      console.warn('Angular: Replacing the `context` object of an `EmbeddedViewRef` is deprecated.');\n    }\n    this._lView[CONTEXT] = value;\n  }\n  get destroyed() {\n    return (this._lView[FLAGS] & 256 /* LViewFlags.Destroyed */) === 256 /* LViewFlags.Destroyed */;\n  }\n\n  destroy() {\n    if (this._appRef) {\n      this._appRef.detachView(this);\n    } else if (this._attachedToViewContainer) {\n      const parent = this._lView[PARENT];\n      if (isLContainer(parent)) {\n        const viewRefs = parent[VIEW_REFS];\n        const index = viewRefs ? viewRefs.indexOf(this) : -1;\n        if (index > -1) {\n          ngDevMode && assertEqual(index, parent.indexOf(this._lView) - CONTAINER_HEADER_OFFSET, 'An attached view should be in the same position within its container as its ViewRef in the VIEW_REFS array.');\n          detachView(parent, index);\n          removeFromArray(viewRefs, index);\n        }\n      }\n      this._attachedToViewContainer = false;\n    }\n    destroyLView(this._lView[TVIEW], this._lView);\n  }\n  onDestroy(callback) {\n    storeLViewOnDestroy(this._lView, callback);\n  }\n  /**\n   * Marks a view and all of its ancestors dirty.\n   *\n   * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush} component is\n   * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n   * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n   *\n   * <!-- TODO: Add a link to a chapter on OnPush components -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * @Component({\n   *   selector: 'app-root',\n   *   template: `Number of ticks: {{numberOfTicks}}`\n   *   changeDetection: ChangeDetectionStrategy.OnPush,\n   * })\n   * class AppComponent {\n   *   numberOfTicks = 0;\n   *\n   *   constructor(private ref: ChangeDetectorRef) {\n   *     setInterval(() => {\n   *       this.numberOfTicks++;\n   *       // the following is required, otherwise the view will not be updated\n   *       this.ref.markForCheck();\n   *     }, 1000);\n   *   }\n   * }\n   * ```\n   */\n  markForCheck() {\n    markViewDirty(this._cdRefInjectingView || this._lView);\n  }\n  /**\n   * Detaches the view from the change detection tree.\n   *\n   * Detached views will not be checked during change detection runs until they are\n   * re-attached, even if they are dirty. `detach` can be used in combination with\n   * {@link ChangeDetectorRef#detectChanges} to implement local change\n   * detection checks.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example defines a component with a large list of readonly data.\n   * Imagine the data changes constantly, many times per second. For performance reasons,\n   * we want to check and update the list every five seconds. We can do that by detaching\n   * the component's change detector and doing a local check every five seconds.\n   *\n   * ```typescript\n   * class DataProvider {\n   *   // in a real application the returned data will be different every time\n   *   get data() {\n   *     return [1,2,3,4,5];\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'giant-list',\n   *   template: `\n   *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n   *   `,\n   * })\n   * class GiantList {\n   *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n   *     ref.detach();\n   *     setInterval(() => {\n   *       this.ref.detectChanges();\n   *     }, 5000);\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'app',\n   *   providers: [DataProvider],\n   *   template: `\n   *     <giant-list><giant-list>\n   *   `,\n   * })\n   * class App {\n   * }\n   * ```\n   */\n  detach() {\n    this._lView[FLAGS] &= ~128 /* LViewFlags.Attached */;\n  }\n  /**\n   * Re-attaches a view to the change detection tree.\n   *\n   * This can be used to re-attach views that were previously detached from the tree\n   * using {@link ChangeDetectorRef#detach}. Views are attached to the tree by default.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example creates a component displaying `live` data. The component will detach\n   * its change detector from the main change detector tree when the component's live property\n   * is set to false.\n   *\n   * ```typescript\n   * class DataProvider {\n   *   data = 1;\n   *\n   *   constructor() {\n   *     setInterval(() => {\n   *       this.data = this.data * 2;\n   *     }, 500);\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'live-data',\n   *   inputs: ['live'],\n   *   template: 'Data: {{dataProvider.data}}'\n   * })\n   * class LiveData {\n   *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n   *\n   *   set live(value) {\n   *     if (value) {\n   *       this.ref.reattach();\n   *     } else {\n   *       this.ref.detach();\n   *     }\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'app-root',\n   *   providers: [DataProvider],\n   *   template: `\n   *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n   *     <live-data [live]=\"live\"><live-data>\n   *   `,\n   * })\n   * class AppComponent {\n   *   live = true;\n   * }\n   * ```\n   */\n  reattach() {\n    updateAncestorTraversalFlagsOnAttach(this._lView);\n    this._lView[FLAGS] |= 128 /* LViewFlags.Attached */;\n  }\n  /**\n   * Checks the view and its children.\n   *\n   * This can also be used in combination with {@link ChangeDetectorRef#detach} to implement\n   * local change detection checks.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example defines a component with a large list of readonly data.\n   * Imagine, the data changes constantly, many times per second. For performance reasons,\n   * we want to check and update the list every five seconds.\n   *\n   * We can do that by detaching the component's change detector and doing a local change detection\n   * check every five seconds.\n   *\n   * See {@link ChangeDetectorRef#detach} for more information.\n   */\n  detectChanges() {\n    // Add `RefreshView` flag to ensure this view is refreshed if not already dirty.\n    // `RefreshView` flag is used intentionally over `Dirty` because it gets cleared before\n    // executing any of the actual refresh code while the `Dirty` flag doesn't get cleared\n    // until the end of the refresh. Using `RefreshView` prevents creating a potential difference\n    // in the state of the LViewFlags during template execution.\n    this._lView[FLAGS] |= 1024 /* LViewFlags.RefreshView */;\n    detectChangesInternal(this._lView, this.notifyErrorHandler);\n  }\n  /**\n   * Checks the change detector and its children, and throws if any changes are detected.\n   *\n   * This is used in development mode to verify that running change detection doesn't\n   * introduce other changes.\n   */\n  checkNoChanges() {\n    if (ngDevMode) {\n      checkNoChangesInternal(this._lView, this.notifyErrorHandler);\n    }\n  }\n  attachToViewContainerRef() {\n    if (this._appRef) {\n      throw new RuntimeError(902 /* RuntimeErrorCode.VIEW_ALREADY_ATTACHED */, ngDevMode && 'This view is already attached directly to the ApplicationRef!');\n    }\n    this._attachedToViewContainer = true;\n  }\n  detachFromAppRef() {\n    this._appRef = null;\n    detachViewFromDOM(this._lView[TVIEW], this._lView);\n  }\n  attachToAppRef(appRef) {\n    if (this._attachedToViewContainer) {\n      throw new RuntimeError(902 /* RuntimeErrorCode.VIEW_ALREADY_ATTACHED */, ngDevMode && 'This view is already attached to a ViewContainer!');\n    }\n    this._appRef = appRef;\n    updateAncestorTraversalFlagsOnAttach(this._lView);\n  }\n}\n\n/**\n * Base class that provides change detection functionality.\n * A change-detection tree collects all views that are to be checked for changes.\n * Use the methods to add and remove views from the tree, initiate change-detection,\n * and explicitly mark views as _dirty_, meaning that they have changed and need to be re-rendered.\n *\n * @see [Using change detection hooks](guide/lifecycle-hooks#using-change-detection-hooks)\n * @see [Defining custom change detection](guide/lifecycle-hooks#defining-custom-change-detection)\n *\n * @usageNotes\n *\n * The following examples demonstrate how to modify default change-detection behavior\n * to perform explicit detection when needed.\n *\n * ### Use `markForCheck()` with `CheckOnce` strategy\n *\n * The following example sets the `OnPush` change-detection strategy for a component\n * (`CheckOnce`, rather than the default `CheckAlways`), then forces a second check\n * after an interval.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\"\n * region=\"mark-for-check\"></code-example>\n *\n * ### Detach change detector to limit how often check occurs\n *\n * The following example defines a component with a large list of read-only data\n * that is expected to change constantly, many times per second.\n * To improve performance, we want to check and update the list\n * less often than the changes actually occur. To do that, we detach\n * the component's change detector and perform an explicit local check every five seconds.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"detach\"></code-example>\n *\n *\n * ### Reattaching a detached component\n *\n * The following example creates a component displaying live data.\n * The component detaches its change detector from the main change detector tree\n * when the `live` property is set to false, and reattaches it when the property\n * becomes true.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"reattach\"></code-example>\n *\n * @publicApi\n */\nclass ChangeDetectorRef {}\n/** Returns a ChangeDetectorRef (a.k.a. a ViewRef) */\n_class9 = ChangeDetectorRef;\n/**\n * @internal\n * @nocollapse\n */\n_class9.__NG_ELEMENT_ID__ = injectChangeDetectorRef;\nfunction injectChangeDetectorRef(flags) {\n  return createViewRef(getCurrentTNode(), getLView(), (flags & 16 /* InternalInjectFlags.ForPipe */) === 16 /* InternalInjectFlags.ForPipe */);\n}\n/**\n * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).\n *\n * @param tNode The node that is requesting a ChangeDetectorRef\n * @param lView The view to which the node belongs\n * @param isPipe Whether the view is being injected into a pipe.\n * @returns The ChangeDetectorRef to use\n */\nfunction createViewRef(tNode, lView, isPipe) {\n  if (isComponentHost(tNode) && !isPipe) {\n    // The LView represents the location where the component is declared.\n    // Instead we want the LView for the component View and so we need to look it up.\n    const componentView = getComponentLViewByIndex(tNode.index, lView); // look down\n    return new ViewRef$1(componentView, componentView);\n  } else if (tNode.type & (3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */ | 32 /* TNodeType.Icu */)) {\n    // The LView represents the location where the injection is requested from.\n    // We need to locate the containing LView (in case where the `lView` is an embedded view)\n    const hostComponentView = lView[DECLARATION_COMPONENT_VIEW]; // look up\n    return new ViewRef$1(hostComponentView, lView);\n  }\n  return null;\n}\n\n/**\n * Structural diffing for `Object`s and `Map`s.\n */\nconst keyValDiff = [new DefaultKeyValueDifferFactory()];\n/**\n * Structural diffing for `Iterable` types such as `Array`s.\n */\nconst iterableDiff = [new DefaultIterableDifferFactory()];\nconst defaultIterableDiffers = new IterableDiffers(iterableDiff);\nconst defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);\n\n/**\n * @module\n * @description\n * Change detection enables data binding in Angular.\n */\n\n/**\n * `DestroyRef` lets you set callbacks to run for any cleanup or destruction behavior.\n * The scope of this destruction depends on where `DestroyRef` is injected. If `DestroyRef`\n * is injected in a component or directive, the callbacks run when that component or\n * directive is destroyed. Otherwise the callbacks run when a corresponding injector is destroyed.\n *\n * @publicApi\n */\nclass DestroyRef {}\n_class10 = DestroyRef;\n/**\n * @internal\n * @nocollapse\n */\n_class10.__NG_ELEMENT_ID__ = injectDestroyRef;\n/**\n * @internal\n * @nocollapse\n */\n_class10.__NG_ENV_ID__ = injector => injector;\nclass NodeInjectorDestroyRef extends DestroyRef {\n  constructor(_lView) {\n    super();\n    this._lView = _lView;\n  }\n  onDestroy(callback) {\n    storeLViewOnDestroy(this._lView, callback);\n    return () => removeLViewOnDestroy(this._lView, callback);\n  }\n}\nfunction injectDestroyRef() {\n  return new NodeInjectorDestroyRef(getLView());\n}\n\n/**\n * Asserts that the current stack frame is not within a reactive context. Useful\n * to disallow certain code from running inside a reactive context (see {@link toSignal}).\n *\n * @param debugFn a reference to the function making the assertion (used for the error message).\n *\n * @publicApi\n */\nfunction assertNotInReactiveContext(debugFn, extraContext) {\n  // Taking a `Function` instead of a string name here prevents the un-minified name of the function\n  // from being retained in the bundle regardless of minification.\n  if (getActiveConsumer$1() !== null) {\n    throw new RuntimeError(-602 /* RuntimeErrorCode.ASSERTION_NOT_INSIDE_REACTIVE_CONTEXT */, ngDevMode && `${debugFn.name}() cannot be called from within a reactive context.${extraContext ? ` ${extraContext}` : ''}`);\n  }\n}\n\n/**\n * Not public API, which guarantees `EffectScheduler` only ever comes from the application root\n * injector.\n */\nconst APP_EFFECT_SCHEDULER = new InjectionToken('', {\n  providedIn: 'root',\n  factory: () => inject(EffectScheduler)\n});\n/**\n * A scheduler which manages the execution of effects.\n */\nclass EffectScheduler {}\n/**\n * An `EffectScheduler` which is capable of queueing scheduled effects per-zone, and flushing them\n * as an explicit operation.\n */\n_class11 = EffectScheduler;\n/** @nocollapse */\n_class11.ɵprov = ɵɵdefineInjectable({\n  token: _class11,\n  providedIn: 'root',\n  factory: () => new ZoneAwareMicrotaskScheduler()\n});\nclass ZoneAwareQueueingScheduler {\n  constructor() {\n    this.queuedEffectCount = 0;\n    this.queues = new Map();\n  }\n  scheduleEffect(handle) {\n    const zone = handle.creationZone;\n    if (!this.queues.has(zone)) {\n      this.queues.set(zone, new Set());\n    }\n    const queue = this.queues.get(zone);\n    if (queue.has(handle)) {\n      return;\n    }\n    this.queuedEffectCount++;\n    queue.add(handle);\n  }\n  /**\n   * Run all scheduled effects.\n   *\n   * Execution order of effects within the same zone is guaranteed to be FIFO, but there is no\n   * ordering guarantee between effects scheduled in different zones.\n   */\n  flush() {\n    while (this.queuedEffectCount > 0) {\n      for (const [zone, queue] of this.queues) {\n        // `zone` here must be defined.\n        if (zone === null) {\n          this.flushQueue(queue);\n        } else {\n          zone.run(() => this.flushQueue(queue));\n        }\n      }\n    }\n  }\n  flushQueue(queue) {\n    for (const handle of queue) {\n      queue.delete(handle);\n      this.queuedEffectCount--;\n      // TODO: what happens if this throws an error?\n      handle.run();\n    }\n  }\n  /** @nocollapse */\n}\n/**\n * A wrapper around `ZoneAwareQueueingScheduler` that schedules flushing via the microtask queue\n * when.\n */\n_class12 = ZoneAwareQueueingScheduler;\n_class12.ɵprov = ɵɵdefineInjectable({\n  token: _class12,\n  providedIn: 'root',\n  factory: () => new _class12()\n});\nclass ZoneAwareMicrotaskScheduler {\n  constructor() {\n    this.hasQueuedFlush = false;\n    this.delegate = new ZoneAwareQueueingScheduler();\n    this.flushTask = () => {\n      // Leave `hasQueuedFlush` as `true` so we don't queue another microtask if more effects are\n      // scheduled during flushing. The flush of the `ZoneAwareQueueingScheduler` delegate is\n      // guaranteed to empty the queue.\n      this.delegate.flush();\n      this.hasQueuedFlush = false;\n      // This is a variable initialization, not a method.\n      // tslint:disable-next-line:semicolon\n    };\n  }\n\n  scheduleEffect(handle) {\n    this.delegate.scheduleEffect(handle);\n    if (!this.hasQueuedFlush) {\n      queueMicrotask(this.flushTask);\n      this.hasQueuedFlush = true;\n    }\n  }\n}\n/**\n * Core reactive node for an Angular effect.\n *\n * `EffectHandle` combines the reactive graph's `Watch` base node for effects with the framework's\n * scheduling abstraction (`EffectScheduler`) as well as automatic cleanup via `DestroyRef` if\n * available/requested.\n */\nclass EffectHandle {\n  constructor(scheduler, effectFn, creationZone, destroyRef, errorHandler, allowSignalWrites) {\n    this.scheduler = scheduler;\n    this.effectFn = effectFn;\n    this.creationZone = creationZone;\n    this.errorHandler = errorHandler;\n    this.watcher = createWatch$1(onCleanup => this.runEffect(onCleanup), () => this.schedule(), allowSignalWrites);\n    this.unregisterOnDestroy = destroyRef === null || destroyRef === void 0 ? void 0 : destroyRef.onDestroy(() => this.destroy());\n  }\n  runEffect(onCleanup) {\n    try {\n      this.effectFn(onCleanup);\n    } catch (err) {\n      var _this$errorHandler;\n      (_this$errorHandler = this.errorHandler) === null || _this$errorHandler === void 0 || _this$errorHandler.handleError(err);\n    }\n  }\n  run() {\n    this.watcher.run();\n  }\n  schedule() {\n    this.scheduler.scheduleEffect(this);\n  }\n  destroy() {\n    var _this$unregisterOnDes;\n    this.watcher.destroy();\n    (_this$unregisterOnDes = this.unregisterOnDestroy) === null || _this$unregisterOnDes === void 0 || _this$unregisterOnDes.call(this);\n    // Note: if the effect is currently scheduled, it's not un-scheduled, and so the scheduler will\n    // retain a reference to it. Attempting to execute it will be a no-op.\n  }\n}\n/**\n * Create a global `Effect` for the given reactive function.\n *\n * @developerPreview\n */\nfunction effect(effectFn, options) {\n  var _options$injector, _options$allowSignalW;\n  ngDevMode && assertNotInReactiveContext(effect, 'Call `effect` outside of a reactive context. For example, schedule the ' + 'effect inside the component constructor.');\n  !(options !== null && options !== void 0 && options.injector) && assertInInjectionContext(effect);\n  const injector = (_options$injector = options === null || options === void 0 ? void 0 : options.injector) !== null && _options$injector !== void 0 ? _options$injector : inject(Injector);\n  const errorHandler = injector.get(ErrorHandler, null, {\n    optional: true\n  });\n  const destroyRef = (options === null || options === void 0 ? void 0 : options.manualCleanup) !== true ? injector.get(DestroyRef) : null;\n  const handle = new EffectHandle(injector.get(APP_EFFECT_SCHEDULER), effectFn, typeof Zone === 'undefined' ? null : Zone.current, destroyRef, errorHandler, (_options$allowSignalW = options === null || options === void 0 ? void 0 : options.allowSignalWrites) !== null && _options$allowSignalW !== void 0 ? _options$allowSignalW : false);\n  // Effects need to be marked dirty manually to trigger their initial run. The timing of this\n  // marking matters, because the effects may read signals that track component inputs, which are\n  // only available after those components have had their first update pass.\n  //\n  // We inject `ChangeDetectorRef` optionally, to determine whether this effect is being created in\n  // the context of a component or not. If it is, then we check whether the component has already\n  // run its update pass, and defer the effect's initial scheduling until the update pass if it\n  // hasn't already run.\n  const cdr = injector.get(ChangeDetectorRef, null, {\n    optional: true\n  });\n  if (!cdr || !(cdr._lView[FLAGS] & 8 /* LViewFlags.FirstLViewPass */)) {\n    // This effect is either not running in a view injector, or the view has already\n    // undergone its first change detection pass, which is necessary for any required inputs to be\n    // set.\n    handle.watcher.notify();\n  } else {\n    var _cdr$_lView, _cdr$_lView$EFFECTS_T;\n    // Delay the initialization of the effect until the view is fully initialized.\n    ((_cdr$_lView$EFFECTS_T = (_cdr$_lView = cdr._lView)[EFFECTS_TO_SCHEDULE]) !== null && _cdr$_lView$EFFECTS_T !== void 0 ? _cdr$_lView$EFFECTS_T : _cdr$_lView[EFFECTS_TO_SCHEDULE] = []).push(handle.watcher.notify);\n  }\n  return handle;\n}\n\n// clang-format off\n// clang-format on\n\nconst markedFeatures = new Set();\n// tslint:disable:ban\n/**\n * A guarded `performance.mark` for feature marking.\n *\n * This method exists because while all supported browser and node.js version supported by Angular\n * support performance.mark API. This is not the case for other environments such as JSDOM and\n * Cloudflare workers.\n */\nfunction performanceMarkFeature(feature) {\n  var _performance, _performance$mark;\n  if (markedFeatures.has(feature)) {\n    return;\n  }\n  markedFeatures.add(feature);\n  (_performance = performance) === null || _performance === void 0 || (_performance$mark = _performance.mark) === null || _performance$mark === void 0 || _performance$mark.call(_performance, 'mark_feature_usage', {\n    detail: {\n      feature\n    }\n  });\n}\nclass EventEmitter_ extends Subject {\n  constructor(isAsync = false) {\n    super();\n    this.__isAsync = isAsync;\n  }\n  emit(value) {\n    super.next(value);\n  }\n  subscribe(observerOrNext, error, complete) {\n    let nextFn = observerOrNext;\n    let errorFn = error || (() => null);\n    let completeFn = complete;\n    if (observerOrNext && typeof observerOrNext === 'object') {\n      var _observer$next, _observer$error, _observer$complete;\n      const observer = observerOrNext;\n      nextFn = (_observer$next = observer.next) === null || _observer$next === void 0 ? void 0 : _observer$next.bind(observer);\n      errorFn = (_observer$error = observer.error) === null || _observer$error === void 0 ? void 0 : _observer$error.bind(observer);\n      completeFn = (_observer$complete = observer.complete) === null || _observer$complete === void 0 ? void 0 : _observer$complete.bind(observer);\n    }\n    if (this.__isAsync) {\n      errorFn = _wrapInTimeout(errorFn);\n      if (nextFn) {\n        nextFn = _wrapInTimeout(nextFn);\n      }\n      if (completeFn) {\n        completeFn = _wrapInTimeout(completeFn);\n      }\n    }\n    const sink = super.subscribe({\n      next: nextFn,\n      error: errorFn,\n      complete: completeFn\n    });\n    if (observerOrNext instanceof Subscription) {\n      observerOrNext.add(sink);\n    }\n    return sink;\n  }\n}\nfunction _wrapInTimeout(fn) {\n  return value => {\n    setTimeout(fn, undefined, value);\n  };\n}\n/**\n * @publicApi\n */\nconst EventEmitter = EventEmitter_;\nfunction noop(...args) {\n  // Do nothing.\n}\nfunction getNativeRequestAnimationFrame() {\n  // Note: the `getNativeRequestAnimationFrame` is used in the `NgZone` class, but we cannot use the\n  // `inject` function. The `NgZone` instance may be created manually, and thus the injection\n  // context will be unavailable. This might be enough to check whether `requestAnimationFrame` is\n  // available because otherwise, we'll fall back to `setTimeout`.\n  const isBrowser = typeof _global['requestAnimationFrame'] === 'function';\n  // Note: `requestAnimationFrame` is unavailable when the code runs in the Node.js environment. We\n  // use `setTimeout` because no changes are required other than checking if the current platform is\n  // the browser. `setTimeout` is a well-established API that is available in both environments.\n  // `requestAnimationFrame` is used in the browser to coalesce event tasks since event tasks are\n  // usually executed within the same rendering frame (but this is more implementation details of\n  // browsers).\n  let nativeRequestAnimationFrame = _global[isBrowser ? 'requestAnimationFrame' : 'setTimeout'];\n  let nativeCancelAnimationFrame = _global[isBrowser ? 'cancelAnimationFrame' : 'clearTimeout'];\n  if (typeof Zone !== 'undefined' && nativeRequestAnimationFrame && nativeCancelAnimationFrame) {\n    // Note: zone.js sets original implementations on patched APIs behind the\n    // `__zone_symbol__OriginalDelegate` key (see `attachOriginToPatched`). Given the following\n    // example: `window.requestAnimationFrame.__zone_symbol__OriginalDelegate`; this would return an\n    // unpatched implementation of the `requestAnimationFrame`, which isn't intercepted by the\n    // Angular zone. We use the unpatched implementation to avoid another change detection when\n    // coalescing tasks.\n    const unpatchedRequestAnimationFrame = nativeRequestAnimationFrame[Zone.__symbol__('OriginalDelegate')];\n    if (unpatchedRequestAnimationFrame) {\n      nativeRequestAnimationFrame = unpatchedRequestAnimationFrame;\n    }\n    const unpatchedCancelAnimationFrame = nativeCancelAnimationFrame[Zone.__symbol__('OriginalDelegate')];\n    if (unpatchedCancelAnimationFrame) {\n      nativeCancelAnimationFrame = unpatchedCancelAnimationFrame;\n    }\n  }\n  return {\n    nativeRequestAnimationFrame,\n    nativeCancelAnimationFrame\n  };\n}\nclass AsyncStackTaggingZoneSpec {\n  constructor(namePrefix, consoleAsyncStackTaggingImpl = console) {\n    var _consoleAsyncStackTag;\n    this.name = 'asyncStackTagging for ' + namePrefix;\n    this.createTask = (_consoleAsyncStackTag = consoleAsyncStackTaggingImpl === null || consoleAsyncStackTaggingImpl === void 0 ? void 0 : consoleAsyncStackTaggingImpl.createTask) !== null && _consoleAsyncStackTag !== void 0 ? _consoleAsyncStackTag : () => null;\n  }\n  onScheduleTask(delegate, _current, target, task) {\n    task.consoleTask = this.createTask(`Zone - ${task.source || task.type}`);\n    return delegate.scheduleTask(target, task);\n  }\n  onInvokeTask(delegate, _currentZone, targetZone, task, applyThis, applyArgs) {\n    let ret;\n    if (task.consoleTask) {\n      ret = task.consoleTask.run(() => delegate.invokeTask(targetZone, task, applyThis, applyArgs));\n    } else {\n      ret = delegate.invokeTask(targetZone, task, applyThis, applyArgs);\n    }\n    return ret;\n  }\n}\n\n/**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * import {Component, NgZone} from '@angular/core';\n * import {NgIf} from '@angular/common';\n *\n * @Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nclass NgZone {\n  constructor({\n    enableLongStackTrace = false,\n    shouldCoalesceEventChangeDetection = false,\n    shouldCoalesceRunChangeDetection = false\n  }) {\n    this.hasPendingMacrotasks = false;\n    this.hasPendingMicrotasks = false;\n    /**\n     * Whether there are no outstanding microtasks or macrotasks.\n     */\n    this.isStable = true;\n    /**\n     * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n     */\n    this.onUnstable = new EventEmitter(false);\n    /**\n     * Notifies when there is no more microtasks enqueued in the current VM Turn.\n     * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n     * For this reason this event can fire multiple times per VM Turn.\n     */\n    this.onMicrotaskEmpty = new EventEmitter(false);\n    /**\n     * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n     * implies we are about to relinquish VM turn.\n     * This event gets called just once.\n     */\n    this.onStable = new EventEmitter(false);\n    /**\n     * Notifies that an error has been delivered.\n     */\n    this.onError = new EventEmitter(false);\n    if (typeof Zone == 'undefined') {\n      throw new RuntimeError(908 /* RuntimeErrorCode.MISSING_ZONEJS */, ngDevMode && `In this configuration Angular requires Zone.js`);\n    }\n    Zone.assertZonePatched();\n    const self = this;\n    self._nesting = 0;\n    self._outer = self._inner = Zone.current;\n    // AsyncStackTaggingZoneSpec provides `linked stack traces` to show\n    // where the async operation is scheduled. For more details, refer\n    // to this article, https://developer.chrome.com/blog/devtools-better-angular-debugging/\n    // And we only import this AsyncStackTaggingZoneSpec in development mode,\n    // in the production mode, the AsyncStackTaggingZoneSpec will be tree shaken away.\n    if (ngDevMode) {\n      self._inner = self._inner.fork(new AsyncStackTaggingZoneSpec('Angular'));\n    }\n    if (Zone['TaskTrackingZoneSpec']) {\n      self._inner = self._inner.fork(new Zone['TaskTrackingZoneSpec']());\n    }\n    if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {\n      self._inner = self._inner.fork(Zone['longStackTraceZoneSpec']);\n    }\n    // if shouldCoalesceRunChangeDetection is true, all tasks including event tasks will be\n    // coalesced, so shouldCoalesceEventChangeDetection option is not necessary and can be skipped.\n    self.shouldCoalesceEventChangeDetection = !shouldCoalesceRunChangeDetection && shouldCoalesceEventChangeDetection;\n    self.shouldCoalesceRunChangeDetection = shouldCoalesceRunChangeDetection;\n    self.lastRequestAnimationFrameId = -1;\n    self.nativeRequestAnimationFrame = getNativeRequestAnimationFrame().nativeRequestAnimationFrame;\n    forkInnerZoneWithAngularBehavior(self);\n  }\n  /**\n    This method checks whether the method call happens within an Angular Zone instance.\n  */\n  static isInAngularZone() {\n    // Zone needs to be checked, because this method might be called even when NoopNgZone is used.\n    return typeof Zone !== 'undefined' && Zone.current.get('isAngularZone') === true;\n  }\n  /**\n    Assures that the method is called within the Angular Zone, otherwise throws an error.\n  */\n  static assertInAngularZone() {\n    if (!NgZone.isInAngularZone()) {\n      throw new RuntimeError(909 /* RuntimeErrorCode.UNEXPECTED_ZONE_STATE */, ngDevMode && 'Expected to be in Angular Zone, but it is not!');\n    }\n  }\n  /**\n    Assures that the method is called outside of the Angular Zone, otherwise throws an error.\n  */\n  static assertNotInAngularZone() {\n    if (NgZone.isInAngularZone()) {\n      throw new RuntimeError(909 /* RuntimeErrorCode.UNEXPECTED_ZONE_STATE */, ngDevMode && 'Expected to not be in Angular Zone, but it is!');\n    }\n  }\n  /**\n   * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n   * the function.\n   *\n   * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n   * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n   *\n   * Any future tasks or microtasks scheduled from within this function will continue executing from\n   * within the Angular zone.\n   *\n   * If a synchronous error happens it will be rethrown and not reported via `onError`.\n   */\n  run(fn, applyThis, applyArgs) {\n    return this._inner.run(fn, applyThis, applyArgs);\n  }\n  /**\n   * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n   * returned by the function.\n   *\n   * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n   * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n   *\n   * Any future tasks or microtasks scheduled from within this function will continue executing from\n   * within the Angular zone.\n   *\n   * If a synchronous error happens it will be rethrown and not reported via `onError`.\n   */\n  runTask(fn, applyThis, applyArgs, name) {\n    const zone = this._inner;\n    const task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop, noop);\n    try {\n      return zone.runTask(task, applyThis, applyArgs);\n    } finally {\n      zone.cancelTask(task);\n    }\n  }\n  /**\n   * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n   * rethrown.\n   */\n  runGuarded(fn, applyThis, applyArgs) {\n    return this._inner.runGuarded(fn, applyThis, applyArgs);\n  }\n  /**\n   * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n   * the function.\n   *\n   * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do\n   * work that\n   * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n   *\n   * Any future tasks or microtasks scheduled from within this function will continue executing from\n   * outside of the Angular zone.\n   *\n   * Use {@link #run} to reenter the Angular zone and do work that updates the application model.\n   */\n  runOutsideAngular(fn) {\n    return this._outer.run(fn);\n  }\n}\nconst EMPTY_PAYLOAD = {};\nfunction checkStable(zone) {\n  // TODO: @JiaLiPassion, should check zone.isCheckStableRunning to prevent\n  // re-entry. The case is:\n  //\n  // @Component({...})\n  // export class AppComponent {\n  // constructor(private ngZone: NgZone) {\n  //   this.ngZone.onStable.subscribe(() => {\n  //     this.ngZone.run(() => console.log('stable'););\n  //   });\n  // }\n  //\n  // The onStable subscriber run another function inside ngZone\n  // which causes `checkStable()` re-entry.\n  // But this fix causes some issues in g3, so this fix will be\n  // launched in another PR.\n  if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {\n    try {\n      zone._nesting++;\n      zone.onMicrotaskEmpty.emit(null);\n    } finally {\n      zone._nesting--;\n      if (!zone.hasPendingMicrotasks) {\n        try {\n          zone.runOutsideAngular(() => zone.onStable.emit(null));\n        } finally {\n          zone.isStable = true;\n        }\n      }\n    }\n  }\n}\nfunction delayChangeDetectionForEvents(zone) {\n  /**\n   * We also need to check _nesting here\n   * Consider the following case with shouldCoalesceRunChangeDetection = true\n   *\n   * ngZone.run(() => {});\n   * ngZone.run(() => {});\n   *\n   * We want the two `ngZone.run()` only trigger one change detection\n   * when shouldCoalesceRunChangeDetection is true.\n   * And because in this case, change detection run in async way(requestAnimationFrame),\n   * so we also need to check the _nesting here to prevent multiple\n   * change detections.\n   */\n  if (zone.isCheckStableRunning || zone.lastRequestAnimationFrameId !== -1) {\n    return;\n  }\n  zone.lastRequestAnimationFrameId = zone.nativeRequestAnimationFrame.call(_global, () => {\n    // This is a work around for https://github.com/angular/angular/issues/36839.\n    // The core issue is that when event coalescing is enabled it is possible for microtasks\n    // to get flushed too early (As is the case with `Promise.then`) between the\n    // coalescing eventTasks.\n    //\n    // To workaround this we schedule a \"fake\" eventTask before we process the\n    // coalescing eventTasks. The benefit of this is that the \"fake\" container eventTask\n    //  will prevent the microtasks queue from getting drained in between the coalescing\n    // eventTask execution.\n    if (!zone.fakeTopEventTask) {\n      zone.fakeTopEventTask = Zone.root.scheduleEventTask('fakeTopEventTask', () => {\n        zone.lastRequestAnimationFrameId = -1;\n        updateMicroTaskStatus(zone);\n        zone.isCheckStableRunning = true;\n        checkStable(zone);\n        zone.isCheckStableRunning = false;\n      }, undefined, () => {}, () => {});\n    }\n    zone.fakeTopEventTask.invoke();\n  });\n  updateMicroTaskStatus(zone);\n}\nfunction forkInnerZoneWithAngularBehavior(zone) {\n  const delayChangeDetectionForEventsDelegate = () => {\n    delayChangeDetectionForEvents(zone);\n  };\n  zone._inner = zone._inner.fork({\n    name: 'angular',\n    properties: {\n      'isAngularZone': true\n    },\n    onInvokeTask: (delegate, current, target, task, applyThis, applyArgs) => {\n      if (shouldBeIgnoredByZone(applyArgs)) {\n        return delegate.invokeTask(target, task, applyThis, applyArgs);\n      }\n      try {\n        onEnter(zone);\n        return delegate.invokeTask(target, task, applyThis, applyArgs);\n      } finally {\n        if (zone.shouldCoalesceEventChangeDetection && task.type === 'eventTask' || zone.shouldCoalesceRunChangeDetection) {\n          delayChangeDetectionForEventsDelegate();\n        }\n        onLeave(zone);\n      }\n    },\n    onInvoke: (delegate, current, target, callback, applyThis, applyArgs, source) => {\n      try {\n        onEnter(zone);\n        return delegate.invoke(target, callback, applyThis, applyArgs, source);\n      } finally {\n        if (zone.shouldCoalesceRunChangeDetection) {\n          delayChangeDetectionForEventsDelegate();\n        }\n        onLeave(zone);\n      }\n    },\n    onHasTask: (delegate, current, target, hasTaskState) => {\n      delegate.hasTask(target, hasTaskState);\n      if (current === target) {\n        // We are only interested in hasTask events which originate from our zone\n        // (A child hasTask event is not interesting to us)\n        if (hasTaskState.change == 'microTask') {\n          zone._hasPendingMicrotasks = hasTaskState.microTask;\n          updateMicroTaskStatus(zone);\n          checkStable(zone);\n        } else if (hasTaskState.change == 'macroTask') {\n          zone.hasPendingMacrotasks = hasTaskState.macroTask;\n        }\n      }\n    },\n    onHandleError: (delegate, current, target, error) => {\n      delegate.handleError(target, error);\n      zone.runOutsideAngular(() => zone.onError.emit(error));\n      return false;\n    }\n  });\n}\nfunction updateMicroTaskStatus(zone) {\n  if (zone._hasPendingMicrotasks || (zone.shouldCoalesceEventChangeDetection || zone.shouldCoalesceRunChangeDetection) && zone.lastRequestAnimationFrameId !== -1) {\n    zone.hasPendingMicrotasks = true;\n  } else {\n    zone.hasPendingMicrotasks = false;\n  }\n}\nfunction onEnter(zone) {\n  zone._nesting++;\n  if (zone.isStable) {\n    zone.isStable = false;\n    zone.onUnstable.emit(null);\n  }\n}\nfunction onLeave(zone) {\n  zone._nesting--;\n  checkStable(zone);\n}\n/**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nclass NoopNgZone {\n  constructor() {\n    this.hasPendingMicrotasks = false;\n    this.hasPendingMacrotasks = false;\n    this.isStable = true;\n    this.onUnstable = new EventEmitter();\n    this.onMicrotaskEmpty = new EventEmitter();\n    this.onStable = new EventEmitter();\n    this.onError = new EventEmitter();\n  }\n  run(fn, applyThis, applyArgs) {\n    return fn.apply(applyThis, applyArgs);\n  }\n  runGuarded(fn, applyThis, applyArgs) {\n    return fn.apply(applyThis, applyArgs);\n  }\n  runOutsideAngular(fn) {\n    return fn();\n  }\n  runTask(fn, applyThis, applyArgs, name) {\n    return fn.apply(applyThis, applyArgs);\n  }\n}\nfunction shouldBeIgnoredByZone(applyArgs) {\n  var _applyArgs$0$data;\n  if (!Array.isArray(applyArgs)) {\n    return false;\n  }\n  // We should only ever get 1 arg passed through to invokeTask.\n  // Short circuit here incase that behavior changes.\n  if (applyArgs.length !== 1) {\n    return false;\n  }\n  // Prevent triggering change detection when the __ignore_ng_zone__ flag is detected.\n  return ((_applyArgs$0$data = applyArgs[0].data) === null || _applyArgs$0$data === void 0 ? void 0 : _applyArgs$0$data['__ignore_ng_zone__']) === true;\n}\nfunction getNgZone(ngZoneToUse = 'zone.js', options) {\n  if (ngZoneToUse === 'noop') {\n    return new NoopNgZone();\n  }\n  if (ngZoneToUse === 'zone.js') {\n    return new NgZone(options);\n  }\n  return ngZoneToUse;\n}\n\n/**\n * The phase to run an `afterRender` or `afterNextRender` callback in.\n *\n * Callbacks in the same phase run in the order they are registered. Phases run in the\n * following order after each render:\n *\n *   1. `AfterRenderPhase.EarlyRead`\n *   2. `AfterRenderPhase.Write`\n *   3. `AfterRenderPhase.MixedReadWrite`\n *   4. `AfterRenderPhase.Read`\n *\n * Angular is unable to verify or enforce that phases are used correctly, and instead\n * relies on each developer to follow the guidelines documented for each value and\n * carefully choose the appropriate one, refactoring their code if necessary. By doing\n * so, Angular is better able to minimize the performance degradation associated with\n * manual DOM access, ensuring the best experience for the end users of your application\n * or library.\n *\n * @developerPreview\n */\nvar AfterRenderPhase;\n(function (AfterRenderPhase) {\n  /**\n   * Use `AfterRenderPhase.EarlyRead` for callbacks that only need to **read** from the\n   * DOM before a subsequent `AfterRenderPhase.Write` callback, for example to perform\n   * custom layout that the browser doesn't natively support. **Never** use this phase\n   * for callbacks that can write to the DOM or when `AfterRenderPhase.Read` is adequate.\n   *\n   * <div class=\"alert is-important\">\n   *\n   * Using this value can degrade performance.\n   * Instead, prefer using built-in browser functionality when possible.\n   *\n   * </div>\n   */\n  AfterRenderPhase[AfterRenderPhase[\"EarlyRead\"] = 0] = \"EarlyRead\";\n  /**\n   * Use `AfterRenderPhase.Write` for callbacks that only **write** to the DOM. **Never**\n   * use this phase for callbacks that can read from the DOM.\n   */\n  AfterRenderPhase[AfterRenderPhase[\"Write\"] = 1] = \"Write\";\n  /**\n   * Use `AfterRenderPhase.MixedReadWrite` for callbacks that read from or write to the\n   * DOM, that haven't been refactored to use a different phase. **Never** use this phase\n   * for callbacks that can use a different phase instead.\n   *\n   * <div class=\"alert is-critical\">\n   *\n   * Using this value can **significantly** degrade performance.\n   * Instead, prefer refactoring into multiple callbacks using a more specific phase.\n   *\n   * </div>\n   */\n  AfterRenderPhase[AfterRenderPhase[\"MixedReadWrite\"] = 2] = \"MixedReadWrite\";\n  /**\n   * Use `AfterRenderPhase.Read` for callbacks that only **read** from the DOM. **Never**\n   * use this phase for callbacks that can write to the DOM.\n   */\n  AfterRenderPhase[AfterRenderPhase[\"Read\"] = 3] = \"Read\";\n})(AfterRenderPhase || (AfterRenderPhase = {}));\n/** `AfterRenderRef` that does nothing. */\nconst NOOP_AFTER_RENDER_REF = {\n  destroy() {}\n};\n/**\n * Register a callback to run once before any userspace `afterRender` or\n * `afterNextRender` callbacks.\n *\n * This function should almost always be used instead of `afterRender` or\n * `afterNextRender` for implementing framework functionality. Consider:\n *\n *   1.) `AfterRenderPhase.EarlyRead` is intended to be used for implementing\n *       custom layout. If the framework itself mutates the DOM after *any*\n *       `AfterRenderPhase.EarlyRead` callbacks are run, the phase can no\n *       longer reliably serve its purpose.\n *\n *   2.) Importing `afterRender` in the framework can reduce the ability for it\n *       to be tree-shaken, and the framework shouldn't need much of the behavior.\n */\nfunction internalAfterNextRender(callback, options) {\n  var _options$injector2;\n  const injector = (_options$injector2 = options === null || options === void 0 ? void 0 : options.injector) !== null && _options$injector2 !== void 0 ? _options$injector2 : inject(Injector);\n  // Similarly to the public `afterNextRender` function, an internal one\n  // is only invoked in a browser.\n  if (!isPlatformBrowser(injector)) return;\n  const afterRenderEventManager = injector.get(AfterRenderEventManager);\n  afterRenderEventManager.internalCallbacks.push(callback);\n}\n/**\n * Register a callback to be invoked each time the application\n * finishes rendering.\n *\n * <div class=\"alert is-critical\">\n *\n * You should always explicitly specify a non-default [phase](api/core/AfterRenderPhase), or you\n * risk significant performance degradation.\n *\n * </div>\n *\n * Note that the callback will run\n * - in the order it was registered\n * - once per render\n * - on browser platforms only\n *\n * <div class=\"alert is-important\">\n *\n * Components are not guaranteed to be [hydrated](guide/hydration) before the callback runs.\n * You must use caution when directly reading or writing the DOM and layout.\n *\n * </div>\n *\n * @param callback A callback function to register\n *\n * @usageNotes\n *\n * Use `afterRender` to read or write the DOM after each render.\n *\n * ### Example\n * ```ts\n * @Component({\n *   selector: 'my-cmp',\n *   template: `<span #content>{{ ... }}</span>`,\n * })\n * export class MyComponent {\n *   @ViewChild('content') contentRef: ElementRef;\n *\n *   constructor() {\n *     afterRender(() => {\n *       console.log('content height: ' + this.contentRef.nativeElement.scrollHeight);\n *     }, {phase: AfterRenderPhase.Read});\n *   }\n * }\n * ```\n *\n * @developerPreview\n */\nfunction afterRender(callback, options) {\n  var _options$injector3, _afterRenderEventMana, _options$phase;\n  ngDevMode && assertNotInReactiveContext(afterRender, 'Call `afterRender` outside of a reactive context. For example, schedule the render ' + 'callback inside the component constructor`.');\n  !options && assertInInjectionContext(afterRender);\n  const injector = (_options$injector3 = options === null || options === void 0 ? void 0 : options.injector) !== null && _options$injector3 !== void 0 ? _options$injector3 : inject(Injector);\n  if (!isPlatformBrowser(injector)) {\n    return NOOP_AFTER_RENDER_REF;\n  }\n  performanceMarkFeature('NgAfterRender');\n  const afterRenderEventManager = injector.get(AfterRenderEventManager);\n  // Lazily initialize the handler implementation, if necessary. This is so that it can be\n  // tree-shaken if `afterRender` and `afterNextRender` aren't used.\n  const callbackHandler = (_afterRenderEventMana = afterRenderEventManager.handler) !== null && _afterRenderEventMana !== void 0 ? _afterRenderEventMana : afterRenderEventManager.handler = new AfterRenderCallbackHandlerImpl();\n  const phase = (_options$phase = options === null || options === void 0 ? void 0 : options.phase) !== null && _options$phase !== void 0 ? _options$phase : AfterRenderPhase.MixedReadWrite;\n  const destroy = () => {\n    callbackHandler.unregister(instance);\n    unregisterFn();\n  };\n  const unregisterFn = injector.get(DestroyRef).onDestroy(destroy);\n  const instance = new AfterRenderCallback(injector, phase, callback);\n  callbackHandler.register(instance);\n  return {\n    destroy\n  };\n}\n/**\n * Register a callback to be invoked the next time the application\n * finishes rendering.\n *\n * <div class=\"alert is-critical\">\n *\n * You should always explicitly specify a non-default [phase](api/core/AfterRenderPhase), or you\n * risk significant performance degradation.\n *\n * </div>\n *\n * Note that the callback will run\n * - in the order it was registered\n * - on browser platforms only\n *\n * <div class=\"alert is-important\">\n *\n * Components are not guaranteed to be [hydrated](guide/hydration) before the callback runs.\n * You must use caution when directly reading or writing the DOM and layout.\n *\n * </div>\n *\n * @param callback A callback function to register\n *\n * @usageNotes\n *\n * Use `afterNextRender` to read or write the DOM once,\n * for example to initialize a non-Angular library.\n *\n * ### Example\n * ```ts\n * @Component({\n *   selector: 'my-chart-cmp',\n *   template: `<div #chart>{{ ... }}</div>`,\n * })\n * export class MyChartCmp {\n *   @ViewChild('chart') chartRef: ElementRef;\n *   chart: MyChart|null;\n *\n *   constructor() {\n *     afterNextRender(() => {\n *       this.chart = new MyChart(this.chartRef.nativeElement);\n *     }, {phase: AfterRenderPhase.Write});\n *   }\n * }\n * ```\n *\n * @developerPreview\n */\nfunction afterNextRender(callback, options) {\n  var _options$injector4, _afterRenderEventMana2, _options$phase2;\n  !options && assertInInjectionContext(afterNextRender);\n  const injector = (_options$injector4 = options === null || options === void 0 ? void 0 : options.injector) !== null && _options$injector4 !== void 0 ? _options$injector4 : inject(Injector);\n  if (!isPlatformBrowser(injector)) {\n    return NOOP_AFTER_RENDER_REF;\n  }\n  performanceMarkFeature('NgAfterNextRender');\n  const afterRenderEventManager = injector.get(AfterRenderEventManager);\n  // Lazily initialize the handler implementation, if necessary. This is so that it can be\n  // tree-shaken if `afterRender` and `afterNextRender` aren't used.\n  const callbackHandler = (_afterRenderEventMana2 = afterRenderEventManager.handler) !== null && _afterRenderEventMana2 !== void 0 ? _afterRenderEventMana2 : afterRenderEventManager.handler = new AfterRenderCallbackHandlerImpl();\n  const phase = (_options$phase2 = options === null || options === void 0 ? void 0 : options.phase) !== null && _options$phase2 !== void 0 ? _options$phase2 : AfterRenderPhase.MixedReadWrite;\n  const destroy = () => {\n    callbackHandler.unregister(instance);\n    unregisterFn();\n  };\n  const unregisterFn = injector.get(DestroyRef).onDestroy(destroy);\n  const instance = new AfterRenderCallback(injector, phase, () => {\n    destroy();\n    callback();\n  });\n  callbackHandler.register(instance);\n  return {\n    destroy\n  };\n}\n/**\n * A wrapper around a function to be used as an after render callback.\n */\nclass AfterRenderCallback {\n  constructor(injector, phase, callbackFn) {\n    this.phase = phase;\n    this.callbackFn = callbackFn;\n    this.zone = injector.get(NgZone);\n    this.errorHandler = injector.get(ErrorHandler, null, {\n      optional: true\n    });\n  }\n  invoke() {\n    try {\n      this.zone.runOutsideAngular(this.callbackFn);\n    } catch (err) {\n      var _this$errorHandler2;\n      (_this$errorHandler2 = this.errorHandler) === null || _this$errorHandler2 === void 0 || _this$errorHandler2.handleError(err);\n    }\n  }\n}\n/**\n * Core functionality for `afterRender` and `afterNextRender`. Kept separate from\n * `AfterRenderEventManager` for tree-shaking.\n */\nclass AfterRenderCallbackHandlerImpl {\n  constructor() {\n    this.executingCallbacks = false;\n    this.buckets = {\n      // Note: the order of these keys controls the order the phases are run.\n      [AfterRenderPhase.EarlyRead]: new Set(),\n      [AfterRenderPhase.Write]: new Set(),\n      [AfterRenderPhase.MixedReadWrite]: new Set(),\n      [AfterRenderPhase.Read]: new Set()\n    };\n    this.deferredCallbacks = new Set();\n  }\n  validateBegin() {\n    if (this.executingCallbacks) {\n      throw new RuntimeError(102 /* RuntimeErrorCode.RECURSIVE_APPLICATION_RENDER */, ngDevMode && 'A new render operation began before the previous operation ended. ' + 'Did you trigger change detection from afterRender or afterNextRender?');\n    }\n  }\n  register(callback) {\n    // If we're currently running callbacks, new callbacks should be deferred\n    // until the next render operation.\n    const target = this.executingCallbacks ? this.deferredCallbacks : this.buckets[callback.phase];\n    target.add(callback);\n  }\n  unregister(callback) {\n    this.buckets[callback.phase].delete(callback);\n    this.deferredCallbacks.delete(callback);\n  }\n  execute() {\n    this.executingCallbacks = true;\n    for (const bucket of Object.values(this.buckets)) {\n      for (const callback of bucket) {\n        callback.invoke();\n      }\n    }\n    this.executingCallbacks = false;\n    for (const callback of this.deferredCallbacks) {\n      this.buckets[callback.phase].add(callback);\n    }\n    this.deferredCallbacks.clear();\n  }\n  destroy() {\n    for (const bucket of Object.values(this.buckets)) {\n      bucket.clear();\n    }\n    this.deferredCallbacks.clear();\n  }\n}\n/**\n * Implements core timing for `afterRender` and `afterNextRender` events.\n * Delegates to an optional `AfterRenderCallbackHandler` for implementation.\n */\nclass AfterRenderEventManager {\n  constructor() {\n    this.renderDepth = 0;\n    /* @internal */\n    this.handler = null;\n    /* @internal */\n    this.internalCallbacks = [];\n  }\n  /**\n   * Mark the beginning of a render operation (i.e. CD cycle).\n   * Throws if called while executing callbacks.\n   */\n  begin() {\n    var _this$handler;\n    (_this$handler = this.handler) === null || _this$handler === void 0 || _this$handler.validateBegin();\n    this.renderDepth++;\n  }\n  /**\n   * Mark the end of a render operation. Callbacks will be\n   * executed if there are no more pending operations.\n   */\n  end() {\n    ngDevMode && assertGreaterThan(this.renderDepth, 0, 'renderDepth must be greater than 0');\n    this.renderDepth--;\n    if (this.renderDepth === 0) {\n      var _this$handler2;\n      // Note: internal callbacks power `internalAfterNextRender`. Since internal callbacks\n      // are fairly trivial, they are kept separate so that `AfterRenderCallbackHandlerImpl`\n      // can still be tree-shaken unless used by the application.\n      for (const callback of this.internalCallbacks) {\n        callback();\n      }\n      this.internalCallbacks.length = 0;\n      (_this$handler2 = this.handler) === null || _this$handler2 === void 0 || _this$handler2.execute();\n    }\n  }\n  ngOnDestroy() {\n    var _this$handler3;\n    (_this$handler3 = this.handler) === null || _this$handler3 === void 0 || _this$handler3.destroy();\n    this.handler = null;\n    this.internalCallbacks.length = 0;\n  }\n  /** @nocollapse */\n}\n_class13 = AfterRenderEventManager;\n_class13.ɵprov = ɵɵdefineInjectable({\n  token: _class13,\n  providedIn: 'root',\n  factory: () => new _class13()\n});\nfunction renderComponent(hostLView, componentHostIdx) {\n  ngDevMode && assertEqual(isCreationMode(hostLView), true, 'Should be run in creation mode');\n  const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);\n  const componentTView = componentView[TVIEW];\n  syncViewWithBlueprint(componentTView, componentView);\n  const hostRNode = componentView[HOST];\n  // Populate an LView with hydration info retrieved from the DOM via TransferState.\n  if (hostRNode !== null && componentView[HYDRATION] === null) {\n    componentView[HYDRATION] = retrieveHydrationInfo(hostRNode, componentView[INJECTOR$1]);\n  }\n  renderView(componentTView, componentView, componentView[CONTEXT]);\n}\n/**\n * Syncs an LView instance with its blueprint if they have gotten out of sync.\n *\n * Typically, blueprints and their view instances should always be in sync, so the loop here\n * will be skipped. However, consider this case of two components side-by-side:\n *\n * App template:\n * ```\n * <comp></comp>\n * <comp></comp>\n * ```\n *\n * The following will happen:\n * 1. App template begins processing.\n * 2. First <comp> is matched as a component and its LView is created.\n * 3. Second <comp> is matched as a component and its LView is created.\n * 4. App template completes processing, so it's time to check child templates.\n * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.\n * 6. Second <comp> template is checked. Its blueprint has been updated by the first\n * <comp> template, but its LView was created before this update, so it is out of sync.\n *\n * Note that embedded views inside ngFor loops will never be out of sync because these views\n * are processed as soon as they are created.\n *\n * @param tView The `TView` that contains the blueprint for syncing\n * @param lView The view to sync\n */\nfunction syncViewWithBlueprint(tView, lView) {\n  for (let i = lView.length; i < tView.blueprint.length; i++) {\n    lView.push(tView.blueprint[i]);\n  }\n}\n/**\n * Processes a view in the creation mode. This includes a number of steps in a specific order:\n * - creating view query functions (if any);\n * - executing a template function in the creation mode;\n * - updating static queries (if any);\n * - creating child components defined in a given view.\n */\nfunction renderView(tView, lView, context) {\n  ngDevMode && assertEqual(isCreationMode(lView), true, 'Should be run in creation mode');\n  enterView(lView);\n  try {\n    const viewQuery = tView.viewQuery;\n    if (viewQuery !== null) {\n      executeViewQueryFn(1 /* RenderFlags.Create */, viewQuery, context);\n    }\n    // Execute a template associated with this view, if it exists. A template function might not be\n    // defined for the root component views.\n    const templateFn = tView.template;\n    if (templateFn !== null) {\n      executeTemplate(tView, lView, templateFn, 1 /* RenderFlags.Create */, context);\n    }\n    // This needs to be set before children are processed to support recursive components.\n    // This must be set to false immediately after the first creation run because in an\n    // ngFor loop, all the views will be created together before update mode runs and turns\n    // off firstCreatePass. If we don't set it here, instances will perform directive\n    // matching, etc again and again.\n    if (tView.firstCreatePass) {\n      tView.firstCreatePass = false;\n    }\n    // We resolve content queries specifically marked as `static` in creation mode. Dynamic\n    // content queries are resolved during change detection (i.e. update mode), after embedded\n    // views are refreshed (see block above).\n    if (tView.staticContentQueries) {\n      refreshContentQueries(tView, lView);\n    }\n    // We must materialize query results before child components are processed\n    // in case a child component has projected a container. The LContainer needs\n    // to exist so the embedded views are properly attached by the container.\n    if (tView.staticViewQueries) {\n      executeViewQueryFn(2 /* RenderFlags.Update */, tView.viewQuery, context);\n    }\n    // Render child component views.\n    const components = tView.components;\n    if (components !== null) {\n      renderChildComponents(lView, components);\n    }\n  } catch (error) {\n    // If we didn't manage to get past the first template pass due to\n    // an error, mark the view as corrupted so we can try to recover.\n    if (tView.firstCreatePass) {\n      tView.incompleteFirstPass = true;\n      tView.firstCreatePass = false;\n    }\n    throw error;\n  } finally {\n    lView[FLAGS] &= ~4 /* LViewFlags.CreationMode */;\n    leaveView();\n  }\n}\n/** Renders child components in the current view (creation mode). */\nfunction renderChildComponents(hostLView, components) {\n  for (let i = 0; i < components.length; i++) {\n    renderComponent(hostLView, components[i]);\n  }\n}\n\n/**\n * Compute the static styling (class/style) from `TAttributes`.\n *\n * This function should be called during `firstCreatePass` only.\n *\n * @param tNode The `TNode` into which the styling information should be loaded.\n * @param attrs `TAttributes` containing the styling information.\n * @param writeToHost Where should the resulting static styles be written?\n *   - `false` Write to `TNode.stylesWithoutHost` / `TNode.classesWithoutHost`\n *   - `true` Write to `TNode.styles` / `TNode.classes`\n */\nfunction computeStaticStyling(tNode, attrs, writeToHost) {\n  ngDevMode && assertFirstCreatePass(getTView(), 'Expecting to be called in first template pass only');\n  let styles = writeToHost ? tNode.styles : null;\n  let classes = writeToHost ? tNode.classes : null;\n  let mode = 0;\n  if (attrs !== null) {\n    for (let i = 0; i < attrs.length; i++) {\n      const value = attrs[i];\n      if (typeof value === 'number') {\n        mode = value;\n      } else if (mode == 1 /* AttributeMarker.Classes */) {\n        classes = concatStringsWithSpace(classes, value);\n      } else if (mode == 2 /* AttributeMarker.Styles */) {\n        const style = value;\n        const styleValue = attrs[++i];\n        styles = concatStringsWithSpace(styles, style + ': ' + styleValue + ';');\n      }\n    }\n  }\n  writeToHost ? tNode.styles = styles : tNode.stylesWithoutHost = styles;\n  writeToHost ? tNode.classes = classes : tNode.classesWithoutHost = classes;\n}\nclass ComponentFactoryResolver extends ComponentFactoryResolver$1 {\n  /**\n   * @param ngModule The NgModuleRef to which all resolved factories are bound.\n   */\n  constructor(ngModule) {\n    super();\n    this.ngModule = ngModule;\n  }\n  resolveComponentFactory(component) {\n    ngDevMode && assertComponentType(component);\n    const componentDef = getComponentDef(component);\n    return new ComponentFactory(componentDef, this.ngModule);\n  }\n}\nfunction toRefArray(map) {\n  const array = [];\n  for (let nonMinified in map) {\n    if (map.hasOwnProperty(nonMinified)) {\n      const minified = map[nonMinified];\n      array.push({\n        propName: minified,\n        templateName: nonMinified\n      });\n    }\n  }\n  return array;\n}\nfunction getNamespace(elementName) {\n  const name = elementName.toLowerCase();\n  return name === 'svg' ? SVG_NAMESPACE : name === 'math' ? MATH_ML_NAMESPACE : null;\n}\n/**\n * Injector that looks up a value using a specific injector, before falling back to the module\n * injector. Used primarily when creating components or embedded views dynamically.\n */\nclass ChainedInjector {\n  constructor(injector, parentInjector) {\n    this.injector = injector;\n    this.parentInjector = parentInjector;\n  }\n  get(token, notFoundValue, flags) {\n    flags = convertToBitFlags(flags);\n    const value = this.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, flags);\n    if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR || notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n      // Return the value from the root element injector when\n      // - it provides it\n      //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n      // - the module injector should not be checked\n      //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n      return value;\n    }\n    return this.parentInjector.get(token, notFoundValue, flags);\n  }\n}\n/**\n * ComponentFactory interface implementation.\n */\nclass ComponentFactory extends ComponentFactory$1 {\n  get inputs() {\n    const componentDef = this.componentDef;\n    const inputTransforms = componentDef.inputTransforms;\n    const refArray = toRefArray(componentDef.inputs);\n    if (inputTransforms !== null) {\n      for (const input of refArray) {\n        if (inputTransforms.hasOwnProperty(input.propName)) {\n          input.transform = inputTransforms[input.propName];\n        }\n      }\n    }\n    return refArray;\n  }\n  get outputs() {\n    return toRefArray(this.componentDef.outputs);\n  }\n  /**\n   * @param componentDef The component definition.\n   * @param ngModule The NgModuleRef to which the factory is bound.\n   */\n  constructor(componentDef, ngModule) {\n    super();\n    this.componentDef = componentDef;\n    this.ngModule = ngModule;\n    this.componentType = componentDef.type;\n    this.selector = stringifyCSSSelectorList(componentDef.selectors);\n    this.ngContentSelectors = componentDef.ngContentSelectors ? componentDef.ngContentSelectors : [];\n    this.isBoundToModule = !!ngModule;\n  }\n  create(injector, projectableNodes, rootSelectorOrNode, environmentInjector) {\n    var _this$componentDef$de, _environmentInjector;\n    // Check if the component is orphan\n    if (ngDevMode && (typeof ngJitMode === 'undefined' || ngJitMode) && (_this$componentDef$de = this.componentDef.debugInfo) !== null && _this$componentDef$de !== void 0 && _this$componentDef$de.forbidOrphanRendering) {\n      if (depsTracker.isOrphanComponent(this.componentType)) {\n        throw new RuntimeError(1001 /* RuntimeErrorCode.RUNTIME_DEPS_ORPHAN_COMPONENT */, `Orphan component found! Trying to render the component ${debugStringifyTypeForError(this.componentType)} without first loading the NgModule that declares it. It is recommended to make this component standalone in order to avoid this error. If this is not possible now, import the component's NgModule in the appropriate NgModule, or the standalone component in which you are trying to render this component. If this is a lazy import, load the NgModule lazily as well and use its module injector.`);\n      }\n    }\n    environmentInjector = environmentInjector || this.ngModule;\n    let realEnvironmentInjector = environmentInjector instanceof EnvironmentInjector ? environmentInjector : (_environmentInjector = environmentInjector) === null || _environmentInjector === void 0 ? void 0 : _environmentInjector.injector;\n    if (realEnvironmentInjector && this.componentDef.getStandaloneInjector !== null) {\n      realEnvironmentInjector = this.componentDef.getStandaloneInjector(realEnvironmentInjector) || realEnvironmentInjector;\n    }\n    const rootViewInjector = realEnvironmentInjector ? new ChainedInjector(injector, realEnvironmentInjector) : injector;\n    const rendererFactory = rootViewInjector.get(RendererFactory2, null);\n    if (rendererFactory === null) {\n      throw new RuntimeError(407 /* RuntimeErrorCode.RENDERER_NOT_FOUND */, ngDevMode && 'Angular was not able to inject a renderer (RendererFactory2). ' + 'Likely this is due to a broken DI hierarchy. ' + 'Make sure that any injector used to create this component has a correct parent.');\n    }\n    const sanitizer = rootViewInjector.get(Sanitizer, null);\n    const afterRenderEventManager = rootViewInjector.get(AfterRenderEventManager, null);\n    const changeDetectionScheduler = rootViewInjector.get(ChangeDetectionScheduler, null);\n    const environment = {\n      rendererFactory,\n      sanitizer,\n      // We don't use inline effects (yet).\n      inlineEffectRunner: null,\n      afterRenderEventManager,\n      changeDetectionScheduler\n    };\n    const hostRenderer = rendererFactory.createRenderer(null, this.componentDef);\n    // Determine a tag name used for creating host elements when this component is created\n    // dynamically. Default to 'div' if this component did not specify any tag name in its selector.\n    const elementName = this.componentDef.selectors[0][0] || 'div';\n    const hostRNode = rootSelectorOrNode ? locateHostElement(hostRenderer, rootSelectorOrNode, this.componentDef.encapsulation, rootViewInjector) : createElementNode(hostRenderer, elementName, getNamespace(elementName));\n    let rootFlags = 512 /* LViewFlags.IsRoot */;\n    if (this.componentDef.signals) {\n      rootFlags |= 4096 /* LViewFlags.SignalView */;\n    } else if (!this.componentDef.onPush) {\n      rootFlags |= 16 /* LViewFlags.CheckAlways */;\n    }\n\n    let hydrationInfo = null;\n    if (hostRNode !== null) {\n      hydrationInfo = retrieveHydrationInfo(hostRNode, rootViewInjector, true /* isRootView */);\n    }\n    // Create the root view. Uses empty TView and ContentTemplate.\n    const rootTView = createTView(0 /* TViewType.Root */, null, null, 1, 0, null, null, null, null, null, null);\n    const rootLView = createLView(null, rootTView, null, rootFlags, null, null, environment, hostRenderer, rootViewInjector, null, hydrationInfo);\n    // rootView is the parent when bootstrapping\n    // TODO(misko): it looks like we are entering view here but we don't really need to as\n    // `renderView` does that. However as the code is written it is needed because\n    // `createRootComponentView` and `createRootComponent` both read global state. Fixing those\n    // issues would allow us to drop this.\n    enterView(rootLView);\n    let component;\n    let tElementNode;\n    try {\n      const rootComponentDef = this.componentDef;\n      let rootDirectives;\n      let hostDirectiveDefs = null;\n      if (rootComponentDef.findHostDirectiveDefs) {\n        rootDirectives = [];\n        hostDirectiveDefs = new Map();\n        rootComponentDef.findHostDirectiveDefs(rootComponentDef, rootDirectives, hostDirectiveDefs);\n        rootDirectives.push(rootComponentDef);\n        ngDevMode && assertNoDuplicateDirectives(rootDirectives);\n      } else {\n        rootDirectives = [rootComponentDef];\n      }\n      const hostTNode = createRootComponentTNode(rootLView, hostRNode);\n      const componentView = createRootComponentView(hostTNode, hostRNode, rootComponentDef, rootDirectives, rootLView, environment, hostRenderer);\n      tElementNode = getTNode(rootTView, HEADER_OFFSET);\n      // TODO(crisbeto): in practice `hostRNode` should always be defined, but there are some tests\n      // where the renderer is mocked out and `undefined` is returned. We should update the tests so\n      // that this check can be removed.\n      if (hostRNode) {\n        setRootNodeAttributes(hostRenderer, rootComponentDef, hostRNode, rootSelectorOrNode);\n      }\n      if (projectableNodes !== undefined) {\n        projectNodes(tElementNode, this.ngContentSelectors, projectableNodes);\n      }\n      // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and\n      // executed here?\n      // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref\n      component = createRootComponent(componentView, rootComponentDef, rootDirectives, hostDirectiveDefs, rootLView, [LifecycleHooksFeature]);\n      renderView(rootTView, rootLView, null);\n    } finally {\n      leaveView();\n    }\n    return new ComponentRef(this.componentType, component, createElementRef(tElementNode, rootLView), rootLView, tElementNode);\n  }\n}\n/**\n * Represents an instance of a Component created via a {@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}\n * method.\n *\n */\nclass ComponentRef extends ComponentRef$1 {\n  constructor(componentType, instance, location, _rootLView, _tNode) {\n    super();\n    this.location = location;\n    this._rootLView = _rootLView;\n    this._tNode = _tNode;\n    this.previousInputValues = null;\n    this.instance = instance;\n    this.hostView = this.changeDetectorRef = new ViewRef$1(_rootLView, undefined, /* _cdRefInjectingView */false);\n    this.componentType = componentType;\n  }\n  setInput(name, value) {\n    const inputData = this._tNode.inputs;\n    let dataValue;\n    if (inputData !== null && (dataValue = inputData[name])) {\n      var _this$previousInputVa;\n      (_this$previousInputVa = this.previousInputValues) !== null && _this$previousInputVa !== void 0 ? _this$previousInputVa : this.previousInputValues = new Map();\n      // Do not set the input if it is the same as the last value\n      // This behavior matches `bindingUpdated` when binding inputs in templates.\n      if (this.previousInputValues.has(name) && Object.is(this.previousInputValues.get(name), value)) {\n        return;\n      }\n      const lView = this._rootLView;\n      setInputsForProperty(lView[TVIEW], lView, dataValue, name, value);\n      this.previousInputValues.set(name, value);\n      const childComponentLView = getComponentLViewByIndex(this._tNode.index, lView);\n      markViewDirty(childComponentLView);\n    } else {\n      if (ngDevMode) {\n        const cmpNameForError = stringifyForError(this.componentType);\n        let message = `Can't set value of the '${name}' input on the '${cmpNameForError}' component. `;\n        message += `Make sure that the '${name}' property is annotated with @Input() or a mapped @Input('${name}') exists.`;\n        reportUnknownPropertyError(message);\n      }\n    }\n  }\n  get injector() {\n    return new NodeInjector(this._tNode, this._rootLView);\n  }\n  destroy() {\n    this.hostView.destroy();\n  }\n  onDestroy(callback) {\n    this.hostView.onDestroy(callback);\n  }\n}\n/** Creates a TNode that can be used to instantiate a root component. */\nfunction createRootComponentTNode(lView, rNode) {\n  const tView = lView[TVIEW];\n  const index = HEADER_OFFSET;\n  ngDevMode && assertIndexInRange(lView, index);\n  lView[index] = rNode;\n  // '#host' is added here as we don't know the real host DOM name (we don't want to read it) and at\n  // the same time we want to communicate the debug `TNode` that this is a special `TNode`\n  // representing a host element.\n  return getOrCreateTNode(tView, index, 2 /* TNodeType.Element */, '#host', null);\n}\n/**\n * Creates the root component view and the root component node.\n *\n * @param hostRNode Render host element.\n * @param rootComponentDef ComponentDef\n * @param rootView The parent view where the host node is stored\n * @param rendererFactory Factory to be used for creating child renderers.\n * @param hostRenderer The current renderer\n * @param sanitizer The sanitizer, if provided\n *\n * @returns Component view created\n */\nfunction createRootComponentView(tNode, hostRNode, rootComponentDef, rootDirectives, rootView, environment, hostRenderer) {\n  const tView = rootView[TVIEW];\n  applyRootComponentStyling(rootDirectives, tNode, hostRNode, hostRenderer);\n  // Hydration info is on the host element and needs to be retrieved\n  // and passed to the component LView.\n  let hydrationInfo = null;\n  if (hostRNode !== null) {\n    hydrationInfo = retrieveHydrationInfo(hostRNode, rootView[INJECTOR$1]);\n  }\n  const viewRenderer = environment.rendererFactory.createRenderer(hostRNode, rootComponentDef);\n  let lViewFlags = 16 /* LViewFlags.CheckAlways */;\n  if (rootComponentDef.signals) {\n    lViewFlags = 4096 /* LViewFlags.SignalView */;\n  } else if (rootComponentDef.onPush) {\n    lViewFlags = 64 /* LViewFlags.Dirty */;\n  }\n\n  const componentView = createLView(rootView, getOrCreateComponentTView(rootComponentDef), null, lViewFlags, rootView[tNode.index], tNode, environment, viewRenderer, null, null, hydrationInfo);\n  if (tView.firstCreatePass) {\n    markAsComponentHost(tView, tNode, rootDirectives.length - 1);\n  }\n  addToViewTree(rootView, componentView);\n  // Store component view at node index, with node as the HOST\n  return rootView[tNode.index] = componentView;\n}\n/** Sets up the styling information on a root component. */\nfunction applyRootComponentStyling(rootDirectives, tNode, rNode, hostRenderer) {\n  for (const def of rootDirectives) {\n    tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, def.hostAttrs);\n  }\n  if (tNode.mergedAttrs !== null) {\n    computeStaticStyling(tNode, tNode.mergedAttrs, true);\n    if (rNode !== null) {\n      setupStaticAttributes(hostRenderer, rNode, tNode);\n    }\n  }\n}\n/**\n * Creates a root component and sets it up with features and host bindings.Shared by\n * renderComponent() and ViewContainerRef.createComponent().\n */\nfunction createRootComponent(componentView, rootComponentDef, rootDirectives, hostDirectiveDefs, rootLView, hostFeatures) {\n  const rootTNode = getCurrentTNode();\n  ngDevMode && assertDefined(rootTNode, 'tNode should have been already created');\n  const tView = rootLView[TVIEW];\n  const native = getNativeByTNode(rootTNode, rootLView);\n  initializeDirectives(tView, rootLView, rootTNode, rootDirectives, null, hostDirectiveDefs);\n  for (let i = 0; i < rootDirectives.length; i++) {\n    const directiveIndex = rootTNode.directiveStart + i;\n    const directiveInstance = getNodeInjectable(rootLView, tView, directiveIndex, rootTNode);\n    attachPatchData(directiveInstance, rootLView);\n  }\n  invokeDirectivesHostBindings(tView, rootLView, rootTNode);\n  if (native) {\n    attachPatchData(native, rootLView);\n  }\n  // We're guaranteed for the `componentOffset` to be positive here\n  // since a root component always matches a component def.\n  ngDevMode && assertGreaterThan(rootTNode.componentOffset, -1, 'componentOffset must be great than -1');\n  const component = getNodeInjectable(rootLView, tView, rootTNode.directiveStart + rootTNode.componentOffset, rootTNode);\n  componentView[CONTEXT] = rootLView[CONTEXT] = component;\n  if (hostFeatures !== null) {\n    for (const feature of hostFeatures) {\n      feature(component, rootComponentDef);\n    }\n  }\n  // We want to generate an empty QueryList for root content queries for backwards\n  // compatibility with ViewEngine.\n  executeContentQueries(tView, rootTNode, componentView);\n  return component;\n}\n/** Sets the static attributes on a root component. */\nfunction setRootNodeAttributes(hostRenderer, componentDef, hostRNode, rootSelectorOrNode) {\n  if (rootSelectorOrNode) {\n    // The placeholder will be replaced with the actual version at build time.\n    setUpAttributes(hostRenderer, hostRNode, ['ng-version', '17.0.8']);\n  } else {\n    // If host element is created as a part of this function call (i.e. `rootSelectorOrNode`\n    // is not defined), also apply attributes and classes extracted from component selector.\n    // Extract attributes and classes from the first selector only to match VE behavior.\n    const {\n      attrs,\n      classes\n    } = extractAttrsAndClassesFromSelector(componentDef.selectors[0]);\n    if (attrs) {\n      setUpAttributes(hostRenderer, hostRNode, attrs);\n    }\n    if (classes && classes.length > 0) {\n      writeDirectClass(hostRenderer, hostRNode, classes.join(' '));\n    }\n  }\n}\n/** Projects the `projectableNodes` that were specified when creating a root component. */\nfunction projectNodes(tNode, ngContentSelectors, projectableNodes) {\n  const projection = tNode.projection = [];\n  for (let i = 0; i < ngContentSelectors.length; i++) {\n    const nodesforSlot = projectableNodes[i];\n    // Projectable nodes can be passed as array of arrays or an array of iterables (ngUpgrade\n    // case). Here we do normalize passed data structure to be an array of arrays to avoid\n    // complex checks down the line.\n    // We also normalize the length of the passed in projectable nodes (to match the number of\n    // <ng-container> slots defined by a component).\n    projection.push(nodesforSlot != null ? Array.from(nodesforSlot) : null);\n  }\n}\n/**\n * Used to enable lifecycle hooks on the root component.\n *\n * Include this feature when calling `renderComponent` if the root component\n * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\n * be called properly.\n *\n * Example:\n *\n * ```\n * renderComponent(AppComponent, {hostFeatures: [LifecycleHooksFeature]});\n * ```\n */\nfunction LifecycleHooksFeature() {\n  const tNode = getCurrentTNode();\n  ngDevMode && assertDefined(tNode, 'TNode is required');\n  registerPostOrderHooks(getLView()[TVIEW], tNode);\n}\nfunction getSuperType(type) {\n  return Object.getPrototypeOf(type.prototype).constructor;\n}\n/**\n * Merges the definition from a super class to a sub class.\n * @param definition The definition that is a SubClass of another directive of component\n *\n * @codeGenApi\n */\nfunction ɵɵInheritDefinitionFeature(definition) {\n  let superType = getSuperType(definition.type);\n  let shouldInheritFields = true;\n  const inheritanceChain = [definition];\n  while (superType) {\n    let superDef = undefined;\n    if (isComponentDef(definition)) {\n      // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n      superDef = superType.ɵcmp || superType.ɵdir;\n    } else {\n      if (superType.ɵcmp) {\n        throw new RuntimeError(903 /* RuntimeErrorCode.INVALID_INHERITANCE */, ngDevMode && `Directives cannot inherit Components. Directive ${stringifyForError(definition.type)} is attempting to extend component ${stringifyForError(superType)}`);\n      }\n      // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n      superDef = superType.ɵdir;\n    }\n    if (superDef) {\n      if (shouldInheritFields) {\n        inheritanceChain.push(superDef);\n        // Some fields in the definition may be empty, if there were no values to put in them that\n        // would've justified object creation. Unwrap them if necessary.\n        const writeableDef = definition;\n        writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);\n        writeableDef.inputTransforms = maybeUnwrapEmpty(definition.inputTransforms);\n        writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);\n        writeableDef.outputs = maybeUnwrapEmpty(definition.outputs);\n        // Merge hostBindings\n        const superHostBindings = superDef.hostBindings;\n        superHostBindings && inheritHostBindings(definition, superHostBindings);\n        // Merge queries\n        const superViewQuery = superDef.viewQuery;\n        const superContentQueries = superDef.contentQueries;\n        superViewQuery && inheritViewQuery(definition, superViewQuery);\n        superContentQueries && inheritContentQueries(definition, superContentQueries);\n        // Merge inputs and outputs\n        fillProperties(definition.inputs, superDef.inputs);\n        fillProperties(definition.declaredInputs, superDef.declaredInputs);\n        fillProperties(definition.outputs, superDef.outputs);\n        if (superDef.inputTransforms !== null) {\n          if (writeableDef.inputTransforms === null) {\n            writeableDef.inputTransforms = {};\n          }\n          fillProperties(writeableDef.inputTransforms, superDef.inputTransforms);\n        }\n        // Merge animations metadata.\n        // If `superDef` is a Component, the `data` field is present (defaults to an empty object).\n        if (isComponentDef(superDef) && superDef.data.animation) {\n          // If super def is a Component, the `definition` is also a Component, since Directives can\n          // not inherit Components (we throw an error above and cannot reach this code).\n          const defData = definition.data;\n          defData.animation = (defData.animation || []).concat(superDef.data.animation);\n        }\n      }\n      // Run parent features\n      const features = superDef.features;\n      if (features) {\n        for (let i = 0; i < features.length; i++) {\n          const feature = features[i];\n          if (feature && feature.ngInherit) {\n            feature(definition);\n          }\n          // If `InheritDefinitionFeature` is a part of the current `superDef`, it means that this\n          // def already has all the necessary information inherited from its super class(es), so we\n          // can stop merging fields from super classes. However we need to iterate through the\n          // prototype chain to look for classes that might contain other \"features\" (like\n          // NgOnChanges), which we should invoke for the original `definition`. We set the\n          // `shouldInheritFields` flag to indicate that, essentially skipping fields inheritance\n          // logic and only invoking functions from the \"features\" list.\n          if (feature === ɵɵInheritDefinitionFeature) {\n            shouldInheritFields = false;\n          }\n        }\n      }\n    }\n    superType = Object.getPrototypeOf(superType);\n  }\n  mergeHostAttrsAcrossInheritance(inheritanceChain);\n}\n/**\n * Merge the `hostAttrs` and `hostVars` from the inherited parent to the base class.\n *\n * @param inheritanceChain A list of `WritableDefs` starting at the top most type and listing\n * sub-types in order. For each type take the `hostAttrs` and `hostVars` and merge it with the child\n * type.\n */\nfunction mergeHostAttrsAcrossInheritance(inheritanceChain) {\n  let hostVars = 0;\n  let hostAttrs = null;\n  // We process the inheritance order from the base to the leaves here.\n  for (let i = inheritanceChain.length - 1; i >= 0; i--) {\n    const def = inheritanceChain[i];\n    // For each `hostVars`, we need to add the superclass amount.\n    def.hostVars = hostVars += def.hostVars;\n    // for each `hostAttrs` we need to merge it with superclass.\n    def.hostAttrs = mergeHostAttrs(def.hostAttrs, hostAttrs = mergeHostAttrs(hostAttrs, def.hostAttrs));\n  }\n}\nfunction maybeUnwrapEmpty(value) {\n  if (value === EMPTY_OBJ) {\n    return {};\n  } else if (value === EMPTY_ARRAY) {\n    return [];\n  } else {\n    return value;\n  }\n}\nfunction inheritViewQuery(definition, superViewQuery) {\n  const prevViewQuery = definition.viewQuery;\n  if (prevViewQuery) {\n    definition.viewQuery = (rf, ctx) => {\n      superViewQuery(rf, ctx);\n      prevViewQuery(rf, ctx);\n    };\n  } else {\n    definition.viewQuery = superViewQuery;\n  }\n}\nfunction inheritContentQueries(definition, superContentQueries) {\n  const prevContentQueries = definition.contentQueries;\n  if (prevContentQueries) {\n    definition.contentQueries = (rf, ctx, directiveIndex) => {\n      superContentQueries(rf, ctx, directiveIndex);\n      prevContentQueries(rf, ctx, directiveIndex);\n    };\n  } else {\n    definition.contentQueries = superContentQueries;\n  }\n}\nfunction inheritHostBindings(definition, superHostBindings) {\n  const prevHostBindings = definition.hostBindings;\n  if (prevHostBindings) {\n    definition.hostBindings = (rf, ctx) => {\n      superHostBindings(rf, ctx);\n      prevHostBindings(rf, ctx);\n    };\n  } else {\n    definition.hostBindings = superHostBindings;\n  }\n}\n\n/**\n * Fields which exist on either directive or component definitions, and need to be copied from\n * parent to child classes by the `ɵɵCopyDefinitionFeature`.\n */\nconst COPY_DIRECTIVE_FIELDS = [\n// The child class should use the providers of its parent.\n'providersResolver'\n// Not listed here are any fields which are handled by the `ɵɵInheritDefinitionFeature`, such\n// as inputs, outputs, and host binding functions.\n];\n/**\n * Fields which exist only on component definitions, and need to be copied from parent to child\n * classes by the `ɵɵCopyDefinitionFeature`.\n *\n * The type here allows any field of `ComponentDef` which is not also a property of `DirectiveDef`,\n * since those should go in `COPY_DIRECTIVE_FIELDS` above.\n */\nconst COPY_COMPONENT_FIELDS = [\n// The child class should use the template function of its parent, including all template\n// semantics.\n'template', 'decls', 'consts', 'vars', 'onPush', 'ngContentSelectors',\n// The child class should use the CSS styles of its parent, including all styling semantics.\n'styles', 'encapsulation',\n// The child class should be checked by the runtime in the same way as its parent.\n'schemas'];\n/**\n * Copies the fields not handled by the `ɵɵInheritDefinitionFeature` from the supertype of a\n * definition.\n *\n * This exists primarily to support ngcc migration of an existing View Engine pattern, where an\n * entire decorator is inherited from a parent to a child class. When ngcc detects this case, it\n * generates a skeleton definition on the child class, and applies this feature.\n *\n * The `ɵɵCopyDefinitionFeature` then copies any needed fields from the parent class' definition,\n * including things like the component template function.\n *\n * @param definition The definition of a child class which inherits from a parent class with its\n * own definition.\n *\n * @codeGenApi\n */\nfunction ɵɵCopyDefinitionFeature(definition) {\n  let superType = getSuperType(definition.type);\n  let superDef = undefined;\n  if (isComponentDef(definition)) {\n    // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n    superDef = superType.ɵcmp;\n  } else {\n    // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n    superDef = superType.ɵdir;\n  }\n  // Needed because `definition` fields are readonly.\n  const defAny = definition;\n  // Copy over any fields that apply to either directives or components.\n  for (const field of COPY_DIRECTIVE_FIELDS) {\n    defAny[field] = superDef[field];\n  }\n  if (isComponentDef(superDef)) {\n    // Copy over any component-specific fields.\n    for (const field of COPY_COMPONENT_FIELDS) {\n      defAny[field] = superDef[field];\n    }\n  }\n}\n\n/**\n * This feature adds the host directives behavior to a directive definition by patching a\n * function onto it. The expectation is that the runtime will invoke the function during\n * directive matching.\n *\n * For example:\n * ```ts\n * class ComponentWithHostDirective {\n *   static ɵcmp = defineComponent({\n *    type: ComponentWithHostDirective,\n *    features: [ɵɵHostDirectivesFeature([\n *      SimpleHostDirective,\n *      {directive: AdvancedHostDirective, inputs: ['foo: alias'], outputs: ['bar']},\n *    ])]\n *  });\n * }\n * ```\n *\n * @codeGenApi\n */\nfunction ɵɵHostDirectivesFeature(rawHostDirectives) {\n  const feature = definition => {\n    const resolved = (Array.isArray(rawHostDirectives) ? rawHostDirectives : rawHostDirectives()).map(dir => {\n      return typeof dir === 'function' ? {\n        directive: resolveForwardRef(dir),\n        inputs: EMPTY_OBJ,\n        outputs: EMPTY_OBJ\n      } : {\n        directive: resolveForwardRef(dir.directive),\n        inputs: bindingArrayToMap(dir.inputs),\n        outputs: bindingArrayToMap(dir.outputs)\n      };\n    });\n    if (definition.hostDirectives === null) {\n      definition.findHostDirectiveDefs = findHostDirectiveDefs;\n      definition.hostDirectives = resolved;\n    } else {\n      definition.hostDirectives.unshift(...resolved);\n    }\n  };\n  feature.ngInherit = true;\n  return feature;\n}\nfunction findHostDirectiveDefs(currentDef, matchedDefs, hostDirectiveDefs) {\n  if (currentDef.hostDirectives !== null) {\n    for (const hostDirectiveConfig of currentDef.hostDirectives) {\n      const hostDirectiveDef = getDirectiveDef(hostDirectiveConfig.directive);\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        validateHostDirective(hostDirectiveConfig, hostDirectiveDef);\n      }\n      // We need to patch the `declaredInputs` so that\n      // `ngOnChanges` can map the properties correctly.\n      patchDeclaredInputs(hostDirectiveDef.declaredInputs, hostDirectiveConfig.inputs);\n      // Host directives execute before the host so that its host bindings can be overwritten.\n      findHostDirectiveDefs(hostDirectiveDef, matchedDefs, hostDirectiveDefs);\n      hostDirectiveDefs.set(hostDirectiveDef, hostDirectiveConfig);\n      matchedDefs.push(hostDirectiveDef);\n    }\n  }\n}\n/**\n * Converts an array in the form of `['publicName', 'alias', 'otherPublicName', 'otherAlias']` into\n * a map in the form of `{publicName: 'alias', otherPublicName: 'otherAlias'}`.\n */\nfunction bindingArrayToMap(bindings) {\n  if (bindings === undefined || bindings.length === 0) {\n    return EMPTY_OBJ;\n  }\n  const result = {};\n  for (let i = 0; i < bindings.length; i += 2) {\n    result[bindings[i]] = bindings[i + 1];\n  }\n  return result;\n}\n/**\n * `ngOnChanges` has some leftover legacy ViewEngine behavior where the keys inside the\n * `SimpleChanges` event refer to the *declared* name of the input, not its public name or its\n * minified name. E.g. in `@Input('alias') foo: string`, the name in the `SimpleChanges` object\n * will always be `foo`, and not `alias` or the minified name of `foo` in apps using property\n * minification.\n *\n * This is achieved through the `DirectiveDef.declaredInputs` map that is constructed when the\n * definition is declared. When a property is written to the directive instance, the\n * `NgOnChangesFeature` will try to remap the property name being written to using the\n * `declaredInputs`.\n *\n * Since the host directive input remapping happens during directive matching, `declaredInputs`\n * won't contain the new alias that the input is available under. This function addresses the\n * issue by patching the host directive aliases to the `declaredInputs`. There is *not* a risk of\n * this patching accidentally introducing new inputs to the host directive, because `declaredInputs`\n * is used *only* by the `NgOnChangesFeature` when determining what name is used in the\n * `SimpleChanges` object which won't be reached if an input doesn't exist.\n */\nfunction patchDeclaredInputs(declaredInputs, exposedInputs) {\n  for (const publicName in exposedInputs) {\n    if (exposedInputs.hasOwnProperty(publicName)) {\n      const remappedPublicName = exposedInputs[publicName];\n      const privateName = declaredInputs[publicName];\n      // We *technically* shouldn't be able to hit this case because we can't have multiple\n      // inputs on the same property and we have validations against conflicting aliases in\n      // `validateMappings`. If we somehow did, it would lead to `ngOnChanges` being invoked\n      // with the wrong name so we have a non-user-friendly assertion here just in case.\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && declaredInputs.hasOwnProperty(remappedPublicName)) {\n        assertEqual(declaredInputs[remappedPublicName], declaredInputs[publicName], `Conflicting host directive input alias ${publicName}.`);\n      }\n      declaredInputs[remappedPublicName] = privateName;\n    }\n  }\n}\n/**\n * Verifies that the host directive has been configured correctly.\n * @param hostDirectiveConfig Host directive configuration object.\n * @param directiveDef Directive definition of the host directive.\n */\nfunction validateHostDirective(hostDirectiveConfig, directiveDef) {\n  const type = hostDirectiveConfig.directive;\n  if (directiveDef === null) {\n    if (getComponentDef(type) !== null) {\n      throw new RuntimeError(310 /* RuntimeErrorCode.HOST_DIRECTIVE_COMPONENT */, `Host directive ${type.name} cannot be a component.`);\n    }\n    throw new RuntimeError(307 /* RuntimeErrorCode.HOST_DIRECTIVE_UNRESOLVABLE */, `Could not resolve metadata for host directive ${type.name}. ` + `Make sure that the ${type.name} class is annotated with an @Directive decorator.`);\n  }\n  if (!directiveDef.standalone) {\n    throw new RuntimeError(308 /* RuntimeErrorCode.HOST_DIRECTIVE_NOT_STANDALONE */, `Host directive ${directiveDef.type.name} must be standalone.`);\n  }\n  validateMappings('input', directiveDef, hostDirectiveConfig.inputs);\n  validateMappings('output', directiveDef, hostDirectiveConfig.outputs);\n}\n/**\n * Checks that the host directive inputs/outputs configuration is valid.\n * @param bindingType Kind of binding that is being validated. Used in the error message.\n * @param def Definition of the host directive that is being validated against.\n * @param hostDirectiveBindings Host directive mapping object that shold be validated.\n */\nfunction validateMappings(bindingType, def, hostDirectiveBindings) {\n  const className = def.type.name;\n  const bindings = bindingType === 'input' ? def.inputs : def.outputs;\n  for (const publicName in hostDirectiveBindings) {\n    if (hostDirectiveBindings.hasOwnProperty(publicName)) {\n      if (!bindings.hasOwnProperty(publicName)) {\n        throw new RuntimeError(311 /* RuntimeErrorCode.HOST_DIRECTIVE_UNDEFINED_BINDING */, `Directive ${className} does not have an ${bindingType} with a public name of ${publicName}.`);\n      }\n      const remappedPublicName = hostDirectiveBindings[publicName];\n      if (bindings.hasOwnProperty(remappedPublicName) && remappedPublicName !== publicName && bindings[remappedPublicName] !== publicName) {\n        throw new RuntimeError(312 /* RuntimeErrorCode.HOST_DIRECTIVE_CONFLICTING_ALIAS */, `Cannot alias ${bindingType} ${publicName} of host directive ${className} to ${remappedPublicName}, because it already has a different ${bindingType} with the same public name.`);\n      }\n    }\n  }\n}\n\n/**\n * Decorates the directive definition with support for input transform functions.\n *\n * If the directive uses inheritance, the feature should be included before the\n * `InheritDefinitionFeature` to ensure that the `inputTransforms` field is populated.\n *\n * @codeGenApi\n */\nfunction ɵɵInputTransformsFeature(definition) {\n  const inputs = definition.inputConfig;\n  const inputTransforms = {};\n  for (const minifiedKey in inputs) {\n    if (inputs.hasOwnProperty(minifiedKey)) {\n      // Note: the private names are used for the keys, rather than the public ones, because public\n      // names can be re-aliased in host directives which would invalidate the lookup.\n      const value = inputs[minifiedKey];\n      if (Array.isArray(value) && value[2]) {\n        inputTransforms[minifiedKey] = value[2];\n      }\n    }\n  }\n  definition.inputTransforms = inputTransforms;\n}\n\n// TODO(misko): consider inlining\n/** Updates binding and returns the value. */\nfunction updateBinding(lView, bindingIndex, value) {\n  return lView[bindingIndex] = value;\n}\n/** Gets the current binding value. */\nfunction getBinding(lView, bindingIndex) {\n  ngDevMode && assertIndexInRange(lView, bindingIndex);\n  ngDevMode && assertNotSame(lView[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');\n  return lView[bindingIndex];\n}\n/**\n * Updates binding if changed, then returns whether it was updated.\n *\n * This function also checks the `CheckNoChangesMode` and throws if changes are made.\n * Some changes (Objects/iterables) during `CheckNoChangesMode` are exempt to comply with VE\n * behavior.\n *\n * @param lView current `LView`\n * @param bindingIndex The binding in the `LView` to check\n * @param value New value to check against `lView[bindingIndex]`\n * @returns `true` if the bindings has changed. (Throws if binding has changed during\n *          `CheckNoChangesMode`)\n */\nfunction bindingUpdated(lView, bindingIndex, value) {\n  ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n  ngDevMode && assertLessThan(bindingIndex, lView.length, `Slot should have been initialized to NO_CHANGE`);\n  const oldValue = lView[bindingIndex];\n  if (Object.is(oldValue, value)) {\n    return false;\n  } else {\n    if (ngDevMode && isInCheckNoChangesMode()) {\n      // View engine didn't report undefined values as changed on the first checkNoChanges pass\n      // (before the change detection was run).\n      const oldValueToCompare = oldValue !== NO_CHANGE ? oldValue : undefined;\n      if (!devModeEqual(oldValueToCompare, value)) {\n        const details = getExpressionChangedErrorDetails(lView, bindingIndex, oldValueToCompare, value);\n        throwErrorIfNoChangesMode(oldValue === NO_CHANGE, details.oldValue, details.newValue, details.propName, lView);\n      }\n      // There was a change, but the `devModeEqual` decided that the change is exempt from an error.\n      // For this reason we exit as if no change. The early exit is needed to prevent the changed\n      // value to be written into `LView` (If we would write the new value that we would not see it\n      // as change on next CD.)\n      return false;\n    }\n    lView[bindingIndex] = value;\n    return true;\n  }\n}\n/** Updates 2 bindings if changed, then returns whether either was updated. */\nfunction bindingUpdated2(lView, bindingIndex, exp1, exp2) {\n  const different = bindingUpdated(lView, bindingIndex, exp1);\n  return bindingUpdated(lView, bindingIndex + 1, exp2) || different;\n}\n/** Updates 3 bindings if changed, then returns whether any was updated. */\nfunction bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) {\n  const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n  return bindingUpdated(lView, bindingIndex + 2, exp3) || different;\n}\n/** Updates 4 bindings if changed, then returns whether any was updated. */\nfunction bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) {\n  const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n  return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;\n}\n\n/**\n * Updates the value of or removes a bound attribute on an Element.\n *\n * Used in the case of `[attr.title]=\"value\"`\n *\n * @param name name The name of the attribute.\n * @param value value The attribute is removed when value is `null` or `undefined`.\n *                  Otherwise the attribute value is set to the stringified value.\n * @param sanitizer An optional function used to sanitize the value.\n * @param namespace Optional namespace to use when setting the attribute.\n *\n * @codeGenApi\n */\nfunction ɵɵattribute(name, value, sanitizer, namespace) {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, 'attr.' + name, bindingIndex);\n  }\n  return ɵɵattribute;\n}\n\n/**\n * Create interpolation bindings with a variable number of expressions.\n *\n * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.\n * Those are faster because there is no need to create an array of expressions and iterate over it.\n *\n * `values`:\n * - has static text at even indexes,\n * - has evaluated expressions at odd indexes.\n *\n * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nfunction interpolationV(lView, values) {\n  ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');\n  ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');\n  let isBindingUpdated = false;\n  let bindingIndex = getBindingIndex();\n  for (let i = 1; i < values.length; i += 2) {\n    // Check if bindings (odd indexes) have changed\n    isBindingUpdated = bindingUpdated(lView, bindingIndex++, values[i]) || isBindingUpdated;\n  }\n  setBindingIndex(bindingIndex);\n  if (!isBindingUpdated) {\n    return NO_CHANGE;\n  }\n  // Build the updated content\n  let content = values[0];\n  for (let i = 1; i < values.length; i += 2) {\n    content += renderStringify(values[i]) + values[i + 1];\n  }\n  return content;\n}\n/**\n * Creates an interpolation binding with 1 expression.\n *\n * @param prefix static value used for concatenation only.\n * @param v0 value checked for change.\n * @param suffix static value used for concatenation only.\n */\nfunction interpolation1(lView, prefix, v0, suffix) {\n  const different = bindingUpdated(lView, nextBindingIndex(), v0);\n  return different ? prefix + renderStringify(v0) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 2 expressions.\n */\nfunction interpolation2(lView, prefix, v0, i0, v1, suffix) {\n  const bindingIndex = getBindingIndex();\n  const different = bindingUpdated2(lView, bindingIndex, v0, v1);\n  incrementBindingIndex(2);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 3 expressions.\n */\nfunction interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix) {\n  const bindingIndex = getBindingIndex();\n  const different = bindingUpdated3(lView, bindingIndex, v0, v1, v2);\n  incrementBindingIndex(3);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + suffix : NO_CHANGE;\n}\n/**\n * Create an interpolation binding with 4 expressions.\n */\nfunction interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n  const bindingIndex = getBindingIndex();\n  const different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  incrementBindingIndex(4);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 5 expressions.\n */\nfunction interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated(lView, bindingIndex + 4, v4) || different;\n  incrementBindingIndex(5);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 6 expressions.\n */\nfunction interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;\n  incrementBindingIndex(6);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 7 expressions.\n */\nfunction interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;\n  incrementBindingIndex(7);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 + renderStringify(v6) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 8 expressions.\n */\nfunction interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;\n  incrementBindingIndex(8);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 + renderStringify(v6) + i6 + renderStringify(v7) + suffix : NO_CHANGE;\n}\n\n/**\n *\n * Update an interpolated attribute on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate1('title', 'prefix', v0, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate1(attrName, prefix, v0, suffix, sanitizer, namespace) {\n  const lView = getLView();\n  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 1, prefix, suffix);\n  }\n  return ɵɵattributeInterpolate1;\n}\n/**\n *\n * Update an interpolated attribute on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate2(attrName, prefix, v0, i0, v1, suffix, sanitizer, namespace) {\n  const lView = getLView();\n  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 2, prefix, i0, suffix);\n  }\n  return ɵɵattributeInterpolate2;\n}\n/**\n *\n * Update an interpolated attribute on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate3(\n * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate3(attrName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer, namespace) {\n  const lView = getLView();\n  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 3, prefix, i0, i1, suffix);\n  }\n  return ɵɵattributeInterpolate3;\n}\n/**\n *\n * Update an interpolated attribute on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate4(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate4(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer, namespace) {\n  const lView = getLView();\n  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);\n  }\n  return ɵɵattributeInterpolate4;\n}\n/**\n *\n * Update an interpolated attribute on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate5(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate5(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer, namespace) {\n  const lView = getLView();\n  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);\n  }\n  return ɵɵattributeInterpolate5;\n}\n/**\n *\n * Update an interpolated attribute on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate6(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate6(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer, namespace) {\n  const lView = getLView();\n  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);\n  }\n  return ɵɵattributeInterpolate6;\n}\n/**\n *\n * Update an interpolated attribute on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate7(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate7(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer, namespace) {\n  const lView = getLView();\n  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);\n  }\n  return ɵɵattributeInterpolate7;\n}\n/**\n *\n * Update an interpolated attribute on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate8(\n *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate8(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer, namespace) {\n  const lView = getLView();\n  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);\n  }\n  return ɵɵattributeInterpolate8;\n}\n/**\n * Update an interpolated attribute on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolateV(\n *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *\n * @param attrName The name of the attribute to update.\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolateV(attrName, values, sanitizer, namespace) {\n  const lView = getLView();\n  const interpolated = interpolationV(lView, values);\n  if (interpolated !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolated, sanitizer, namespace);\n    if (ngDevMode) {\n      const interpolationInBetween = [values[0]]; // prefix\n      for (let i = 2; i < values.length; i += 2) {\n        interpolationInBetween.push(values[i]);\n      }\n      storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - interpolationInBetween.length + 1, ...interpolationInBetween);\n    }\n  }\n  return ɵɵattributeInterpolateV;\n}\nfunction toTStylingRange(prev, next) {\n  ngDevMode && assertNumberInRange(prev, 0, 32767 /* StylingRange.UNSIGNED_MASK */);\n  ngDevMode && assertNumberInRange(next, 0, 32767 /* StylingRange.UNSIGNED_MASK */);\n  return prev << 17 /* StylingRange.PREV_SHIFT */ | next << 2 /* StylingRange.NEXT_SHIFT */;\n}\n\nfunction getTStylingRangePrev(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return tStylingRange >> 17 /* StylingRange.PREV_SHIFT */ & 32767 /* StylingRange.UNSIGNED_MASK */;\n}\n\nfunction getTStylingRangePrevDuplicate(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return (tStylingRange & 2 /* StylingRange.PREV_DUPLICATE */) == 2 /* StylingRange.PREV_DUPLICATE */;\n}\n\nfunction setTStylingRangePrev(tStylingRange, previous) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  ngDevMode && assertNumberInRange(previous, 0, 32767 /* StylingRange.UNSIGNED_MASK */);\n  return tStylingRange & ~4294836224 /* StylingRange.PREV_MASK */ | previous << 17 /* StylingRange.PREV_SHIFT */;\n}\n\nfunction setTStylingRangePrevDuplicate(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return tStylingRange | 2 /* StylingRange.PREV_DUPLICATE */;\n}\n\nfunction getTStylingRangeNext(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return (tStylingRange & 131068 /* StylingRange.NEXT_MASK */) >> 2 /* StylingRange.NEXT_SHIFT */;\n}\n\nfunction setTStylingRangeNext(tStylingRange, next) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  ngDevMode && assertNumberInRange(next, 0, 32767 /* StylingRange.UNSIGNED_MASK */);\n  return tStylingRange & ~131068 /* StylingRange.NEXT_MASK */ |\n  //\n  next << 2 /* StylingRange.NEXT_SHIFT */;\n}\n\nfunction getTStylingRangeNextDuplicate(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return (tStylingRange & 1 /* StylingRange.NEXT_DUPLICATE */) === 1 /* StylingRange.NEXT_DUPLICATE */;\n}\n\nfunction setTStylingRangeNextDuplicate(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return tStylingRange | 1 /* StylingRange.NEXT_DUPLICATE */;\n}\n\nfunction getTStylingRangeTail(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  const next = getTStylingRangeNext(tStylingRange);\n  return next === 0 ? getTStylingRangePrev(tStylingRange) : next;\n}\n\n/**\n * NOTE: The word `styling` is used interchangeably as style or class styling.\n *\n * This file contains code to link styling instructions together so that they can be replayed in\n * priority order. The file exists because Ivy styling instruction execution order does not match\n * that of the priority order. The purpose of this code is to create a linked list so that the\n * instructions can be traversed in priority order when computing the styles.\n *\n * Assume we are dealing with the following code:\n * ```\n * @Component({\n *   template: `\n *     <my-cmp [style]=\" {color: '#001'} \"\n *             [style.color]=\" #002 \"\n *             dir-style-color-1\n *             dir-style-color-2> `\n * })\n * class ExampleComponent {\n *   static ngComp = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#001'});\n *     ɵɵstyleProp('color', '#002');\n *     ...\n *   }\n * }\n *\n * @Directive({\n *   selector: `[dir-style-color-1]',\n * })\n * class Style1Directive {\n *   @HostBinding('style') style = {color: '#005'};\n *   @HostBinding('style.color') color = '#006';\n *\n *   static ngDir = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#005'});\n *     ɵɵstyleProp('color', '#006');\n *     ...\n *   }\n * }\n *\n * @Directive({\n *   selector: `[dir-style-color-2]',\n * })\n * class Style2Directive {\n *   @HostBinding('style') style = {color: '#007'};\n *   @HostBinding('style.color') color = '#008';\n *\n *   static ngDir = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#007'});\n *     ɵɵstyleProp('color', '#008');\n *     ...\n *   }\n * }\n *\n * @Directive({\n *   selector: `my-cmp',\n * })\n * class MyComponent {\n *   @HostBinding('style') style = {color: '#003'};\n *   @HostBinding('style.color') color = '#004';\n *\n *   static ngComp = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#003'});\n *     ɵɵstyleProp('color', '#004');\n *     ...\n *   }\n * }\n * ```\n *\n * The Order of instruction execution is:\n *\n * NOTE: the comment binding location is for illustrative purposes only.\n *\n * ```\n * // Template: (ExampleComponent)\n *     ɵɵstyleMap({color: '#001'});   // Binding index: 10\n *     ɵɵstyleProp('color', '#002');  // Binding index: 12\n * // MyComponent\n *     ɵɵstyleMap({color: '#003'});   // Binding index: 20\n *     ɵɵstyleProp('color', '#004');  // Binding index: 22\n * // Style1Directive\n *     ɵɵstyleMap({color: '#005'});   // Binding index: 24\n *     ɵɵstyleProp('color', '#006');  // Binding index: 26\n * // Style2Directive\n *     ɵɵstyleMap({color: '#007'});   // Binding index: 28\n *     ɵɵstyleProp('color', '#008');  // Binding index: 30\n * ```\n *\n * The correct priority order of concatenation is:\n *\n * ```\n * // MyComponent\n *     ɵɵstyleMap({color: '#003'});   // Binding index: 20\n *     ɵɵstyleProp('color', '#004');  // Binding index: 22\n * // Style1Directive\n *     ɵɵstyleMap({color: '#005'});   // Binding index: 24\n *     ɵɵstyleProp('color', '#006');  // Binding index: 26\n * // Style2Directive\n *     ɵɵstyleMap({color: '#007'});   // Binding index: 28\n *     ɵɵstyleProp('color', '#008');  // Binding index: 30\n * // Template: (ExampleComponent)\n *     ɵɵstyleMap({color: '#001'});   // Binding index: 10\n *     ɵɵstyleProp('color', '#002');  // Binding index: 12\n * ```\n *\n * What color should be rendered?\n *\n * Once the items are correctly sorted in the list, the answer is simply the last item in the\n * concatenation list which is `#002`.\n *\n * To do so we keep a linked list of all of the bindings which pertain to this element.\n * Notice that the bindings are inserted in the order of execution, but the `TView.data` allows\n * us to traverse them in the order of priority.\n *\n * |Idx|`TView.data`|`LView`          | Notes\n * |---|------------|-----------------|--------------\n * |...|            |                 |\n * |10 |`null`      |`{color: '#001'}`| `ɵɵstyleMap('color', {color: '#001'})`\n * |11 |`30 | 12`   | ...             |\n * |12 |`color`     |`'#002'`         | `ɵɵstyleProp('color', '#002')`\n * |13 |`10 | 0`    | ...             |\n * |...|            |                 |\n * |20 |`null`      |`{color: '#003'}`| `ɵɵstyleMap('color', {color: '#003'})`\n * |21 |`0 | 22`    | ...             |\n * |22 |`color`     |`'#004'`         | `ɵɵstyleProp('color', '#004')`\n * |23 |`20 | 24`   | ...             |\n * |24 |`null`      |`{color: '#005'}`| `ɵɵstyleMap('color', {color: '#005'})`\n * |25 |`22 | 26`   | ...             |\n * |26 |`color`     |`'#006'`         | `ɵɵstyleProp('color', '#006')`\n * |27 |`24 | 28`   | ...             |\n * |28 |`null`      |`{color: '#007'}`| `ɵɵstyleMap('color', {color: '#007'})`\n * |29 |`26 | 30`   | ...             |\n * |30 |`color`     |`'#008'`         | `ɵɵstyleProp('color', '#008')`\n * |31 |`28 | 10`   | ...             |\n *\n * The above data structure allows us to re-concatenate the styling no matter which data binding\n * changes.\n *\n * NOTE: in addition to keeping track of next/previous index the `TView.data` also stores prev/next\n * duplicate bit. The duplicate bit if true says there either is a binding with the same name or\n * there is a map (which may contain the name). This information is useful in knowing if other\n * styles with higher priority need to be searched for overwrites.\n *\n * NOTE: See `should support example in 'tnode_linked_list.ts' documentation` in\n * `tnode_linked_list_spec.ts` for working example.\n */\nlet __unused_const_as_closure_does_not_like_standalone_comment_blocks__;\n/**\n * Insert new `tStyleValue` at `TData` and link existing style bindings such that we maintain linked\n * list of styles and compute the duplicate flag.\n *\n * Note: this function is executed during `firstUpdatePass` only to populate the `TView.data`.\n *\n * The function works by keeping track of `tStylingRange` which contains two pointers pointing to\n * the head/tail of the template portion of the styles.\n *  - if `isHost === false` (we are template) then insertion is at tail of `TStylingRange`\n *  - if `isHost === true` (we are host binding) then insertion is at head of `TStylingRange`\n *\n * @param tData The `TData` to insert into.\n * @param tNode `TNode` associated with the styling element.\n * @param tStylingKey See `TStylingKey`.\n * @param index location of where `tStyleValue` should be stored (and linked into list.)\n * @param isHostBinding `true` if the insertion is for a `hostBinding`. (insertion is in front of\n *               template.)\n * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.\n *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)\n */\nfunction insertTStylingBinding(tData, tNode, tStylingKeyWithStatic, index, isHostBinding, isClassBinding) {\n  ngDevMode && assertFirstUpdatePass(getTView());\n  let tBindings = isClassBinding ? tNode.classBindings : tNode.styleBindings;\n  let tmplHead = getTStylingRangePrev(tBindings);\n  let tmplTail = getTStylingRangeNext(tBindings);\n  tData[index] = tStylingKeyWithStatic;\n  let isKeyDuplicateOfStatic = false;\n  let tStylingKey;\n  if (Array.isArray(tStylingKeyWithStatic)) {\n    // We are case when the `TStylingKey` contains static fields as well.\n    const staticKeyValueArray = tStylingKeyWithStatic;\n    tStylingKey = staticKeyValueArray[1]; // unwrap.\n    // We need to check if our key is present in the static so that we can mark it as duplicate.\n    if (tStylingKey === null || keyValueArrayIndexOf(staticKeyValueArray, tStylingKey) > 0) {\n      // tStylingKey is present in the statics, need to mark it as duplicate.\n      isKeyDuplicateOfStatic = true;\n    }\n  } else {\n    tStylingKey = tStylingKeyWithStatic;\n  }\n  if (isHostBinding) {\n    // We are inserting host bindings\n    // If we don't have template bindings then `tail` is 0.\n    const hasTemplateBindings = tmplTail !== 0;\n    // This is important to know because that means that the `head` can't point to the first\n    // template bindings (there are none.) Instead the head points to the tail of the template.\n    if (hasTemplateBindings) {\n      // template head's \"prev\" will point to last host binding or to 0 if no host bindings yet\n      const previousNode = getTStylingRangePrev(tData[tmplHead + 1]);\n      tData[index + 1] = toTStylingRange(previousNode, tmplHead);\n      // if a host binding has already been registered, we need to update the next of that host\n      // binding to point to this one\n      if (previousNode !== 0) {\n        // We need to update the template-tail value to point to us.\n        tData[previousNode + 1] = setTStylingRangeNext(tData[previousNode + 1], index);\n      }\n      // The \"previous\" of the template binding head should point to this host binding\n      tData[tmplHead + 1] = setTStylingRangePrev(tData[tmplHead + 1], index);\n    } else {\n      tData[index + 1] = toTStylingRange(tmplHead, 0);\n      // if a host binding has already been registered, we need to update the next of that host\n      // binding to point to this one\n      if (tmplHead !== 0) {\n        // We need to update the template-tail value to point to us.\n        tData[tmplHead + 1] = setTStylingRangeNext(tData[tmplHead + 1], index);\n      }\n      // if we don't have template, the head points to template-tail, and needs to be advanced.\n      tmplHead = index;\n    }\n  } else {\n    // We are inserting in template section.\n    // We need to set this binding's \"previous\" to the current template tail\n    tData[index + 1] = toTStylingRange(tmplTail, 0);\n    ngDevMode && assertEqual(tmplHead !== 0 && tmplTail === 0, false, 'Adding template bindings after hostBindings is not allowed.');\n    if (tmplHead === 0) {\n      tmplHead = index;\n    } else {\n      // We need to update the previous value \"next\" to point to this binding\n      tData[tmplTail + 1] = setTStylingRangeNext(tData[tmplTail + 1], index);\n    }\n    tmplTail = index;\n  }\n  // Now we need to update / compute the duplicates.\n  // Starting with our location search towards head (least priority)\n  if (isKeyDuplicateOfStatic) {\n    tData[index + 1] = setTStylingRangePrevDuplicate(tData[index + 1]);\n  }\n  markDuplicates(tData, tStylingKey, index, true, isClassBinding);\n  markDuplicates(tData, tStylingKey, index, false, isClassBinding);\n  markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding);\n  tBindings = toTStylingRange(tmplHead, tmplTail);\n  if (isClassBinding) {\n    tNode.classBindings = tBindings;\n  } else {\n    tNode.styleBindings = tBindings;\n  }\n}\n/**\n * Look into the residual styling to see if the current `tStylingKey` is duplicate of residual.\n *\n * @param tNode `TNode` where the residual is stored.\n * @param tStylingKey `TStylingKey` to store.\n * @param tData `TData` associated with the current `LView`.\n * @param index location of where `tStyleValue` should be stored (and linked into list.)\n * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.\n *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)\n */\nfunction markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding) {\n  const residual = isClassBinding ? tNode.residualClasses : tNode.residualStyles;\n  if (residual != null /* or undefined */ && typeof tStylingKey == 'string' && keyValueArrayIndexOf(residual, tStylingKey) >= 0) {\n    // We have duplicate in the residual so mark ourselves as duplicate.\n    tData[index + 1] = setTStylingRangeNextDuplicate(tData[index + 1]);\n  }\n}\n/**\n * Marks `TStyleValue`s as duplicates if another style binding in the list has the same\n * `TStyleValue`.\n *\n * NOTE: this function is intended to be called twice once with `isPrevDir` set to `true` and once\n * with it set to `false` to search both the previous as well as next items in the list.\n *\n * No duplicate case\n * ```\n *   [style.color]\n *   [style.width.px] <<- index\n *   [style.height.px]\n * ```\n *\n * In the above case adding `[style.width.px]` to the existing `[style.color]` produces no\n * duplicates because `width` is not found in any other part of the linked list.\n *\n * Duplicate case\n * ```\n *   [style.color]\n *   [style.width.em]\n *   [style.width.px] <<- index\n * ```\n * In the above case adding `[style.width.px]` will produce a duplicate with `[style.width.em]`\n * because `width` is found in the chain.\n *\n * Map case 1\n * ```\n *   [style.width.px]\n *   [style.color]\n *   [style]  <<- index\n * ```\n * In the above case adding `[style]` will produce a duplicate with any other bindings because\n * `[style]` is a Map and as such is fully dynamic and could produce `color` or `width`.\n *\n * Map case 2\n * ```\n *   [style]\n *   [style.width.px]\n *   [style.color]  <<- index\n * ```\n * In the above case adding `[style.color]` will produce a duplicate because there is already a\n * `[style]` binding which is a Map and as such is fully dynamic and could produce `color` or\n * `width`.\n *\n * NOTE: Once `[style]` (Map) is added into the system all things are mapped as duplicates.\n * NOTE: We use `style` as example, but same logic is applied to `class`es as well.\n *\n * @param tData `TData` where the linked list is stored.\n * @param tStylingKey `TStylingKeyPrimitive` which contains the value to compare to other keys in\n *        the linked list.\n * @param index Starting location in the linked list to search from\n * @param isPrevDir Direction.\n *        - `true` for previous (lower priority);\n *        - `false` for next (higher priority).\n */\nfunction markDuplicates(tData, tStylingKey, index, isPrevDir, isClassBinding) {\n  const tStylingAtIndex = tData[index + 1];\n  const isMap = tStylingKey === null;\n  let cursor = isPrevDir ? getTStylingRangePrev(tStylingAtIndex) : getTStylingRangeNext(tStylingAtIndex);\n  let foundDuplicate = false;\n  // We keep iterating as long as we have a cursor\n  // AND either:\n  // - we found what we are looking for, OR\n  // - we are a map in which case we have to continue searching even after we find what we were\n  //   looking for since we are a wild card and everything needs to be flipped to duplicate.\n  while (cursor !== 0 && (foundDuplicate === false || isMap)) {\n    ngDevMode && assertIndexInRange(tData, cursor);\n    const tStylingValueAtCursor = tData[cursor];\n    const tStyleRangeAtCursor = tData[cursor + 1];\n    if (isStylingMatch(tStylingValueAtCursor, tStylingKey)) {\n      foundDuplicate = true;\n      tData[cursor + 1] = isPrevDir ? setTStylingRangeNextDuplicate(tStyleRangeAtCursor) : setTStylingRangePrevDuplicate(tStyleRangeAtCursor);\n    }\n    cursor = isPrevDir ? getTStylingRangePrev(tStyleRangeAtCursor) : getTStylingRangeNext(tStyleRangeAtCursor);\n  }\n  if (foundDuplicate) {\n    // if we found a duplicate, than mark ourselves.\n    tData[index + 1] = isPrevDir ? setTStylingRangePrevDuplicate(tStylingAtIndex) : setTStylingRangeNextDuplicate(tStylingAtIndex);\n  }\n}\n/**\n * Determines if two `TStylingKey`s are a match.\n *\n * When computing whether a binding contains a duplicate, we need to compare if the instruction\n * `TStylingKey` has a match.\n *\n * Here are examples of `TStylingKey`s which match given `tStylingKeyCursor` is:\n * - `color`\n *    - `color`    // Match another color\n *    - `null`     // That means that `tStylingKey` is a `classMap`/`styleMap` instruction\n *    - `['', 'color', 'other', true]` // wrapped `color` so match\n *    - `['', null, 'other', true]`       // wrapped `null` so match\n *    - `['', 'width', 'color', 'value']` // wrapped static value contains a match on `'color'`\n * - `null`       // `tStylingKeyCursor` always match as it is `classMap`/`styleMap` instruction\n *\n * @param tStylingKeyCursor\n * @param tStylingKey\n */\nfunction isStylingMatch(tStylingKeyCursor, tStylingKey) {\n  ngDevMode && assertNotEqual(Array.isArray(tStylingKey), true, 'Expected that \\'tStylingKey\\' has been unwrapped');\n  if (tStylingKeyCursor === null ||\n  // If the cursor is `null` it means that we have map at that\n  // location so we must assume that we have a match.\n  tStylingKey == null ||\n  // If `tStylingKey` is `null` then it is a map therefor assume that it\n  // contains a match.\n  (Array.isArray(tStylingKeyCursor) ? tStylingKeyCursor[1] : tStylingKeyCursor) === tStylingKey // If the keys match explicitly than we are a match.\n  ) {\n    return true;\n  } else if (Array.isArray(tStylingKeyCursor) && typeof tStylingKey === 'string') {\n    // if we did not find a match, but `tStylingKeyCursor` is `KeyValueArray` that means cursor has\n    // statics and we need to check those as well.\n    return keyValueArrayIndexOf(tStylingKeyCursor, tStylingKey) >= 0; // see if we are matching the key\n  }\n\n  return false;\n}\n\n// Global state of the parser. (This makes parser non-reentrant, but that is not an issue)\nconst parserState = {\n  textEnd: 0,\n  key: 0,\n  keyEnd: 0,\n  value: 0,\n  valueEnd: 0\n};\n/**\n * Retrieves the last parsed `key` of style.\n * @param text the text to substring the key from.\n */\nfunction getLastParsedKey(text) {\n  return text.substring(parserState.key, parserState.keyEnd);\n}\n/**\n * Retrieves the last parsed `value` of style.\n * @param text the text to substring the key from.\n */\nfunction getLastParsedValue(text) {\n  return text.substring(parserState.value, parserState.valueEnd);\n}\n/**\n * Initializes `className` string for parsing and parses the first token.\n *\n * This function is intended to be used in this format:\n * ```\n * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\n *   const key = getLastParsedKey();\n *   ...\n * }\n * ```\n * @param text `className` to parse\n * @returns index where the next invocation of `parseClassNameNext` should resume.\n */\nfunction parseClassName(text) {\n  resetParserState(text);\n  return parseClassNameNext(text, consumeWhitespace(text, 0, parserState.textEnd));\n}\n/**\n * Parses next `className` token.\n *\n * This function is intended to be used in this format:\n * ```\n * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\n *   const key = getLastParsedKey();\n *   ...\n * }\n * ```\n *\n * @param text `className` to parse\n * @param index where the parsing should resume.\n * @returns index where the next invocation of `parseClassNameNext` should resume.\n */\nfunction parseClassNameNext(text, index) {\n  const end = parserState.textEnd;\n  if (end === index) {\n    return -1;\n  }\n  index = parserState.keyEnd = consumeClassToken(text, parserState.key = index, end);\n  return consumeWhitespace(text, index, end);\n}\n/**\n * Initializes `cssText` string for parsing and parses the first key/values.\n *\n * This function is intended to be used in this format:\n * ```\n * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {\n *   const key = getLastParsedKey();\n *   const value = getLastParsedValue();\n *   ...\n * }\n * ```\n * @param text `cssText` to parse\n * @returns index where the next invocation of `parseStyleNext` should resume.\n */\nfunction parseStyle(text) {\n  resetParserState(text);\n  return parseStyleNext(text, consumeWhitespace(text, 0, parserState.textEnd));\n}\n/**\n * Parses the next `cssText` key/values.\n *\n * This function is intended to be used in this format:\n * ```\n * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {\n *   const key = getLastParsedKey();\n *   const value = getLastParsedValue();\n *   ...\n * }\n *\n * @param text `cssText` to parse\n * @param index where the parsing should resume.\n * @returns index where the next invocation of `parseStyleNext` should resume.\n */\nfunction parseStyleNext(text, startIndex) {\n  const end = parserState.textEnd;\n  let index = parserState.key = consumeWhitespace(text, startIndex, end);\n  if (end === index) {\n    // we reached an end so just quit\n    return -1;\n  }\n  index = parserState.keyEnd = consumeStyleKey(text, index, end);\n  index = consumeSeparator(text, index, end, 58 /* CharCode.COLON */);\n  index = parserState.value = consumeWhitespace(text, index, end);\n  index = parserState.valueEnd = consumeStyleValue(text, index, end);\n  return consumeSeparator(text, index, end, 59 /* CharCode.SEMI_COLON */);\n}\n/**\n * Reset the global state of the styling parser.\n * @param text The styling text to parse.\n */\nfunction resetParserState(text) {\n  parserState.key = 0;\n  parserState.keyEnd = 0;\n  parserState.value = 0;\n  parserState.valueEnd = 0;\n  parserState.textEnd = text.length;\n}\n/**\n * Returns index of next non-whitespace character.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index of next non-whitespace character (May be the same as `start` if no whitespace at\n *          that location.)\n */\nfunction consumeWhitespace(text, startIndex, endIndex) {\n  while (startIndex < endIndex && text.charCodeAt(startIndex) <= 32 /* CharCode.SPACE */) {\n    startIndex++;\n  }\n  return startIndex;\n}\n/**\n * Returns index of last char in class token.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after last char in class token.\n */\nfunction consumeClassToken(text, startIndex, endIndex) {\n  while (startIndex < endIndex && text.charCodeAt(startIndex) > 32 /* CharCode.SPACE */) {\n    startIndex++;\n  }\n  return startIndex;\n}\n/**\n * Consumes all of the characters belonging to style key and token.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after last style key character.\n */\nfunction consumeStyleKey(text, startIndex, endIndex) {\n  let ch;\n  while (startIndex < endIndex && ((ch = text.charCodeAt(startIndex)) === 45 /* CharCode.DASH */ || ch === 95 /* CharCode.UNDERSCORE */ || (ch & -33 /* CharCode.UPPER_CASE */) >= 65 /* CharCode.A */ && (ch & -33 /* CharCode.UPPER_CASE */) <= 90 /* CharCode.Z */ || ch >= 48 /* CharCode.ZERO */ && ch <= 57 /* CharCode.NINE */)) {\n    startIndex++;\n  }\n  return startIndex;\n}\n/**\n * Consumes all whitespace and the separator `:` after the style key.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after separator and surrounding whitespace.\n */\nfunction consumeSeparator(text, startIndex, endIndex, separator) {\n  startIndex = consumeWhitespace(text, startIndex, endIndex);\n  if (startIndex < endIndex) {\n    if (ngDevMode && text.charCodeAt(startIndex) !== separator) {\n      malformedStyleError(text, String.fromCharCode(separator), startIndex);\n    }\n    startIndex++;\n  }\n  return startIndex;\n}\n/**\n * Consumes style value honoring `url()` and `\"\"` text.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after last style value character.\n */\nfunction consumeStyleValue(text, startIndex, endIndex) {\n  let ch1 = -1; // 1st previous character\n  let ch2 = -1; // 2nd previous character\n  let ch3 = -1; // 3rd previous character\n  let i = startIndex;\n  let lastChIndex = i;\n  while (i < endIndex) {\n    const ch = text.charCodeAt(i++);\n    if (ch === 59 /* CharCode.SEMI_COLON */) {\n      return lastChIndex;\n    } else if (ch === 34 /* CharCode.DOUBLE_QUOTE */ || ch === 39 /* CharCode.SINGLE_QUOTE */) {\n      lastChIndex = i = consumeQuotedText(text, ch, i, endIndex);\n    } else if (startIndex === i - 4 &&\n    // We have seen only 4 characters so far \"URL(\" (Ignore \"foo_URL()\")\n    ch3 === 85 /* CharCode.U */ && ch2 === 82 /* CharCode.R */ && ch1 === 76 /* CharCode.L */ && ch === 40 /* CharCode.OPEN_PAREN */) {\n      lastChIndex = i = consumeQuotedText(text, 41 /* CharCode.CLOSE_PAREN */, i, endIndex);\n    } else if (ch > 32 /* CharCode.SPACE */) {\n      // if we have a non-whitespace character then capture its location\n      lastChIndex = i;\n    }\n    ch3 = ch2;\n    ch2 = ch1;\n    ch1 = ch & -33 /* CharCode.UPPER_CASE */;\n  }\n\n  return lastChIndex;\n}\n/**\n * Consumes all of the quoted characters.\n *\n * @param text Text to scan\n * @param quoteCharCode CharCode of either `\"` or `'` quote or `)` for `url(...)`.\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after quoted characters.\n */\nfunction consumeQuotedText(text, quoteCharCode, startIndex, endIndex) {\n  let ch1 = -1; // 1st previous character\n  let index = startIndex;\n  while (index < endIndex) {\n    const ch = text.charCodeAt(index++);\n    if (ch == quoteCharCode && ch1 !== 92 /* CharCode.BACK_SLASH */) {\n      return index;\n    }\n    if (ch == 92 /* CharCode.BACK_SLASH */ && ch1 === 92 /* CharCode.BACK_SLASH */) {\n      // two back slashes cancel each other out. For example `\"\\\\\"` should properly end the\n      // quotation. (It should not assume that the last `\"` is escaped.)\n      ch1 = 0;\n    } else {\n      ch1 = ch;\n    }\n  }\n  throw ngDevMode ? malformedStyleError(text, String.fromCharCode(quoteCharCode), endIndex) : new Error();\n}\nfunction malformedStyleError(text, expecting, index) {\n  ngDevMode && assertEqual(typeof text === 'string', true, 'String expected here');\n  throw throwError(`Malformed style at location ${index} in string '` + text.substring(0, index) + '[>>' + text.substring(index, index + 1) + '<<]' + text.slice(index + 1) + `'. Expecting '${expecting}'.`);\n}\n\n/**\n * Update a property on a selected element.\n *\n * Operates on the element selected by index via the {@link select} instruction.\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled\n *\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n * @returns This function returns itself so that it may be chained\n * (e.g. `property('name', ctx.name)('title', ctx.title)`)\n *\n * @codeGenApi\n */\nfunction ɵɵproperty(propName, value, sanitizer) {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n  }\n  return ɵɵproperty;\n}\n/**\n * Given `<div style=\"...\" my-dir>` and `MyDir` with `@Input('style')` we need to write to\n * directive input.\n */\nfunction setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased) {\n  const inputs = tNode.inputs;\n  const property = isClassBased ? 'class' : 'style';\n  // We support both 'class' and `className` hence the fallback.\n  setInputsForProperty(tView, lView, inputs[property], property, value);\n}\n\n/**\n * Update a style binding on an element with the provided value.\n *\n * If the style value is falsy then it will be removed from the element\n * (or assigned a different value depending if there are any styles placed\n * on the element with `styleMap` or any static styles that are\n * present from when the element was created with `styling`).\n *\n * Note that the styling element is updated as part of `stylingApply`.\n *\n * @param prop A valid CSS property.\n * @param value New value to write (`null` or an empty string to remove).\n * @param suffix Optional suffix. Used with scalar values to add unit such as `px`.\n *\n * Note that this will apply the provided style value to the host element if this function is called\n * within a host binding function.\n *\n * @codeGenApi\n */\nfunction ɵɵstyleProp(prop, value, suffix) {\n  checkStylingProperty(prop, value, suffix, false);\n  return ɵɵstyleProp;\n}\n/**\n * Update a class binding on an element with the provided value.\n *\n * This instruction is meant to handle the `[class.foo]=\"exp\"` case and,\n * therefore, the class binding itself must already be allocated using\n * `styling` within the creation block.\n *\n * @param prop A valid CSS class (only one).\n * @param value A true/false value which will turn the class on or off.\n *\n * Note that this will apply the provided class value to the host element if this function\n * is called within a host binding function.\n *\n * @codeGenApi\n */\nfunction ɵɵclassProp(className, value) {\n  checkStylingProperty(className, value, null, true);\n  return ɵɵclassProp;\n}\n/**\n * Update style bindings using an object literal on an element.\n *\n * This instruction is meant to apply styling via the `[style]=\"exp\"` template bindings.\n * When styles are applied to the element they will then be updated with respect to\n * any styles/classes set via `styleProp`. If any styles are set to falsy\n * then they will be removed from the element.\n *\n * Note that the styling instruction will not be applied until `stylingApply` is called.\n *\n * @param styles A key/value style map of the styles that will be applied to the given element.\n *        Any missing styles (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's styling.\n *\n * Note that this will apply the provided styleMap value to the host element if this function\n * is called within a host binding.\n *\n * @codeGenApi\n */\nfunction ɵɵstyleMap(styles) {\n  checkStylingMap(styleKeyValueArraySet, styleStringParser, styles, false);\n}\n/**\n * Parse text as style and add values to KeyValueArray.\n *\n * This code is pulled out to a separate function so that it can be tree shaken away if it is not\n * needed. It is only referenced from `ɵɵstyleMap`.\n *\n * @param keyValueArray KeyValueArray to add parsed values to.\n * @param text text to parse.\n */\nfunction styleStringParser(keyValueArray, text) {\n  for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i)) {\n    styleKeyValueArraySet(keyValueArray, getLastParsedKey(text), getLastParsedValue(text));\n  }\n}\n/**\n * Update class bindings using an object literal or class-string on an element.\n *\n * This instruction is meant to apply styling via the `[class]=\"exp\"` template bindings.\n * When classes are applied to the element they will then be updated with\n * respect to any styles/classes set via `classProp`. If any\n * classes are set to falsy then they will be removed from the element.\n *\n * Note that the styling instruction will not be applied until `stylingApply` is called.\n * Note that this will the provided classMap value to the host element if this function is called\n * within a host binding.\n *\n * @param classes A key/value map or string of CSS classes that will be added to the\n *        given element. Any missing classes (that have already been applied to the element\n *        beforehand) will be removed (unset) from the element's list of CSS classes.\n *\n * @codeGenApi\n */\nfunction ɵɵclassMap(classes) {\n  checkStylingMap(classKeyValueArraySet, classStringParser, classes, true);\n}\n/**\n * Parse text as class and add values to KeyValueArray.\n *\n * This code is pulled out to a separate function so that it can be tree shaken away if it is not\n * needed. It is only referenced from `ɵɵclassMap`.\n *\n * @param keyValueArray KeyValueArray to add parsed values to.\n * @param text text to parse.\n */\nfunction classStringParser(keyValueArray, text) {\n  for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\n    keyValueArraySet(keyValueArray, getLastParsedKey(text), true);\n  }\n}\n/**\n * Common code between `ɵɵclassProp` and `ɵɵstyleProp`.\n *\n * @param prop property name.\n * @param value binding value.\n * @param suffix suffix for the property (e.g. `em` or `px`)\n * @param isClassBased `true` if `class` change (`false` if `style`)\n */\nfunction checkStylingProperty(prop, value, suffix, isClassBased) {\n  const lView = getLView();\n  const tView = getTView();\n  // Styling instructions use 2 slots per binding.\n  // 1. one for the value / TStylingKey\n  // 2. one for the intermittent-value / TStylingRange\n  const bindingIndex = incrementBindingIndex(2);\n  if (tView.firstUpdatePass) {\n    stylingFirstUpdatePass(tView, prop, bindingIndex, isClassBased);\n  }\n  if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {\n    const tNode = tView.data[getSelectedIndex()];\n    updateStyling(tView, tNode, lView, lView[RENDERER], prop, lView[bindingIndex + 1] = normalizeSuffix(value, suffix), isClassBased, bindingIndex);\n  }\n}\n/**\n * Common code between `ɵɵclassMap` and `ɵɵstyleMap`.\n *\n * @param keyValueArraySet (See `keyValueArraySet` in \"util/array_utils\") Gets passed in as a\n *        function so that `style` can be processed. This is done for tree shaking purposes.\n * @param stringParser Parser used to parse `value` if `string`. (Passed in as `style` and `class`\n *        have different parsers.)\n * @param value bound value from application\n * @param isClassBased `true` if `class` change (`false` if `style`)\n */\nfunction checkStylingMap(keyValueArraySet, stringParser, value, isClassBased) {\n  const tView = getTView();\n  const bindingIndex = incrementBindingIndex(2);\n  if (tView.firstUpdatePass) {\n    stylingFirstUpdatePass(tView, null, bindingIndex, isClassBased);\n  }\n  const lView = getLView();\n  if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {\n    // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the\n    // if so as not to read unnecessarily.\n    const tNode = tView.data[getSelectedIndex()];\n    if (hasStylingInputShadow(tNode, isClassBased) && !isInHostBindings(tView, bindingIndex)) {\n      if (ngDevMode) {\n        // verify that if we are shadowing then `TData` is appropriately marked so that we skip\n        // processing this binding in styling resolution.\n        const tStylingKey = tView.data[bindingIndex];\n        assertEqual(Array.isArray(tStylingKey) ? tStylingKey[1] : tStylingKey, false, 'Styling linked list shadow input should be marked as \\'false\\'');\n      }\n      // VE does not concatenate the static portion like we are doing here.\n      // Instead VE just ignores the static completely if dynamic binding is present.\n      // Because of locality we have already set the static portion because we don't know if there\n      // is a dynamic portion until later. If we would ignore the static portion it would look like\n      // the binding has removed it. This would confuse `[ngStyle]`/`[ngClass]` to do the wrong\n      // thing as it would think that the static portion was removed. For this reason we\n      // concatenate it so that `[ngStyle]`/`[ngClass]`  can continue to work on changed.\n      let staticPrefix = isClassBased ? tNode.classesWithoutHost : tNode.stylesWithoutHost;\n      ngDevMode && isClassBased === false && staticPrefix !== null && assertEqual(staticPrefix.endsWith(';'), true, 'Expecting static portion to end with \\';\\'');\n      if (staticPrefix !== null) {\n        // We want to make sure that falsy values of `value` become empty strings.\n        value = concatStringsWithSpace(staticPrefix, value ? value : '');\n      }\n      // Given `<div [style] my-dir>` such that `my-dir` has `@Input('style')`.\n      // This takes over the `[style]` binding. (Same for `[class]`)\n      setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased);\n    } else {\n      updateStylingMap(tView, tNode, lView, lView[RENDERER], lView[bindingIndex + 1], lView[bindingIndex + 1] = toStylingKeyValueArray(keyValueArraySet, stringParser, value), isClassBased, bindingIndex);\n    }\n  }\n}\n/**\n * Determines when the binding is in `hostBindings` section\n *\n * @param tView Current `TView`\n * @param bindingIndex index of binding which we would like if it is in `hostBindings`\n */\nfunction isInHostBindings(tView, bindingIndex) {\n  // All host bindings are placed after the expando section.\n  return bindingIndex >= tView.expandoStartIndex;\n}\n/**\n * Collects the necessary information to insert the binding into a linked list of style bindings\n * using `insertTStylingBinding`.\n *\n * @param tView `TView` where the binding linked list will be stored.\n * @param tStylingKey Property/key of the binding.\n * @param bindingIndex Index of binding associated with the `prop`\n * @param isClassBased `true` if `class` change (`false` if `style`)\n */\nfunction stylingFirstUpdatePass(tView, tStylingKey, bindingIndex, isClassBased) {\n  ngDevMode && assertFirstUpdatePass(tView);\n  const tData = tView.data;\n  if (tData[bindingIndex + 1] === null) {\n    // The above check is necessary because we don't clear first update pass until first successful\n    // (no exception) template execution. This prevents the styling instruction from double adding\n    // itself to the list.\n    // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the\n    // if so as not to read unnecessarily.\n    const tNode = tData[getSelectedIndex()];\n    ngDevMode && assertDefined(tNode, 'TNode expected');\n    const isHostBindings = isInHostBindings(tView, bindingIndex);\n    if (hasStylingInputShadow(tNode, isClassBased) && tStylingKey === null && !isHostBindings) {\n      // `tStylingKey === null` implies that we are either `[style]` or `[class]` binding.\n      // If there is a directive which uses `@Input('style')` or `@Input('class')` than\n      // we need to neutralize this binding since that directive is shadowing it.\n      // We turn this into a noop by setting the key to `false`\n      tStylingKey = false;\n    }\n    tStylingKey = wrapInStaticStylingKey(tData, tNode, tStylingKey, isClassBased);\n    insertTStylingBinding(tData, tNode, tStylingKey, bindingIndex, isHostBindings, isClassBased);\n  }\n}\n/**\n * Adds static styling information to the binding if applicable.\n *\n * The linked list of styles not only stores the list and keys, but also stores static styling\n * information on some of the keys. This function determines if the key should contain the styling\n * information and computes it.\n *\n * See `TStylingStatic` for more details.\n *\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param stylingKey `TStylingKeyPrimitive` which may need to be wrapped into `TStylingKey`\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction wrapInStaticStylingKey(tData, tNode, stylingKey, isClassBased) {\n  const hostDirectiveDef = getCurrentDirectiveDef(tData);\n  let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;\n  if (hostDirectiveDef === null) {\n    // We are in template node.\n    // If template node already had styling instruction then it has already collected the static\n    // styling and there is no need to collect them again. We know that we are the first styling\n    // instruction because the `TNode.*Bindings` points to 0 (nothing has been inserted yet).\n    const isFirstStylingInstructionInTemplate = (isClassBased ? tNode.classBindings : tNode.styleBindings) === 0;\n    if (isFirstStylingInstructionInTemplate) {\n      // It would be nice to be able to get the statics from `mergeAttrs`, however, at this point\n      // they are already merged and it would not be possible to figure which property belongs where\n      // in the priority.\n      stylingKey = collectStylingFromDirectives(null, tData, tNode, stylingKey, isClassBased);\n      stylingKey = collectStylingFromTAttrs(stylingKey, tNode.attrs, isClassBased);\n      // We know that if we have styling binding in template we can't have residual.\n      residual = null;\n    }\n  } else {\n    // We are in host binding node and there was no binding instruction in template node.\n    // This means that we need to compute the residual.\n    const directiveStylingLast = tNode.directiveStylingLast;\n    const isFirstStylingInstructionInHostBinding = directiveStylingLast === -1 || tData[directiveStylingLast] !== hostDirectiveDef;\n    if (isFirstStylingInstructionInHostBinding) {\n      stylingKey = collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased);\n      if (residual === null) {\n        // - If `null` than either:\n        //    - Template styling instruction already ran and it has consumed the static\n        //      styling into its `TStylingKey` and so there is no need to update residual. Instead\n        //      we need to update the `TStylingKey` associated with the first template node\n        //      instruction. OR\n        //    - Some other styling instruction ran and determined that there are no residuals\n        let templateStylingKey = getTemplateHeadTStylingKey(tData, tNode, isClassBased);\n        if (templateStylingKey !== undefined && Array.isArray(templateStylingKey)) {\n          // Only recompute if `templateStylingKey` had static values. (If no static value found\n          // then there is nothing to do since this operation can only produce less static keys, not\n          // more.)\n          templateStylingKey = collectStylingFromDirectives(null, tData, tNode, templateStylingKey[1] /* unwrap previous statics */, isClassBased);\n          templateStylingKey = collectStylingFromTAttrs(templateStylingKey, tNode.attrs, isClassBased);\n          setTemplateHeadTStylingKey(tData, tNode, isClassBased, templateStylingKey);\n        }\n      } else {\n        // We only need to recompute residual if it is not `null`.\n        // - If existing residual (implies there was no template styling). This means that some of\n        //   the statics may have moved from the residual to the `stylingKey` and so we have to\n        //   recompute.\n        // - If `undefined` this is the first time we are running.\n        residual = collectResidual(tData, tNode, isClassBased);\n      }\n    }\n  }\n  if (residual !== undefined) {\n    isClassBased ? tNode.residualClasses = residual : tNode.residualStyles = residual;\n  }\n  return stylingKey;\n}\n/**\n * Retrieve the `TStylingKey` for the template styling instruction.\n *\n * This is needed since `hostBinding` styling instructions are inserted after the template\n * instruction. While the template instruction needs to update the residual in `TNode` the\n * `hostBinding` instructions need to update the `TStylingKey` of the template instruction because\n * the template instruction is downstream from the `hostBindings` instructions.\n *\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @return `TStylingKey` if found or `undefined` if not found.\n */\nfunction getTemplateHeadTStylingKey(tData, tNode, isClassBased) {\n  const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;\n  if (getTStylingRangeNext(bindings) === 0) {\n    // There does not seem to be a styling instruction in the `template`.\n    return undefined;\n  }\n  return tData[getTStylingRangePrev(bindings)];\n}\n/**\n * Update the `TStylingKey` of the first template instruction in `TNode`.\n *\n * Logically `hostBindings` styling instructions are of lower priority than that of the template.\n * However, they execute after the template styling instructions. This means that they get inserted\n * in front of the template styling instructions.\n *\n * If we have a template styling instruction and a new `hostBindings` styling instruction is\n * executed it means that it may need to steal static fields from the template instruction. This\n * method allows us to update the first template instruction `TStylingKey` with a new value.\n *\n * Assume:\n * ```\n * <div my-dir style=\"color: red\" [style.color]=\"tmplExp\"></div>\n *\n * @Directive({\n *   host: {\n *     'style': 'width: 100px',\n *     '[style.color]': 'dirExp',\n *   }\n * })\n * class MyDir {}\n * ```\n *\n * when `[style.color]=\"tmplExp\"` executes it creates this data structure.\n * ```\n *  ['', 'color', 'color', 'red', 'width', '100px'],\n * ```\n *\n * The reason for this is that the template instruction does not know if there are styling\n * instructions and must assume that there are none and must collect all of the static styling.\n * (both\n * `color' and 'width`)\n *\n * When `'[style.color]': 'dirExp',` executes we need to insert a new data into the linked list.\n * ```\n *  ['', 'color', 'width', '100px'],  // newly inserted\n *  ['', 'color', 'color', 'red', 'width', '100px'], // this is wrong\n * ```\n *\n * Notice that the template statics is now wrong as it incorrectly contains `width` so we need to\n * update it like so:\n * ```\n *  ['', 'color', 'width', '100px'],\n *  ['', 'color', 'color', 'red'],    // UPDATE\n * ```\n *\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @param tStylingKey New `TStylingKey` which is replacing the old one.\n */\nfunction setTemplateHeadTStylingKey(tData, tNode, isClassBased, tStylingKey) {\n  const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;\n  ngDevMode && assertNotEqual(getTStylingRangeNext(bindings), 0, 'Expecting to have at least one template styling binding.');\n  tData[getTStylingRangePrev(bindings)] = tStylingKey;\n}\n/**\n * Collect all static values after the current `TNode.directiveStylingLast` index.\n *\n * Collect the remaining styling information which has not yet been collected by an existing\n * styling instruction.\n *\n * @param tData `TData` where the `DirectiveDefs` are stored.\n * @param tNode `TNode` which contains the directive range.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction collectResidual(tData, tNode, isClassBased) {\n  let residual = undefined;\n  const directiveEnd = tNode.directiveEnd;\n  ngDevMode && assertNotEqual(tNode.directiveStylingLast, -1, 'By the time this function gets called at least one hostBindings-node styling instruction must have executed.');\n  // We add `1 + tNode.directiveStart` because we need to skip the current directive (as we are\n  // collecting things after the last `hostBindings` directive which had a styling instruction.)\n  for (let i = 1 + tNode.directiveStylingLast; i < directiveEnd; i++) {\n    const attrs = tData[i].hostAttrs;\n    residual = collectStylingFromTAttrs(residual, attrs, isClassBased);\n  }\n  return collectStylingFromTAttrs(residual, tNode.attrs, isClassBased);\n}\n/**\n * Collect the static styling information with lower priority than `hostDirectiveDef`.\n *\n * (This is opposite of residual styling.)\n *\n * @param hostDirectiveDef `DirectiveDef` for which we want to collect lower priority static\n *        styling. (Or `null` if template styling)\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param stylingKey Existing `TStylingKey` to update or wrap.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased) {\n  // We need to loop because there can be directives which have `hostAttrs` but don't have\n  // `hostBindings` so this loop catches up to the current directive..\n  let currentDirective = null;\n  const directiveEnd = tNode.directiveEnd;\n  let directiveStylingLast = tNode.directiveStylingLast;\n  if (directiveStylingLast === -1) {\n    directiveStylingLast = tNode.directiveStart;\n  } else {\n    directiveStylingLast++;\n  }\n  while (directiveStylingLast < directiveEnd) {\n    currentDirective = tData[directiveStylingLast];\n    ngDevMode && assertDefined(currentDirective, 'expected to be defined');\n    stylingKey = collectStylingFromTAttrs(stylingKey, currentDirective.hostAttrs, isClassBased);\n    if (currentDirective === hostDirectiveDef) break;\n    directiveStylingLast++;\n  }\n  if (hostDirectiveDef !== null) {\n    // we only advance the styling cursor if we are collecting data from host bindings.\n    // Template executes before host bindings and so if we would update the index,\n    // host bindings would not get their statics.\n    tNode.directiveStylingLast = directiveStylingLast;\n  }\n  return stylingKey;\n}\n/**\n * Convert `TAttrs` into `TStylingStatic`.\n *\n * @param stylingKey existing `TStylingKey` to update or wrap.\n * @param attrs `TAttributes` to process.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction collectStylingFromTAttrs(stylingKey, attrs, isClassBased) {\n  const desiredMarker = isClassBased ? 1 /* AttributeMarker.Classes */ : 2 /* AttributeMarker.Styles */;\n  let currentMarker = -1 /* AttributeMarker.ImplicitAttributes */;\n  if (attrs !== null) {\n    for (let i = 0; i < attrs.length; i++) {\n      const item = attrs[i];\n      if (typeof item === 'number') {\n        currentMarker = item;\n      } else {\n        if (currentMarker === desiredMarker) {\n          if (!Array.isArray(stylingKey)) {\n            stylingKey = stylingKey === undefined ? [] : ['', stylingKey];\n          }\n          keyValueArraySet(stylingKey, item, isClassBased ? true : attrs[++i]);\n        }\n      }\n    }\n  }\n  return stylingKey === undefined ? null : stylingKey;\n}\n/**\n * Convert user input to `KeyValueArray`.\n *\n * This function takes user input which could be `string`, Object literal, or iterable and converts\n * it into a consistent representation. The output of this is `KeyValueArray` (which is an array\n * where\n * even indexes contain keys and odd indexes contain values for those keys).\n *\n * The advantage of converting to `KeyValueArray` is that we can perform diff in an input\n * independent\n * way.\n * (ie we can compare `foo bar` to `['bar', 'baz'] and determine a set of changes which need to be\n * applied)\n *\n * The fact that `KeyValueArray` is sorted is very important because it allows us to compute the\n * difference in linear fashion without the need to allocate any additional data.\n *\n * For example if we kept this as a `Map` we would have to iterate over previous `Map` to determine\n * which values need to be deleted, over the new `Map` to determine additions, and we would have to\n * keep additional `Map` to keep track of duplicates or items which have not yet been visited.\n *\n * @param keyValueArraySet (See `keyValueArraySet` in \"util/array_utils\") Gets passed in as a\n *        function so that `style` can be processed. This is done\n *        for tree shaking purposes.\n * @param stringParser The parser is passed in so that it will be tree shakable. See\n *        `styleStringParser` and `classStringParser`\n * @param value The value to parse/convert to `KeyValueArray`\n */\nfunction toStylingKeyValueArray(keyValueArraySet, stringParser, value) {\n  if (value == null /*|| value === undefined */ || value === '') return EMPTY_ARRAY;\n  const styleKeyValueArray = [];\n  const unwrappedValue = unwrapSafeValue(value);\n  if (Array.isArray(unwrappedValue)) {\n    for (let i = 0; i < unwrappedValue.length; i++) {\n      keyValueArraySet(styleKeyValueArray, unwrappedValue[i], true);\n    }\n  } else if (typeof unwrappedValue === 'object') {\n    for (const key in unwrappedValue) {\n      if (unwrappedValue.hasOwnProperty(key)) {\n        keyValueArraySet(styleKeyValueArray, key, unwrappedValue[key]);\n      }\n    }\n  } else if (typeof unwrappedValue === 'string') {\n    stringParser(styleKeyValueArray, unwrappedValue);\n  } else {\n    ngDevMode && throwError('Unsupported styling type ' + typeof unwrappedValue + ': ' + unwrappedValue);\n  }\n  return styleKeyValueArray;\n}\n/**\n * Set a `value` for a `key`.\n *\n * See: `keyValueArraySet` for details\n *\n * @param keyValueArray KeyValueArray to add to.\n * @param key Style key to add.\n * @param value The value to set.\n */\nfunction styleKeyValueArraySet(keyValueArray, key, value) {\n  keyValueArraySet(keyValueArray, key, unwrapSafeValue(value));\n}\n/**\n * Class-binding-specific function for setting the `value` for a `key`.\n *\n * See: `keyValueArraySet` for details\n *\n * @param keyValueArray KeyValueArray to add to.\n * @param key Style key to add.\n * @param value The value to set.\n */\nfunction classKeyValueArraySet(keyValueArray, key, value) {\n  // We use `classList.add` to eventually add the CSS classes to the DOM node. Any value passed into\n  // `add` is stringified and added to the `class` attribute, e.g. even null, undefined or numbers\n  // will be added. Stringify the key here so that our internal data structure matches the value in\n  // the DOM. The only exceptions are empty strings and strings that contain spaces for which\n  // the browser throws an error. We ignore such values, because the error is somewhat cryptic.\n  const stringKey = String(key);\n  if (stringKey !== '' && !stringKey.includes(' ')) {\n    keyValueArraySet(keyValueArray, stringKey, value);\n  }\n}\n/**\n * Update map based styling.\n *\n * Map based styling could be anything which contains more than one binding. For example `string`,\n * or object literal. Dealing with all of these types would complicate the logic so\n * instead this function expects that the complex input is first converted into normalized\n * `KeyValueArray`. The advantage of normalization is that we get the values sorted, which makes it\n * very cheap to compute deltas between the previous and current value.\n *\n * @param tView Associated `TView.data` contains the linked list of binding priorities.\n * @param tNode `TNode` where the binding is located.\n * @param lView `LView` contains the values associated with other styling binding at this `TNode`.\n * @param renderer Renderer to use if any updates.\n * @param oldKeyValueArray Previous value represented as `KeyValueArray`\n * @param newKeyValueArray Current value represented as `KeyValueArray`\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @param bindingIndex Binding index of the binding.\n */\nfunction updateStylingMap(tView, tNode, lView, renderer, oldKeyValueArray, newKeyValueArray, isClassBased, bindingIndex) {\n  if (oldKeyValueArray === NO_CHANGE) {\n    // On first execution the oldKeyValueArray is NO_CHANGE => treat it as empty KeyValueArray.\n    oldKeyValueArray = EMPTY_ARRAY;\n  }\n  let oldIndex = 0;\n  let newIndex = 0;\n  let oldKey = 0 < oldKeyValueArray.length ? oldKeyValueArray[0] : null;\n  let newKey = 0 < newKeyValueArray.length ? newKeyValueArray[0] : null;\n  while (oldKey !== null || newKey !== null) {\n    ngDevMode && assertLessThan(oldIndex, 999, 'Are we stuck in infinite loop?');\n    ngDevMode && assertLessThan(newIndex, 999, 'Are we stuck in infinite loop?');\n    const oldValue = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex + 1] : undefined;\n    const newValue = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex + 1] : undefined;\n    let setKey = null;\n    let setValue = undefined;\n    if (oldKey === newKey) {\n      // UPDATE: Keys are equal => new value is overwriting old value.\n      oldIndex += 2;\n      newIndex += 2;\n      if (oldValue !== newValue) {\n        setKey = newKey;\n        setValue = newValue;\n      }\n    } else if (newKey === null || oldKey !== null && oldKey < newKey) {\n      // DELETE: oldKey key is missing or we did not find the oldKey in the newValue\n      // (because the keyValueArray is sorted and `newKey` is found later alphabetically).\n      // `\"background\" < \"color\"` so we need to delete `\"background\"` because it is not found in the\n      // new array.\n      oldIndex += 2;\n      setKey = oldKey;\n    } else {\n      // CREATE: newKey's is earlier alphabetically than oldKey's (or no oldKey) => we have new key.\n      // `\"color\" > \"background\"` so we need to add `color` because it is in new array but not in\n      // old array.\n      ngDevMode && assertDefined(newKey, 'Expecting to have a valid key');\n      newIndex += 2;\n      setKey = newKey;\n      setValue = newValue;\n    }\n    if (setKey !== null) {\n      updateStyling(tView, tNode, lView, renderer, setKey, setValue, isClassBased, bindingIndex);\n    }\n    oldKey = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex] : null;\n    newKey = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex] : null;\n  }\n}\n/**\n * Update a simple (property name) styling.\n *\n * This function takes `prop` and updates the DOM to that value. The function takes the binding\n * value as well as binding priority into consideration to determine which value should be written\n * to DOM. (For example it may be determined that there is a higher priority overwrite which blocks\n * the DOM write, or if the value goes to `undefined` a lower priority overwrite may be consulted.)\n *\n * @param tView Associated `TView.data` contains the linked list of binding priorities.\n * @param tNode `TNode` where the binding is located.\n * @param lView `LView` contains the values associated with other styling binding at this `TNode`.\n * @param renderer Renderer to use if any updates.\n * @param prop Either style property name or a class name.\n * @param value Either style value for `prop` or `true`/`false` if `prop` is class.\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @param bindingIndex Binding index of the binding.\n */\nfunction updateStyling(tView, tNode, lView, renderer, prop, value, isClassBased, bindingIndex) {\n  if (!(tNode.type & 3 /* TNodeType.AnyRNode */)) {\n    // It is possible to have styling on non-elements (such as ng-container).\n    // This is rare, but it does happen. In such a case, just ignore the binding.\n    return;\n  }\n  const tData = tView.data;\n  const tRange = tData[bindingIndex + 1];\n  const higherPriorityValue = getTStylingRangeNextDuplicate(tRange) ? findStylingValue(tData, tNode, lView, prop, getTStylingRangeNext(tRange), isClassBased) : undefined;\n  if (!isStylingValuePresent(higherPriorityValue)) {\n    // We don't have a next duplicate, or we did not find a duplicate value.\n    if (!isStylingValuePresent(value)) {\n      // We should delete current value or restore to lower priority value.\n      if (getTStylingRangePrevDuplicate(tRange)) {\n        // We have a possible prev duplicate, let's retrieve it.\n        value = findStylingValue(tData, null, lView, prop, bindingIndex, isClassBased);\n      }\n    }\n    const rNode = getNativeByIndex(getSelectedIndex(), lView);\n    applyStyling(renderer, isClassBased, rNode, prop, value);\n  }\n}\n/**\n * Search for styling value with higher priority which is overwriting current value, or a\n * value of lower priority to which we should fall back if the value is `undefined`.\n *\n * When value is being applied at a location, related values need to be consulted.\n * - If there is a higher priority binding, we should be using that one instead.\n *   For example `<div  [style]=\"{color:exp1}\" [style.color]=\"exp2\">` change to `exp1`\n *   requires that we check `exp2` to see if it is set to value other than `undefined`.\n * - If there is a lower priority binding and we are changing to `undefined`\n *   For example `<div  [style]=\"{color:exp1}\" [style.color]=\"exp2\">` change to `exp2` to\n *   `undefined` requires that we check `exp1` (and static values) and use that as new value.\n *\n * NOTE: The styling stores two values.\n * 1. The raw value which came from the application is stored at `index + 0` location. (This value\n *    is used for dirty checking).\n * 2. The normalized value is stored at `index + 1`.\n *\n * @param tData `TData` used for traversing the priority.\n * @param tNode `TNode` to use for resolving static styling. Also controls search direction.\n *   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.\n *      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.\n *   - `null` search prev and go all the way to end. Return last value where\n *     `isStylingValuePresent(value)` is true.\n * @param lView `LView` used for retrieving the actual values.\n * @param prop Property which we are interested in.\n * @param index Starting index in the linked list of styling bindings where the search should start.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction findStylingValue(tData, tNode, lView, prop, index, isClassBased) {\n  // `TNode` to use for resolving static styling. Also controls search direction.\n  //   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.\n  //      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.\n  //   - `null` search prev and go all the way to end. Return last value where\n  //     `isStylingValuePresent(value)` is true.\n  const isPrevDirection = tNode === null;\n  let value = undefined;\n  while (index > 0) {\n    const rawKey = tData[index];\n    const containsStatics = Array.isArray(rawKey);\n    // Unwrap the key if we contain static values.\n    const key = containsStatics ? rawKey[1] : rawKey;\n    const isStylingMap = key === null;\n    let valueAtLViewIndex = lView[index + 1];\n    if (valueAtLViewIndex === NO_CHANGE) {\n      // In firstUpdatePass the styling instructions create a linked list of styling.\n      // On subsequent passes it is possible for a styling instruction to try to read a binding\n      // which\n      // has not yet executed. In that case we will find `NO_CHANGE` and we should assume that\n      // we have `undefined` (or empty array in case of styling-map instruction) instead. This\n      // allows the resolution to apply the value (which may later be overwritten when the\n      // binding actually executes.)\n      valueAtLViewIndex = isStylingMap ? EMPTY_ARRAY : undefined;\n    }\n    let currentValue = isStylingMap ? keyValueArrayGet(valueAtLViewIndex, prop) : key === prop ? valueAtLViewIndex : undefined;\n    if (containsStatics && !isStylingValuePresent(currentValue)) {\n      currentValue = keyValueArrayGet(rawKey, prop);\n    }\n    if (isStylingValuePresent(currentValue)) {\n      value = currentValue;\n      if (isPrevDirection) {\n        return value;\n      }\n    }\n    const tRange = tData[index + 1];\n    index = isPrevDirection ? getTStylingRangePrev(tRange) : getTStylingRangeNext(tRange);\n  }\n  if (tNode !== null) {\n    // in case where we are going in next direction AND we did not find anything, we need to\n    // consult residual styling\n    let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;\n    if (residual != null /** OR residual !=== undefined */) {\n      value = keyValueArrayGet(residual, prop);\n    }\n  }\n  return value;\n}\n/**\n * Determines if the binding value should be used (or if the value is 'undefined' and hence priority\n * resolution should be used.)\n *\n * @param value Binding style value.\n */\nfunction isStylingValuePresent(value) {\n  // Currently only `undefined` value is considered non-binding. That is `undefined` says I don't\n  // have an opinion as to what this binding should be and you should consult other bindings by\n  // priority to determine the valid value.\n  // This is extracted into a single function so that we have a single place to control this.\n  return value !== undefined;\n}\n/**\n * Normalizes and/or adds a suffix to the value.\n *\n * If value is `null`/`undefined` no suffix is added\n * @param value\n * @param suffix\n */\nfunction normalizeSuffix(value, suffix) {\n  if (value == null || value === '') {\n    // do nothing\n    // Do not add the suffix if the value is going to be empty.\n    // As it produce invalid CSS, which the browsers will automatically omit but Domino will not.\n    // Example: `\"left\": \"px;\"` instead of `\"left\": \"\"`.\n  } else if (typeof suffix === 'string') {\n    value = value + suffix;\n  } else if (typeof value === 'object') {\n    value = stringify(unwrapSafeValue(value));\n  }\n  return value;\n}\n/**\n * Tests if the `TNode` has input shadow.\n *\n * An input shadow is when a directive steals (shadows) the input by using `@Input('style')` or\n * `@Input('class')` as input.\n *\n * @param tNode `TNode` which we would like to see if it has shadow.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction hasStylingInputShadow(tNode, isClassBased) {\n  return (tNode.flags & (isClassBased ? 8 /* TNodeFlags.hasClassInput */ : 16 /* TNodeFlags.hasStyleInput */)) !== 0;\n}\n\n/**\n *\n * Update an interpolated class on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate1('prefix', v0, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate1(prefix, v0, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate2('prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate2(prefix, v0, i0, v1, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate3(\n * 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate4(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate5(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate6(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate7(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate8(\n *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n * Update an interpolated class on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolateV(\n *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *.\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolateV(values) {\n  const lView = getLView();\n  const interpolatedValue = interpolationV(lView, values);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/*!\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Instruction that returns the component instance in which the current instruction is executing.\n * This is a constant-time version of `nextContent` for the case where we know that we need the\n * component instance specifically, rather than the context of a particular template.\n *\n * @codeGenApi\n */\nfunction ɵɵcomponentInstance() {\n  const instance = getLView()[DECLARATION_COMPONENT_VIEW][CONTEXT];\n  ngDevMode && assertDefined(instance, 'Expected component instance to be defined');\n  return instance;\n}\nconst AT_THIS_LOCATION = '<-- AT THIS LOCATION';\n/**\n * Retrieves a user friendly string for a given TNodeType for use in\n * friendly error messages\n *\n * @param tNodeType\n * @returns\n */\nfunction getFriendlyStringFromTNodeType(tNodeType) {\n  switch (tNodeType) {\n    case 4 /* TNodeType.Container */:\n      return 'view container';\n    case 2 /* TNodeType.Element */:\n      return 'element';\n    case 8 /* TNodeType.ElementContainer */:\n      return 'ng-container';\n    case 32 /* TNodeType.Icu */:\n      return 'icu';\n    case 64 /* TNodeType.Placeholder */:\n      return 'i18n';\n    case 16 /* TNodeType.Projection */:\n      return 'projection';\n    case 1 /* TNodeType.Text */:\n      return 'text';\n    default:\n      // This should not happen as we cover all possible TNode types above.\n      return '<unknown>';\n  }\n}\n/**\n * Validates that provided nodes match during the hydration process.\n */\nfunction validateMatchingNode(node, nodeType, tagName, lView, tNode, isViewContainerAnchor = false) {\n  if (!node || node.nodeType !== nodeType || node.nodeType === Node.ELEMENT_NODE && node.tagName.toLowerCase() !== (tagName === null || tagName === void 0 ? void 0 : tagName.toLowerCase())) {\n    var _hostComponentDef$typ3;\n    const expectedNode = shortRNodeDescription(nodeType, tagName, null);\n    let header = `During hydration Angular expected ${expectedNode} but `;\n    const hostComponentDef = getDeclarationComponentDef(lView);\n    const componentClassName = hostComponentDef === null || hostComponentDef === void 0 || (_hostComponentDef$typ3 = hostComponentDef.type) === null || _hostComponentDef$typ3 === void 0 ? void 0 : _hostComponentDef$typ3.name;\n    const expected = `Angular expected this DOM:\\n\\n${describeExpectedDom(lView, tNode, isViewContainerAnchor)}\\n\\n`;\n    let actual = '';\n    if (!node) {\n      // No node found during hydration.\n      header += `the node was not found.\\n\\n`;\n    } else {\n      var _node$tagName, _node$textContent2;\n      const actualNode = shortRNodeDescription(node.nodeType, (_node$tagName = node.tagName) !== null && _node$tagName !== void 0 ? _node$tagName : null, (_node$textContent2 = node.textContent) !== null && _node$textContent2 !== void 0 ? _node$textContent2 : null);\n      header += `found ${actualNode}.\\n\\n`;\n      actual = `Actual DOM is:\\n\\n${describeDomFromNode(node)}\\n\\n`;\n    }\n    const footer = getHydrationErrorFooter(componentClassName);\n    const message = header + expected + actual + getHydrationAttributeNote() + footer;\n    throw new RuntimeError(-500 /* RuntimeErrorCode.HYDRATION_NODE_MISMATCH */, message);\n  }\n}\n/**\n * Validates that a given node has sibling nodes\n */\nfunction validateSiblingNodeExists(node) {\n  validateNodeExists(node);\n  if (!node.nextSibling) {\n    const header = 'During hydration Angular expected more sibling nodes to be present.\\n\\n';\n    const actual = `Actual DOM is:\\n\\n${describeDomFromNode(node)}\\n\\n`;\n    const footer = getHydrationErrorFooter();\n    const message = header + actual + footer;\n    throw new RuntimeError(-501 /* RuntimeErrorCode.HYDRATION_MISSING_SIBLINGS */, message);\n  }\n}\n/**\n * Validates that a node exists or throws\n */\nfunction validateNodeExists(node, lView = null, tNode = null) {\n  if (!node) {\n    const header = 'During hydration, Angular expected an element to be present at this location.\\n\\n';\n    let expected = '';\n    let footer = '';\n    if (lView !== null && tNode !== null) {\n      expected = `${describeExpectedDom(lView, tNode, false)}\\n\\n`;\n      footer = getHydrationErrorFooter();\n    }\n    throw new RuntimeError(-502 /* RuntimeErrorCode.HYDRATION_MISSING_NODE */, header + expected + footer);\n  }\n}\n/**\n * Builds the hydration error message when a node is not found\n *\n * @param lView the LView where the node exists\n * @param tNode the TNode\n */\nfunction nodeNotFoundError(lView, tNode) {\n  const header = 'During serialization, Angular was unable to find an element in the DOM:\\n\\n';\n  const expected = `${describeExpectedDom(lView, tNode, false)}\\n\\n`;\n  const footer = getHydrationErrorFooter();\n  throw new RuntimeError(-502 /* RuntimeErrorCode.HYDRATION_MISSING_NODE */, header + expected + footer);\n}\n/**\n * Builds a hydration error message when a node is not found at a path location\n *\n * @param host the Host Node\n * @param path the path to the node\n */\nfunction nodeNotFoundAtPathError(host, path) {\n  const header = `During hydration Angular was unable to locate a node ` + `using the \"${path}\" path, starting from the ${describeRNode(host)} node.\\n\\n`;\n  const footer = getHydrationErrorFooter();\n  throw new RuntimeError(-502 /* RuntimeErrorCode.HYDRATION_MISSING_NODE */, header + footer);\n}\n/**\n * Builds the hydration error message in the case that dom nodes are created outside of\n * the Angular context and are being used as projected nodes\n *\n * @param lView the LView\n * @param tNode the TNode\n * @returns an error\n */\nfunction unsupportedProjectionOfDomNodes(rNode) {\n  const header = 'During serialization, Angular detected DOM nodes ' + 'that were created outside of Angular context and provided as projectable nodes ' + '(likely via `ViewContainerRef.createComponent` or `createComponent` APIs). ' + 'Hydration is not supported for such cases, consider refactoring the code to avoid ' + 'this pattern or using `ngSkipHydration` on the host element of the component.\\n\\n';\n  const actual = `${describeDomFromNode(rNode)}\\n\\n`;\n  const message = header + actual + getHydrationAttributeNote();\n  return new RuntimeError(-503 /* RuntimeErrorCode.UNSUPPORTED_PROJECTION_DOM_NODES */, message);\n}\n/**\n * Builds the hydration error message in the case that ngSkipHydration was used on a\n * node that is not a component host element or host binding\n *\n * @param rNode the HTML Element\n * @returns an error\n */\nfunction invalidSkipHydrationHost(rNode) {\n  const header = 'The `ngSkipHydration` flag is applied on a node ' + 'that doesn\\'t act as a component host. Hydration can be ' + 'skipped only on per-component basis.\\n\\n';\n  const actual = `${describeDomFromNode(rNode)}\\n\\n`;\n  const footer = 'Please move the `ngSkipHydration` attribute to the component host element.\\n\\n';\n  const message = header + actual + footer;\n  return new RuntimeError(-504 /* RuntimeErrorCode.INVALID_SKIP_HYDRATION_HOST */, message);\n}\n// Stringification methods\n/**\n * Stringifies a given TNode's attributes\n *\n * @param tNode a provided TNode\n * @returns string\n */\nfunction stringifyTNodeAttrs(tNode) {\n  const results = [];\n  if (tNode.attrs) {\n    for (let i = 0; i < tNode.attrs.length;) {\n      const attrName = tNode.attrs[i++];\n      // Once we reach the first flag, we know that the list of\n      // attributes is over.\n      if (typeof attrName == 'number') {\n        break;\n      }\n      const attrValue = tNode.attrs[i++];\n      results.push(`${attrName}=\"${shorten(attrValue)}\"`);\n    }\n  }\n  return results.join(' ');\n}\n/**\n * The list of internal attributes that should be filtered out while\n * producing an error message.\n */\nconst internalAttrs = new Set(['ngh', 'ng-version', 'ng-server-context']);\n/**\n * Stringifies an HTML Element's attributes\n *\n * @param rNode an HTML Element\n * @returns string\n */\nfunction stringifyRNodeAttrs(rNode) {\n  const results = [];\n  for (let i = 0; i < rNode.attributes.length; i++) {\n    const attr = rNode.attributes[i];\n    if (internalAttrs.has(attr.name)) continue;\n    results.push(`${attr.name}=\"${shorten(attr.value)}\"`);\n  }\n  return results.join(' ');\n}\n// Methods for Describing the DOM\n/**\n * Converts a tNode to a helpful readable string value for use in error messages\n *\n * @param tNode a given TNode\n * @param innerContent the content of the node\n * @returns string\n */\nfunction describeTNode(tNode, innerContent = '…') {\n  switch (tNode.type) {\n    case 1 /* TNodeType.Text */:\n      const content = tNode.value ? `(${tNode.value})` : '';\n      return `#text${content}`;\n    case 2 /* TNodeType.Element */:\n      const attrs = stringifyTNodeAttrs(tNode);\n      const tag = tNode.value.toLowerCase();\n      return `<${tag}${attrs ? ' ' + attrs : ''}>${innerContent}</${tag}>`;\n    case 8 /* TNodeType.ElementContainer */:\n      return '<!-- ng-container -->';\n    case 4 /* TNodeType.Container */:\n      return '<!-- container -->';\n    default:\n      const typeAsString = getFriendlyStringFromTNodeType(tNode.type);\n      return `#node(${typeAsString})`;\n  }\n}\n/**\n * Converts an RNode to a helpful readable string value for use in error messages\n *\n * @param rNode a given RNode\n * @param innerContent the content of the node\n * @returns string\n */\nfunction describeRNode(rNode, innerContent = '…') {\n  var _node$textContent3;\n  const node = rNode;\n  switch (node.nodeType) {\n    case Node.ELEMENT_NODE:\n      const tag = node.tagName.toLowerCase();\n      const attrs = stringifyRNodeAttrs(node);\n      return `<${tag}${attrs ? ' ' + attrs : ''}>${innerContent}</${tag}>`;\n    case Node.TEXT_NODE:\n      const content = node.textContent ? shorten(node.textContent) : '';\n      return `#text${content ? `(${content})` : ''}`;\n    case Node.COMMENT_NODE:\n      return `<!-- ${shorten((_node$textContent3 = node.textContent) !== null && _node$textContent3 !== void 0 ? _node$textContent3 : '')} -->`;\n    default:\n      return `#node(${node.nodeType})`;\n  }\n}\n/**\n * Builds the string containing the expected DOM present given the LView and TNode\n * values for a readable error message\n *\n * @param lView the lView containing the DOM\n * @param tNode the tNode\n * @param isViewContainerAnchor boolean\n * @returns string\n */\nfunction describeExpectedDom(lView, tNode, isViewContainerAnchor) {\n  const spacer = '  ';\n  let content = '';\n  if (tNode.prev) {\n    content += spacer + '…\\n';\n    content += spacer + describeTNode(tNode.prev) + '\\n';\n  } else if (tNode.type && tNode.type & 12 /* TNodeType.AnyContainer */) {\n    content += spacer + '…\\n';\n  }\n  if (isViewContainerAnchor) {\n    content += spacer + describeTNode(tNode) + '\\n';\n    content += spacer + `<!-- container -->  ${AT_THIS_LOCATION}\\n`;\n  } else {\n    content += spacer + describeTNode(tNode) + `  ${AT_THIS_LOCATION}\\n`;\n  }\n  content += spacer + '…\\n';\n  const parentRNode = tNode.type ? getParentRElement(lView[TVIEW], tNode, lView) : null;\n  if (parentRNode) {\n    content = describeRNode(parentRNode, '\\n' + content);\n  }\n  return content;\n}\n/**\n * Builds the string containing the DOM present around a given RNode for a\n * readable error message\n *\n * @param node the RNode\n * @returns string\n */\nfunction describeDomFromNode(node) {\n  const spacer = '  ';\n  let content = '';\n  const currentNode = node;\n  if (currentNode.previousSibling) {\n    content += spacer + '…\\n';\n    content += spacer + describeRNode(currentNode.previousSibling) + '\\n';\n  }\n  content += spacer + describeRNode(currentNode) + `  ${AT_THIS_LOCATION}\\n`;\n  if (node.nextSibling) {\n    content += spacer + '…\\n';\n  }\n  if (node.parentNode) {\n    content = describeRNode(currentNode.parentNode, '\\n' + content);\n  }\n  return content;\n}\n/**\n * Shortens the description of a given RNode by its type for readability\n *\n * @param nodeType the type of node\n * @param tagName the node tag name\n * @param textContent the text content in the node\n * @returns string\n */\nfunction shortRNodeDescription(nodeType, tagName, textContent) {\n  switch (nodeType) {\n    case Node.ELEMENT_NODE:\n      return `<${tagName.toLowerCase()}>`;\n    case Node.TEXT_NODE:\n      const content = textContent ? ` (with the \"${shorten(textContent)}\" content)` : '';\n      return `a text node${content}`;\n    case Node.COMMENT_NODE:\n      return 'a comment node';\n    default:\n      return `#node(nodeType=${nodeType})`;\n  }\n}\n/**\n * Builds the footer hydration error message\n *\n * @param componentClassName the name of the component class\n * @returns string\n */\nfunction getHydrationErrorFooter(componentClassName) {\n  const componentInfo = componentClassName ? `the \"${componentClassName}\"` : 'corresponding';\n  return `To fix this problem:\\n` + `  * check ${componentInfo} component for hydration-related issues\\n` + `  * check to see if your template has valid HTML structure\\n` + `  * or skip hydration by adding the \\`ngSkipHydration\\` attribute ` + `to its host node in a template\\n\\n`;\n}\n/**\n * An attribute related note for hydration errors\n */\nfunction getHydrationAttributeNote() {\n  return 'Note: attributes are only displayed to better represent the DOM' + ' but have no effect on hydration mismatches.\\n\\n';\n}\n// Node string utility functions\n/**\n * Strips all newlines out of a given string\n *\n * @param input a string to be cleared of new line characters\n * @returns\n */\nfunction stripNewlines(input) {\n  return input.replace(/\\s+/gm, '');\n}\n/**\n * Reduces a string down to a maximum length of characters with ellipsis for readability\n *\n * @param input a string input\n * @param maxLength a maximum length in characters\n * @returns string\n */\nfunction shorten(input, maxLength = 50) {\n  if (!input) {\n    return '';\n  }\n  input = stripNewlines(input);\n  return input.length > maxLength ? `${input.substring(0, maxLength - 1)}…` : input;\n}\n\n/**\n * Removes all dehydrated views from a given LContainer:\n * both in internal data structure, as well as removing\n * corresponding DOM nodes that belong to that dehydrated view.\n */\nfunction removeDehydratedViews(lContainer) {\n  var _lContainer$DEHYDRATE;\n  const views = (_lContainer$DEHYDRATE = lContainer[DEHYDRATED_VIEWS]) !== null && _lContainer$DEHYDRATE !== void 0 ? _lContainer$DEHYDRATE : [];\n  const parentLView = lContainer[PARENT];\n  const renderer = parentLView[RENDERER];\n  for (const view of views) {\n    removeDehydratedView(view, renderer);\n    ngDevMode && ngDevMode.dehydratedViewsRemoved++;\n  }\n  // Reset the value to an empty array to indicate that no\n  // further processing of dehydrated views is needed for\n  // this view container (i.e. do not trigger the lookup process\n  // once again in case a `ViewContainerRef` is created later).\n  lContainer[DEHYDRATED_VIEWS] = EMPTY_ARRAY;\n}\n/**\n * Helper function to remove all nodes from a dehydrated view.\n */\nfunction removeDehydratedView(dehydratedView, renderer) {\n  let nodesRemoved = 0;\n  let currentRNode = dehydratedView.firstChild;\n  if (currentRNode) {\n    const numNodes = dehydratedView.data[NUM_ROOT_NODES];\n    while (nodesRemoved < numNodes) {\n      ngDevMode && validateSiblingNodeExists(currentRNode);\n      const nextSibling = currentRNode.nextSibling;\n      nativeRemoveNode(renderer, currentRNode, false);\n      currentRNode = nextSibling;\n      nodesRemoved++;\n    }\n  }\n}\n/**\n * Walks over all views within this LContainer invokes dehydrated views\n * cleanup function for each one.\n */\nfunction cleanupLContainer(lContainer) {\n  removeDehydratedViews(lContainer);\n  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n    cleanupLView(lContainer[i]);\n  }\n}\n/**\n * Walks over `LContainer`s and components registered within\n * this LView and invokes dehydrated views cleanup function for each one.\n */\nfunction cleanupLView(lView) {\n  const tView = lView[TVIEW];\n  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {\n    if (isLContainer(lView[i])) {\n      const lContainer = lView[i];\n      cleanupLContainer(lContainer);\n    } else if (isLView(lView[i])) {\n      // This is a component, enter the `cleanupLView` recursively.\n      cleanupLView(lView[i]);\n    }\n  }\n}\n/**\n * Walks over all views registered within the ApplicationRef and removes\n * all dehydrated views from all `LContainer`s along the way.\n */\nfunction cleanupDehydratedViews(appRef) {\n  const viewRefs = appRef._views;\n  for (const viewRef of viewRefs) {\n    const lNode = getLNodeForHydration(viewRef);\n    // An `lView` might be `null` if a `ViewRef` represents\n    // an embedded view (not a component view).\n    if (lNode !== null && lNode[HOST] !== null) {\n      if (isLView(lNode)) {\n        cleanupLView(lNode);\n      } else {\n        // Cleanup in the root component view\n        const componentLView = lNode[HOST];\n        cleanupLView(componentLView);\n        // Cleanup in all views within this view container\n        cleanupLContainer(lNode);\n      }\n      ngDevMode && ngDevMode.dehydratedViewsCleanupRuns++;\n    }\n  }\n}\n\n/**\n * Regexp that extracts a reference node information from the compressed node location.\n * The reference node is represented as either:\n *  - a number which points to an LView slot\n *  - the `b` char which indicates that the lookup should start from the `document.body`\n *  - the `h` char to start lookup from the component host node (`lView[HOST]`)\n */\nconst REF_EXTRACTOR_REGEXP = new RegExp(`^(\\\\d+)*(${REFERENCE_NODE_BODY}|${REFERENCE_NODE_HOST})*(.*)`);\n/**\n * Helper function that takes a reference node location and a set of navigation steps\n * (from the reference node) to a target node and outputs a string that represents\n * a location.\n *\n * For example, given: referenceNode = 'b' (body) and path = ['firstChild', 'firstChild',\n * 'nextSibling'], the function returns: `bf2n`.\n */\nfunction compressNodeLocation(referenceNode, path) {\n  const result = [referenceNode];\n  for (const segment of path) {\n    const lastIdx = result.length - 1;\n    if (lastIdx > 0 && result[lastIdx - 1] === segment) {\n      // An empty string in a count slot represents 1 occurrence of an instruction.\n      const value = result[lastIdx] || 1;\n      result[lastIdx] = value + 1;\n    } else {\n      // Adding a new segment to the path.\n      // Using an empty string in a counter field to avoid encoding `1`s\n      // into the path, since they are implicit (e.g. `f1n1` vs `fn`), so\n      // it's enough to have a single char in this case.\n      result.push(segment, '');\n    }\n  }\n  return result.join('');\n}\n/**\n * Helper function that reverts the `compressNodeLocation` and transforms a given\n * string into an array where at 0th position there is a reference node info and\n * after that it contains information (in pairs) about a navigation step and the\n * number of repetitions.\n *\n * For example, the path like 'bf2n' will be transformed to:\n * ['b', 'firstChild', 2, 'nextSibling', 1].\n *\n * This information is later consumed by the code that navigates the DOM to find\n * a given node by its location.\n */\nfunction decompressNodeLocation(path) {\n  const matches = path.match(REF_EXTRACTOR_REGEXP);\n  const [_, refNodeId, refNodeName, rest] = matches;\n  // If a reference node is represented by an index, transform it to a number.\n  const ref = refNodeId ? parseInt(refNodeId, 10) : refNodeName;\n  const steps = [];\n  // Match all segments in a path.\n  for (const [_, step, count] of rest.matchAll(/(f|n)(\\d*)/g)) {\n    const repeat = parseInt(count, 10) || 1;\n    steps.push(step, repeat);\n  }\n  return [ref, ...steps];\n}\n\n/** Whether current TNode is a first node in an <ng-container>. */\nfunction isFirstElementInNgContainer(tNode) {\n  var _tNode$parent;\n  return !tNode.prev && ((_tNode$parent = tNode.parent) === null || _tNode$parent === void 0 ? void 0 : _tNode$parent.type) === 8 /* TNodeType.ElementContainer */;\n}\n/** Returns an instruction index (subtracting HEADER_OFFSET). */\nfunction getNoOffsetIndex(tNode) {\n  return tNode.index - HEADER_OFFSET;\n}\n/**\n * Check whether a given node exists, but is disconnected from the DOM.\n *\n * Note: we leverage the fact that we have this information available in the DOM emulation\n * layer (in Domino) for now. Longer-term solution should not rely on the DOM emulation and\n * only use internal data structures and state to compute this information.\n */\nfunction isDisconnectedNode(tNode, lView) {\n  var _unwrapRNode;\n  return !(tNode.type & 16 /* TNodeType.Projection */) && !!lView[tNode.index] && !((_unwrapRNode = unwrapRNode(lView[tNode.index])) !== null && _unwrapRNode !== void 0 && _unwrapRNode.isConnected);\n}\n/**\n * Locate a node in DOM tree that corresponds to a given TNode.\n *\n * @param hydrationInfo The hydration annotation data\n * @param tView the current tView\n * @param lView the current lView\n * @param tNode the current tNode\n * @returns an RNode that represents a given tNode\n */\nfunction locateNextRNode(hydrationInfo, tView, lView, tNode) {\n  let native = null;\n  const noOffsetIndex = getNoOffsetIndex(tNode);\n  const nodes = hydrationInfo.data[NODES];\n  if (nodes !== null && nodes !== void 0 && nodes[noOffsetIndex]) {\n    // We know the exact location of the node.\n    native = locateRNodeByPath(nodes[noOffsetIndex], lView);\n  } else if (tView.firstChild === tNode) {\n    // We create a first node in this view, so we use a reference\n    // to the first child in this DOM segment.\n    native = hydrationInfo.firstChild;\n  } else {\n    var _tNode$prev;\n    // Locate a node based on a previous sibling or a parent node.\n    const previousTNodeParent = tNode.prev === null;\n    const previousTNode = (_tNode$prev = tNode.prev) !== null && _tNode$prev !== void 0 ? _tNode$prev : tNode.parent;\n    ngDevMode && assertDefined(previousTNode, 'Unexpected state: current TNode does not have a connection ' + 'to the previous node or a parent node.');\n    if (isFirstElementInNgContainer(tNode)) {\n      const noOffsetParentIndex = getNoOffsetIndex(tNode.parent);\n      native = getSegmentHead(hydrationInfo, noOffsetParentIndex);\n    } else {\n      let previousRElement = getNativeByTNode(previousTNode, lView);\n      if (previousTNodeParent) {\n        native = previousRElement.firstChild;\n      } else {\n        // If the previous node is an element, but it also has container info,\n        // this means that we are processing a node like `<div #vcrTarget>`, which is\n        // represented in the DOM as `<div></div>...<!--container-->`.\n        // In this case, there are nodes *after* this element and we need to skip\n        // all of them to reach an element that we are looking for.\n        const noOffsetPrevSiblingIndex = getNoOffsetIndex(previousTNode);\n        const segmentHead = getSegmentHead(hydrationInfo, noOffsetPrevSiblingIndex);\n        if (previousTNode.type === 2 /* TNodeType.Element */ && segmentHead) {\n          const numRootNodesToSkip = calcSerializedContainerSize(hydrationInfo, noOffsetPrevSiblingIndex);\n          // `+1` stands for an anchor comment node after all the views in this container.\n          const nodesToSkip = numRootNodesToSkip + 1;\n          // First node after this segment.\n          native = siblingAfter(nodesToSkip, segmentHead);\n        } else {\n          native = previousRElement.nextSibling;\n        }\n      }\n    }\n  }\n  return native;\n}\n/**\n * Skips over a specified number of nodes and returns the next sibling node after that.\n */\nfunction siblingAfter(skip, from) {\n  let currentNode = from;\n  for (let i = 0; i < skip; i++) {\n    ngDevMode && validateSiblingNodeExists(currentNode);\n    currentNode = currentNode.nextSibling;\n  }\n  return currentNode;\n}\n/**\n * Helper function to produce a string representation of the navigation steps\n * (in terms of `nextSibling` and `firstChild` navigations). Used in error\n * messages in dev mode.\n */\nfunction stringifyNavigationInstructions(instructions) {\n  const container = [];\n  for (let i = 0; i < instructions.length; i += 2) {\n    const step = instructions[i];\n    const repeat = instructions[i + 1];\n    for (let r = 0; r < repeat; r++) {\n      container.push(step === NodeNavigationStep.FirstChild ? 'firstChild' : 'nextSibling');\n    }\n  }\n  return container.join('.');\n}\n/**\n * Helper function that navigates from a starting point node (the `from` node)\n * using provided set of navigation instructions (within `path` argument).\n */\nfunction navigateToNode(from, instructions) {\n  let node = from;\n  for (let i = 0; i < instructions.length; i += 2) {\n    const step = instructions[i];\n    const repeat = instructions[i + 1];\n    for (let r = 0; r < repeat; r++) {\n      if (ngDevMode && !node) {\n        throw nodeNotFoundAtPathError(from, stringifyNavigationInstructions(instructions));\n      }\n      switch (step) {\n        case NodeNavigationStep.FirstChild:\n          node = node.firstChild;\n          break;\n        case NodeNavigationStep.NextSibling:\n          node = node.nextSibling;\n          break;\n      }\n    }\n  }\n  if (ngDevMode && !node) {\n    throw nodeNotFoundAtPathError(from, stringifyNavigationInstructions(instructions));\n  }\n  return node;\n}\n/**\n * Locates an RNode given a set of navigation instructions (which also contains\n * a starting point node info).\n */\nfunction locateRNodeByPath(path, lView) {\n  const [referenceNode, ...navigationInstructions] = decompressNodeLocation(path);\n  let ref;\n  if (referenceNode === REFERENCE_NODE_HOST) {\n    ref = lView[DECLARATION_COMPONENT_VIEW][HOST];\n  } else if (referenceNode === REFERENCE_NODE_BODY) {\n    ref = ɵɵresolveBody(lView[DECLARATION_COMPONENT_VIEW][HOST]);\n  } else {\n    const parentElementId = Number(referenceNode);\n    ref = unwrapRNode(lView[parentElementId + HEADER_OFFSET]);\n  }\n  return navigateToNode(ref, navigationInstructions);\n}\n/**\n * Generate a list of DOM navigation operations to get from node `start` to node `finish`.\n *\n * Note: assumes that node `start` occurs before node `finish` in an in-order traversal of the DOM\n * tree. That is, we should be able to get from `start` to `finish` purely by using `.firstChild`\n * and `.nextSibling` operations.\n */\nfunction navigateBetween(start, finish) {\n  if (start === finish) {\n    return [];\n  } else if (start.parentElement == null || finish.parentElement == null) {\n    return null;\n  } else if (start.parentElement === finish.parentElement) {\n    return navigateBetweenSiblings(start, finish);\n  } else {\n    // `finish` is a child of its parent, so the parent will always have a child.\n    const parent = finish.parentElement;\n    const parentPath = navigateBetween(start, parent);\n    const childPath = navigateBetween(parent.firstChild, finish);\n    if (!parentPath || !childPath) return null;\n    return [\n    // First navigate to `finish`'s parent\n    ...parentPath,\n    // Then to its first child.\n    NodeNavigationStep.FirstChild,\n    // And finally from that node to `finish` (maybe a no-op if we're already there).\n    ...childPath];\n  }\n}\n/**\n * Calculates a path between 2 sibling nodes (generates a number of `NextSibling` navigations).\n * Returns `null` if no such path exists between the given nodes.\n */\nfunction navigateBetweenSiblings(start, finish) {\n  const nav = [];\n  let node = null;\n  for (node = start; node != null && node !== finish; node = node.nextSibling) {\n    nav.push(NodeNavigationStep.NextSibling);\n  }\n  // If the `node` becomes `null` or `undefined` at the end, that means that we\n  // didn't find the `end` node, thus return `null` (which would trigger serialization\n  // error to be produced).\n  return node == null ? null : nav;\n}\n/**\n * Calculates a path between 2 nodes in terms of `nextSibling` and `firstChild`\n * navigations:\n * - the `from` node is a known node, used as an starting point for the lookup\n *   (the `fromNodeName` argument is a string representation of the node).\n * - the `to` node is a node that the runtime logic would be looking up,\n *   using the path generated by this function.\n */\nfunction calcPathBetween(from, to, fromNodeName) {\n  const path = navigateBetween(from, to);\n  return path === null ? null : compressNodeLocation(fromNodeName, path);\n}\n/**\n * Invoked at serialization time (on the server) when a set of navigation\n * instructions needs to be generated for a TNode.\n */\nfunction calcPathForNode(tNode, lView) {\n  let parentTNode = tNode.parent;\n  let parentIndex;\n  let parentRNode;\n  let referenceNodeName;\n  // Skip over all parent nodes that are disconnected from the DOM, such nodes\n  // can not be used as anchors.\n  //\n  // This might happen in certain content projection-based use-cases, where\n  // a content of an element is projected and used, when a parent element\n  // itself remains detached from DOM. In this scenario we try to find a parent\n  // element that is attached to DOM and can act as an anchor instead.\n  while (parentTNode !== null && isDisconnectedNode(parentTNode, lView)) {\n    parentTNode = parentTNode.parent;\n  }\n  if (parentTNode === null || !(parentTNode.type & 3 /* TNodeType.AnyRNode */)) {\n    // If there is no parent TNode or a parent TNode does not represent an RNode\n    // (i.e. not a DOM node), use component host element as a reference node.\n    parentIndex = referenceNodeName = REFERENCE_NODE_HOST;\n    parentRNode = lView[DECLARATION_COMPONENT_VIEW][HOST];\n  } else {\n    // Use parent TNode as a reference node.\n    parentIndex = parentTNode.index;\n    parentRNode = unwrapRNode(lView[parentIndex]);\n    referenceNodeName = renderStringify(parentIndex - HEADER_OFFSET);\n  }\n  let rNode = unwrapRNode(lView[tNode.index]);\n  if (tNode.type & 12 /* TNodeType.AnyContainer */) {\n    // For <ng-container> nodes, instead of serializing a reference\n    // to the anchor comment node, serialize a location of the first\n    // DOM element. Paired with the container size (serialized as a part\n    // of `ngh.containers`), it should give enough information for runtime\n    // to hydrate nodes in this container.\n    const firstRNode = getFirstNativeNode(lView, tNode);\n    // If container is not empty, use a reference to the first element,\n    // otherwise, rNode would point to an anchor comment node.\n    if (firstRNode) {\n      rNode = firstRNode;\n    }\n  }\n  let path = calcPathBetween(parentRNode, rNode, referenceNodeName);\n  if (path === null && parentRNode !== rNode) {\n    // Searching for a path between elements within a host node failed.\n    // Trying to find a path to an element starting from the `document.body` instead.\n    //\n    // Important note: this type of reference is relatively unstable, since Angular\n    // may not be able to control parts of the page that the runtime logic navigates\n    // through. This is mostly needed to cover \"portals\" use-case (like menus, dialog boxes,\n    // etc), where nodes are content-projected (including direct DOM manipulations) outside\n    // of the host node. The better solution is to provide APIs to work with \"portals\",\n    // at which point this code path would not be needed.\n    const body = parentRNode.ownerDocument.body;\n    path = calcPathBetween(body, rNode, REFERENCE_NODE_BODY);\n    if (path === null) {\n      // If the path is still empty, it's likely that this node is detached and\n      // won't be found during hydration.\n      throw nodeNotFoundError(lView, tNode);\n    }\n  }\n  return path;\n}\n\n/**\n * Given a current DOM node and a serialized information about the views\n * in a container, walks over the DOM structure, collecting the list of\n * dehydrated views.\n */\nfunction locateDehydratedViewsInContainer(currentRNode, serializedViews) {\n  const dehydratedViews = [];\n  for (const serializedView of serializedViews) {\n    // Repeats a view multiple times as needed, based on the serialized information\n    // (for example, for *ngFor-produced views).\n    for (let i = 0; i < ((_serializedView$MULTI = serializedView[MULTIPLIER]) !== null && _serializedView$MULTI !== void 0 ? _serializedView$MULTI : 1); i++) {\n      var _serializedView$MULTI;\n      const view = {\n        data: serializedView,\n        firstChild: null\n      };\n      if (serializedView[NUM_ROOT_NODES] > 0) {\n        // Keep reference to the first node in this view,\n        // so it can be accessed while invoking template instructions.\n        view.firstChild = currentRNode;\n        // Move over to the next node after this view, which can\n        // either be a first node of the next view or an anchor comment\n        // node after the last view in a container.\n        currentRNode = siblingAfter(serializedView[NUM_ROOT_NODES], currentRNode);\n      }\n      dehydratedViews.push(view);\n    }\n  }\n  return [currentRNode, dehydratedViews];\n}\n/**\n * Reference to a function that searches for a matching dehydrated views\n * stored on a given lContainer.\n * Returns `null` by default, when hydration is not enabled.\n */\nlet _findMatchingDehydratedViewImpl = (lContainer, template) => null;\n/**\n * Retrieves the next dehydrated view from the LContainer and verifies that\n * it matches a given template id (from the TView that was used to create this\n * instance of a view). If the id doesn't match, that means that we are in an\n * unexpected state and can not complete the reconciliation process. Thus,\n * all dehydrated views from this LContainer are removed (including corresponding\n * DOM nodes) and the rendering is performed as if there were no dehydrated views\n * in this container.\n */\nfunction findMatchingDehydratedViewImpl(lContainer, template) {\n  const views = lContainer[DEHYDRATED_VIEWS];\n  if (!template || views === null || views.length === 0) {\n    return null;\n  }\n  const view = views[0];\n  // Verify whether the first dehydrated view in the container matches\n  // the template id passed to this function (that originated from a TView\n  // that was used to create an instance of an embedded or component views.\n  if (view.data[TEMPLATE_ID] === template) {\n    // If the template id matches - extract the first view and return it.\n    return views.shift();\n  } else {\n    // Otherwise, we are at the state when reconciliation can not be completed,\n    // thus we remove all dehydrated views within this container (remove them\n    // from internal data structures as well as delete associated elements from\n    // the DOM tree).\n    removeDehydratedViews(lContainer);\n    return null;\n  }\n}\nfunction enableFindMatchingDehydratedViewImpl() {\n  _findMatchingDehydratedViewImpl = findMatchingDehydratedViewImpl;\n}\nfunction findMatchingDehydratedView(lContainer, template) {\n  return _findMatchingDehydratedViewImpl(lContainer, template);\n}\n\n/**\n * A type representing the live collection to be reconciled with any new (incoming) collection. This\n * is an adapter class that makes it possible to work with different internal data structures,\n * regardless of the actual values of the incoming collection.\n */\nclass LiveCollection {\n  destroy(item) {\n    // noop by default\n  }\n  updateValue(index, value) {\n    // noop by default\n  }\n  // operations below could be implemented on top of the operations defined so far, but having\n  // them explicitly allow clear expression of intent and potentially more performant\n  // implementations\n  swap(index1, index2) {\n    const startIdx = Math.min(index1, index2);\n    const endIdx = Math.max(index1, index2);\n    const endItem = this.detach(endIdx);\n    if (endIdx - startIdx > 1) {\n      const startItem = this.detach(startIdx);\n      this.attach(startIdx, endItem);\n      this.attach(endIdx, startItem);\n    } else {\n      this.attach(startIdx, endItem);\n    }\n  }\n  move(prevIndex, newIdx) {\n    this.attach(newIdx, this.detach(prevIndex));\n  }\n}\nfunction valuesMatching(liveIdx, liveValue, newIdx, newValue, trackBy) {\n  if (liveIdx === newIdx && Object.is(liveValue, newValue)) {\n    // matching and no value identity to update\n    return 1;\n  } else if (Object.is(trackBy(liveIdx, liveValue), trackBy(newIdx, newValue))) {\n    // matching but requires value identity update\n    return -1;\n  }\n  return 0;\n}\n/**\n * The live collection reconciliation algorithm that perform various in-place operations, so it\n * reflects the content of the new (incoming) collection.\n *\n * The reconciliation algorithm has 2 code paths:\n * - \"fast\" path that don't require any memory allocation;\n * - \"slow\" path that requires additional memory allocation for intermediate data structures used to\n * collect additional information about the live collection.\n * It might happen that the algorithm switches between the two modes in question in a single\n * reconciliation path - generally it tries to stay on the \"fast\" path as much as possible.\n *\n * The overall complexity of the algorithm is O(n + m) for speed and O(n) for memory (where n is the\n * length of the live collection and m is the length of the incoming collection). Given the problem\n * at hand the complexity / performance constraints makes it impossible to perform the absolute\n * minimum of operation to reconcile the 2 collections. The algorithm makes different tradeoffs to\n * stay within reasonable performance bounds and may apply sub-optimal number of operations in\n * certain situations.\n *\n * @param liveCollection the current, live collection;\n * @param newCollection the new, incoming collection;\n * @param trackByFn key generation function that determines equality between items in the life and\n *     incoming collection;\n */\nfunction reconcile(liveCollection, newCollection, trackByFn) {\n  var _detachedItems3;\n  let detachedItems = undefined;\n  let liveKeysInTheFuture = undefined;\n  let liveStartIdx = 0;\n  let liveEndIdx = liveCollection.length - 1;\n  if (Array.isArray(newCollection)) {\n    let newEndIdx = newCollection.length - 1;\n    while (liveStartIdx <= liveEndIdx && liveStartIdx <= newEndIdx) {\n      var _detachedItems, _liveKeysInTheFuture;\n      // compare from the beginning\n      const liveStartValue = liveCollection.at(liveStartIdx);\n      const newStartValue = newCollection[liveStartIdx];\n      const isStartMatching = valuesMatching(liveStartIdx, liveStartValue, liveStartIdx, newStartValue, trackByFn);\n      if (isStartMatching !== 0) {\n        if (isStartMatching < 0) {\n          liveCollection.updateValue(liveStartIdx, newStartValue);\n        }\n        liveStartIdx++;\n        continue;\n      }\n      // compare from the end\n      // TODO(perf): do _all_ the matching from the end\n      const liveEndValue = liveCollection.at(liveEndIdx);\n      const newEndValue = newCollection[newEndIdx];\n      const isEndMatching = valuesMatching(liveEndIdx, liveEndValue, newEndIdx, newEndValue, trackByFn);\n      if (isEndMatching !== 0) {\n        if (isEndMatching < 0) {\n          liveCollection.updateValue(liveEndIdx, newEndValue);\n        }\n        liveEndIdx--;\n        newEndIdx--;\n        continue;\n      }\n      // Detect swap and moves:\n      const liveStartKey = trackByFn(liveStartIdx, liveStartValue);\n      const liveEndKey = trackByFn(liveEndIdx, liveEndValue);\n      const newStartKey = trackByFn(liveStartIdx, newStartValue);\n      if (Object.is(newStartKey, liveEndKey)) {\n        const newEndKey = trackByFn(newEndIdx, newEndValue);\n        // detect swap on both ends;\n        if (Object.is(newEndKey, liveStartKey)) {\n          liveCollection.swap(liveStartIdx, liveEndIdx);\n          liveCollection.updateValue(liveEndIdx, newEndValue);\n          newEndIdx--;\n          liveEndIdx--;\n        } else {\n          // the new item is the same as the live item with the end pointer - this is a move forward\n          // to an earlier index;\n          liveCollection.move(liveEndIdx, liveStartIdx);\n        }\n        liveCollection.updateValue(liveStartIdx, newStartValue);\n        liveStartIdx++;\n        continue;\n      }\n      // Fallback to the slow path: we need to learn more about the content of the live and new\n      // collections.\n      (_detachedItems = detachedItems) !== null && _detachedItems !== void 0 ? _detachedItems : detachedItems = new UniqueValueMultiKeyMap();\n      (_liveKeysInTheFuture = liveKeysInTheFuture) !== null && _liveKeysInTheFuture !== void 0 ? _liveKeysInTheFuture : liveKeysInTheFuture = initLiveItemsInTheFuture(liveCollection, liveStartIdx, liveEndIdx, trackByFn);\n      // Check if I'm inserting a previously detached item: if so, attach it here\n      if (attachPreviouslyDetached(liveCollection, detachedItems, liveStartIdx, newStartKey)) {\n        liveCollection.updateValue(liveStartIdx, newStartValue);\n        liveStartIdx++;\n        liveEndIdx++;\n      } else if (!liveKeysInTheFuture.has(newStartKey)) {\n        // Check if we seen a new item that doesn't exist in the old collection and must be INSERTED\n        const newItem = liveCollection.create(liveStartIdx, newCollection[liveStartIdx]);\n        liveCollection.attach(liveStartIdx, newItem);\n        liveStartIdx++;\n        liveEndIdx++;\n      } else {\n        // We know that the new item exists later on in old collection but we don't know its index\n        // and as the consequence can't move it (don't know where to find it). Detach the old item,\n        // hoping that it unlocks the fast path again.\n        detachedItems.set(liveStartKey, liveCollection.detach(liveStartIdx));\n        liveEndIdx--;\n      }\n    }\n    // Final cleanup steps:\n    // - more items in the new collection => insert\n    while (liveStartIdx <= newEndIdx) {\n      createOrAttach(liveCollection, detachedItems, trackByFn, liveStartIdx, newCollection[liveStartIdx]);\n      liveStartIdx++;\n    }\n  } else if (newCollection != null) {\n    // iterable - immediately fallback to the slow path\n    const newCollectionIterator = newCollection[Symbol.iterator]();\n    let newIterationResult = newCollectionIterator.next();\n    while (!newIterationResult.done && liveStartIdx <= liveEndIdx) {\n      const liveValue = liveCollection.at(liveStartIdx);\n      const newValue = newIterationResult.value;\n      const isStartMatching = valuesMatching(liveStartIdx, liveValue, liveStartIdx, newValue, trackByFn);\n      if (isStartMatching !== 0) {\n        // found a match - move on, but update value\n        if (isStartMatching < 0) {\n          liveCollection.updateValue(liveStartIdx, newValue);\n        }\n        liveStartIdx++;\n        newIterationResult = newCollectionIterator.next();\n      } else {\n        var _detachedItems2, _liveKeysInTheFuture2;\n        (_detachedItems2 = detachedItems) !== null && _detachedItems2 !== void 0 ? _detachedItems2 : detachedItems = new UniqueValueMultiKeyMap();\n        (_liveKeysInTheFuture2 = liveKeysInTheFuture) !== null && _liveKeysInTheFuture2 !== void 0 ? _liveKeysInTheFuture2 : liveKeysInTheFuture = initLiveItemsInTheFuture(liveCollection, liveStartIdx, liveEndIdx, trackByFn);\n        // Check if I'm inserting a previously detached item: if so, attach it here\n        const newKey = trackByFn(liveStartIdx, newValue);\n        if (attachPreviouslyDetached(liveCollection, detachedItems, liveStartIdx, newKey)) {\n          liveCollection.updateValue(liveStartIdx, newValue);\n          liveStartIdx++;\n          liveEndIdx++;\n          newIterationResult = newCollectionIterator.next();\n        } else if (!liveKeysInTheFuture.has(newKey)) {\n          liveCollection.attach(liveStartIdx, liveCollection.create(liveStartIdx, newValue));\n          liveStartIdx++;\n          liveEndIdx++;\n          newIterationResult = newCollectionIterator.next();\n        } else {\n          // it is a move forward - detach the current item without advancing in collections\n          const liveKey = trackByFn(liveStartIdx, liveValue);\n          detachedItems.set(liveKey, liveCollection.detach(liveStartIdx));\n          liveEndIdx--;\n        }\n      }\n    }\n    // this is a new item as we run out of the items in the old collection - create or attach a\n    // previously detached one\n    while (!newIterationResult.done) {\n      createOrAttach(liveCollection, detachedItems, trackByFn, liveCollection.length, newIterationResult.value);\n      newIterationResult = newCollectionIterator.next();\n    }\n  }\n  // Cleanups common to the array and iterable:\n  // - more items in the live collection => delete starting from the end;\n  while (liveStartIdx <= liveEndIdx) {\n    liveCollection.destroy(liveCollection.detach(liveEndIdx--));\n  }\n  // - destroy items that were detached but never attached again.\n  (_detachedItems3 = detachedItems) === null || _detachedItems3 === void 0 || _detachedItems3.forEach(item => {\n    liveCollection.destroy(item);\n  });\n}\nfunction attachPreviouslyDetached(prevCollection, detachedItems, index, key) {\n  if (detachedItems !== undefined && detachedItems.has(key)) {\n    prevCollection.attach(index, detachedItems.get(key));\n    detachedItems.delete(key);\n    return true;\n  }\n  return false;\n}\nfunction createOrAttach(liveCollection, detachedItems, trackByFn, index, value) {\n  if (!attachPreviouslyDetached(liveCollection, detachedItems, index, trackByFn(index, value))) {\n    const newItem = liveCollection.create(index, value);\n    liveCollection.attach(index, newItem);\n  } else {\n    liveCollection.updateValue(index, value);\n  }\n}\nfunction initLiveItemsInTheFuture(liveCollection, start, end, trackByFn) {\n  const keys = new Set();\n  for (let i = start; i <= end; i++) {\n    keys.add(trackByFn(i, liveCollection.at(i)));\n  }\n  return keys;\n}\n/**\n * A specific, partial implementation of the Map interface with the following characteristics:\n * - allows multiple values for a given key;\n * - maintain FIFO order for multiple values corresponding to a given key;\n * - assumes that all values are unique.\n *\n * The implementation aims at having the minimal overhead for cases where keys are _not_ duplicated\n * (the most common case in the list reconciliation algorithm). To achieve this, the first value for\n * a given key is stored in a regular map. Then, when more values are set for a given key, we\n * maintain a form of linked list in a separate map. To maintain this linked list we assume that all\n * values (in the entire collection) are unique.\n */\nclass UniqueValueMultiKeyMap {\n  constructor() {\n    // A map from a key to the first value corresponding to this key.\n    this.kvMap = new Map();\n    // A map that acts as a linked list of values - each value maps to the next value in this \"linked\n    // list\" (this only works if values are unique). Allocated lazily to avoid memory consumption when\n    // there are no duplicated values.\n    this._vMap = undefined;\n  }\n  has(key) {\n    return this.kvMap.has(key);\n  }\n  delete(key) {\n    if (!this.has(key)) return false;\n    const value = this.kvMap.get(key);\n    if (this._vMap !== undefined && this._vMap.has(value)) {\n      this.kvMap.set(key, this._vMap.get(value));\n      this._vMap.delete(value);\n    } else {\n      this.kvMap.delete(key);\n    }\n    return true;\n  }\n  get(key) {\n    return this.kvMap.get(key);\n  }\n  set(key, value) {\n    if (this.kvMap.has(key)) {\n      let prevValue = this.kvMap.get(key);\n      ngDevMode && assertNotSame(prevValue, value, `Detected a duplicated value ${value} for the key ${key}`);\n      if (this._vMap === undefined) {\n        this._vMap = new Map();\n      }\n      const vMap = this._vMap;\n      while (vMap.has(prevValue)) {\n        prevValue = vMap.get(prevValue);\n      }\n      vMap.set(prevValue, value);\n    } else {\n      this.kvMap.set(key, value);\n    }\n  }\n  forEach(cb) {\n    for (let [key, value] of this.kvMap) {\n      cb(value, key);\n      if (this._vMap !== undefined) {\n        const vMap = this._vMap;\n        while (vMap.has(value)) {\n          value = vMap.get(value);\n          cb(value, key);\n        }\n      }\n    }\n  }\n}\nfunction createAndRenderEmbeddedLView(declarationLView, templateTNode, context, options) {\n  var _options$injector5, _options$dehydratedVi;\n  const embeddedTView = templateTNode.tView;\n  ngDevMode && assertDefined(embeddedTView, 'TView must be defined for a template node.');\n  ngDevMode && assertTNodeForLView(templateTNode, declarationLView);\n  // Embedded views follow the change detection strategy of the view they're declared in.\n  const isSignalView = declarationLView[FLAGS] & 4096 /* LViewFlags.SignalView */;\n  const viewFlags = isSignalView ? 4096 /* LViewFlags.SignalView */ : 16 /* LViewFlags.CheckAlways */;\n  const embeddedLView = createLView(declarationLView, embeddedTView, context, viewFlags, null, templateTNode, null, null, null, (_options$injector5 = options === null || options === void 0 ? void 0 : options.injector) !== null && _options$injector5 !== void 0 ? _options$injector5 : null, (_options$dehydratedVi = options === null || options === void 0 ? void 0 : options.dehydratedView) !== null && _options$dehydratedVi !== void 0 ? _options$dehydratedVi : null);\n  const declarationLContainer = declarationLView[templateTNode.index];\n  ngDevMode && assertLContainer(declarationLContainer);\n  embeddedLView[DECLARATION_LCONTAINER] = declarationLContainer;\n  const declarationViewLQueries = declarationLView[QUERIES];\n  if (declarationViewLQueries !== null) {\n    embeddedLView[QUERIES] = declarationViewLQueries.createEmbeddedView(embeddedTView);\n  }\n  // execute creation mode of a view\n  renderView(embeddedTView, embeddedLView, context);\n  return embeddedLView;\n}\nfunction getLViewFromLContainer(lContainer, index) {\n  const adjustedIndex = CONTAINER_HEADER_OFFSET + index;\n  // avoid reading past the array boundaries\n  if (adjustedIndex < lContainer.length) {\n    const lView = lContainer[adjustedIndex];\n    ngDevMode && assertLView(lView);\n    return lView;\n  }\n  return undefined;\n}\n/**\n * Returns whether an elements that belong to a view should be\n * inserted into the DOM. For client-only cases, DOM elements are\n * always inserted. For hydration cases, we check whether serialized\n * info is available for a view and the view is not in a \"skip hydration\"\n * block (in which case view contents was re-created, thus needing insertion).\n */\nfunction shouldAddViewToDom(tNode, dehydratedView) {\n  return !dehydratedView || dehydratedView.firstChild === null || hasInSkipHydrationBlockFlag(tNode);\n}\nfunction addLViewToLContainer(lContainer, lView, index, addToDOM = true) {\n  const tView = lView[TVIEW];\n  // Insert into the view tree so the new view can be change-detected\n  insertView(tView, lView, lContainer, index);\n  // Insert elements that belong to this view into the DOM tree\n  if (addToDOM) {\n    const beforeNode = getBeforeNodeForView(index, lContainer);\n    const renderer = lView[RENDERER];\n    const parentRNode = nativeParentNode(renderer, lContainer[NATIVE]);\n    if (parentRNode !== null) {\n      addViewToDOM(tView, lContainer[T_HOST], renderer, lView, parentRNode, beforeNode);\n    }\n  }\n  // When in hydration mode, reset the pointer to the first child in\n  // the dehydrated view. This indicates that the view was hydrated and\n  // further attaching/detaching should work with this view as normal.\n  const hydrationInfo = lView[HYDRATION];\n  if (hydrationInfo !== null && hydrationInfo.firstChild !== null) {\n    hydrationInfo.firstChild = null;\n  }\n}\nfunction removeLViewFromLContainer(lContainer, index) {\n  const lView = detachView(lContainer, index);\n  if (lView !== undefined) {\n    destroyLView(lView[TVIEW], lView);\n  }\n  return lView;\n}\n\n/**\n * Represents a container where one or more views can be attached to a component.\n *\n * Can contain *host views* (created by instantiating a\n * component with the `createComponent()` method), and *embedded views*\n * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).\n *\n * A view container instance can contain other view containers,\n * creating a [view hierarchy](guide/glossary#view-hierarchy).\n *\n * @usageNotes\n *\n * The example below demonstrates how the `createComponent` function can be used\n * to create an instance of a ComponentRef dynamically and attach it to an ApplicationRef,\n * so that it gets included into change detection cycles.\n *\n * Note: the example uses standalone components, but the function can also be used for\n * non-standalone components (declared in an NgModule) as well.\n *\n * ```typescript\n * @Component({\n *   standalone: true,\n *   selector: 'dynamic',\n *   template: `<span>This is a content of a dynamic component.</span>`,\n * })\n * class DynamicComponent {\n *   vcr = inject(ViewContainerRef);\n * }\n *\n * @Component({\n *   standalone: true,\n *   selector: 'app',\n *   template: `<main>Hi! This is the main content.</main>`,\n * })\n * class AppComponent {\n *   vcr = inject(ViewContainerRef);\n *\n *   ngAfterViewInit() {\n *     const compRef = this.vcr.createComponent(DynamicComponent);\n *     compRef.changeDetectorRef.detectChanges();\n *   }\n * }\n * ```\n *\n * @see {@link ComponentRef}\n * @see {@link EmbeddedViewRef}\n *\n * @publicApi\n */\nclass ViewContainerRef {}\n/**\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n * already exists, retrieves the existing ViewContainerRef.\n *\n * @returns The ViewContainerRef instance to use\n */\n_class14 = ViewContainerRef;\n/**\n * @internal\n * @nocollapse\n */\n_class14.__NG_ELEMENT_ID__ = injectViewContainerRef;\nfunction injectViewContainerRef() {\n  const previousTNode = getCurrentTNode();\n  return createContainerRef(previousTNode, getLView());\n}\nconst VE_ViewContainerRef = ViewContainerRef;\n// TODO(alxhub): cleaning up this indirection triggers a subtle bug in Closure in g3. Once the fix\n// for that lands, this can be cleaned up.\nconst R3ViewContainerRef = class ViewContainerRef extends VE_ViewContainerRef {\n  constructor(_lContainer, _hostTNode, _hostLView) {\n    super();\n    this._lContainer = _lContainer;\n    this._hostTNode = _hostTNode;\n    this._hostLView = _hostLView;\n  }\n  get element() {\n    return createElementRef(this._hostTNode, this._hostLView);\n  }\n  get injector() {\n    return new NodeInjector(this._hostTNode, this._hostLView);\n  }\n  /** @deprecated No replacement */\n  get parentInjector() {\n    const parentLocation = getParentInjectorLocation(this._hostTNode, this._hostLView);\n    if (hasParentInjector(parentLocation)) {\n      const parentView = getParentInjectorView(parentLocation, this._hostLView);\n      const injectorIndex = getParentInjectorIndex(parentLocation);\n      ngDevMode && assertNodeInjector(parentView, injectorIndex);\n      const parentTNode = parentView[TVIEW].data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */];\n      return new NodeInjector(parentTNode, parentView);\n    } else {\n      return new NodeInjector(null, this._hostLView);\n    }\n  }\n  clear() {\n    while (this.length > 0) {\n      this.remove(this.length - 1);\n    }\n  }\n  get(index) {\n    const viewRefs = getViewRefs(this._lContainer);\n    return viewRefs !== null && viewRefs[index] || null;\n  }\n  get length() {\n    return this._lContainer.length - CONTAINER_HEADER_OFFSET;\n  }\n  createEmbeddedView(templateRef, context, indexOrOptions) {\n    let index;\n    let injector;\n    if (typeof indexOrOptions === 'number') {\n      index = indexOrOptions;\n    } else if (indexOrOptions != null) {\n      index = indexOrOptions.index;\n      injector = indexOrOptions.injector;\n    }\n    const dehydratedView = findMatchingDehydratedView(this._lContainer, templateRef.ssrId);\n    const viewRef = templateRef.createEmbeddedViewImpl(context || {}, injector, dehydratedView);\n    this.insertImpl(viewRef, index, shouldAddViewToDom(this._hostTNode, dehydratedView));\n    return viewRef;\n  }\n  createComponent(componentFactoryOrType, indexOrOptions, injector, projectableNodes, environmentInjector) {\n    var _componentFactory$com, _componentDef$id, _dehydratedView$first;\n    const isComponentFactory = componentFactoryOrType && !isType(componentFactoryOrType);\n    let index;\n    // This function supports 2 signatures and we need to handle options correctly for both:\n    //   1. When first argument is a Component type. This signature also requires extra\n    //      options to be provided as object (more ergonomic option).\n    //   2. First argument is a Component factory. In this case extra options are represented as\n    //      positional arguments. This signature is less ergonomic and will be deprecated.\n    if (isComponentFactory) {\n      if (ngDevMode) {\n        assertEqual(typeof indexOrOptions !== 'object', true, 'It looks like Component factory was provided as the first argument ' + 'and an options object as the second argument. This combination of arguments ' + 'is incompatible. You can either change the first argument to provide Component ' + 'type or change the second argument to be a number (representing an index at ' + 'which to insert the new component\\'s host view into this container)');\n      }\n      index = indexOrOptions;\n    } else {\n      if (ngDevMode) {\n        assertDefined(getComponentDef(componentFactoryOrType), `Provided Component class doesn't contain Component definition. ` + `Please check whether provided class has @Component decorator.`);\n        assertEqual(typeof indexOrOptions !== 'number', true, 'It looks like Component type was provided as the first argument ' + 'and a number (representing an index at which to insert the new component\\'s ' + 'host view into this container as the second argument. This combination of arguments ' + 'is incompatible. Please use an object as the second argument instead.');\n      }\n      const options = indexOrOptions || {};\n      if (ngDevMode && options.environmentInjector && options.ngModuleRef) {\n        throwError(`Cannot pass both environmentInjector and ngModuleRef options to createComponent().`);\n      }\n      index = options.index;\n      injector = options.injector;\n      projectableNodes = options.projectableNodes;\n      environmentInjector = options.environmentInjector || options.ngModuleRef;\n    }\n    const componentFactory = isComponentFactory ? componentFactoryOrType : new ComponentFactory(getComponentDef(componentFactoryOrType));\n    const contextInjector = injector || this.parentInjector;\n    // If an `NgModuleRef` is not provided explicitly, try retrieving it from the DI tree.\n    if (!environmentInjector && componentFactory.ngModule == null) {\n      // For the `ComponentFactory` case, entering this logic is very unlikely, since we expect that\n      // an instance of a `ComponentFactory`, resolved via `ComponentFactoryResolver` would have an\n      // `ngModule` field. This is possible in some test scenarios and potentially in some JIT-based\n      // use-cases. For the `ComponentFactory` case we preserve backwards-compatibility and try\n      // using a provided injector first, then fall back to the parent injector of this\n      // `ViewContainerRef` instance.\n      //\n      // For the factory-less case, it's critical to establish a connection with the module\n      // injector tree (by retrieving an instance of an `NgModuleRef` and accessing its injector),\n      // so that a component can use DI tokens provided in MgModules. For this reason, we can not\n      // rely on the provided injector, since it might be detached from the DI tree (for example, if\n      // it was created via `Injector.create` without specifying a parent injector, or if an\n      // injector is retrieved from an `NgModuleRef` created via `createNgModule` using an\n      // NgModule outside of a module tree). Instead, we always use `ViewContainerRef`'s parent\n      // injector, which is normally connected to the DI tree, which includes module injector\n      // subtree.\n      const _injector = isComponentFactory ? contextInjector : this.parentInjector;\n      // DO NOT REFACTOR. The code here used to have a `injector.get(NgModuleRef, null) ||\n      // undefined` expression which seems to cause internal google apps to fail. This is documented\n      // in the following internal bug issue: go/b/142967802\n      const result = _injector.get(EnvironmentInjector, null);\n      if (result) {\n        environmentInjector = result;\n      }\n    }\n    const componentDef = getComponentDef((_componentFactory$com = componentFactory.componentType) !== null && _componentFactory$com !== void 0 ? _componentFactory$com : {});\n    const dehydratedView = findMatchingDehydratedView(this._lContainer, (_componentDef$id = componentDef === null || componentDef === void 0 ? void 0 : componentDef.id) !== null && _componentDef$id !== void 0 ? _componentDef$id : null);\n    const rNode = (_dehydratedView$first = dehydratedView === null || dehydratedView === void 0 ? void 0 : dehydratedView.firstChild) !== null && _dehydratedView$first !== void 0 ? _dehydratedView$first : null;\n    const componentRef = componentFactory.create(contextInjector, projectableNodes, rNode, environmentInjector);\n    this.insertImpl(componentRef.hostView, index, shouldAddViewToDom(this._hostTNode, dehydratedView));\n    return componentRef;\n  }\n  insert(viewRef, index) {\n    return this.insertImpl(viewRef, index, true);\n  }\n  insertImpl(viewRef, index, addToDOM) {\n    const lView = viewRef._lView;\n    if (ngDevMode && viewRef.destroyed) {\n      throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n    }\n    if (viewAttachedToContainer(lView)) {\n      // If view is already attached, detach it first so we clean up references appropriately.\n      const prevIdx = this.indexOf(viewRef);\n      // A view might be attached either to this or a different container. The `prevIdx` for\n      // those cases will be:\n      // equal to -1 for views attached to this ViewContainerRef\n      // >= 0 for views attached to a different ViewContainerRef\n      if (prevIdx !== -1) {\n        this.detach(prevIdx);\n      } else {\n        const prevLContainer = lView[PARENT];\n        ngDevMode && assertEqual(isLContainer(prevLContainer), true, 'An attached view should have its PARENT point to a container.');\n        // We need to re-create a R3ViewContainerRef instance since those are not stored on\n        // LView (nor anywhere else).\n        const prevVCRef = new R3ViewContainerRef(prevLContainer, prevLContainer[T_HOST], prevLContainer[PARENT]);\n        prevVCRef.detach(prevVCRef.indexOf(viewRef));\n      }\n    }\n    // Logical operation of adding `LView` to `LContainer`\n    const adjustedIdx = this._adjustIndex(index);\n    const lContainer = this._lContainer;\n    addLViewToLContainer(lContainer, lView, adjustedIdx, addToDOM);\n    viewRef.attachToViewContainerRef();\n    addToArray(getOrCreateViewRefs(lContainer), adjustedIdx, viewRef);\n    return viewRef;\n  }\n  move(viewRef, newIndex) {\n    if (ngDevMode && viewRef.destroyed) {\n      throw new Error('Cannot move a destroyed View in a ViewContainer!');\n    }\n    return this.insert(viewRef, newIndex);\n  }\n  indexOf(viewRef) {\n    const viewRefsArr = getViewRefs(this._lContainer);\n    return viewRefsArr !== null ? viewRefsArr.indexOf(viewRef) : -1;\n  }\n  remove(index) {\n    const adjustedIdx = this._adjustIndex(index, -1);\n    const detachedView = detachView(this._lContainer, adjustedIdx);\n    if (detachedView) {\n      // Before destroying the view, remove it from the container's array of `ViewRef`s.\n      // This ensures the view container length is updated before calling\n      // `destroyLView`, which could recursively call view container methods that\n      // rely on an accurate container length.\n      // (e.g. a method on this view container being called by a child directive's OnDestroy\n      // lifecycle hook)\n      removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx);\n      destroyLView(detachedView[TVIEW], detachedView);\n    }\n  }\n  detach(index) {\n    const adjustedIdx = this._adjustIndex(index, -1);\n    const view = detachView(this._lContainer, adjustedIdx);\n    const wasDetached = view && removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx) != null;\n    return wasDetached ? new ViewRef$1(view) : null;\n  }\n  _adjustIndex(index, shift = 0) {\n    if (index == null) {\n      return this.length + shift;\n    }\n    if (ngDevMode) {\n      assertGreaterThan(index, -1, `ViewRef index must be positive, got ${index}`);\n      // +1 because it's legal to insert at the end.\n      assertLessThan(index, this.length + 1 + shift, 'index');\n    }\n    return index;\n  }\n};\nfunction getViewRefs(lContainer) {\n  return lContainer[VIEW_REFS];\n}\nfunction getOrCreateViewRefs(lContainer) {\n  return lContainer[VIEW_REFS] || (lContainer[VIEW_REFS] = []);\n}\n/**\n * Creates a ViewContainerRef and stores it on the injector.\n *\n * @param hostTNode The node that is requesting a ViewContainerRef\n * @param hostLView The view to which the node belongs\n * @returns The ViewContainerRef instance to use\n */\nfunction createContainerRef(hostTNode, hostLView) {\n  ngDevMode && assertTNodeType(hostTNode, 12 /* TNodeType.AnyContainer */ | 3 /* TNodeType.AnyRNode */);\n  let lContainer;\n  const slotValue = hostLView[hostTNode.index];\n  if (isLContainer(slotValue)) {\n    // If the host is a container, we don't need to create a new LContainer\n    lContainer = slotValue;\n  } else {\n    // An LContainer anchor can not be `null`, but we set it here temporarily\n    // and update to the actual value later in this function (see\n    // `_locateOrCreateAnchorNode`).\n    lContainer = createLContainer(slotValue, hostLView, null, hostTNode);\n    hostLView[hostTNode.index] = lContainer;\n    addToViewTree(hostLView, lContainer);\n  }\n  _locateOrCreateAnchorNode(lContainer, hostLView, hostTNode, slotValue);\n  return new R3ViewContainerRef(lContainer, hostTNode, hostLView);\n}\n/**\n * Creates and inserts a comment node that acts as an anchor for a view container.\n *\n * If the host is a regular element, we have to insert a comment node manually which will\n * be used as an anchor when inserting elements. In this specific case we use low-level DOM\n * manipulation to insert it.\n */\nfunction insertAnchorNode(hostLView, hostTNode) {\n  const renderer = hostLView[RENDERER];\n  ngDevMode && ngDevMode.rendererCreateComment++;\n  const commentNode = renderer.createComment(ngDevMode ? 'container' : '');\n  const hostNative = getNativeByTNode(hostTNode, hostLView);\n  const parentOfHostNative = nativeParentNode(renderer, hostNative);\n  nativeInsertBefore(renderer, parentOfHostNative, commentNode, nativeNextSibling(renderer, hostNative), false);\n  return commentNode;\n}\nlet _locateOrCreateAnchorNode = createAnchorNode;\nlet _populateDehydratedViewsInLContainer = (lContainer, tNode, hostLView) => false; // noop by default\n/**\n * Looks up dehydrated views that belong to a given LContainer and populates\n * this information into the `LContainer[DEHYDRATED_VIEWS]` slot. When running\n * in client-only mode, this function is a noop.\n *\n * @param lContainer LContainer that should be populated.\n * @param tNode Corresponding TNode.\n * @param hostLView LView that hosts LContainer.\n * @returns a boolean flag that indicates whether a populating operation\n *   was successful. The operation might be unsuccessful in case is has completed\n *   previously, we are rendering in client-only mode or this content is located\n *   in a skip hydration section.\n */\nfunction populateDehydratedViewsInLContainer(lContainer, tNode, hostLView) {\n  return _populateDehydratedViewsInLContainer(lContainer, tNode, hostLView);\n}\n/**\n * Regular creation mode: an anchor is created and\n * assigned to the `lContainer[NATIVE]` slot.\n */\nfunction createAnchorNode(lContainer, hostLView, hostTNode, slotValue) {\n  // We already have a native element (anchor) set, return.\n  if (lContainer[NATIVE]) return;\n  let commentNode;\n  // If the host is an element container, the native host element is guaranteed to be a\n  // comment and we can reuse that comment as anchor element for the new LContainer.\n  // The comment node in question is already part of the DOM structure so we don't need to append\n  // it again.\n  if (hostTNode.type & 8 /* TNodeType.ElementContainer */) {\n    commentNode = unwrapRNode(slotValue);\n  } else {\n    commentNode = insertAnchorNode(hostLView, hostTNode);\n  }\n  lContainer[NATIVE] = commentNode;\n}\n/**\n * Hydration logic that looks up all dehydrated views in this container\n * and puts them into `lContainer[DEHYDRATED_VIEWS]` slot.\n *\n * @returns a boolean flag that indicates whether a populating operation\n *   was successful. The operation might be unsuccessful in case is has completed\n *   previously, we are rendering in client-only mode or this content is located\n *   in a skip hydration section.\n */\nfunction populateDehydratedViewsInLContainerImpl(lContainer, tNode, hostLView) {\n  var _hydrationInfo$data$C3;\n  // We already have a native element (anchor) set and the process\n  // of finding dehydrated views happened (so the `lContainer[DEHYDRATED_VIEWS]`\n  // is not null), exit early.\n  if (lContainer[NATIVE] && lContainer[DEHYDRATED_VIEWS]) {\n    return true;\n  }\n  const hydrationInfo = hostLView[HYDRATION];\n  const noOffsetIndex = tNode.index - HEADER_OFFSET;\n  const isNodeCreationMode = !hydrationInfo || isInSkipHydrationBlock(tNode) || isDisconnectedNode$1(hydrationInfo, noOffsetIndex);\n  // Regular creation mode.\n  if (isNodeCreationMode) {\n    return false;\n  }\n  // Hydration mode, looking up an anchor node and dehydrated views in DOM.\n  const currentRNode = getSegmentHead(hydrationInfo, noOffsetIndex);\n  const serializedViews = (_hydrationInfo$data$C3 = hydrationInfo.data[CONTAINERS]) === null || _hydrationInfo$data$C3 === void 0 ? void 0 : _hydrationInfo$data$C3[noOffsetIndex];\n  ngDevMode && assertDefined(serializedViews, 'Unexpected state: no hydration info available for a given TNode, ' + 'which represents a view container.');\n  const [commentNode, dehydratedViews] = locateDehydratedViewsInContainer(currentRNode, serializedViews);\n  if (ngDevMode) {\n    validateMatchingNode(commentNode, Node.COMMENT_NODE, null, hostLView, tNode, true);\n    // Do not throw in case this node is already claimed (thus `false` as a second\n    // argument). If this container is created based on an `<ng-template>`, the comment\n    // node would be already claimed from the `template` instruction. If an element acts\n    // as an anchor (e.g. <div #vcRef>), a separate comment node would be created/located,\n    // so we need to claim it here.\n    markRNodeAsClaimedByHydration(commentNode, false);\n  }\n  lContainer[NATIVE] = commentNode;\n  lContainer[DEHYDRATED_VIEWS] = dehydratedViews;\n  return true;\n}\nfunction locateOrCreateAnchorNode(lContainer, hostLView, hostTNode, slotValue) {\n  if (!_populateDehydratedViewsInLContainer(lContainer, hostTNode, hostLView)) {\n    // Populating dehydrated views operation returned `false`, which indicates\n    // that the logic was running in client-only mode, this an anchor comment\n    // node should be created for this container.\n    createAnchorNode(lContainer, hostLView, hostTNode, slotValue);\n  }\n}\nfunction enableLocateOrCreateContainerRefImpl() {\n  _locateOrCreateAnchorNode = locateOrCreateAnchorNode;\n  _populateDehydratedViewsInLContainer = populateDehydratedViewsInLContainerImpl;\n}\nfunction templateFirstCreatePass(index, tView, lView, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex) {\n  ngDevMode && assertFirstCreatePass(tView);\n  ngDevMode && ngDevMode.firstCreatePass++;\n  const tViewConsts = tView.consts;\n  // TODO(pk): refactor getOrCreateTNode to have the \"create\" only version\n  const tNode = getOrCreateTNode(tView, index, 4 /* TNodeType.Container */, tagName || null, getConstant(tViewConsts, attrsIndex));\n  resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex));\n  registerPostOrderHooks(tView, tNode);\n  const embeddedTView = tNode.tView = createTView(2 /* TViewType.Embedded */, tNode, templateFn, decls, vars, tView.directiveRegistry, tView.pipeRegistry, null, tView.schemas, tViewConsts, null /* ssrId */);\n  if (tView.queries !== null) {\n    tView.queries.template(tView, tNode);\n    embeddedTView.queries = tView.queries.embeddedTView(tNode);\n  }\n  return tNode;\n}\n/**\n * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.\n *\n * <ng-template #foo>\n *    <div></div>\n * </ng-template>\n *\n * @param index The index of the container in the data array\n * @param templateFn Inline template\n * @param decls The number of nodes, local refs, and pipes for this template\n * @param vars The number of bindings for this template\n * @param tagName The name of the container element, if applicable\n * @param attrsIndex Index of template attributes in the `consts` array.\n * @param localRefs Index of the local references in the `consts` array.\n * @param localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n *\n * @codeGenApi\n */\nfunction ɵɵtemplate(index, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex, localRefExtractor) {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = index + HEADER_OFFSET;\n  const tNode = tView.firstCreatePass ? templateFirstCreatePass(adjustedIndex, tView, lView, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];\n  setCurrentTNode(tNode, false);\n  const comment = _locateOrCreateContainerAnchor(tView, lView, tNode, index);\n  if (wasLastNodeCreated()) {\n    appendChild(tView, lView, comment, tNode);\n  }\n  attachPatchData(comment, lView);\n  const lContainer = createLContainer(comment, lView, comment, tNode);\n  lView[adjustedIndex] = lContainer;\n  addToViewTree(lView, lContainer);\n  // If hydration is enabled, looks up dehydrated views in the DOM\n  // using hydration annotation info and stores those views on LContainer.\n  // In client-only mode, this function is a noop.\n  populateDehydratedViewsInLContainer(lContainer, tNode, lView);\n  if (isDirectiveHost(tNode)) {\n    createDirectivesInstances(tView, lView, tNode);\n  }\n  if (localRefsIndex != null) {\n    saveResolvedLocalsInData(lView, tNode, localRefExtractor);\n  }\n  return ɵɵtemplate;\n}\nlet _locateOrCreateContainerAnchor = createContainerAnchorImpl;\n/**\n * Regular creation mode for LContainers and their anchor (comment) nodes.\n */\nfunction createContainerAnchorImpl(tView, lView, tNode, index) {\n  lastNodeWasCreated(true);\n  return lView[RENDERER].createComment(ngDevMode ? 'container' : '');\n}\n/**\n * Enables hydration code path (to lookup existing elements in DOM)\n * in addition to the regular creation mode for LContainers and their\n * anchor (comment) nodes.\n */\nfunction locateOrCreateContainerAnchorImpl(tView, lView, tNode, index) {\n  var _hydrationInfo$data$T, _hydrationInfo$data$T2;\n  const hydrationInfo = lView[HYDRATION];\n  const isNodeCreationMode = !hydrationInfo || isInSkipHydrationBlock$1() || isDisconnectedNode$1(hydrationInfo, index);\n  lastNodeWasCreated(isNodeCreationMode);\n  // Regular creation mode.\n  if (isNodeCreationMode) {\n    return createContainerAnchorImpl(tView, lView, tNode, index);\n  }\n  const ssrId = (_hydrationInfo$data$T = (_hydrationInfo$data$T2 = hydrationInfo.data[TEMPLATES]) === null || _hydrationInfo$data$T2 === void 0 ? void 0 : _hydrationInfo$data$T2[index]) !== null && _hydrationInfo$data$T !== void 0 ? _hydrationInfo$data$T : null;\n  // Apply `ssrId` value to the underlying TView if it was not previously set.\n  //\n  // There might be situations when the same component is present in a template\n  // multiple times and some instances are opted-out of using hydration via\n  // `ngSkipHydration` attribute. In this scenario, at the time a TView is created,\n  // the `ssrId` might be `null` (if the first component is opted-out of hydration).\n  // The code below makes sure that the `ssrId` is applied to the TView if it's still\n  // `null` and verifies we never try to override it with a different value.\n  if (ssrId !== null && tNode.tView !== null) {\n    if (tNode.tView.ssrId === null) {\n      tNode.tView.ssrId = ssrId;\n    } else {\n      ngDevMode && assertEqual(tNode.tView.ssrId, ssrId, 'Unexpected value of the `ssrId` for this TView');\n    }\n  }\n  // Hydration mode, looking up existing elements in DOM.\n  const currentRNode = locateNextRNode(hydrationInfo, tView, lView, tNode);\n  ngDevMode && validateNodeExists(currentRNode, lView, tNode);\n  setSegmentHead(hydrationInfo, index, currentRNode);\n  const viewContainerSize = calcSerializedContainerSize(hydrationInfo, index);\n  const comment = siblingAfter(viewContainerSize, currentRNode);\n  if (ngDevMode) {\n    validateMatchingNode(comment, Node.COMMENT_NODE, null, lView, tNode);\n    markRNodeAsClaimedByHydration(comment);\n  }\n  return comment;\n}\nfunction enableLocateOrCreateContainerAnchorImpl() {\n  _locateOrCreateContainerAnchor = locateOrCreateContainerAnchorImpl;\n}\n\n/**\n * The conditional instruction represents the basic building block on the runtime side to support\n * built-in \"if\" and \"switch\". On the high level this instruction is responsible for adding and\n * removing views selected by a conditional expression.\n *\n * @param containerIndex index of a container in a host view (indexed from HEADER_OFFSET) where\n *     conditional views should be inserted.\n * @param matchingTemplateIndex index of a template TNode representing a conditional view to be\n *     inserted; -1 represents a special case when there is no view to insert.\n * @codeGenApi\n */\nfunction ɵɵconditional(containerIndex, matchingTemplateIndex, value) {\n  performanceMarkFeature('NgControlFlow');\n  const hostLView = getLView();\n  const bindingIndex = nextBindingIndex();\n  const lContainer = getLContainer(hostLView, HEADER_OFFSET + containerIndex);\n  const viewInContainerIdx = 0;\n  if (bindingUpdated(hostLView, bindingIndex, matchingTemplateIndex)) {\n    const prevConsumer = setActiveConsumer$1(null);\n    try {\n      // The index of the view to show changed - remove the previously displayed one\n      // (it is a noop if there are no active views in a container).\n      removeLViewFromLContainer(lContainer, viewInContainerIdx);\n      // Index -1 is a special case where none of the conditions evaluates to\n      // a truthy value and as the consequence we've got no view to show.\n      if (matchingTemplateIndex !== -1) {\n        const templateTNode = getExistingTNode(hostLView[TVIEW], HEADER_OFFSET + matchingTemplateIndex);\n        const dehydratedView = findMatchingDehydratedView(lContainer, templateTNode.tView.ssrId);\n        const embeddedLView = createAndRenderEmbeddedLView(hostLView, templateTNode, value, {\n          dehydratedView\n        });\n        addLViewToLContainer(lContainer, embeddedLView, viewInContainerIdx, shouldAddViewToDom(templateTNode, dehydratedView));\n      }\n    } finally {\n      setActiveConsumer$1(prevConsumer);\n    }\n  } else {\n    // We might keep displaying the same template but the actual value of the expression could have\n    // changed - re-bind in context.\n    const lView = getLViewFromLContainer(lContainer, viewInContainerIdx);\n    if (lView !== undefined) {\n      lView[CONTEXT] = value;\n    }\n  }\n}\nclass RepeaterContext {\n  constructor(lContainer, $implicit, $index) {\n    this.lContainer = lContainer;\n    this.$implicit = $implicit;\n    this.$index = $index;\n  }\n  get $count() {\n    return this.lContainer.length - CONTAINER_HEADER_OFFSET;\n  }\n}\n/**\n * A built-in trackBy function used for situations where users specified collection index as a\n * tracking expression. Having this function body in the runtime avoids unnecessary code generation.\n *\n * @param index\n * @returns\n */\nfunction ɵɵrepeaterTrackByIndex(index) {\n  return index;\n}\n/**\n * A built-in trackBy function used for situations where users specified collection item reference\n * as a tracking expression. Having this function body in the runtime avoids unnecessary code\n * generation.\n *\n * @param index\n * @returns\n */\nfunction ɵɵrepeaterTrackByIdentity(_, value) {\n  return value;\n}\nclass RepeaterMetadata {\n  constructor(hasEmptyBlock, trackByFn, liveCollection) {\n    this.hasEmptyBlock = hasEmptyBlock;\n    this.trackByFn = trackByFn;\n    this.liveCollection = liveCollection;\n  }\n}\n/**\n * The repeaterCreate instruction runs in the creation part of the template pass and initializes\n * internal data structures required by the update pass of the built-in repeater logic. Repeater\n * metadata are allocated in the data part of LView with the following layout:\n * - LView[HEADER_OFFSET + index] - metadata\n * - LView[HEADER_OFFSET + index + 1] - reference to a template function rendering an item\n * - LView[HEADER_OFFSET + index + 2] - optional reference to a template function rendering an empty\n * block\n *\n * @param index Index at which to store the metadata of the repeater.\n * @param templateFn Reference to the template of the main repeater block.\n * @param decls The number of nodes, local refs, and pipes for the main block.\n * @param vars The number of bindings for the main block.\n * @param tagName The name of the container element, if applicable\n * @param attrsIndex Index of template attributes in the `consts` array.\n * @param trackByFn Reference to the tracking function.\n * @param trackByUsesComponentInstance Whether the tracking function has any references to the\n *  component instance. If it doesn't, we can avoid rebinding it.\n * @param emptyTemplateFn Reference to the template function of the empty block.\n * @param emptyDecls The number of nodes, local refs, and pipes for the empty block.\n * @param emptyVars The number of bindings for the empty block.\n *\n * @codeGenApi\n */\nfunction ɵɵrepeaterCreate(index, templateFn, decls, vars, tagName, attrsIndex, trackByFn, trackByUsesComponentInstance, emptyTemplateFn, emptyDecls, emptyVars) {\n  performanceMarkFeature('NgControlFlow');\n  const hasEmptyBlock = emptyTemplateFn !== undefined;\n  const hostLView = getLView();\n  const boundTrackBy = trackByUsesComponentInstance ?\n  // We only want to bind when necessary, because it produces a\n  // new function. For pure functions it's not necessary.\n  trackByFn.bind(hostLView[DECLARATION_COMPONENT_VIEW][CONTEXT]) : trackByFn;\n  const metadata = new RepeaterMetadata(hasEmptyBlock, boundTrackBy);\n  hostLView[HEADER_OFFSET + index] = metadata;\n  ɵɵtemplate(index + 1, templateFn, decls, vars, tagName, attrsIndex);\n  if (hasEmptyBlock) {\n    ngDevMode && assertDefined(emptyDecls, 'Missing number of declarations for the empty repeater block.');\n    ngDevMode && assertDefined(emptyVars, 'Missing number of bindings for the empty repeater block.');\n    ɵɵtemplate(index + 2, emptyTemplateFn, emptyDecls, emptyVars);\n  }\n}\nclass LiveCollectionLContainerImpl extends LiveCollection {\n  constructor(lContainer, hostLView, templateTNode) {\n    super();\n    this.lContainer = lContainer;\n    this.hostLView = hostLView;\n    this.templateTNode = templateTNode;\n    /**\n     Property indicating if indexes in the repeater context need to be updated following the live\n     collection changes. Index updates are necessary if and only if views are inserted / removed in\n     the middle of LContainer. Adds and removals at the end don't require index updates.\n    */\n    this.needsIndexUpdate = false;\n  }\n  get length() {\n    return this.lContainer.length - CONTAINER_HEADER_OFFSET;\n  }\n  at(index) {\n    return this.getLView(index)[CONTEXT].$implicit;\n  }\n  attach(index, lView) {\n    const dehydratedView = lView[HYDRATION];\n    this.needsIndexUpdate || (this.needsIndexUpdate = index !== this.length);\n    addLViewToLContainer(this.lContainer, lView, index, shouldAddViewToDom(this.templateTNode, dehydratedView));\n  }\n  detach(index) {\n    this.needsIndexUpdate || (this.needsIndexUpdate = index !== this.length - 1);\n    return detachExistingView(this.lContainer, index);\n  }\n  create(index, value) {\n    const dehydratedView = findMatchingDehydratedView(this.lContainer, this.templateTNode.tView.ssrId);\n    const embeddedLView = createAndRenderEmbeddedLView(this.hostLView, this.templateTNode, new RepeaterContext(this.lContainer, value, index), {\n      dehydratedView\n    });\n    return embeddedLView;\n  }\n  destroy(lView) {\n    destroyLView(lView[TVIEW], lView);\n  }\n  updateValue(index, value) {\n    this.getLView(index)[CONTEXT].$implicit = value;\n  }\n  reset() {\n    this.needsIndexUpdate = false;\n  }\n  updateIndexes() {\n    if (this.needsIndexUpdate) {\n      for (let i = 0; i < this.length; i++) {\n        this.getLView(i)[CONTEXT].$index = i;\n      }\n    }\n  }\n  getLView(index) {\n    return getExistingLViewFromLContainer(this.lContainer, index);\n  }\n}\n/**\n * The repeater instruction does update-time diffing of a provided collection (against the\n * collection seen previously) and maps changes in the collection to views structure (by adding,\n * removing or moving views as needed).\n * @param collection - the collection instance to be checked for changes\n * @codeGenApi\n */\nfunction ɵɵrepeater(collection) {\n  const prevConsumer = setActiveConsumer$1(null);\n  const metadataSlotIdx = getSelectedIndex();\n  try {\n    const hostLView = getLView();\n    const hostTView = hostLView[TVIEW];\n    const metadata = hostLView[metadataSlotIdx];\n    if (metadata.liveCollection === undefined) {\n      const containerIndex = metadataSlotIdx + 1;\n      const lContainer = getLContainer(hostLView, containerIndex);\n      const itemTemplateTNode = getExistingTNode(hostTView, containerIndex);\n      metadata.liveCollection = new LiveCollectionLContainerImpl(lContainer, hostLView, itemTemplateTNode);\n    } else {\n      metadata.liveCollection.reset();\n    }\n    const liveCollection = metadata.liveCollection;\n    reconcile(liveCollection, collection, metadata.trackByFn);\n    // moves in the container might caused context's index to get out of order, re-adjust if needed\n    liveCollection.updateIndexes();\n    // handle empty blocks\n    if (metadata.hasEmptyBlock) {\n      const bindingIndex = nextBindingIndex();\n      const isCollectionEmpty = liveCollection.length === 0;\n      if (bindingUpdated(hostLView, bindingIndex, isCollectionEmpty)) {\n        const emptyTemplateIndex = metadataSlotIdx + 2;\n        const lContainerForEmpty = getLContainer(hostLView, emptyTemplateIndex);\n        if (isCollectionEmpty) {\n          const emptyTemplateTNode = getExistingTNode(hostTView, emptyTemplateIndex);\n          const dehydratedView = findMatchingDehydratedView(lContainerForEmpty, emptyTemplateTNode.tView.ssrId);\n          const embeddedLView = createAndRenderEmbeddedLView(hostLView, emptyTemplateTNode, undefined, {\n            dehydratedView\n          });\n          addLViewToLContainer(lContainerForEmpty, embeddedLView, 0, shouldAddViewToDom(emptyTemplateTNode, dehydratedView));\n        } else {\n          removeLViewFromLContainer(lContainerForEmpty, 0);\n        }\n      }\n    }\n  } finally {\n    setActiveConsumer$1(prevConsumer);\n  }\n}\nfunction getLContainer(lView, index) {\n  const lContainer = lView[index];\n  ngDevMode && assertLContainer(lContainer);\n  return lContainer;\n}\nfunction detachExistingView(lContainer, index) {\n  const existingLView = detachView(lContainer, index);\n  ngDevMode && assertLView(existingLView);\n  return existingLView;\n}\nfunction getExistingLViewFromLContainer(lContainer, index) {\n  const existingLView = getLViewFromLContainer(lContainer, index);\n  ngDevMode && assertLView(existingLView);\n  return existingLView;\n}\nfunction getExistingTNode(tView, index) {\n  const tNode = getTNode(tView, index);\n  ngDevMode && assertTNode(tNode);\n  return tNode;\n}\n\n/**\n * Describes the state of defer block dependency loading.\n */\nvar DeferDependenciesLoadingState;\n(function (DeferDependenciesLoadingState) {\n  /** Initial state, dependency loading is not yet triggered */\n  DeferDependenciesLoadingState[DeferDependenciesLoadingState[\"NOT_STARTED\"] = 0] = \"NOT_STARTED\";\n  /** Dependency loading is in progress */\n  DeferDependenciesLoadingState[DeferDependenciesLoadingState[\"IN_PROGRESS\"] = 1] = \"IN_PROGRESS\";\n  /** Dependency loading has completed successfully */\n  DeferDependenciesLoadingState[DeferDependenciesLoadingState[\"COMPLETE\"] = 2] = \"COMPLETE\";\n  /** Dependency loading has failed */\n  DeferDependenciesLoadingState[DeferDependenciesLoadingState[\"FAILED\"] = 3] = \"FAILED\";\n})(DeferDependenciesLoadingState || (DeferDependenciesLoadingState = {}));\n/** Slot index where `minimum` parameter value is stored. */\nconst MINIMUM_SLOT = 0;\n/** Slot index where `after` parameter value is stored. */\nconst LOADING_AFTER_SLOT = 1;\n/**\n * Describes the current state of this defer block instance.\n *\n * @publicApi\n * @developerPreview\n */\nvar DeferBlockState;\n(function (DeferBlockState) {\n  /** The placeholder block content is rendered */\n  DeferBlockState[DeferBlockState[\"Placeholder\"] = 0] = \"Placeholder\";\n  /** The loading block content is rendered */\n  DeferBlockState[DeferBlockState[\"Loading\"] = 1] = \"Loading\";\n  /** The main content block content is rendered */\n  DeferBlockState[DeferBlockState[\"Complete\"] = 2] = \"Complete\";\n  /** The error block content is rendered */\n  DeferBlockState[DeferBlockState[\"Error\"] = 3] = \"Error\";\n})(DeferBlockState || (DeferBlockState = {}));\n/**\n * Describes the initial state of this defer block instance.\n *\n * Note: this state is internal only and *must* be represented\n * with a number lower than any value in the `DeferBlockState` enum.\n */\nvar DeferBlockInternalState;\n(function (DeferBlockInternalState) {\n  /** Initial state. Nothing is rendered yet. */\n  DeferBlockInternalState[DeferBlockInternalState[\"Initial\"] = -1] = \"Initial\";\n})(DeferBlockInternalState || (DeferBlockInternalState = {}));\nconst NEXT_DEFER_BLOCK_STATE = 0;\n// Note: it's *important* to keep the state in this slot, because this slot\n// is used by runtime logic to differentiate between LViews, LContainers and\n// other types (see `isLView` and `isLContainer` functions). In case of defer\n// blocks, this slot would always be a number.\nconst DEFER_BLOCK_STATE = 1;\nconst STATE_IS_FROZEN_UNTIL = 2;\nconst LOADING_AFTER_CLEANUP_FN = 3;\nconst TRIGGER_CLEANUP_FNS = 4;\nconst PREFETCH_TRIGGER_CLEANUP_FNS = 5;\n/**\n * Options for configuring defer blocks behavior.\n * @publicApi\n * @developerPreview\n */\nvar DeferBlockBehavior;\n(function (DeferBlockBehavior) {\n  /**\n   * Manual triggering mode for defer blocks. Provides control over when defer blocks render\n   * and which state they render. This is the default behavior in test environments.\n   */\n  DeferBlockBehavior[DeferBlockBehavior[\"Manual\"] = 0] = \"Manual\";\n  /**\n   * Playthrough mode for defer blocks. This mode behaves like defer blocks would in a browser.\n   */\n  DeferBlockBehavior[DeferBlockBehavior[\"Playthrough\"] = 1] = \"Playthrough\";\n})(DeferBlockBehavior || (DeferBlockBehavior = {}));\n\n/*!\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Registers a cleanup function associated with a prefetching trigger\n * or a regular trigger of a defer block.\n */\nfunction storeTriggerCleanupFn(type, lDetails, cleanupFn) {\n  const key = type === 1 /* TriggerType.Prefetch */ ? PREFETCH_TRIGGER_CLEANUP_FNS : TRIGGER_CLEANUP_FNS;\n  if (lDetails[key] === null) {\n    lDetails[key] = [];\n  }\n  lDetails[key].push(cleanupFn);\n}\n/**\n * Invokes registered cleanup functions either for prefetch or for regular triggers.\n */\nfunction invokeTriggerCleanupFns(type, lDetails) {\n  const key = type === 1 /* TriggerType.Prefetch */ ? PREFETCH_TRIGGER_CLEANUP_FNS : TRIGGER_CLEANUP_FNS;\n  const cleanupFns = lDetails[key];\n  if (cleanupFns !== null) {\n    for (const cleanupFn of cleanupFns) {\n      cleanupFn();\n    }\n    lDetails[key] = null;\n  }\n}\n/**\n * Invokes registered cleanup functions for both prefetch and regular triggers.\n */\nfunction invokeAllTriggerCleanupFns(lDetails) {\n  invokeTriggerCleanupFns(1 /* TriggerType.Prefetch */, lDetails);\n  invokeTriggerCleanupFns(0 /* TriggerType.Regular */, lDetails);\n}\n\n// Public API for Zone\n\n/**\n * Calculates a data slot index for defer block info (either static or\n * instance-specific), given an index of a defer instruction.\n */\nfunction getDeferBlockDataIndex(deferBlockIndex) {\n  // Instance state is located at the *next* position\n  // after the defer block slot in an LView or TView.data.\n  return deferBlockIndex + 1;\n}\n/** Retrieves a defer block state from an LView, given a TNode that represents a block. */\nfunction getLDeferBlockDetails(lView, tNode) {\n  const tView = lView[TVIEW];\n  const slotIndex = getDeferBlockDataIndex(tNode.index);\n  ngDevMode && assertIndexInDeclRange(tView, slotIndex);\n  return lView[slotIndex];\n}\n/** Stores a defer block instance state in LView. */\nfunction setLDeferBlockDetails(lView, deferBlockIndex, lDetails) {\n  const tView = lView[TVIEW];\n  const slotIndex = getDeferBlockDataIndex(deferBlockIndex);\n  ngDevMode && assertIndexInDeclRange(tView, slotIndex);\n  lView[slotIndex] = lDetails;\n}\n/** Retrieves static info about a defer block, given a TView and a TNode that represents a block. */\nfunction getTDeferBlockDetails(tView, tNode) {\n  const slotIndex = getDeferBlockDataIndex(tNode.index);\n  ngDevMode && assertIndexInDeclRange(tView, slotIndex);\n  return tView.data[slotIndex];\n}\n/** Stores a defer block static info in `TView.data`. */\nfunction setTDeferBlockDetails(tView, deferBlockIndex, deferBlockConfig) {\n  const slotIndex = getDeferBlockDataIndex(deferBlockIndex);\n  ngDevMode && assertIndexInDeclRange(tView, slotIndex);\n  tView.data[slotIndex] = deferBlockConfig;\n}\nfunction getTemplateIndexForState(newState, hostLView, tNode) {\n  const tView = hostLView[TVIEW];\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n  switch (newState) {\n    case DeferBlockState.Complete:\n      return tDetails.primaryTmplIndex;\n    case DeferBlockState.Loading:\n      return tDetails.loadingTmplIndex;\n    case DeferBlockState.Error:\n      return tDetails.errorTmplIndex;\n    case DeferBlockState.Placeholder:\n      return tDetails.placeholderTmplIndex;\n    default:\n      ngDevMode && throwError(`Unexpected defer block state: ${newState}`);\n      return null;\n  }\n}\n/**\n * Returns a minimum amount of time that a given state should be rendered for,\n * taking into account `minimum` parameter value. If the `minimum` value is\n * not specified - returns `null`.\n */\nfunction getMinimumDurationForState(tDetails, currentState) {\n  if (currentState === DeferBlockState.Placeholder) {\n    var _tDetails$placeholder, _tDetails$placeholder2;\n    return (_tDetails$placeholder = (_tDetails$placeholder2 = tDetails.placeholderBlockConfig) === null || _tDetails$placeholder2 === void 0 ? void 0 : _tDetails$placeholder2[MINIMUM_SLOT]) !== null && _tDetails$placeholder !== void 0 ? _tDetails$placeholder : null;\n  } else if (currentState === DeferBlockState.Loading) {\n    var _tDetails$loadingBloc, _tDetails$loadingBloc2;\n    return (_tDetails$loadingBloc = (_tDetails$loadingBloc2 = tDetails.loadingBlockConfig) === null || _tDetails$loadingBloc2 === void 0 ? void 0 : _tDetails$loadingBloc2[MINIMUM_SLOT]) !== null && _tDetails$loadingBloc !== void 0 ? _tDetails$loadingBloc : null;\n  }\n  return null;\n}\n/** Retrieves the value of the `after` parameter on the @loading block. */\nfunction getLoadingBlockAfter(tDetails) {\n  var _tDetails$loadingBloc3, _tDetails$loadingBloc4;\n  return (_tDetails$loadingBloc3 = (_tDetails$loadingBloc4 = tDetails.loadingBlockConfig) === null || _tDetails$loadingBloc4 === void 0 ? void 0 : _tDetails$loadingBloc4[LOADING_AFTER_SLOT]) !== null && _tDetails$loadingBloc3 !== void 0 ? _tDetails$loadingBloc3 : null;\n}\n/**\n * Adds downloaded dependencies into a directive or a pipe registry,\n * making sure that a dependency doesn't yet exist in the registry.\n */\nfunction addDepsToRegistry(currentDeps, newDeps) {\n  if (!currentDeps || currentDeps.length === 0) {\n    return newDeps;\n  }\n  const currentDepSet = new Set(currentDeps);\n  for (const dep of newDeps) {\n    currentDepSet.add(dep);\n  }\n  // If `currentDeps` is the same length, there were no new deps and can\n  // return the original array.\n  return currentDeps.length === currentDepSet.size ? currentDeps : Array.from(currentDepSet);\n}\n/** Retrieves a TNode that represents main content of a defer block. */\nfunction getPrimaryBlockTNode(tView, tDetails) {\n  const adjustedIndex = tDetails.primaryTmplIndex + HEADER_OFFSET;\n  return getTNode(tView, adjustedIndex);\n}\n/**\n * Asserts whether all dependencies for a defer block are loaded.\n * Always run this function (in dev mode) before rendering a defer\n * block in completed state.\n */\nfunction assertDeferredDependenciesLoaded(tDetails) {\n  assertEqual(tDetails.loadingState, DeferDependenciesLoadingState.COMPLETE, 'Expecting all deferred dependencies to be loaded.');\n}\n/**\n * Determines if a given value matches the expected structure of a defer block\n *\n * We can safely rely on the primaryTmplIndex because every defer block requires\n * that a primary template exists. All the other template options are optional.\n */\nfunction isTDeferBlockDetails(value) {\n  return value !== null && typeof value === 'object' && typeof value.primaryTmplIndex === 'number';\n}\n\n/*!\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Configuration object used to register passive and capturing events. */\nconst eventListenerOptions = {\n  passive: true,\n  capture: true\n};\n/** Keeps track of the currently-registered `on hover` triggers. */\nconst hoverTriggers = new WeakMap();\n/** Keeps track of the currently-registered `on interaction` triggers. */\nconst interactionTriggers = new WeakMap();\n/** Currently-registered `viewport` triggers. */\nconst viewportTriggers = new WeakMap();\n/** Names of the events considered as interaction events. */\nconst interactionEventNames = ['click', 'keydown'];\n/** Names of the events considered as hover events. */\nconst hoverEventNames = ['mouseenter', 'focusin'];\n/** `IntersectionObserver` used to observe `viewport` triggers. */\nlet intersectionObserver = null;\n/** Number of elements currently observed with `viewport` triggers. */\nlet observedViewportElements = 0;\n/** Object keeping track of registered callbacks for a deferred block trigger. */\nclass DeferEventEntry {\n  constructor() {\n    this.callbacks = new Set();\n    this.listener = () => {\n      for (const callback of this.callbacks) {\n        callback();\n      }\n    };\n  }\n}\n/**\n * Registers an interaction trigger.\n * @param trigger Element that is the trigger.\n * @param callback Callback to be invoked when the trigger is interacted with.\n */\nfunction onInteraction(trigger, callback) {\n  let entry = interactionTriggers.get(trigger);\n  // If this is the first entry for this element, add the listeners.\n  if (!entry) {\n    // Note that managing events centrally like this lends itself well to using global\n    // event delegation. It currently does delegation at the element level, rather than the\n    // document level, because:\n    // 1. Global delegation is the most effective when there are a lot of events being registered\n    // at the same time. Deferred blocks are unlikely to be used in such a way.\n    // 2. Matching events to their target isn't free. For each `click` and `keydown` event we\n    // would have look through all the triggers and check if the target either is the element\n    // itself or it's contained within the element. Given that `click` and `keydown` are some\n    // of the most common events, this may end up introducing a lot of runtime overhead.\n    // 3. We're still registering only two events per element, no matter how many deferred blocks\n    // are referencing it.\n    entry = new DeferEventEntry();\n    interactionTriggers.set(trigger, entry);\n    // Ensure that the handler runs in the NgZone\n    ngDevMode && NgZone.assertInAngularZone();\n    for (const name of interactionEventNames) {\n      trigger.addEventListener(name, entry.listener, eventListenerOptions);\n    }\n  }\n  entry.callbacks.add(callback);\n  return () => {\n    const {\n      callbacks,\n      listener\n    } = entry;\n    callbacks.delete(callback);\n    if (callbacks.size === 0) {\n      interactionTriggers.delete(trigger);\n      for (const name of interactionEventNames) {\n        trigger.removeEventListener(name, listener, eventListenerOptions);\n      }\n    }\n  };\n}\n/**\n * Registers a hover trigger.\n * @param trigger Element that is the trigger.\n * @param callback Callback to be invoked when the trigger is hovered over.\n */\nfunction onHover(trigger, callback) {\n  let entry = hoverTriggers.get(trigger);\n  // If this is the first entry for this element, add the listener.\n  if (!entry) {\n    entry = new DeferEventEntry();\n    hoverTriggers.set(trigger, entry);\n    // Ensure that the handler runs in the NgZone\n    ngDevMode && NgZone.assertInAngularZone();\n    for (const name of hoverEventNames) {\n      trigger.addEventListener(name, entry.listener, eventListenerOptions);\n    }\n  }\n  entry.callbacks.add(callback);\n  return () => {\n    const {\n      callbacks,\n      listener\n    } = entry;\n    callbacks.delete(callback);\n    if (callbacks.size === 0) {\n      for (const name of hoverEventNames) {\n        trigger.removeEventListener(name, listener, eventListenerOptions);\n      }\n      hoverTriggers.delete(trigger);\n    }\n  };\n}\n/**\n * Registers a viewport trigger.\n * @param trigger Element that is the trigger.\n * @param callback Callback to be invoked when the trigger comes into the viewport.\n * @param injector Injector that can be used by the trigger to resolve DI tokens.\n */\nfunction onViewport(trigger, callback, injector) {\n  const ngZone = injector.get(NgZone);\n  let entry = viewportTriggers.get(trigger);\n  intersectionObserver = intersectionObserver || ngZone.runOutsideAngular(() => {\n    return new IntersectionObserver(entries => {\n      for (const current of entries) {\n        // Only invoke the callbacks if the specific element is intersecting.\n        if (current.isIntersecting && viewportTriggers.has(current.target)) {\n          ngZone.run(viewportTriggers.get(current.target).listener);\n        }\n      }\n    });\n  });\n  if (!entry) {\n    entry = new DeferEventEntry();\n    ngZone.runOutsideAngular(() => intersectionObserver.observe(trigger));\n    viewportTriggers.set(trigger, entry);\n    observedViewportElements++;\n  }\n  entry.callbacks.add(callback);\n  return () => {\n    // It's possible that a different cleanup callback fully removed this element already.\n    if (!viewportTriggers.has(trigger)) {\n      return;\n    }\n    entry.callbacks.delete(callback);\n    if (entry.callbacks.size === 0) {\n      var _intersectionObserver;\n      (_intersectionObserver = intersectionObserver) === null || _intersectionObserver === void 0 || _intersectionObserver.unobserve(trigger);\n      viewportTriggers.delete(trigger);\n      observedViewportElements--;\n    }\n    if (observedViewportElements === 0) {\n      var _intersectionObserver2;\n      (_intersectionObserver2 = intersectionObserver) === null || _intersectionObserver2 === void 0 || _intersectionObserver2.disconnect();\n      intersectionObserver = null;\n    }\n  };\n}\n/**\n * Helper function to get the LView in which a deferred block's trigger is rendered.\n * @param deferredHostLView LView in which the deferred block is defined.\n * @param deferredTNode TNode defining the deferred block.\n * @param walkUpTimes Number of times to go up in the view hierarchy to find the trigger's view.\n *   A negative value means that the trigger is inside the block's placeholder, while an undefined\n *   value means that the trigger is in the same LView as the deferred block.\n */\nfunction getTriggerLView(deferredHostLView, deferredTNode, walkUpTimes) {\n  var _deferredContainer$CO;\n  // The trigger is in the same view, we don't need to traverse.\n  if (walkUpTimes == null) {\n    return deferredHostLView;\n  }\n  // A positive value or zero means that the trigger is in a parent view.\n  if (walkUpTimes >= 0) {\n    return walkUpViews(walkUpTimes, deferredHostLView);\n  }\n  // If the value is negative, it means that the trigger is inside the placeholder.\n  const deferredContainer = deferredHostLView[deferredTNode.index];\n  ngDevMode && assertLContainer(deferredContainer);\n  const triggerLView = (_deferredContainer$CO = deferredContainer[CONTAINER_HEADER_OFFSET]) !== null && _deferredContainer$CO !== void 0 ? _deferredContainer$CO : null;\n  // We need to null check, because the placeholder might not have been rendered yet.\n  if (ngDevMode && triggerLView !== null) {\n    const lDetails = getLDeferBlockDetails(deferredHostLView, deferredTNode);\n    const renderedState = lDetails[DEFER_BLOCK_STATE];\n    assertEqual(renderedState, DeferBlockState.Placeholder, 'Expected a placeholder to be rendered in this defer block.');\n    assertLView(triggerLView);\n  }\n  return triggerLView;\n}\n/**\n * Gets the element that a deferred block's trigger is pointing to.\n * @param triggerLView LView in which the trigger is defined.\n * @param triggerIndex Index at which the trigger element should've been rendered.\n */\nfunction getTriggerElement(triggerLView, triggerIndex) {\n  const element = getNativeByIndex(HEADER_OFFSET + triggerIndex, triggerLView);\n  ngDevMode && assertElement(element);\n  return element;\n}\n/**\n * Registers a DOM-node based trigger.\n * @param initialLView LView in which the defer block is rendered.\n * @param tNode TNode representing the defer block.\n * @param triggerIndex Index at which to find the trigger element.\n * @param walkUpTimes Number of times to go up/down in the view hierarchy to find the trigger.\n * @param registerFn Function that will register the DOM events.\n * @param callback Callback to be invoked when the trigger receives the event that should render\n *     the deferred block.\n * @param type Trigger type to distinguish between regular and prefetch triggers.\n */\nfunction registerDomTrigger(initialLView, tNode, triggerIndex, walkUpTimes, registerFn, callback, type) {\n  const injector = initialLView[INJECTOR$1];\n  function pollDomTrigger() {\n    // If the initial view was destroyed, we don't need to do anything.\n    if (isDestroyed(initialLView)) {\n      return;\n    }\n    const lDetails = getLDeferBlockDetails(initialLView, tNode);\n    const renderedState = lDetails[DEFER_BLOCK_STATE];\n    // If the block was loaded before the trigger was resolved, we don't need to do anything.\n    if (renderedState !== DeferBlockInternalState.Initial && renderedState !== DeferBlockState.Placeholder) {\n      return;\n    }\n    const triggerLView = getTriggerLView(initialLView, tNode, walkUpTimes);\n    // Keep polling until we resolve the trigger's LView.\n    if (!triggerLView) {\n      internalAfterNextRender(pollDomTrigger, {\n        injector\n      });\n      return;\n    }\n    // It's possible that the trigger's view was destroyed before we resolved the trigger element.\n    if (isDestroyed(triggerLView)) {\n      return;\n    }\n    const element = getTriggerElement(triggerLView, triggerIndex);\n    const cleanup = registerFn(element, () => {\n      if (initialLView !== triggerLView) {\n        removeLViewOnDestroy(triggerLView, cleanup);\n      }\n      callback();\n    }, injector);\n    // The trigger and deferred block might be in different LViews.\n    // For the main LView the cleanup would happen as a part of\n    // `storeTriggerCleanupFn` logic. For trigger LView we register\n    // a cleanup function there to remove event handlers in case an\n    // LView gets destroyed before a trigger is invoked.\n    if (initialLView !== triggerLView) {\n      storeLViewOnDestroy(triggerLView, cleanup);\n    }\n    storeTriggerCleanupFn(type, lDetails, cleanup);\n  }\n  // Begin polling for the trigger.\n  internalAfterNextRender(pollDomTrigger, {\n    injector\n  });\n}\n\n/**\n * Helper function to schedule a callback to be invoked when a browser becomes idle.\n *\n * @param callback A function to be invoked when a browser becomes idle.\n * @param lView LView that hosts an instance of a defer block.\n */\nfunction onIdle(callback, lView) {\n  const injector = lView[INJECTOR$1];\n  const scheduler = injector.get(IdleScheduler);\n  const cleanupFn = () => scheduler.remove(callback);\n  scheduler.add(callback);\n  return cleanupFn;\n}\n/**\n * Use shims for the `requestIdleCallback` and `cancelIdleCallback` functions for\n * environments where those functions are not available (e.g. Node.js and Safari).\n *\n * Note: we wrap the `requestIdleCallback` call into a function, so that it can be\n * overridden/mocked in test environment and picked up by the runtime code.\n */\nconst _requestIdleCallback = () => typeof requestIdleCallback !== 'undefined' ? requestIdleCallback : setTimeout;\nconst _cancelIdleCallback = () => typeof requestIdleCallback !== 'undefined' ? cancelIdleCallback : clearTimeout;\n/**\n * Helper service to schedule `requestIdleCallback`s for batches of defer blocks,\n * to avoid calling `requestIdleCallback` for each defer block (e.g. if\n * defer blocks are defined inside a for loop).\n */\nclass IdleScheduler {\n  constructor() {\n    // Indicates whether current callbacks are being invoked.\n    this.executingCallbacks = false;\n    // Currently scheduled idle callback id.\n    this.idleId = null;\n    // Set of callbacks to be invoked next.\n    this.current = new Set();\n    // Set of callbacks collected while invoking current set of callbacks.\n    // Those callbacks are scheduled for the next idle period.\n    this.deferred = new Set();\n    this.ngZone = inject(NgZone);\n    this.requestIdleCallbackFn = _requestIdleCallback().bind(globalThis);\n    this.cancelIdleCallbackFn = _cancelIdleCallback().bind(globalThis);\n  }\n  add(callback) {\n    const target = this.executingCallbacks ? this.deferred : this.current;\n    target.add(callback);\n    if (this.idleId === null) {\n      this.scheduleIdleCallback();\n    }\n  }\n  remove(callback) {\n    const {\n      current,\n      deferred\n    } = this;\n    current.delete(callback);\n    deferred.delete(callback);\n    // If the last callback was removed and there is a pending\n    // idle callback - cancel it.\n    if (current.size === 0 && deferred.size === 0) {\n      this.cancelIdleCallback();\n    }\n  }\n  scheduleIdleCallback() {\n    const callback = () => {\n      this.cancelIdleCallback();\n      this.executingCallbacks = true;\n      for (const callback of this.current) {\n        callback();\n      }\n      this.current.clear();\n      this.executingCallbacks = false;\n      // If there are any callbacks added during an invocation\n      // of the current ones - make them \"current\" and schedule\n      // a new idle callback.\n      if (this.deferred.size > 0) {\n        for (const callback of this.deferred) {\n          this.current.add(callback);\n        }\n        this.deferred.clear();\n        this.scheduleIdleCallback();\n      }\n    };\n    // Ensure that the callback runs in the NgZone since\n    // the `requestIdleCallback` is not currently patched by Zone.js.\n    this.idleId = this.requestIdleCallbackFn(() => this.ngZone.run(callback));\n  }\n  cancelIdleCallback() {\n    if (this.idleId !== null) {\n      this.cancelIdleCallbackFn(this.idleId);\n      this.idleId = null;\n    }\n  }\n  ngOnDestroy() {\n    this.cancelIdleCallback();\n    this.current.clear();\n    this.deferred.clear();\n  }\n  /** @nocollapse */\n}\n\n/**\n * Returns a function that captures a provided delay.\n * Invoking the returned function schedules a trigger.\n */\n_class15 = IdleScheduler;\n_class15.ɵprov = ɵɵdefineInjectable({\n  token: _class15,\n  providedIn: 'root',\n  factory: () => new _class15()\n});\nfunction onTimer(delay) {\n  return (callback, lView) => scheduleTimerTrigger(delay, callback, lView);\n}\n/**\n * Schedules a callback to be invoked after a given timeout.\n *\n * @param delay A number of ms to wait until firing a callback.\n * @param callback A function to be invoked after a timeout.\n * @param lView LView that hosts an instance of a defer block.\n */\nfunction scheduleTimerTrigger(delay, callback, lView) {\n  const injector = lView[INJECTOR$1];\n  const scheduler = injector.get(TimerScheduler);\n  const cleanupFn = () => scheduler.remove(callback);\n  scheduler.add(delay, callback);\n  return cleanupFn;\n}\n/**\n * Helper service to schedule `setTimeout`s for batches of defer blocks,\n * to avoid calling `setTimeout` for each defer block (e.g. if defer blocks\n * are created inside a for loop).\n */\nclass TimerScheduler {\n  constructor() {\n    // Indicates whether current callbacks are being invoked.\n    this.executingCallbacks = false;\n    // Currently scheduled `setTimeout` id.\n    this.timeoutId = null;\n    // When currently scheduled timer would fire.\n    this.invokeTimerAt = null;\n    // List of callbacks to be invoked.\n    // For each callback we also store a timestamp on when the callback\n    // should be invoked. We store timestamps and callback functions\n    // in a flat array to avoid creating new objects for each entry.\n    // [timestamp1, callback1, timestamp2, callback2, ...]\n    this.current = [];\n    // List of callbacks collected while invoking current set of callbacks.\n    // Those callbacks are added to the \"current\" queue at the end of\n    // the current callback invocation. The shape of this list is the same\n    // as the shape of the `current` list.\n    this.deferred = [];\n  }\n  add(delay, callback) {\n    const target = this.executingCallbacks ? this.deferred : this.current;\n    this.addToQueue(target, Date.now() + delay, callback);\n    this.scheduleTimer();\n  }\n  remove(callback) {\n    const {\n      current,\n      deferred\n    } = this;\n    const callbackIndex = this.removeFromQueue(current, callback);\n    if (callbackIndex === -1) {\n      // Try cleaning up deferred queue only in case\n      // we didn't find a callback in the \"current\" queue.\n      this.removeFromQueue(deferred, callback);\n    }\n    // If the last callback was removed and there is a pending timeout - cancel it.\n    if (current.length === 0 && deferred.length === 0) {\n      this.clearTimeout();\n    }\n  }\n  addToQueue(target, invokeAt, callback) {\n    let insertAtIndex = target.length;\n    for (let i = 0; i < target.length; i += 2) {\n      const invokeQueuedCallbackAt = target[i];\n      if (invokeQueuedCallbackAt > invokeAt) {\n        // We've reached a first timer that is scheduled\n        // for a later time than what we are trying to insert.\n        // This is the location at which we need to insert,\n        // no need to iterate further.\n        insertAtIndex = i;\n        break;\n      }\n    }\n    arrayInsert2(target, insertAtIndex, invokeAt, callback);\n  }\n  removeFromQueue(target, callback) {\n    let index = -1;\n    for (let i = 0; i < target.length; i += 2) {\n      const queuedCallback = target[i + 1];\n      if (queuedCallback === callback) {\n        index = i;\n        break;\n      }\n    }\n    if (index > -1) {\n      // Remove 2 elements: a timestamp slot and\n      // the following slot with a callback function.\n      arraySplice(target, index, 2);\n    }\n    return index;\n  }\n  scheduleTimer() {\n    const callback = () => {\n      this.clearTimeout();\n      this.executingCallbacks = true;\n      // Clone the current state of the queue, since it might be altered\n      // as we invoke callbacks.\n      const current = [...this.current];\n      // Invoke callbacks that were scheduled to run before the current time.\n      const now = Date.now();\n      for (let i = 0; i < current.length; i += 2) {\n        const invokeAt = current[i];\n        const callback = current[i + 1];\n        if (invokeAt <= now) {\n          callback();\n        } else {\n          // We've reached a timer that should not be invoked yet.\n          break;\n        }\n      }\n      // The state of the queue might've changed after callbacks invocation,\n      // run the cleanup logic based on the *current* state of the queue.\n      let lastCallbackIndex = -1;\n      for (let i = 0; i < this.current.length; i += 2) {\n        const invokeAt = this.current[i];\n        if (invokeAt <= now) {\n          // Add +1 to account for a callback function that\n          // goes after the timestamp in events array.\n          lastCallbackIndex = i + 1;\n        } else {\n          // We've reached a timer that should not be invoked yet.\n          break;\n        }\n      }\n      if (lastCallbackIndex >= 0) {\n        arraySplice(this.current, 0, lastCallbackIndex + 1);\n      }\n      this.executingCallbacks = false;\n      // If there are any callbacks added during an invocation\n      // of the current ones - move them over to the \"current\"\n      // queue.\n      if (this.deferred.length > 0) {\n        for (let i = 0; i < this.deferred.length; i += 2) {\n          const invokeAt = this.deferred[i];\n          const callback = this.deferred[i + 1];\n          this.addToQueue(this.current, invokeAt, callback);\n        }\n        this.deferred.length = 0;\n      }\n      this.scheduleTimer();\n    };\n    // Avoid running timer callbacks more than once per\n    // average frame duration. This is needed for better\n    // batching and to avoid kicking off excessive change\n    // detection cycles.\n    const FRAME_DURATION_MS = 16; // 1000ms / 60fps\n    if (this.current.length > 0) {\n      const now = Date.now();\n      // First element in the queue points at the timestamp\n      // of the first (earliest) event.\n      const invokeAt = this.current[0];\n      if (this.timeoutId === null ||\n      // Reschedule a timer in case a queue contains an item with\n      // an earlier timestamp and the delta is more than an average\n      // frame duration.\n      this.invokeTimerAt && this.invokeTimerAt - invokeAt > FRAME_DURATION_MS) {\n        // There was a timeout already, but an earlier event was added\n        // into the queue. In this case we drop an old timer and setup\n        // a new one with an updated (smaller) timeout.\n        this.clearTimeout();\n        const timeout = Math.max(invokeAt - now, FRAME_DURATION_MS);\n        this.invokeTimerAt = invokeAt;\n        this.timeoutId = setTimeout(callback, timeout);\n      }\n    }\n  }\n  clearTimeout() {\n    if (this.timeoutId !== null) {\n      clearTimeout(this.timeoutId);\n      this.timeoutId = null;\n    }\n  }\n  ngOnDestroy() {\n    this.clearTimeout();\n    this.current.length = 0;\n    this.deferred.length = 0;\n  }\n  /** @nocollapse */\n}\n\n/**\n * **INTERNAL**, avoid referencing it in application code.\n *\n * Injector token that allows to provide `DeferBlockDependencyInterceptor` class\n * implementation.\n */\n_class16 = TimerScheduler;\n_class16.ɵprov = ɵɵdefineInjectable({\n  token: _class16,\n  providedIn: 'root',\n  factory: () => new _class16()\n});\nconst DEFER_BLOCK_DEPENDENCY_INTERCEPTOR = new InjectionToken('DEFER_BLOCK_DEPENDENCY_INTERCEPTOR');\n/**\n * **INTERNAL**, token used for configuring defer block behavior.\n */\nconst DEFER_BLOCK_CONFIG = new InjectionToken(ngDevMode ? 'DEFER_BLOCK_CONFIG' : '');\n/**\n * Returns whether defer blocks should be triggered.\n *\n * Currently, defer blocks are not triggered on the server,\n * only placeholder content is rendered (if provided).\n */\nfunction shouldTriggerDeferBlock(injector) {\n  const config = injector.get(DEFER_BLOCK_CONFIG, null, {\n    optional: true\n  });\n  if ((config === null || config === void 0 ? void 0 : config.behavior) === DeferBlockBehavior.Manual) {\n    return false;\n  }\n  return isPlatformBrowser(injector);\n}\n/**\n * Reference to the timer-based scheduler implementation of defer block state\n * rendering method. It's used to make timer-based scheduling tree-shakable.\n * If `minimum` or `after` parameters are used, compiler generates an extra\n * argument for the `ɵɵdefer` instruction, which references a timer-based\n * implementation.\n */\nlet applyDeferBlockStateWithSchedulingImpl = null;\n/**\n * Enables timer-related scheduling if `after` or `minimum` parameters are setup\n * on the `@loading` or `@placeholder` blocks.\n */\nfunction ɵɵdeferEnableTimerScheduling(tView, tDetails, placeholderConfigIndex, loadingConfigIndex) {\n  const tViewConsts = tView.consts;\n  if (placeholderConfigIndex != null) {\n    tDetails.placeholderBlockConfig = getConstant(tViewConsts, placeholderConfigIndex);\n  }\n  if (loadingConfigIndex != null) {\n    tDetails.loadingBlockConfig = getConstant(tViewConsts, loadingConfigIndex);\n  }\n  // Enable implementation that supports timer-based scheduling.\n  if (applyDeferBlockStateWithSchedulingImpl === null) {\n    applyDeferBlockStateWithSchedulingImpl = applyDeferBlockStateWithScheduling;\n  }\n}\n/**\n * Creates runtime data structures for defer blocks.\n *\n * @param index Index of the `defer` instruction.\n * @param primaryTmplIndex Index of the template with the primary block content.\n * @param dependencyResolverFn Function that contains dependencies for this defer block.\n * @param loadingTmplIndex Index of the template with the loading block content.\n * @param placeholderTmplIndex Index of the template with the placeholder block content.\n * @param errorTmplIndex Index of the template with the error block content.\n * @param loadingConfigIndex Index in the constants array of the configuration of the loading.\n *     block.\n * @param placeholderConfigIndex Index in the constants array of the configuration of the\n *     placeholder block.\n * @param enableTimerScheduling Function that enables timer-related scheduling if `after`\n *     or `minimum` parameters are setup on the `@loading` or `@placeholder` blocks.\n *\n * @codeGenApi\n */\nfunction ɵɵdefer(index, primaryTmplIndex, dependencyResolverFn, loadingTmplIndex, placeholderTmplIndex, errorTmplIndex, loadingConfigIndex, placeholderConfigIndex, enableTimerScheduling) {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = index + HEADER_OFFSET;\n  ɵɵtemplate(index, null, 0, 0);\n  if (tView.firstCreatePass) {\n    performanceMarkFeature('NgDefer');\n    const tDetails = {\n      primaryTmplIndex,\n      loadingTmplIndex: loadingTmplIndex !== null && loadingTmplIndex !== void 0 ? loadingTmplIndex : null,\n      placeholderTmplIndex: placeholderTmplIndex !== null && placeholderTmplIndex !== void 0 ? placeholderTmplIndex : null,\n      errorTmplIndex: errorTmplIndex !== null && errorTmplIndex !== void 0 ? errorTmplIndex : null,\n      placeholderBlockConfig: null,\n      loadingBlockConfig: null,\n      dependencyResolverFn: dependencyResolverFn !== null && dependencyResolverFn !== void 0 ? dependencyResolverFn : null,\n      loadingState: DeferDependenciesLoadingState.NOT_STARTED,\n      loadingPromise: null\n    };\n    enableTimerScheduling === null || enableTimerScheduling === void 0 || enableTimerScheduling(tView, tDetails, placeholderConfigIndex, loadingConfigIndex);\n    setTDeferBlockDetails(tView, adjustedIndex, tDetails);\n  }\n  const tNode = getCurrentTNode();\n  const lContainer = lView[adjustedIndex];\n  // If hydration is enabled, looks up dehydrated views in the DOM\n  // using hydration annotation info and stores those views on LContainer.\n  // In client-only mode, this function is a noop.\n  populateDehydratedViewsInLContainer(lContainer, tNode, lView);\n  // Init instance-specific defer details and store it.\n  const lDetails = [null, DeferBlockInternalState.Initial, null, null, null, null // PREFETCH_TRIGGER_CLEANUP_FNS\n  ];\n\n  setLDeferBlockDetails(lView, adjustedIndex, lDetails);\n  const cleanupTriggersFn = () => invokeAllTriggerCleanupFns(lDetails);\n  // When defer block is triggered - unsubscribe from LView destroy cleanup.\n  storeTriggerCleanupFn(0 /* TriggerType.Regular */, lDetails, () => removeLViewOnDestroy(lView, cleanupTriggersFn));\n  storeLViewOnDestroy(lView, cleanupTriggersFn);\n}\n/**\n * Loads defer block dependencies when a trigger value becomes truthy.\n * @codeGenApi\n */\nfunction ɵɵdeferWhen(rawValue) {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, rawValue)) {\n    const prevConsumer = setActiveConsumer$1(null);\n    try {\n      const value = Boolean(rawValue); // handle truthy or falsy values\n      const tNode = getSelectedTNode();\n      const lDetails = getLDeferBlockDetails(lView, tNode);\n      const renderedState = lDetails[DEFER_BLOCK_STATE];\n      if (value === false && renderedState === DeferBlockInternalState.Initial) {\n        // If nothing is rendered yet, render a placeholder (if defined).\n        renderPlaceholder(lView, tNode);\n      } else if (value === true && (renderedState === DeferBlockInternalState.Initial || renderedState === DeferBlockState.Placeholder)) {\n        // The `when` condition has changed to `true`, trigger defer block loading\n        // if the block is either in initial (nothing is rendered) or a placeholder\n        // state.\n        triggerDeferBlock(lView, tNode);\n      }\n    } finally {\n      setActiveConsumer$1(prevConsumer);\n    }\n  }\n}\n/**\n * Prefetches the deferred content when a value becomes truthy.\n * @codeGenApi\n */\nfunction ɵɵdeferPrefetchWhen(rawValue) {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, rawValue)) {\n    const prevConsumer = setActiveConsumer$1(null);\n    try {\n      const value = Boolean(rawValue); // handle truthy or falsy values\n      const tView = lView[TVIEW];\n      const tNode = getSelectedTNode();\n      const tDetails = getTDeferBlockDetails(tView, tNode);\n      if (value === true && tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\n        // If loading has not been started yet, trigger it now.\n        triggerPrefetching(tDetails, lView, tNode);\n      }\n    } finally {\n      setActiveConsumer$1(prevConsumer);\n    }\n  }\n}\n/**\n * Sets up logic to handle the `on idle` deferred trigger.\n * @codeGenApi\n */\nfunction ɵɵdeferOnIdle() {\n  scheduleDelayedTrigger(onIdle);\n}\n/**\n * Sets up logic to handle the `prefetch on idle` deferred trigger.\n * @codeGenApi\n */\nfunction ɵɵdeferPrefetchOnIdle() {\n  scheduleDelayedPrefetching(onIdle);\n}\n/**\n * Sets up logic to handle the `on immediate` deferred trigger.\n * @codeGenApi\n */\nfunction ɵɵdeferOnImmediate() {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  const tView = lView[TVIEW];\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n  // Render placeholder block only if loading template is not present\n  // to avoid content flickering, since it would be immediately replaced\n  // by the loading block.\n  if (tDetails.loadingTmplIndex === null) {\n    renderPlaceholder(lView, tNode);\n  }\n  triggerDeferBlock(lView, tNode);\n}\n/**\n * Sets up logic to handle the `prefetch on immediate` deferred trigger.\n * @codeGenApi\n */\nfunction ɵɵdeferPrefetchOnImmediate() {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  const tView = lView[TVIEW];\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\n    triggerResourceLoading(tDetails, lView, tNode);\n  }\n}\n/**\n * Creates runtime data structures for the `on timer` deferred trigger.\n * @param delay Amount of time to wait before loading the content.\n * @codeGenApi\n */\nfunction ɵɵdeferOnTimer(delay) {\n  scheduleDelayedTrigger(onTimer(delay));\n}\n/**\n * Creates runtime data structures for the `prefetch on timer` deferred trigger.\n * @param delay Amount of time to wait before prefetching the content.\n * @codeGenApi\n */\nfunction ɵɵdeferPrefetchOnTimer(delay) {\n  scheduleDelayedPrefetching(onTimer(delay));\n}\n/**\n * Creates runtime data structures for the `on hover` deferred trigger.\n * @param triggerIndex Index at which to find the trigger element.\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\n * @codeGenApi\n */\nfunction ɵɵdeferOnHover(triggerIndex, walkUpTimes) {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  renderPlaceholder(lView, tNode);\n  registerDomTrigger(lView, tNode, triggerIndex, walkUpTimes, onHover, () => triggerDeferBlock(lView, tNode), 0 /* TriggerType.Regular */);\n}\n/**\n * Creates runtime data structures for the `prefetch on hover` deferred trigger.\n * @param triggerIndex Index at which to find the trigger element.\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\n * @codeGenApi\n */\nfunction ɵɵdeferPrefetchOnHover(triggerIndex, walkUpTimes) {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  const tView = lView[TVIEW];\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\n    registerDomTrigger(lView, tNode, triggerIndex, walkUpTimes, onHover, () => triggerPrefetching(tDetails, lView, tNode), 1 /* TriggerType.Prefetch */);\n  }\n}\n/**\n * Creates runtime data structures for the `on interaction` deferred trigger.\n * @param triggerIndex Index at which to find the trigger element.\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\n * @codeGenApi\n */\nfunction ɵɵdeferOnInteraction(triggerIndex, walkUpTimes) {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  renderPlaceholder(lView, tNode);\n  registerDomTrigger(lView, tNode, triggerIndex, walkUpTimes, onInteraction, () => triggerDeferBlock(lView, tNode), 0 /* TriggerType.Regular */);\n}\n/**\n * Creates runtime data structures for the `prefetch on interaction` deferred trigger.\n * @param triggerIndex Index at which to find the trigger element.\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\n * @codeGenApi\n */\nfunction ɵɵdeferPrefetchOnInteraction(triggerIndex, walkUpTimes) {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  const tView = lView[TVIEW];\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\n    registerDomTrigger(lView, tNode, triggerIndex, walkUpTimes, onInteraction, () => triggerPrefetching(tDetails, lView, tNode), 1 /* TriggerType.Prefetch */);\n  }\n}\n/**\n * Creates runtime data structures for the `on viewport` deferred trigger.\n * @param triggerIndex Index at which to find the trigger element.\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\n * @codeGenApi\n */\nfunction ɵɵdeferOnViewport(triggerIndex, walkUpTimes) {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  renderPlaceholder(lView, tNode);\n  registerDomTrigger(lView, tNode, triggerIndex, walkUpTimes, onViewport, () => triggerDeferBlock(lView, tNode), 0 /* TriggerType.Regular */);\n}\n/**\n * Creates runtime data structures for the `prefetch on viewport` deferred trigger.\n * @param triggerIndex Index at which to find the trigger element.\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\n * @codeGenApi\n */\nfunction ɵɵdeferPrefetchOnViewport(triggerIndex, walkUpTimes) {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  const tView = lView[TVIEW];\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\n    registerDomTrigger(lView, tNode, triggerIndex, walkUpTimes, onViewport, () => triggerPrefetching(tDetails, lView, tNode), 1 /* TriggerType.Prefetch */);\n  }\n}\n/********** Helper functions **********/\n/**\n * Schedules triggering of a defer block for `on idle` and `on timer` conditions.\n */\nfunction scheduleDelayedTrigger(scheduleFn) {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  renderPlaceholder(lView, tNode);\n  const cleanupFn = scheduleFn(() => triggerDeferBlock(lView, tNode), lView);\n  const lDetails = getLDeferBlockDetails(lView, tNode);\n  storeTriggerCleanupFn(0 /* TriggerType.Regular */, lDetails, cleanupFn);\n}\n/**\n * Schedules prefetching for `on idle` and `on timer` triggers.\n *\n * @param scheduleFn A function that does the scheduling.\n */\nfunction scheduleDelayedPrefetching(scheduleFn) {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  const tView = lView[TVIEW];\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\n    const lDetails = getLDeferBlockDetails(lView, tNode);\n    const prefetch = () => triggerPrefetching(tDetails, lView, tNode);\n    const cleanupFn = scheduleFn(prefetch, lView);\n    storeTriggerCleanupFn(1 /* TriggerType.Prefetch */, lDetails, cleanupFn);\n  }\n}\n/**\n * Transitions a defer block to the new state. Updates the  necessary\n * data structures and renders corresponding block.\n *\n * @param newState New state that should be applied to the defer block.\n * @param tNode TNode that represents a defer block.\n * @param lContainer Represents an instance of a defer block.\n * @param skipTimerScheduling Indicates that `@loading` and `@placeholder` block\n *   should be rendered immediately, even if they have `after` or `minimum` config\n *   options setup. This flag to needed for testing APIs to transition defer block\n *   between states via `DeferFixture.render` method.\n */\nfunction renderDeferBlockState(newState, tNode, lContainer, skipTimerScheduling = false) {\n  var _lDetails$NEXT_DEFER_;\n  const hostLView = lContainer[PARENT];\n  const hostTView = hostLView[TVIEW];\n  // Check if this view is not destroyed. Since the loading process was async,\n  // the view might end up being destroyed by the time rendering happens.\n  if (isDestroyed(hostLView)) return;\n  // Make sure this TNode belongs to TView that represents host LView.\n  ngDevMode && assertTNodeForLView(tNode, hostLView);\n  const lDetails = getLDeferBlockDetails(hostLView, tNode);\n  ngDevMode && assertDefined(lDetails, 'Expected a defer block state defined');\n  const currentState = lDetails[DEFER_BLOCK_STATE];\n  if (isValidStateChange(currentState, newState) && isValidStateChange((_lDetails$NEXT_DEFER_ = lDetails[NEXT_DEFER_BLOCK_STATE]) !== null && _lDetails$NEXT_DEFER_ !== void 0 ? _lDetails$NEXT_DEFER_ : -1, newState)) {\n    const tDetails = getTDeferBlockDetails(hostTView, tNode);\n    const needsScheduling = !skipTimerScheduling && (getLoadingBlockAfter(tDetails) !== null || getMinimumDurationForState(tDetails, DeferBlockState.Loading) !== null || getMinimumDurationForState(tDetails, DeferBlockState.Placeholder));\n    if (ngDevMode && needsScheduling) {\n      assertDefined(applyDeferBlockStateWithSchedulingImpl, 'Expected scheduling function to be defined');\n    }\n    const applyStateFn = needsScheduling ? applyDeferBlockStateWithSchedulingImpl : applyDeferBlockState;\n    try {\n      applyStateFn(newState, lDetails, lContainer, tNode, hostLView);\n    } catch (error) {\n      handleError(hostLView, error);\n    }\n  }\n}\n/**\n * Applies changes to the DOM to reflect a given state.\n */\nfunction applyDeferBlockState(newState, lDetails, lContainer, tNode, hostLView) {\n  const stateTmplIndex = getTemplateIndexForState(newState, hostLView, tNode);\n  if (stateTmplIndex !== null) {\n    lDetails[DEFER_BLOCK_STATE] = newState;\n    const hostTView = hostLView[TVIEW];\n    const adjustedIndex = stateTmplIndex + HEADER_OFFSET;\n    const tNode = getTNode(hostTView, adjustedIndex);\n    // There is only 1 view that can be present in an LContainer that\n    // represents a defer block, so always refer to the first one.\n    const viewIndex = 0;\n    removeLViewFromLContainer(lContainer, viewIndex);\n    const dehydratedView = findMatchingDehydratedView(lContainer, tNode.tView.ssrId);\n    const embeddedLView = createAndRenderEmbeddedLView(hostLView, tNode, null, {\n      dehydratedView\n    });\n    addLViewToLContainer(lContainer, embeddedLView, viewIndex, shouldAddViewToDom(tNode, dehydratedView));\n    markViewDirty(embeddedLView);\n  }\n}\n/**\n * Extends the `applyDeferBlockState` with timer-based scheduling.\n * This function becomes available on a page if there are defer blocks\n * that use `after` or `minimum` parameters in the `@loading` or\n * `@placeholder` blocks.\n */\nfunction applyDeferBlockStateWithScheduling(newState, lDetails, lContainer, tNode, hostLView) {\n  const now = Date.now();\n  const hostTView = hostLView[TVIEW];\n  const tDetails = getTDeferBlockDetails(hostTView, tNode);\n  if (lDetails[STATE_IS_FROZEN_UNTIL] === null || lDetails[STATE_IS_FROZEN_UNTIL] <= now) {\n    lDetails[STATE_IS_FROZEN_UNTIL] = null;\n    const loadingAfter = getLoadingBlockAfter(tDetails);\n    const inLoadingAfterPhase = lDetails[LOADING_AFTER_CLEANUP_FN] !== null;\n    if (newState === DeferBlockState.Loading && loadingAfter !== null && !inLoadingAfterPhase) {\n      // Trying to render loading, but it has an `after` config,\n      // so schedule an update action after a timeout.\n      lDetails[NEXT_DEFER_BLOCK_STATE] = newState;\n      const cleanupFn = scheduleDeferBlockUpdate(loadingAfter, lDetails, tNode, lContainer, hostLView);\n      lDetails[LOADING_AFTER_CLEANUP_FN] = cleanupFn;\n    } else {\n      // If we transition to a complete or an error state and there is a pending\n      // operation to render loading after a timeout - invoke a cleanup operation,\n      // which stops the timer.\n      if (newState > DeferBlockState.Loading && inLoadingAfterPhase) {\n        lDetails[LOADING_AFTER_CLEANUP_FN]();\n        lDetails[LOADING_AFTER_CLEANUP_FN] = null;\n        lDetails[NEXT_DEFER_BLOCK_STATE] = null;\n      }\n      applyDeferBlockState(newState, lDetails, lContainer, tNode, hostLView);\n      const duration = getMinimumDurationForState(tDetails, newState);\n      if (duration !== null) {\n        lDetails[STATE_IS_FROZEN_UNTIL] = now + duration;\n        scheduleDeferBlockUpdate(duration, lDetails, tNode, lContainer, hostLView);\n      }\n    }\n  } else {\n    // We are still rendering the previous state.\n    // Update the `NEXT_DEFER_BLOCK_STATE`, which would be\n    // picked up once it's time to transition to the next state.\n    lDetails[NEXT_DEFER_BLOCK_STATE] = newState;\n  }\n}\n/**\n * Schedules an update operation after a specified timeout.\n */\nfunction scheduleDeferBlockUpdate(timeout, lDetails, tNode, lContainer, hostLView) {\n  const callback = () => {\n    const nextState = lDetails[NEXT_DEFER_BLOCK_STATE];\n    lDetails[STATE_IS_FROZEN_UNTIL] = null;\n    lDetails[NEXT_DEFER_BLOCK_STATE] = null;\n    if (nextState !== null) {\n      renderDeferBlockState(nextState, tNode, lContainer);\n    }\n  };\n  return scheduleTimerTrigger(timeout, callback, hostLView);\n}\n/**\n * Checks whether we can transition to the next state.\n *\n * We transition to the next state if the previous state was represented\n * with a number that is less than the next state. For example, if the current\n * state is \"loading\" (represented as `1`), we should not show a placeholder\n * (represented as `0`), but we can show a completed state (represented as `2`)\n * or an error state (represented as `3`).\n */\nfunction isValidStateChange(currentState, newState) {\n  return currentState < newState;\n}\n/**\n * Trigger prefetching of dependencies for a defer block.\n *\n * @param tDetails Static information about this defer block.\n * @param lView LView of a host view.\n */\nfunction triggerPrefetching(tDetails, lView, tNode) {\n  if (lView[INJECTOR$1] && shouldTriggerDeferBlock(lView[INJECTOR$1])) {\n    triggerResourceLoading(tDetails, lView, tNode);\n  }\n}\n/**\n * Trigger loading of defer block dependencies if the process hasn't started yet.\n *\n * @param tDetails Static information about this defer block.\n * @param lView LView of a host view.\n */\nfunction triggerResourceLoading(tDetails, lView, tNode) {\n  const injector = lView[INJECTOR$1];\n  const tView = lView[TVIEW];\n  if (tDetails.loadingState !== DeferDependenciesLoadingState.NOT_STARTED) {\n    // If the loading status is different from initial one, it means that\n    // the loading of dependencies is in progress and there is nothing to do\n    // in this function. All details can be obtained from the `tDetails` object.\n    return;\n  }\n  const lDetails = getLDeferBlockDetails(lView, tNode);\n  const primaryBlockTNode = getPrimaryBlockTNode(tView, tDetails);\n  // Switch from NOT_STARTED -> IN_PROGRESS state.\n  tDetails.loadingState = DeferDependenciesLoadingState.IN_PROGRESS;\n  // Prefetching is triggered, cleanup all registered prefetch triggers.\n  invokeTriggerCleanupFns(1 /* TriggerType.Prefetch */, lDetails);\n  let dependenciesFn = tDetails.dependencyResolverFn;\n  if (ngDevMode) {\n    // Check if dependency function interceptor is configured.\n    const deferDependencyInterceptor = injector.get(DEFER_BLOCK_DEPENDENCY_INTERCEPTOR, null, {\n      optional: true\n    });\n    if (deferDependencyInterceptor) {\n      dependenciesFn = deferDependencyInterceptor.intercept(dependenciesFn);\n    }\n  }\n  // The `dependenciesFn` might be `null` when all dependencies within\n  // a given defer block were eagerly referenced elsewhere in a file,\n  // thus no dynamic `import()`s were produced.\n  if (!dependenciesFn) {\n    tDetails.loadingPromise = Promise.resolve().then(() => {\n      tDetails.loadingPromise = null;\n      tDetails.loadingState = DeferDependenciesLoadingState.COMPLETE;\n    });\n    return;\n  }\n  // Start downloading of defer block dependencies.\n  tDetails.loadingPromise = Promise.allSettled(dependenciesFn()).then(results => {\n    let failed = false;\n    const directiveDefs = [];\n    const pipeDefs = [];\n    for (const result of results) {\n      if (result.status === 'fulfilled') {\n        const dependency = result.value;\n        const directiveDef = getComponentDef(dependency) || getDirectiveDef(dependency);\n        if (directiveDef) {\n          directiveDefs.push(directiveDef);\n        } else {\n          const pipeDef = getPipeDef$1(dependency);\n          if (pipeDef) {\n            pipeDefs.push(pipeDef);\n          }\n        }\n      } else {\n        failed = true;\n        break;\n      }\n    }\n    // Loading is completed, we no longer need this Promise.\n    tDetails.loadingPromise = null;\n    if (failed) {\n      tDetails.loadingState = DeferDependenciesLoadingState.FAILED;\n      if (tDetails.errorTmplIndex === null) {\n        const templateLocation = getTemplateLocationDetails(lView);\n        const error = new RuntimeError(750 /* RuntimeErrorCode.DEFER_LOADING_FAILED */, ngDevMode && 'Loading dependencies for `@defer` block failed, ' + `but no \\`@error\\` block was configured${templateLocation}. ` + 'Consider using the `@error` block to render an error state.');\n        handleError(lView, error);\n      }\n    } else {\n      tDetails.loadingState = DeferDependenciesLoadingState.COMPLETE;\n      // Update directive and pipe registries to add newly downloaded dependencies.\n      const primaryBlockTView = primaryBlockTNode.tView;\n      if (directiveDefs.length > 0) {\n        primaryBlockTView.directiveRegistry = addDepsToRegistry(primaryBlockTView.directiveRegistry, directiveDefs);\n      }\n      if (pipeDefs.length > 0) {\n        primaryBlockTView.pipeRegistry = addDepsToRegistry(primaryBlockTView.pipeRegistry, pipeDefs);\n      }\n    }\n  });\n}\n/** Utility function to render placeholder content (if present) */\nfunction renderPlaceholder(lView, tNode) {\n  const lContainer = lView[tNode.index];\n  ngDevMode && assertLContainer(lContainer);\n  renderDeferBlockState(DeferBlockState.Placeholder, tNode, lContainer);\n}\n/**\n * Subscribes to the \"loading\" Promise and renders corresponding defer sub-block,\n * based on the loading results.\n *\n * @param lContainer Represents an instance of a defer block.\n * @param tNode Represents defer block info shared across all instances.\n */\nfunction renderDeferStateAfterResourceLoading(tDetails, tNode, lContainer) {\n  ngDevMode && assertDefined(tDetails.loadingPromise, 'Expected loading Promise to exist on this defer block');\n  tDetails.loadingPromise.then(() => {\n    if (tDetails.loadingState === DeferDependenciesLoadingState.COMPLETE) {\n      ngDevMode && assertDeferredDependenciesLoaded(tDetails);\n      // Everything is loaded, show the primary block content\n      renderDeferBlockState(DeferBlockState.Complete, tNode, lContainer);\n    } else if (tDetails.loadingState === DeferDependenciesLoadingState.FAILED) {\n      renderDeferBlockState(DeferBlockState.Error, tNode, lContainer);\n    }\n  });\n}\n/**\n * Attempts to trigger loading of defer block dependencies.\n * If the block is already in a loading, completed or an error state -\n * no additional actions are taken.\n */\nfunction triggerDeferBlock(lView, tNode) {\n  const tView = lView[TVIEW];\n  const lContainer = lView[tNode.index];\n  const injector = lView[INJECTOR$1];\n  ngDevMode && assertLContainer(lContainer);\n  if (!shouldTriggerDeferBlock(injector)) return;\n  const lDetails = getLDeferBlockDetails(lView, tNode);\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n  // Defer block is triggered, cleanup all registered trigger functions.\n  invokeAllTriggerCleanupFns(lDetails);\n  switch (tDetails.loadingState) {\n    case DeferDependenciesLoadingState.NOT_STARTED:\n      renderDeferBlockState(DeferBlockState.Loading, tNode, lContainer);\n      triggerResourceLoading(tDetails, lView, tNode);\n      // The `loadingState` might have changed to \"loading\".\n      if (tDetails.loadingState === DeferDependenciesLoadingState.IN_PROGRESS) {\n        renderDeferStateAfterResourceLoading(tDetails, tNode, lContainer);\n      }\n      break;\n    case DeferDependenciesLoadingState.IN_PROGRESS:\n      renderDeferBlockState(DeferBlockState.Loading, tNode, lContainer);\n      renderDeferStateAfterResourceLoading(tDetails, tNode, lContainer);\n      break;\n    case DeferDependenciesLoadingState.COMPLETE:\n      ngDevMode && assertDeferredDependenciesLoaded(tDetails);\n      renderDeferBlockState(DeferBlockState.Complete, tNode, lContainer);\n      break;\n    case DeferDependenciesLoadingState.FAILED:\n      renderDeferBlockState(DeferBlockState.Error, tNode, lContainer);\n      break;\n    default:\n      if (ngDevMode) {\n        throwError('Unknown defer block state');\n      }\n  }\n}\nfunction elementStartFirstCreatePass(index, tView, lView, name, attrsIndex, localRefsIndex) {\n  ngDevMode && assertFirstCreatePass(tView);\n  ngDevMode && ngDevMode.firstCreatePass++;\n  const tViewConsts = tView.consts;\n  const attrs = getConstant(tViewConsts, attrsIndex);\n  const tNode = getOrCreateTNode(tView, index, 2 /* TNodeType.Element */, name, attrs);\n  resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex));\n  if (tNode.attrs !== null) {\n    computeStaticStyling(tNode, tNode.attrs, false);\n  }\n  if (tNode.mergedAttrs !== null) {\n    computeStaticStyling(tNode, tNode.mergedAttrs, true);\n  }\n  if (tView.queries !== null) {\n    tView.queries.elementStart(tView, tNode);\n  }\n  return tNode;\n}\n/**\n * Create DOM element. The instruction must later be followed by `elementEnd()` call.\n *\n * @param index Index of the element in the LView array\n * @param name Name of the DOM Node\n * @param attrsIndex Index of the element's attributes in the `consts` array.\n * @param localRefsIndex Index of the element's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * Attributes and localRefs are passed as an array of strings where elements with an even index\n * hold an attribute name and elements with an odd index hold an attribute value, ex.:\n * ['id', 'warning5', 'class', 'alert']\n *\n * @codeGenApi\n */\nfunction ɵɵelementStart(index, name, attrsIndex, localRefsIndex) {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = HEADER_OFFSET + index;\n  ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'elements should be created before any bindings');\n  ngDevMode && assertIndexInRange(lView, adjustedIndex);\n  const renderer = lView[RENDERER];\n  const tNode = tView.firstCreatePass ? elementStartFirstCreatePass(adjustedIndex, tView, lView, name, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];\n  const native = _locateOrCreateElementNode(tView, lView, tNode, renderer, name, index);\n  lView[adjustedIndex] = native;\n  const hasDirectives = isDirectiveHost(tNode);\n  if (ngDevMode && tView.firstCreatePass) {\n    validateElementIsKnown(native, lView, tNode.value, tView.schemas, hasDirectives);\n  }\n  setCurrentTNode(tNode, true);\n  setupStaticAttributes(renderer, native, tNode);\n  if ((tNode.flags & 32 /* TNodeFlags.isDetached */) !== 32 /* TNodeFlags.isDetached */ && wasLastNodeCreated()) {\n    // In the i18n case, the translation may have removed this element, so only add it if it is not\n    // detached. See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.\n    appendChild(tView, lView, native, tNode);\n  }\n  // any immediate children of a component or template container must be pre-emptively\n  // monkey-patched with the component view data so that the element can be inspected\n  // later on using any element discovery utility methods (see `element_discovery.ts`)\n  if (getElementDepthCount() === 0) {\n    attachPatchData(native, lView);\n  }\n  increaseElementDepthCount();\n  if (hasDirectives) {\n    createDirectivesInstances(tView, lView, tNode);\n    executeContentQueries(tView, tNode, lView);\n  }\n  if (localRefsIndex !== null) {\n    saveResolvedLocalsInData(lView, tNode);\n  }\n  return ɵɵelementStart;\n}\n/**\n * Mark the end of the element.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nfunction ɵɵelementEnd() {\n  let currentTNode = getCurrentTNode();\n  ngDevMode && assertDefined(currentTNode, 'No parent node to close.');\n  if (isCurrentTNodeParent()) {\n    setCurrentTNodeAsNotParent();\n  } else {\n    ngDevMode && assertHasParent(getCurrentTNode());\n    currentTNode = currentTNode.parent;\n    setCurrentTNode(currentTNode, false);\n  }\n  const tNode = currentTNode;\n  ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */);\n  if (isSkipHydrationRootTNode(tNode)) {\n    leaveSkipHydrationBlock();\n  }\n  decreaseElementDepthCount();\n  const tView = getTView();\n  if (tView.firstCreatePass) {\n    registerPostOrderHooks(tView, currentTNode);\n    if (isContentQueryHost(currentTNode)) {\n      tView.queries.elementEnd(currentTNode);\n    }\n  }\n  if (tNode.classesWithoutHost != null && hasClassInput(tNode)) {\n    setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.classesWithoutHost, true);\n  }\n  if (tNode.stylesWithoutHost != null && hasStyleInput(tNode)) {\n    setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.stylesWithoutHost, false);\n  }\n  return ɵɵelementEnd;\n}\n/**\n * Creates an empty element using {@link elementStart} and {@link elementEnd}\n *\n * @param index Index of the element in the data array\n * @param name Name of the DOM Node\n * @param attrsIndex Index of the element's attributes in the `consts` array.\n * @param localRefsIndex Index of the element's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nfunction ɵɵelement(index, name, attrsIndex, localRefsIndex) {\n  ɵɵelementStart(index, name, attrsIndex, localRefsIndex);\n  ɵɵelementEnd();\n  return ɵɵelement;\n}\nlet _locateOrCreateElementNode = (tView, lView, tNode, renderer, name, index) => {\n  lastNodeWasCreated(true);\n  return createElementNode(renderer, name, getNamespace$1());\n};\n/**\n * Enables hydration code path (to lookup existing elements in DOM)\n * in addition to the regular creation mode of element nodes.\n */\nfunction locateOrCreateElementNodeImpl(tView, lView, tNode, renderer, name, index) {\n  const hydrationInfo = lView[HYDRATION];\n  const isNodeCreationMode = !hydrationInfo || isInSkipHydrationBlock$1() || isDisconnectedNode$1(hydrationInfo, index);\n  lastNodeWasCreated(isNodeCreationMode);\n  // Regular creation mode.\n  if (isNodeCreationMode) {\n    return createElementNode(renderer, name, getNamespace$1());\n  }\n  // Hydration mode, looking up an existing element in DOM.\n  const native = locateNextRNode(hydrationInfo, tView, lView, tNode);\n  ngDevMode && validateMatchingNode(native, Node.ELEMENT_NODE, name, lView, tNode);\n  ngDevMode && markRNodeAsClaimedByHydration(native);\n  // This element might also be an anchor of a view container.\n  if (getSerializedContainerViews(hydrationInfo, index)) {\n    // Important note: this element acts as an anchor, but it's **not** a part\n    // of the embedded view, so we start the segment **after** this element, taking\n    // a reference to the next sibling. For example, the following template:\n    // `<div #vcrTarget>` is represented in the DOM as `<div></div>...<!--container-->`,\n    // so while processing a `<div>` instruction, point to the next sibling as a\n    // start of a segment.\n    ngDevMode && validateNodeExists(native.nextSibling, lView, tNode);\n    setSegmentHead(hydrationInfo, index, native.nextSibling);\n  }\n  // Checks if the skip hydration attribute is present during hydration so we know to\n  // skip attempting to hydrate this block. We check both TNode and RElement for an\n  // attribute: the RElement case is needed for i18n cases, when we add it to host\n  // elements during the annotation phase (after all internal data structures are setup).\n  if (hydrationInfo && (hasSkipHydrationAttrOnTNode(tNode) || hasSkipHydrationAttrOnRElement(native))) {\n    if (isComponentHost(tNode)) {\n      enterSkipHydrationBlock(tNode);\n      // Since this isn't hydratable, we need to empty the node\n      // so there's no duplicate content after render\n      clearElementContents(native);\n      ngDevMode && ngDevMode.componentsSkippedHydration++;\n    } else if (ngDevMode) {\n      // If this is not a component host, throw an error.\n      // Hydration can be skipped on per-component basis only.\n      throw invalidSkipHydrationHost(native);\n    }\n  }\n  return native;\n}\nfunction enableLocateOrCreateElementNodeImpl() {\n  _locateOrCreateElementNode = locateOrCreateElementNodeImpl;\n}\nfunction elementContainerStartFirstCreatePass(index, tView, lView, attrsIndex, localRefsIndex) {\n  ngDevMode && ngDevMode.firstCreatePass++;\n  const tViewConsts = tView.consts;\n  const attrs = getConstant(tViewConsts, attrsIndex);\n  const tNode = getOrCreateTNode(tView, index, 8 /* TNodeType.ElementContainer */, 'ng-container', attrs);\n  // While ng-container doesn't necessarily support styling, we use the style context to identify\n  // and execute directives on the ng-container.\n  if (attrs !== null) {\n    computeStaticStyling(tNode, attrs, true);\n  }\n  const localRefs = getConstant(tViewConsts, localRefsIndex);\n  resolveDirectives(tView, lView, tNode, localRefs);\n  if (tView.queries !== null) {\n    tView.queries.elementStart(tView, tNode);\n  }\n  return tNode;\n}\n/**\n * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.\n * The instruction must later be followed by `elementContainerEnd()` call.\n *\n * @param index Index of the element in the LView array\n * @param attrsIndex Index of the container attributes in the `consts` array.\n * @param localRefsIndex Index of the container's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * Even if this instruction accepts a set of attributes no actual attribute values are propagated to\n * the DOM (as a comment node can't have attributes). Attributes are here only for directive\n * matching purposes and setting initial inputs of directives.\n *\n * @codeGenApi\n */\nfunction ɵɵelementContainerStart(index, attrsIndex, localRefsIndex) {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = index + HEADER_OFFSET;\n  ngDevMode && assertIndexInRange(lView, adjustedIndex);\n  ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'element containers should be created before any bindings');\n  const tNode = tView.firstCreatePass ? elementContainerStartFirstCreatePass(adjustedIndex, tView, lView, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];\n  setCurrentTNode(tNode, true);\n  const comment = _locateOrCreateElementContainerNode(tView, lView, tNode, index);\n  lView[adjustedIndex] = comment;\n  if (wasLastNodeCreated()) {\n    appendChild(tView, lView, comment, tNode);\n  }\n  attachPatchData(comment, lView);\n  if (isDirectiveHost(tNode)) {\n    createDirectivesInstances(tView, lView, tNode);\n    executeContentQueries(tView, tNode, lView);\n  }\n  if (localRefsIndex != null) {\n    saveResolvedLocalsInData(lView, tNode);\n  }\n  return ɵɵelementContainerStart;\n}\n/**\n * Mark the end of the <ng-container>.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nfunction ɵɵelementContainerEnd() {\n  let currentTNode = getCurrentTNode();\n  const tView = getTView();\n  if (isCurrentTNodeParent()) {\n    setCurrentTNodeAsNotParent();\n  } else {\n    ngDevMode && assertHasParent(currentTNode);\n    currentTNode = currentTNode.parent;\n    setCurrentTNode(currentTNode, false);\n  }\n  ngDevMode && assertTNodeType(currentTNode, 8 /* TNodeType.ElementContainer */);\n  if (tView.firstCreatePass) {\n    registerPostOrderHooks(tView, currentTNode);\n    if (isContentQueryHost(currentTNode)) {\n      tView.queries.elementEnd(currentTNode);\n    }\n  }\n  return ɵɵelementContainerEnd;\n}\n/**\n * Creates an empty logical container using {@link elementContainerStart}\n * and {@link elementContainerEnd}\n *\n * @param index Index of the element in the LView array\n * @param attrsIndex Index of the container attributes in the `consts` array.\n * @param localRefsIndex Index of the container's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nfunction ɵɵelementContainer(index, attrsIndex, localRefsIndex) {\n  ɵɵelementContainerStart(index, attrsIndex, localRefsIndex);\n  ɵɵelementContainerEnd();\n  return ɵɵelementContainer;\n}\nlet _locateOrCreateElementContainerNode = (tView, lView, tNode, index) => {\n  lastNodeWasCreated(true);\n  return createCommentNode(lView[RENDERER], ngDevMode ? 'ng-container' : '');\n};\n/**\n * Enables hydration code path (to lookup existing elements in DOM)\n * in addition to the regular creation mode of comment nodes that\n * represent <ng-container>'s anchor.\n */\nfunction locateOrCreateElementContainerNode(tView, lView, tNode, index) {\n  let comment;\n  const hydrationInfo = lView[HYDRATION];\n  const isNodeCreationMode = !hydrationInfo || isInSkipHydrationBlock$1();\n  lastNodeWasCreated(isNodeCreationMode);\n  // Regular creation mode.\n  if (isNodeCreationMode) {\n    return createCommentNode(lView[RENDERER], ngDevMode ? 'ng-container' : '');\n  }\n  // Hydration mode, looking up existing elements in DOM.\n  const currentRNode = locateNextRNode(hydrationInfo, tView, lView, tNode);\n  ngDevMode && validateNodeExists(currentRNode, lView, tNode);\n  const ngContainerSize = getNgContainerSize(hydrationInfo, index);\n  ngDevMode && assertNumber(ngContainerSize, 'Unexpected state: hydrating an <ng-container>, ' + 'but no hydration info is available.');\n  setSegmentHead(hydrationInfo, index, currentRNode);\n  comment = siblingAfter(ngContainerSize, currentRNode);\n  if (ngDevMode) {\n    validateMatchingNode(comment, Node.COMMENT_NODE, null, lView, tNode);\n    markRNodeAsClaimedByHydration(comment);\n  }\n  return comment;\n}\nfunction enableLocateOrCreateElementContainerNodeImpl() {\n  _locateOrCreateElementContainerNode = locateOrCreateElementContainerNode;\n}\n\n/**\n * Returns the current OpaqueViewState instance.\n *\n * Used in conjunction with the restoreView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @codeGenApi\n */\nfunction ɵɵgetCurrentView() {\n  return getLView();\n}\n\n/**\n * Update a property on a host element. Only applies to native node properties, not inputs.\n *\n * Operates on the element selected by index via the {@link select} instruction.\n *\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n * @returns This function returns itself so that it may be chained\n * (e.g. `property('name', ctx.name)('title', ctx.title)`)\n *\n * @codeGenApi\n */\nfunction ɵɵhostProperty(propName, value, sanitizer) {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, true);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n  }\n  return ɵɵhostProperty;\n}\n/**\n * Updates a synthetic host binding (e.g. `[@foo]`) on a component or directive.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host binding (e.g. `@HostBinding('@foo')`) properly gets rendered in\n * the component's renderer. Normally all host bindings are evaluated with the parent\n * component's renderer, but, in the case of animation @triggers, they need to be\n * evaluated with the sub component's renderer (because that's where the animation\n * triggers are defined).\n *\n * Do not use this instruction as a replacement for `elementProperty`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * @param index The index of the element to update in the data array\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n *\n * @codeGenApi\n */\nfunction ɵɵsyntheticHostProperty(propName, value, sanitizer) {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    const currentDef = getCurrentDirectiveDef(tView.data);\n    const renderer = loadComponentRenderer(currentDef, tNode, lView);\n    elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, true);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n  }\n  return ɵɵsyntheticHostProperty;\n}\n\n/**\n * NOTE: changes to the `ngI18nClosureMode` name must be synced with `compiler-cli/src/tooling.ts`.\n */\nif (typeof ngI18nClosureMode === 'undefined') {\n  // These property accesses can be ignored because ngI18nClosureMode will be set to false\n  // when optimizing code and the whole if statement will be dropped.\n  // Make sure to refer to ngI18nClosureMode as ['ngI18nClosureMode'] for closure.\n  // NOTE: we need to have it in IIFE so that the tree-shaker is happy.\n  (function () {\n    // tslint:disable-next-line:no-toplevel-property-access\n    _global['ngI18nClosureMode'] =\n    // TODO(FW-1250): validate that this actually, you know, works.\n    // tslint:disable-next-line:no-toplevel-property-access\n    typeof goog !== 'undefined' && typeof goog.getMsg === 'function';\n  })();\n}\n\n// THIS CODE IS GENERATED - DO NOT MODIFY.\nconst u = undefined;\nfunction plural(val) {\n  const n = val,\n    i = Math.floor(Math.abs(val)),\n    v = val.toString().replace(/^[^.]*\\.?/, '').length;\n  if (i === 1 && v === 0) return 1;\n  return 5;\n}\nvar localeEn = [\"en\", [[\"a\", \"p\"], [\"AM\", \"PM\"], u], [[\"AM\", \"PM\"], u, u], [[\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"], [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"], [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"], [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"]], u, [[\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"], [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"], [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]], u, [[\"B\", \"A\"], [\"BC\", \"AD\"], [\"Before Christ\", \"Anno Domini\"]], 0, [6, 0], [\"M/d/yy\", \"MMM d, y\", \"MMMM d, y\", \"EEEE, MMMM d, y\"], [\"h:mm a\", \"h:mm:ss a\", \"h:mm:ss a z\", \"h:mm:ss a zzzz\"], [\"{1}, {0}\", u, \"{1} 'at' {0}\", u], [\".\", \",\", \";\", \"%\", \"+\", \"-\", \"E\", \"×\", \"‰\", \"∞\", \"NaN\", \":\"], [\"#,##0.###\", \"#,##0%\", \"¤#,##0.00\", \"#E0\"], \"USD\", \"$\", \"US Dollar\", {}, \"ltr\", plural];\n\n/**\n * This const is used to store the locale data registered with `registerLocaleData`\n */\nlet LOCALE_DATA = {};\n/**\n * Register locale data to be used internally by Angular. See the\n * [\"I18n guide\"](guide/i18n-common-format-data-locale) to know how to import additional locale\n * data.\n *\n * The signature `registerLocaleData(data: any, extraData?: any)` is deprecated since v5.1\n */\nfunction registerLocaleData(data, localeId, extraData) {\n  if (typeof localeId !== 'string') {\n    extraData = localeId;\n    localeId = data[LocaleDataIndex.LocaleId];\n  }\n  localeId = localeId.toLowerCase().replace(/_/g, '-');\n  LOCALE_DATA[localeId] = data;\n  if (extraData) {\n    LOCALE_DATA[localeId][LocaleDataIndex.ExtraData] = extraData;\n  }\n}\n/**\n * Finds the locale data for a given locale.\n *\n * @param locale The locale code.\n * @returns The locale data.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n */\nfunction findLocaleData(locale) {\n  const normalizedLocale = normalizeLocale(locale);\n  let match = getLocaleData(normalizedLocale);\n  if (match) {\n    return match;\n  }\n  // let's try to find a parent locale\n  const parentLocale = normalizedLocale.split('-')[0];\n  match = getLocaleData(parentLocale);\n  if (match) {\n    return match;\n  }\n  if (parentLocale === 'en') {\n    return localeEn;\n  }\n  throw new RuntimeError(701 /* RuntimeErrorCode.MISSING_LOCALE_DATA */, ngDevMode && `Missing locale data for the locale \"${locale}\".`);\n}\n/**\n * Retrieves the default currency code for the given locale.\n *\n * The default is defined as the first currency which is still in use.\n *\n * @param locale The code of the locale whose currency code we want.\n * @returns The code of the default currency for the given locale.\n *\n */\nfunction getLocaleCurrencyCode(locale) {\n  const data = findLocaleData(locale);\n  return data[LocaleDataIndex.CurrencyCode] || null;\n}\n/**\n * Retrieves the plural function used by ICU expressions to determine the plural case to use\n * for a given locale.\n * @param locale A locale code for the locale format rules to use.\n * @returns The plural function for the locale.\n * @see {@link NgPlural}\n * @see [Internationalization (i18n) Guide](/guide/i18n-overview)\n */\nfunction getLocalePluralCase(locale) {\n  const data = findLocaleData(locale);\n  return data[LocaleDataIndex.PluralCase];\n}\n/**\n * Helper function to get the given `normalizedLocale` from `LOCALE_DATA`\n * or from the global `ng.common.locale`.\n */\nfunction getLocaleData(normalizedLocale) {\n  if (!(normalizedLocale in LOCALE_DATA)) {\n    LOCALE_DATA[normalizedLocale] = _global.ng && _global.ng.common && _global.ng.common.locales && _global.ng.common.locales[normalizedLocale];\n  }\n  return LOCALE_DATA[normalizedLocale];\n}\n/**\n * Helper function to remove all the locale data from `LOCALE_DATA`.\n */\nfunction unregisterAllLocaleData() {\n  LOCALE_DATA = {};\n}\n/**\n * Index of each type of locale data from the locale data array\n */\nvar LocaleDataIndex;\n(function (LocaleDataIndex) {\n  LocaleDataIndex[LocaleDataIndex[\"LocaleId\"] = 0] = \"LocaleId\";\n  LocaleDataIndex[LocaleDataIndex[\"DayPeriodsFormat\"] = 1] = \"DayPeriodsFormat\";\n  LocaleDataIndex[LocaleDataIndex[\"DayPeriodsStandalone\"] = 2] = \"DayPeriodsStandalone\";\n  LocaleDataIndex[LocaleDataIndex[\"DaysFormat\"] = 3] = \"DaysFormat\";\n  LocaleDataIndex[LocaleDataIndex[\"DaysStandalone\"] = 4] = \"DaysStandalone\";\n  LocaleDataIndex[LocaleDataIndex[\"MonthsFormat\"] = 5] = \"MonthsFormat\";\n  LocaleDataIndex[LocaleDataIndex[\"MonthsStandalone\"] = 6] = \"MonthsStandalone\";\n  LocaleDataIndex[LocaleDataIndex[\"Eras\"] = 7] = \"Eras\";\n  LocaleDataIndex[LocaleDataIndex[\"FirstDayOfWeek\"] = 8] = \"FirstDayOfWeek\";\n  LocaleDataIndex[LocaleDataIndex[\"WeekendRange\"] = 9] = \"WeekendRange\";\n  LocaleDataIndex[LocaleDataIndex[\"DateFormat\"] = 10] = \"DateFormat\";\n  LocaleDataIndex[LocaleDataIndex[\"TimeFormat\"] = 11] = \"TimeFormat\";\n  LocaleDataIndex[LocaleDataIndex[\"DateTimeFormat\"] = 12] = \"DateTimeFormat\";\n  LocaleDataIndex[LocaleDataIndex[\"NumberSymbols\"] = 13] = \"NumberSymbols\";\n  LocaleDataIndex[LocaleDataIndex[\"NumberFormats\"] = 14] = \"NumberFormats\";\n  LocaleDataIndex[LocaleDataIndex[\"CurrencyCode\"] = 15] = \"CurrencyCode\";\n  LocaleDataIndex[LocaleDataIndex[\"CurrencySymbol\"] = 16] = \"CurrencySymbol\";\n  LocaleDataIndex[LocaleDataIndex[\"CurrencyName\"] = 17] = \"CurrencyName\";\n  LocaleDataIndex[LocaleDataIndex[\"Currencies\"] = 18] = \"Currencies\";\n  LocaleDataIndex[LocaleDataIndex[\"Directionality\"] = 19] = \"Directionality\";\n  LocaleDataIndex[LocaleDataIndex[\"PluralCase\"] = 20] = \"PluralCase\";\n  LocaleDataIndex[LocaleDataIndex[\"ExtraData\"] = 21] = \"ExtraData\";\n})(LocaleDataIndex || (LocaleDataIndex = {}));\n/**\n * Returns the canonical form of a locale name - lowercase with `_` replaced with `-`.\n */\nfunction normalizeLocale(locale) {\n  return locale.toLowerCase().replace(/_/g, '-');\n}\nconst pluralMapping = ['zero', 'one', 'two', 'few', 'many'];\n/**\n * Returns the plural case based on the locale\n */\nfunction getPluralCase(value, locale) {\n  const plural = getLocalePluralCase(locale)(parseInt(value, 10));\n  const result = pluralMapping[plural];\n  return result !== undefined ? result : 'other';\n}\n/**\n * The locale id that the application is using by default (for translations and ICU expressions).\n */\nconst DEFAULT_LOCALE_ID = 'en-US';\n/**\n * USD currency code that the application uses by default for CurrencyPipe when no\n * DEFAULT_CURRENCY_CODE is provided.\n */\nconst USD_CURRENCY_CODE = 'USD';\n\n/**\n * Marks that the next string is an element name.\n *\n * See `I18nMutateOpCodes` documentation.\n */\nconst ELEMENT_MARKER = {\n  marker: 'element'\n};\n/**\n * Marks that the next string is comment text need for ICU.\n *\n * See `I18nMutateOpCodes` documentation.\n */\nconst ICU_MARKER = {\n  marker: 'ICU'\n};\n/**\n * See `I18nCreateOpCodes`\n */\nvar I18nCreateOpCode;\n(function (I18nCreateOpCode) {\n  /**\n   * Number of bits to shift index so that it can be combined with the `APPEND_EAGERLY` and\n   * `COMMENT`.\n   */\n  I18nCreateOpCode[I18nCreateOpCode[\"SHIFT\"] = 2] = \"SHIFT\";\n  /**\n   * Should the node be appended to parent immediately after creation.\n   */\n  I18nCreateOpCode[I18nCreateOpCode[\"APPEND_EAGERLY\"] = 1] = \"APPEND_EAGERLY\";\n  /**\n   * If set the node should be comment (rather than a text) node.\n   */\n  I18nCreateOpCode[I18nCreateOpCode[\"COMMENT\"] = 2] = \"COMMENT\";\n})(I18nCreateOpCode || (I18nCreateOpCode = {}));\n\n/**\n * The locale id that the application is currently using (for translations and ICU expressions).\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n */\nlet LOCALE_ID$1 = DEFAULT_LOCALE_ID;\n/**\n * Sets the locale id that will be used for translations and ICU expressions.\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n *\n * @param localeId\n */\nfunction setLocaleId(localeId) {\n  assertDefined(localeId, `Expected localeId to be defined`);\n  if (typeof localeId === 'string') {\n    LOCALE_ID$1 = localeId.toLowerCase().replace(/_/g, '-');\n  }\n}\n/**\n * Gets the locale id that will be used for translations and ICU expressions.\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n */\nfunction getLocaleId() {\n  return LOCALE_ID$1;\n}\n\n/**\n * Find a node in front of which `currentTNode` should be inserted (takes i18n into account).\n *\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\n * takes `TNode.insertBeforeIndex` into account.\n *\n * @param parentTNode parent `TNode`\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\n * @param lView current `LView`\n */\nfunction getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView) {\n  const tNodeInsertBeforeIndex = currentTNode.insertBeforeIndex;\n  const insertBeforeIndex = Array.isArray(tNodeInsertBeforeIndex) ? tNodeInsertBeforeIndex[0] : tNodeInsertBeforeIndex;\n  if (insertBeforeIndex === null) {\n    return getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView);\n  } else {\n    ngDevMode && assertIndexInRange(lView, insertBeforeIndex);\n    return unwrapRNode(lView[insertBeforeIndex]);\n  }\n}\n/**\n * Process `TNode.insertBeforeIndex` by adding i18n text nodes.\n *\n * See `TNode.insertBeforeIndex`\n */\nfunction processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRElement) {\n  const tNodeInsertBeforeIndex = childTNode.insertBeforeIndex;\n  if (Array.isArray(tNodeInsertBeforeIndex)) {\n    // An array indicates that there are i18n nodes that need to be added as children of this\n    // `childRNode`. These i18n nodes were created before this `childRNode` was available and so\n    // only now can be added. The first element of the array is the normal index where we should\n    // insert the `childRNode`. Additional elements are the extra nodes to be added as children of\n    // `childRNode`.\n    ngDevMode && assertDomNode(childRNode);\n    let i18nParent = childRNode;\n    let anchorRNode = null;\n    if (!(childTNode.type & 3 /* TNodeType.AnyRNode */)) {\n      anchorRNode = i18nParent;\n      i18nParent = parentRElement;\n    }\n    if (i18nParent !== null && childTNode.componentOffset === -1) {\n      for (let i = 1; i < tNodeInsertBeforeIndex.length; i++) {\n        // No need to `unwrapRNode` because all of the indexes point to i18n text nodes.\n        // see `assertDomNode` below.\n        const i18nChild = lView[tNodeInsertBeforeIndex[i]];\n        nativeInsertBefore(renderer, i18nParent, i18nChild, anchorRNode, false);\n      }\n    }\n  }\n}\n\n/**\n * Add `tNode` to `previousTNodes` list and update relevant `TNode`s in `previousTNodes` list\n * `tNode.insertBeforeIndex`.\n *\n * Things to keep in mind:\n * 1. All i18n text nodes are encoded as `TNodeType.Element` and are created eagerly by the\n *    `ɵɵi18nStart` instruction.\n * 2. All `TNodeType.Placeholder` `TNodes` are elements which will be created later by\n *    `ɵɵelementStart` instruction.\n * 3. `ɵɵelementStart` instruction will create `TNode`s in the ascending `TNode.index` order. (So a\n *    smaller index `TNode` is guaranteed to be created before a larger one)\n *\n * We use the above three invariants to determine `TNode.insertBeforeIndex`.\n *\n * In an ideal world `TNode.insertBeforeIndex` would always be `TNode.next.index`. However,\n * this will not work because `TNode.next.index` may be larger than `TNode.index` which means that\n * the next node is not yet created and therefore we can't insert in front of it.\n *\n * Rule1: `TNode.insertBeforeIndex = null` if `TNode.next === null` (Initial condition, as we don't\n *        know if there will be further `TNode`s inserted after.)\n * Rule2: If `previousTNode` is created after the `tNode` being inserted, then\n *        `previousTNode.insertBeforeNode = tNode.index` (So when a new `tNode` is added we check\n *        previous to see if we can update its `insertBeforeTNode`)\n *\n * See `TNode.insertBeforeIndex` for more context.\n *\n * @param previousTNodes A list of previous TNodes so that we can easily traverse `TNode`s in\n *     reverse order. (If `TNode` would have `previous` this would not be necessary.)\n * @param newTNode A TNode to add to the `previousTNodes` list.\n */\nfunction addTNodeAndUpdateInsertBeforeIndex(previousTNodes, newTNode) {\n  // Start with Rule1\n  ngDevMode && assertEqual(newTNode.insertBeforeIndex, null, 'We expect that insertBeforeIndex is not set');\n  previousTNodes.push(newTNode);\n  if (previousTNodes.length > 1) {\n    for (let i = previousTNodes.length - 2; i >= 0; i--) {\n      const existingTNode = previousTNodes[i];\n      // Text nodes are created eagerly and so they don't need their `indexBeforeIndex` updated.\n      // It is safe to ignore them.\n      if (!isI18nText(existingTNode)) {\n        if (isNewTNodeCreatedBefore(existingTNode, newTNode) && getInsertBeforeIndex(existingTNode) === null) {\n          // If it was created before us in time, (and it does not yet have `insertBeforeIndex`)\n          // then add the `insertBeforeIndex`.\n          setInsertBeforeIndex(existingTNode, newTNode.index);\n        }\n      }\n    }\n  }\n}\nfunction isI18nText(tNode) {\n  return !(tNode.type & 64 /* TNodeType.Placeholder */);\n}\n\nfunction isNewTNodeCreatedBefore(existingTNode, newTNode) {\n  return isI18nText(newTNode) || existingTNode.index > newTNode.index;\n}\nfunction getInsertBeforeIndex(tNode) {\n  const index = tNode.insertBeforeIndex;\n  return Array.isArray(index) ? index[0] : index;\n}\nfunction setInsertBeforeIndex(tNode, value) {\n  const index = tNode.insertBeforeIndex;\n  if (Array.isArray(index)) {\n    // Array is stored if we have to insert child nodes. See `TNode.insertBeforeIndex`\n    index[0] = value;\n  } else {\n    setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);\n    tNode.insertBeforeIndex = value;\n  }\n}\n\n/**\n * Retrieve `TIcu` at a given `index`.\n *\n * The `TIcu` can be stored either directly (if it is nested ICU) OR\n * it is stored inside tho `TIcuContainer` if it is top level ICU.\n *\n * The reason for this is that the top level ICU need a `TNode` so that they are part of the render\n * tree, but nested ICU's have no TNode, because we don't know ahead of time if the nested ICU is\n * expressed (parent ICU may have selected a case which does not contain it.)\n *\n * @param tView Current `TView`.\n * @param index Index where the value should be read from.\n */\nfunction getTIcu(tView, index) {\n  const value = tView.data[index];\n  if (value === null || typeof value === 'string') return null;\n  if (ngDevMode && !(value.hasOwnProperty('tView') || value.hasOwnProperty('currentCaseLViewIndex'))) {\n    throwError('We expect to get \\'null\\'|\\'TIcu\\'|\\'TIcuContainer\\', but got: ' + value);\n  }\n  // Here the `value.hasOwnProperty('currentCaseLViewIndex')` is a polymorphic read as it can be\n  // either TIcu or TIcuContainerNode. This is not ideal, but we still think it is OK because it\n  // will be just two cases which fits into the browser inline cache (inline cache can take up to\n  // 4)\n  const tIcu = value.hasOwnProperty('currentCaseLViewIndex') ? value : value.value;\n  ngDevMode && assertTIcu(tIcu);\n  return tIcu;\n}\n/**\n * Store `TIcu` at a give `index`.\n *\n * The `TIcu` can be stored either directly (if it is nested ICU) OR\n * it is stored inside tho `TIcuContainer` if it is top level ICU.\n *\n * The reason for this is that the top level ICU need a `TNode` so that they are part of the render\n * tree, but nested ICU's have no TNode, because we don't know ahead of time if the nested ICU is\n * expressed (parent ICU may have selected a case which does not contain it.)\n *\n * @param tView Current `TView`.\n * @param index Index where the value should be stored at in `Tview.data`\n * @param tIcu The TIcu to store.\n */\nfunction setTIcu(tView, index, tIcu) {\n  const tNode = tView.data[index];\n  ngDevMode && assertEqual(tNode === null || tNode.hasOwnProperty('tView'), true, 'We expect to get \\'null\\'|\\'TIcuContainer\\'');\n  if (tNode === null) {\n    tView.data[index] = tIcu;\n  } else {\n    ngDevMode && assertTNodeType(tNode, 32 /* TNodeType.Icu */);\n    tNode.value = tIcu;\n  }\n}\n/**\n * Set `TNode.insertBeforeIndex` taking the `Array` into account.\n *\n * See `TNode.insertBeforeIndex`\n */\nfunction setTNodeInsertBeforeIndex(tNode, index) {\n  ngDevMode && assertTNode(tNode);\n  let insertBeforeIndex = tNode.insertBeforeIndex;\n  if (insertBeforeIndex === null) {\n    setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);\n    insertBeforeIndex = tNode.insertBeforeIndex = [null /* may be updated to number later */, index];\n  } else {\n    assertEqual(Array.isArray(insertBeforeIndex), true, 'Expecting array here');\n    insertBeforeIndex.push(index);\n  }\n}\n/**\n * Create `TNode.type=TNodeType.Placeholder` node.\n *\n * See `TNodeType.Placeholder` for more information.\n */\nfunction createTNodePlaceholder(tView, previousTNodes, index) {\n  const tNode = createTNodeAtIndex(tView, index, 64 /* TNodeType.Placeholder */, null, null);\n  addTNodeAndUpdateInsertBeforeIndex(previousTNodes, tNode);\n  return tNode;\n}\n/**\n * Returns current ICU case.\n *\n * ICU cases are stored as index into the `TIcu.cases`.\n * At times it is necessary to communicate that the ICU case just switched and that next ICU update\n * should update all bindings regardless of the mask. In such a case the we store negative numbers\n * for cases which have just been switched. This function removes the negative flag.\n */\nfunction getCurrentICUCaseIndex(tIcu, lView) {\n  const currentCase = lView[tIcu.currentCaseLViewIndex];\n  return currentCase === null ? currentCase : currentCase < 0 ? ~currentCase : currentCase;\n}\nfunction getParentFromIcuCreateOpCode(mergedCode) {\n  return mergedCode >>> 17 /* IcuCreateOpCode.SHIFT_PARENT */;\n}\n\nfunction getRefFromIcuCreateOpCode(mergedCode) {\n  return (mergedCode & 131070 /* IcuCreateOpCode.MASK_REF */) >>> 1 /* IcuCreateOpCode.SHIFT_REF */;\n}\n\nfunction getInstructionFromIcuCreateOpCode(mergedCode) {\n  return mergedCode & 1 /* IcuCreateOpCode.MASK_INSTRUCTION */;\n}\n\nfunction icuCreateOpCode(opCode, parentIdx, refIdx) {\n  ngDevMode && assertGreaterThanOrEqual(parentIdx, 0, 'Missing parent index');\n  ngDevMode && assertGreaterThan(refIdx, 0, 'Missing ref index');\n  return opCode | parentIdx << 17 /* IcuCreateOpCode.SHIFT_PARENT */ | refIdx << 1 /* IcuCreateOpCode.SHIFT_REF */;\n}\n\n/**\n * Keep track of which input bindings in `ɵɵi18nExp` have changed.\n *\n * This is used to efficiently update expressions in i18n only when the corresponding input has\n * changed.\n *\n * 1) Each bit represents which of the `ɵɵi18nExp` has changed.\n * 2) There are 32 bits allowed in JS.\n * 3) Bit 32 is special as it is shared for all changes past 32. (In other words if you have more\n * than 32 `ɵɵi18nExp` then all changes past 32nd `ɵɵi18nExp` will be mapped to same bit. This means\n * that we may end up changing more than we need to. But i18n expressions with 32 bindings is rare\n * so in practice it should not be an issue.)\n */\nlet changeMask = 0b0;\n/**\n * Keeps track of which bit needs to be updated in `changeMask`\n *\n * This value gets incremented on every call to `ɵɵi18nExp`\n */\nlet changeMaskCounter = 0;\n/**\n * Keep track of which input bindings in `ɵɵi18nExp` have changed.\n *\n * `setMaskBit` gets invoked by each call to `ɵɵi18nExp`.\n *\n * @param hasChange did `ɵɵi18nExp` detect a change.\n */\nfunction setMaskBit(hasChange) {\n  if (hasChange) {\n    changeMask = changeMask | 1 << Math.min(changeMaskCounter, 31);\n  }\n  changeMaskCounter++;\n}\nfunction applyI18n(tView, lView, index) {\n  if (changeMaskCounter > 0) {\n    ngDevMode && assertDefined(tView, `tView should be defined`);\n    const tI18n = tView.data[index];\n    // When `index` points to an `ɵɵi18nAttributes` then we have an array otherwise `TI18n`\n    const updateOpCodes = Array.isArray(tI18n) ? tI18n : tI18n.update;\n    const bindingsStartIndex = getBindingIndex() - changeMaskCounter - 1;\n    applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask);\n  }\n  // Reset changeMask & maskBit to default for the next update cycle\n  changeMask = 0b0;\n  changeMaskCounter = 0;\n}\n/**\n * Apply `I18nCreateOpCodes` op-codes as stored in `TI18n.create`.\n *\n * Creates text (and comment) nodes which are internationalized.\n *\n * @param lView Current lView\n * @param createOpCodes Set of op-codes to apply\n * @param parentRNode Parent node (so that direct children can be added eagerly) or `null` if it is\n *     a root node.\n * @param insertInFrontOf DOM node that should be used as an anchor.\n */\nfunction applyCreateOpCodes(lView, createOpCodes, parentRNode, insertInFrontOf) {\n  const renderer = lView[RENDERER];\n  for (let i = 0; i < createOpCodes.length; i++) {\n    const opCode = createOpCodes[i++];\n    const text = createOpCodes[i];\n    const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;\n    const appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;\n    const index = opCode >>> I18nCreateOpCode.SHIFT;\n    let rNode = lView[index];\n    if (rNode === null) {\n      // We only create new DOM nodes if they don't already exist: If ICU switches case back to a\n      // case which was already instantiated, no need to create new DOM nodes.\n      rNode = lView[index] = isComment ? renderer.createComment(text) : createTextNode(renderer, text);\n    }\n    if (appendNow && parentRNode !== null) {\n      nativeInsertBefore(renderer, parentRNode, rNode, insertInFrontOf, false);\n    }\n  }\n}\n/**\n * Apply `I18nMutateOpCodes` OpCodes.\n *\n * @param tView Current `TView`\n * @param mutableOpCodes Mutable OpCodes to process\n * @param lView Current `LView`\n * @param anchorRNode place where the i18n node should be inserted.\n */\nfunction applyMutableOpCodes(tView, mutableOpCodes, lView, anchorRNode) {\n  ngDevMode && assertDomNode(anchorRNode);\n  const renderer = lView[RENDERER];\n  // `rootIdx` represents the node into which all inserts happen.\n  let rootIdx = null;\n  // `rootRNode` represents the real node into which we insert. This can be different from\n  // `lView[rootIdx]` if we have projection.\n  //  - null we don't have a parent (as can be the case in when we are inserting into a root of\n  //    LView which has no parent.)\n  //  - `RElement` The element representing the root after taking projection into account.\n  let rootRNode;\n  for (let i = 0; i < mutableOpCodes.length; i++) {\n    const opCode = mutableOpCodes[i];\n    if (typeof opCode == 'string') {\n      const textNodeIndex = mutableOpCodes[++i];\n      if (lView[textNodeIndex] === null) {\n        ngDevMode && ngDevMode.rendererCreateTextNode++;\n        ngDevMode && assertIndexInRange(lView, textNodeIndex);\n        lView[textNodeIndex] = createTextNode(renderer, opCode);\n      }\n    } else if (typeof opCode == 'number') {\n      switch (opCode & 1 /* IcuCreateOpCode.MASK_INSTRUCTION */) {\n        case 0 /* IcuCreateOpCode.AppendChild */:\n          const parentIdx = getParentFromIcuCreateOpCode(opCode);\n          if (rootIdx === null) {\n            // The first operation should save the `rootIdx` because the first operation\n            // must insert into the root. (Only subsequent operations can insert into a dynamic\n            // parent)\n            rootIdx = parentIdx;\n            rootRNode = nativeParentNode(renderer, anchorRNode);\n          }\n          let insertInFrontOf;\n          let parentRNode;\n          if (parentIdx === rootIdx) {\n            insertInFrontOf = anchorRNode;\n            parentRNode = rootRNode;\n          } else {\n            insertInFrontOf = null;\n            parentRNode = unwrapRNode(lView[parentIdx]);\n          }\n          // FIXME(misko): Refactor with `processI18nText`\n          if (parentRNode !== null) {\n            // This can happen if the `LView` we are adding to is not attached to a parent `LView`.\n            // In such a case there is no \"root\" we can attach to. This is fine, as we still need to\n            // create the elements. When the `LView` gets later added to a parent these \"root\" nodes\n            // get picked up and added.\n            ngDevMode && assertDomNode(parentRNode);\n            const refIdx = getRefFromIcuCreateOpCode(opCode);\n            ngDevMode && assertGreaterThan(refIdx, HEADER_OFFSET, 'Missing ref');\n            // `unwrapRNode` is not needed here as all of these point to RNodes as part of the i18n\n            // which can't have components.\n            const child = lView[refIdx];\n            ngDevMode && assertDomNode(child);\n            nativeInsertBefore(renderer, parentRNode, child, insertInFrontOf, false);\n            const tIcu = getTIcu(tView, refIdx);\n            if (tIcu !== null && typeof tIcu === 'object') {\n              // If we just added a comment node which has ICU then that ICU may have already been\n              // rendered and therefore we need to re-add it here.\n              ngDevMode && assertTIcu(tIcu);\n              const caseIndex = getCurrentICUCaseIndex(tIcu, lView);\n              if (caseIndex !== null) {\n                applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, lView[tIcu.anchorIdx]);\n              }\n            }\n          }\n          break;\n        case 1 /* IcuCreateOpCode.Attr */:\n          const elementNodeIndex = opCode >>> 1 /* IcuCreateOpCode.SHIFT_REF */;\n          const attrName = mutableOpCodes[++i];\n          const attrValue = mutableOpCodes[++i];\n          // This code is used for ICU expressions only, since we don't support\n          // directives/components in ICUs, we don't need to worry about inputs here\n          setElementAttribute(renderer, getNativeByIndex(elementNodeIndex, lView), null, null, attrName, attrValue, null);\n          break;\n        default:\n          if (ngDevMode) {\n            throw new RuntimeError(700 /* RuntimeErrorCode.INVALID_I18N_STRUCTURE */, `Unable to determine the type of mutate operation for \"${opCode}\"`);\n          }\n      }\n    } else {\n      switch (opCode) {\n        case ICU_MARKER:\n          const commentValue = mutableOpCodes[++i];\n          const commentNodeIndex = mutableOpCodes[++i];\n          if (lView[commentNodeIndex] === null) {\n            ngDevMode && assertEqual(typeof commentValue, 'string', `Expected \"${commentValue}\" to be a comment node value`);\n            ngDevMode && ngDevMode.rendererCreateComment++;\n            ngDevMode && assertIndexInExpandoRange(lView, commentNodeIndex);\n            const commentRNode = lView[commentNodeIndex] = createCommentNode(renderer, commentValue);\n            // FIXME(misko): Attaching patch data is only needed for the root (Also add tests)\n            attachPatchData(commentRNode, lView);\n          }\n          break;\n        case ELEMENT_MARKER:\n          const tagName = mutableOpCodes[++i];\n          const elementNodeIndex = mutableOpCodes[++i];\n          if (lView[elementNodeIndex] === null) {\n            ngDevMode && assertEqual(typeof tagName, 'string', `Expected \"${tagName}\" to be an element node tag name`);\n            ngDevMode && ngDevMode.rendererCreateElement++;\n            ngDevMode && assertIndexInExpandoRange(lView, elementNodeIndex);\n            const elementRNode = lView[elementNodeIndex] = createElementNode(renderer, tagName, null);\n            // FIXME(misko): Attaching patch data is only needed for the root (Also add tests)\n            attachPatchData(elementRNode, lView);\n          }\n          break;\n        default:\n          ngDevMode && throwError(`Unable to determine the type of mutate operation for \"${opCode}\"`);\n      }\n    }\n  }\n}\n/**\n * Apply `I18nUpdateOpCodes` OpCodes\n *\n * @param tView Current `TView`\n * @param lView Current `LView`\n * @param updateOpCodes OpCodes to process\n * @param bindingsStartIndex Location of the first `ɵɵi18nApply`\n * @param changeMask Each bit corresponds to a `ɵɵi18nExp` (Counting backwards from\n *     `bindingsStartIndex`)\n */\nfunction applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask) {\n  for (let i = 0; i < updateOpCodes.length; i++) {\n    // bit code to check if we should apply the next update\n    const checkBit = updateOpCodes[i];\n    // Number of opCodes to skip until next set of update codes\n    const skipCodes = updateOpCodes[++i];\n    if (checkBit & changeMask) {\n      // The value has been updated since last checked\n      let value = '';\n      for (let j = i + 1; j <= i + skipCodes; j++) {\n        const opCode = updateOpCodes[j];\n        if (typeof opCode == 'string') {\n          value += opCode;\n        } else if (typeof opCode == 'number') {\n          if (opCode < 0) {\n            // Negative opCode represent `i18nExp` values offset.\n            value += renderStringify(lView[bindingsStartIndex - opCode]);\n          } else {\n            const nodeIndex = opCode >>> 2 /* I18nUpdateOpCode.SHIFT_REF */;\n            switch (opCode & 3 /* I18nUpdateOpCode.MASK_OPCODE */) {\n              case 1 /* I18nUpdateOpCode.Attr */:\n                const propName = updateOpCodes[++j];\n                const sanitizeFn = updateOpCodes[++j];\n                const tNodeOrTagName = tView.data[nodeIndex];\n                ngDevMode && assertDefined(tNodeOrTagName, 'Experting TNode or string');\n                if (typeof tNodeOrTagName === 'string') {\n                  // IF we don't have a `TNode`, then we are an element in ICU (as ICU content does\n                  // not have TNode), in which case we know that there are no directives, and hence\n                  // we use attribute setting.\n                  setElementAttribute(lView[RENDERER], lView[nodeIndex], null, tNodeOrTagName, propName, value, sanitizeFn);\n                } else {\n                  elementPropertyInternal(tView, tNodeOrTagName, lView, propName, value, lView[RENDERER], sanitizeFn, false);\n                }\n                break;\n              case 0 /* I18nUpdateOpCode.Text */:\n                const rText = lView[nodeIndex];\n                rText !== null && updateTextNode(lView[RENDERER], rText, value);\n                break;\n              case 2 /* I18nUpdateOpCode.IcuSwitch */:\n                applyIcuSwitchCase(tView, getTIcu(tView, nodeIndex), lView, value);\n                break;\n              case 3 /* I18nUpdateOpCode.IcuUpdate */:\n                applyIcuUpdateCase(tView, getTIcu(tView, nodeIndex), bindingsStartIndex, lView);\n                break;\n            }\n          }\n        }\n      }\n    } else {\n      const opCode = updateOpCodes[i + 1];\n      if (opCode > 0 && (opCode & 3 /* I18nUpdateOpCode.MASK_OPCODE */) === 3 /* I18nUpdateOpCode.IcuUpdate */) {\n        // Special case for the `icuUpdateCase`. It could be that the mask did not match, but\n        // we still need to execute `icuUpdateCase` because the case has changed recently due to\n        // previous `icuSwitchCase` instruction. (`icuSwitchCase` and `icuUpdateCase` always come in\n        // pairs.)\n        const nodeIndex = opCode >>> 2 /* I18nUpdateOpCode.SHIFT_REF */;\n        const tIcu = getTIcu(tView, nodeIndex);\n        const currentIndex = lView[tIcu.currentCaseLViewIndex];\n        if (currentIndex < 0) {\n          applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView);\n        }\n      }\n    }\n    i += skipCodes;\n  }\n}\n/**\n * Apply OpCodes associated with updating an existing ICU.\n *\n * @param tView Current `TView`\n * @param tIcu Current `TIcu`\n * @param bindingsStartIndex Location of the first `ɵɵi18nApply`\n * @param lView Current `LView`\n */\nfunction applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView) {\n  ngDevMode && assertIndexInRange(lView, tIcu.currentCaseLViewIndex);\n  let activeCaseIndex = lView[tIcu.currentCaseLViewIndex];\n  if (activeCaseIndex !== null) {\n    let mask = changeMask;\n    if (activeCaseIndex < 0) {\n      // Clear the flag.\n      // Negative number means that the ICU was freshly created and we need to force the update.\n      activeCaseIndex = lView[tIcu.currentCaseLViewIndex] = ~activeCaseIndex;\n      // -1 is same as all bits on, which simulates creation since it marks all bits dirty\n      mask = -1;\n    }\n    applyUpdateOpCodes(tView, lView, tIcu.update[activeCaseIndex], bindingsStartIndex, mask);\n  }\n}\n/**\n * Apply OpCodes associated with switching a case on ICU.\n *\n * This involves tearing down existing case and than building up a new case.\n *\n * @param tView Current `TView`\n * @param tIcu Current `TIcu`\n * @param lView Current `LView`\n * @param value Value of the case to update to.\n */\nfunction applyIcuSwitchCase(tView, tIcu, lView, value) {\n  // Rebuild a new case for this ICU\n  const caseIndex = getCaseIndex(tIcu, value);\n  let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);\n  if (activeCaseIndex !== caseIndex) {\n    applyIcuSwitchCaseRemove(tView, tIcu, lView);\n    lView[tIcu.currentCaseLViewIndex] = caseIndex === null ? null : ~caseIndex;\n    if (caseIndex !== null) {\n      // Add the nodes for the new case\n      const anchorRNode = lView[tIcu.anchorIdx];\n      if (anchorRNode) {\n        ngDevMode && assertDomNode(anchorRNode);\n        applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, anchorRNode);\n      }\n    }\n  }\n}\n/**\n * Apply OpCodes associated with tearing ICU case.\n *\n * This involves tearing down existing case and than building up a new case.\n *\n * @param tView Current `TView`\n * @param tIcu Current `TIcu`\n * @param lView Current `LView`\n */\nfunction applyIcuSwitchCaseRemove(tView, tIcu, lView) {\n  let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);\n  if (activeCaseIndex !== null) {\n    const removeCodes = tIcu.remove[activeCaseIndex];\n    for (let i = 0; i < removeCodes.length; i++) {\n      const nodeOrIcuIndex = removeCodes[i];\n      if (nodeOrIcuIndex > 0) {\n        // Positive numbers are `RNode`s.\n        const rNode = getNativeByIndex(nodeOrIcuIndex, lView);\n        rNode !== null && nativeRemoveNode(lView[RENDERER], rNode);\n      } else {\n        // Negative numbers are ICUs\n        applyIcuSwitchCaseRemove(tView, getTIcu(tView, ~nodeOrIcuIndex), lView);\n      }\n    }\n  }\n}\n/**\n * Returns the index of the current case of an ICU expression depending on the main binding value\n *\n * @param icuExpression\n * @param bindingValue The value of the main binding used by this ICU expression\n */\nfunction getCaseIndex(icuExpression, bindingValue) {\n  let index = icuExpression.cases.indexOf(bindingValue);\n  if (index === -1) {\n    switch (icuExpression.type) {\n      case 1 /* IcuType.plural */:\n        {\n          const resolvedCase = getPluralCase(bindingValue, getLocaleId());\n          index = icuExpression.cases.indexOf(resolvedCase);\n          if (index === -1 && resolvedCase !== 'other') {\n            index = icuExpression.cases.indexOf('other');\n          }\n          break;\n        }\n      case 0 /* IcuType.select */:\n        {\n          index = icuExpression.cases.indexOf('other');\n          break;\n        }\n    }\n  }\n  return index === -1 ? null : index;\n}\nfunction loadIcuContainerVisitor() {\n  const _stack = [];\n  let _index = -1;\n  let _lView;\n  let _removes;\n  /**\n   * Retrieves a set of root nodes from `TIcu.remove`. Used by `TNodeType.ICUContainer`\n   * to determine which root belong to the ICU.\n   *\n   * Example of usage.\n   * ```\n   * const nextRNode = icuContainerIteratorStart(tIcuContainerNode, lView);\n   * let rNode: RNode|null;\n   * while(rNode = nextRNode()) {\n   *   console.log(rNode);\n   * }\n   * ```\n   *\n   * @param tIcuContainerNode Current `TIcuContainerNode`\n   * @param lView `LView` where the `RNode`s should be looked up.\n   */\n  function icuContainerIteratorStart(tIcuContainerNode, lView) {\n    _lView = lView;\n    while (_stack.length) _stack.pop();\n    ngDevMode && assertTNodeForLView(tIcuContainerNode, lView);\n    enterIcu(tIcuContainerNode.value, lView);\n    return icuContainerIteratorNext;\n  }\n  function enterIcu(tIcu, lView) {\n    _index = 0;\n    const currentCase = getCurrentICUCaseIndex(tIcu, lView);\n    if (currentCase !== null) {\n      ngDevMode && assertNumberInRange(currentCase, 0, tIcu.cases.length - 1);\n      _removes = tIcu.remove[currentCase];\n    } else {\n      _removes = EMPTY_ARRAY;\n    }\n  }\n  function icuContainerIteratorNext() {\n    if (_index < _removes.length) {\n      const removeOpCode = _removes[_index++];\n      ngDevMode && assertNumber(removeOpCode, 'Expecting OpCode number');\n      if (removeOpCode > 0) {\n        const rNode = _lView[removeOpCode];\n        ngDevMode && assertDomNode(rNode);\n        return rNode;\n      } else {\n        _stack.push(_index, _removes);\n        // ICUs are represented by negative indices\n        const tIcuIndex = ~removeOpCode;\n        const tIcu = _lView[TVIEW].data[tIcuIndex];\n        ngDevMode && assertTIcu(tIcu);\n        enterIcu(tIcu, _lView);\n        return icuContainerIteratorNext();\n      }\n    } else {\n      if (_stack.length === 0) {\n        return null;\n      } else {\n        _removes = _stack.pop();\n        _index = _stack.pop();\n        return icuContainerIteratorNext();\n      }\n    }\n  }\n  return icuContainerIteratorStart;\n}\n\n/**\n * Converts `I18nCreateOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nCreateOpCodes.debug` property if `ngDevMode` is enabled.\n * This function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nCreateOpCodes` if attached as a method.\n * @param opcodes `I18nCreateOpCodes` if invoked as a function.\n */\nfunction i18nCreateOpCodesToString(opcodes) {\n  const createOpCodes = opcodes || (Array.isArray(this) ? this : []);\n  let lines = [];\n  for (let i = 0; i < createOpCodes.length; i++) {\n    const opCode = createOpCodes[i++];\n    const text = createOpCodes[i];\n    const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;\n    const appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;\n    const index = opCode >>> I18nCreateOpCode.SHIFT;\n    lines.push(`lView[${index}] = document.${isComment ? 'createComment' : 'createText'}(${JSON.stringify(text)});`);\n    if (appendNow) {\n      lines.push(`parent.appendChild(lView[${index}]);`);\n    }\n  }\n  return lines;\n}\n/**\n * Converts `I18nUpdateOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nUpdateOpCodes.debug` property if `ngDevMode` is enabled.\n * This function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nUpdateOpCodes` if attached as a method.\n * @param opcodes `I18nUpdateOpCodes` if invoked as a function.\n */\nfunction i18nUpdateOpCodesToString(opcodes) {\n  const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));\n  let lines = [];\n  function consumeOpCode(value) {\n    const ref = value >>> 2 /* I18nUpdateOpCode.SHIFT_REF */;\n    const opCode = value & 3 /* I18nUpdateOpCode.MASK_OPCODE */;\n    switch (opCode) {\n      case 0 /* I18nUpdateOpCode.Text */:\n        return `(lView[${ref}] as Text).textContent = $$$`;\n      case 1 /* I18nUpdateOpCode.Attr */:\n        const attrName = parser.consumeString();\n        const sanitizationFn = parser.consumeFunction();\n        const value = sanitizationFn ? `(${sanitizationFn})($$$)` : '$$$';\n        return `(lView[${ref}] as Element).setAttribute('${attrName}', ${value})`;\n      case 2 /* I18nUpdateOpCode.IcuSwitch */:\n        return `icuSwitchCase(${ref}, $$$)`;\n      case 3 /* I18nUpdateOpCode.IcuUpdate */:\n        return `icuUpdateCase(${ref})`;\n    }\n    throw new Error('unexpected OpCode');\n  }\n  while (parser.hasMore()) {\n    let mask = parser.consumeNumber();\n    let size = parser.consumeNumber();\n    const end = parser.i + size;\n    const statements = [];\n    let statement = '';\n    while (parser.i < end) {\n      let value = parser.consumeNumberOrString();\n      if (typeof value === 'string') {\n        statement += value;\n      } else if (value < 0) {\n        // Negative numbers are ref indexes\n        // Here `i` refers to current binding index. It is to signify that the value is relative,\n        // rather than absolute.\n        statement += '${lView[i' + value + ']}';\n      } else {\n        // Positive numbers are operations.\n        const opCodeText = consumeOpCode(value);\n        statements.push(opCodeText.replace('$$$', '`' + statement + '`') + ';');\n        statement = '';\n      }\n    }\n    lines.push(`if (mask & 0b${mask.toString(2)}) { ${statements.join(' ')} }`);\n  }\n  return lines;\n}\n/**\n * Converts `I18nCreateOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nCreateOpCodes.debug` if `ngDevMode` is enabled. This\n * function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nCreateOpCodes` if attached as a method.\n * @param opcodes `I18nCreateOpCodes` if invoked as a function.\n */\nfunction icuCreateOpCodesToString(opcodes) {\n  const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));\n  let lines = [];\n  function consumeOpCode(opCode) {\n    const parent = getParentFromIcuCreateOpCode(opCode);\n    const ref = getRefFromIcuCreateOpCode(opCode);\n    switch (getInstructionFromIcuCreateOpCode(opCode)) {\n      case 0 /* IcuCreateOpCode.AppendChild */:\n        return `(lView[${parent}] as Element).appendChild(lView[${lastRef}])`;\n      case 1 /* IcuCreateOpCode.Attr */:\n        return `(lView[${ref}] as Element).setAttribute(\"${parser.consumeString()}\", \"${parser.consumeString()}\")`;\n    }\n    throw new Error('Unexpected OpCode: ' + getInstructionFromIcuCreateOpCode(opCode));\n  }\n  let lastRef = -1;\n  while (parser.hasMore()) {\n    let value = parser.consumeNumberStringOrMarker();\n    if (value === ICU_MARKER) {\n      const text = parser.consumeString();\n      lastRef = parser.consumeNumber();\n      lines.push(`lView[${lastRef}] = document.createComment(\"${text}\")`);\n    } else if (value === ELEMENT_MARKER) {\n      const text = parser.consumeString();\n      lastRef = parser.consumeNumber();\n      lines.push(`lView[${lastRef}] = document.createElement(\"${text}\")`);\n    } else if (typeof value === 'string') {\n      lastRef = parser.consumeNumber();\n      lines.push(`lView[${lastRef}] = document.createTextNode(\"${value}\")`);\n    } else if (typeof value === 'number') {\n      const line = consumeOpCode(value);\n      line && lines.push(line);\n    } else {\n      throw new Error('Unexpected value');\n    }\n  }\n  return lines;\n}\n/**\n * Converts `I18nRemoveOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nRemoveOpCodes.debug` if `ngDevMode` is enabled. This\n * function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nRemoveOpCodes` if attached as a method.\n * @param opcodes `I18nRemoveOpCodes` if invoked as a function.\n */\nfunction i18nRemoveOpCodesToString(opcodes) {\n  const removeCodes = opcodes || (Array.isArray(this) ? this : []);\n  let lines = [];\n  for (let i = 0; i < removeCodes.length; i++) {\n    const nodeOrIcuIndex = removeCodes[i];\n    if (nodeOrIcuIndex > 0) {\n      // Positive numbers are `RNode`s.\n      lines.push(`remove(lView[${nodeOrIcuIndex}])`);\n    } else {\n      // Negative numbers are ICUs\n      lines.push(`removeNestedICU(${~nodeOrIcuIndex})`);\n    }\n  }\n  return lines;\n}\nclass OpCodeParser {\n  constructor(codes) {\n    this.i = 0;\n    this.codes = codes;\n  }\n  hasMore() {\n    return this.i < this.codes.length;\n  }\n  consumeNumber() {\n    let value = this.codes[this.i++];\n    assertNumber(value, 'expecting number in OpCode');\n    return value;\n  }\n  consumeString() {\n    let value = this.codes[this.i++];\n    assertString(value, 'expecting string in OpCode');\n    return value;\n  }\n  consumeFunction() {\n    let value = this.codes[this.i++];\n    if (value === null || typeof value === 'function') {\n      return value;\n    }\n    throw new Error('expecting function in OpCode');\n  }\n  consumeNumberOrString() {\n    let value = this.codes[this.i++];\n    if (typeof value === 'string') {\n      return value;\n    }\n    assertNumber(value, 'expecting number or string in OpCode');\n    return value;\n  }\n  consumeNumberStringOrMarker() {\n    let value = this.codes[this.i++];\n    if (typeof value === 'string' || typeof value === 'number' || value == ICU_MARKER || value == ELEMENT_MARKER) {\n      return value;\n    }\n    assertNumber(value, 'expecting number, string, ICU_MARKER or ELEMENT_MARKER in OpCode');\n    return value;\n  }\n}\nconst BINDING_REGEXP = /�(\\d+):?\\d*�/gi;\nconst ICU_REGEXP = /({\\s*�\\d+:?\\d*�\\s*,\\s*\\S{6}\\s*,[\\s\\S]*})/gi;\nconst NESTED_ICU = /�(\\d+)�/;\nconst ICU_BLOCK_REGEXP = /^\\s*(�\\d+:?\\d*�)\\s*,\\s*(select|plural)\\s*,/;\nconst MARKER = `�`;\nconst SUBTEMPLATE_REGEXP = /�\\/?\\*(\\d+:\\d+)�/gi;\nconst PH_REGEXP = /�(\\/?[#*]\\d+):?\\d*�/gi;\n/**\n * Angular uses the special entity &ngsp; as a placeholder for non-removable space.\n * It's replaced by the 0xE500 PUA (Private Use Areas) unicode character and later on replaced by a\n * space.\n * We are re-implementing the same idea since translations might contain this special character.\n */\nconst NGSP_UNICODE_REGEXP = /\\uE500/g;\nfunction replaceNgsp(value) {\n  return value.replace(NGSP_UNICODE_REGEXP, ' ');\n}\n/**\n * Patch a `debug` property getter on top of the existing object.\n *\n * NOTE: always call this method with `ngDevMode && attachDebugObject(...)`\n *\n * @param obj Object to patch\n * @param debugGetter Getter returning a value to patch\n */\nfunction attachDebugGetter(obj, debugGetter) {\n  if (ngDevMode) {\n    Object.defineProperty(obj, 'debug', {\n      get: debugGetter,\n      enumerable: false\n    });\n  } else {\n    throw new Error('This method should be guarded with `ngDevMode` so that it can be tree shaken in production!');\n  }\n}\n/**\n * Create dynamic nodes from i18n translation block.\n *\n * - Text nodes are created synchronously\n * - TNodes are linked into tree lazily\n *\n * @param tView Current `TView`\n * @parentTNodeIndex index to the parent TNode of this i18n block\n * @param lView Current `LView`\n * @param index Index of `ɵɵi18nStart` instruction.\n * @param message Message to translate.\n * @param subTemplateIndex Index into the sub template of message translation. (ie in case of\n *     `ngIf`) (-1 otherwise)\n */\nfunction i18nStartFirstCreatePass(tView, parentTNodeIndex, lView, index, message, subTemplateIndex) {\n  const rootTNode = getCurrentParentTNode();\n  const createOpCodes = [];\n  const updateOpCodes = [];\n  const existingTNodeStack = [[]];\n  if (ngDevMode) {\n    attachDebugGetter(createOpCodes, i18nCreateOpCodesToString);\n    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\n  }\n  message = getTranslationForTemplate(message, subTemplateIndex);\n  const msgParts = replaceNgsp(message).split(PH_REGEXP);\n  for (let i = 0; i < msgParts.length; i++) {\n    let value = msgParts[i];\n    if ((i & 1) === 0) {\n      // Even indexes are text (including bindings & ICU expressions)\n      const parts = i18nParseTextIntoPartsAndICU(value);\n      for (let j = 0; j < parts.length; j++) {\n        let part = parts[j];\n        if ((j & 1) === 0) {\n          // `j` is odd therefore `part` is string\n          const text = part;\n          ngDevMode && assertString(text, 'Parsed ICU part should be string');\n          if (text !== '') {\n            i18nStartFirstCreatePassProcessTextNode(tView, rootTNode, existingTNodeStack[0], createOpCodes, updateOpCodes, lView, text);\n          }\n        } else {\n          // `j` is Even therefor `part` is an `ICUExpression`\n          const icuExpression = part;\n          // Verify that ICU expression has the right shape. Translations might contain invalid\n          // constructions (while original messages were correct), so ICU parsing at runtime may\n          // not succeed (thus `icuExpression` remains a string).\n          // Note: we intentionally retain the error here by not using `ngDevMode`, because\n          // the value can change based on the locale and users aren't guaranteed to hit\n          // an invalid string while they're developing.\n          if (typeof icuExpression !== 'object') {\n            throw new Error(`Unable to parse ICU expression in \"${message}\" message.`);\n          }\n          const icuContainerTNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodeStack[0], lView, createOpCodes, ngDevMode ? `ICU ${index}:${icuExpression.mainBinding}` : '', true);\n          const icuNodeIndex = icuContainerTNode.index;\n          ngDevMode && assertGreaterThanOrEqual(icuNodeIndex, HEADER_OFFSET, 'Index must be in absolute LView offset');\n          icuStart(tView, lView, updateOpCodes, parentTNodeIndex, icuExpression, icuNodeIndex);\n        }\n      }\n    } else {\n      // Odd indexes are placeholders (elements and sub-templates)\n      // At this point value is something like: '/#1:2' (originally coming from '�/#1:2�')\n      const isClosing = value.charCodeAt(0) === 47 /* CharCode.SLASH */;\n      const type = value.charCodeAt(isClosing ? 1 : 0);\n      ngDevMode && assertOneOf(type, 42 /* CharCode.STAR */, 35 /* CharCode.HASH */);\n      const index = HEADER_OFFSET + Number.parseInt(value.substring(isClosing ? 2 : 1));\n      if (isClosing) {\n        existingTNodeStack.shift();\n        setCurrentTNode(getCurrentParentTNode(), false);\n      } else {\n        const tNode = createTNodePlaceholder(tView, existingTNodeStack[0], index);\n        existingTNodeStack.unshift([]);\n        setCurrentTNode(tNode, true);\n      }\n    }\n  }\n  tView.data[index] = {\n    create: createOpCodes,\n    update: updateOpCodes\n  };\n}\n/**\n * Allocate space in i18n Range add create OpCode instruction to create a text or comment node.\n *\n * @param tView Current `TView` needed to allocate space in i18n range.\n * @param rootTNode Root `TNode` of the i18n block. This node determines if the new TNode will be\n *     added as part of the `i18nStart` instruction or as part of the `TNode.insertBeforeIndex`.\n * @param existingTNodes internal state for `addTNodeAndUpdateInsertBeforeIndex`.\n * @param lView Current `LView` needed to allocate space in i18n range.\n * @param createOpCodes Array storing `I18nCreateOpCodes` where new opCodes will be added.\n * @param text Text to be added when the `Text` or `Comment` node will be created.\n * @param isICU true if a `Comment` node for ICU (instead of `Text`) node should be created.\n */\nfunction createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, text, isICU) {\n  const i18nNodeIdx = allocExpando(tView, lView, 1, null);\n  let opCode = i18nNodeIdx << I18nCreateOpCode.SHIFT;\n  let parentTNode = getCurrentParentTNode();\n  if (rootTNode === parentTNode) {\n    // FIXME(misko): A null `parentTNode` should represent when we fall of the `LView` boundary.\n    // (there is no parent), but in some circumstances (because we are inconsistent about how we set\n    // `previousOrParentTNode`) it could point to `rootTNode` So this is a work around.\n    parentTNode = null;\n  }\n  if (parentTNode === null) {\n    // If we don't have a parent that means that we can eagerly add nodes.\n    // If we have a parent than these nodes can't be added now (as the parent has not been created\n    // yet) and instead the `parentTNode` is responsible for adding it. See\n    // `TNode.insertBeforeIndex`\n    opCode |= I18nCreateOpCode.APPEND_EAGERLY;\n  }\n  if (isICU) {\n    opCode |= I18nCreateOpCode.COMMENT;\n    ensureIcuContainerVisitorLoaded(loadIcuContainerVisitor);\n  }\n  createOpCodes.push(opCode, text === null ? '' : text);\n  // We store `{{?}}` so that when looking at debug `TNodeType.template` we can see where the\n  // bindings are.\n  const tNode = createTNodeAtIndex(tView, i18nNodeIdx, isICU ? 32 /* TNodeType.Icu */ : 1 /* TNodeType.Text */, text === null ? ngDevMode ? '{{?}}' : '' : text, null);\n  addTNodeAndUpdateInsertBeforeIndex(existingTNodes, tNode);\n  const tNodeIdx = tNode.index;\n  setCurrentTNode(tNode, false /* Text nodes are self closing */);\n  if (parentTNode !== null && rootTNode !== parentTNode) {\n    // We are a child of deeper node (rather than a direct child of `i18nStart` instruction.)\n    // We have to make sure to add ourselves to the parent.\n    setTNodeInsertBeforeIndex(parentTNode, tNodeIdx);\n  }\n  return tNode;\n}\n/**\n * Processes text node in i18n block.\n *\n * Text nodes can have:\n * - Create instruction in `createOpCodes` for creating the text node.\n * - Allocate spec for text node in i18n range of `LView`\n * - If contains binding:\n *    - bindings => allocate space in i18n range of `LView` to store the binding value.\n *    - populate `updateOpCodes` with update instructions.\n *\n * @param tView Current `TView`\n * @param rootTNode Root `TNode` of the i18n block. This node determines if the new TNode will\n *     be added as part of the `i18nStart` instruction or as part of the\n *     `TNode.insertBeforeIndex`.\n * @param existingTNodes internal state for `addTNodeAndUpdateInsertBeforeIndex`.\n * @param createOpCodes Location where the creation OpCodes will be stored.\n * @param lView Current `LView`\n * @param text The translated text (which may contain binding)\n */\nfunction i18nStartFirstCreatePassProcessTextNode(tView, rootTNode, existingTNodes, createOpCodes, updateOpCodes, lView, text) {\n  const hasBinding = text.match(BINDING_REGEXP);\n  const tNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, hasBinding ? null : text, false);\n  if (hasBinding) {\n    generateBindingUpdateOpCodes(updateOpCodes, text, tNode.index, null, 0, null);\n  }\n}\n/**\n * See `i18nAttributes` above.\n */\nfunction i18nAttributesFirstPass(tView, index, values) {\n  const previousElement = getCurrentTNode();\n  const previousElementIndex = previousElement.index;\n  const updateOpCodes = [];\n  if (ngDevMode) {\n    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\n  }\n  if (tView.firstCreatePass && tView.data[index] === null) {\n    for (let i = 0; i < values.length; i += 2) {\n      const attrName = values[i];\n      const message = values[i + 1];\n      if (message !== '') {\n        // Check if attribute value contains an ICU and throw an error if that's the case.\n        // ICUs in element attributes are not supported.\n        // Note: we intentionally retain the error here by not using `ngDevMode`, because\n        // the `value` can change based on the locale and users aren't guaranteed to hit\n        // an invalid string while they're developing.\n        if (ICU_REGEXP.test(message)) {\n          throw new Error(`ICU expressions are not supported in attributes. Message: \"${message}\".`);\n        }\n        // i18n attributes that hit this code path are guaranteed to have bindings, because\n        // the compiler treats static i18n attributes as regular attribute bindings.\n        // Since this may not be the first i18n attribute on this element we need to pass in how\n        // many previous bindings there have already been.\n        generateBindingUpdateOpCodes(updateOpCodes, message, previousElementIndex, attrName, countBindings(updateOpCodes), null);\n      }\n    }\n    tView.data[index] = updateOpCodes;\n  }\n}\n/**\n * Generate the OpCodes to update the bindings of a string.\n *\n * @param updateOpCodes Place where the update opcodes will be stored.\n * @param str The string containing the bindings.\n * @param destinationNode Index of the destination node which will receive the binding.\n * @param attrName Name of the attribute, if the string belongs to an attribute.\n * @param sanitizeFn Sanitization function used to sanitize the string after update, if necessary.\n * @param bindingStart The lView index of the next expression that can be bound via an opCode.\n * @returns The mask value for these bindings\n */\nfunction generateBindingUpdateOpCodes(updateOpCodes, str, destinationNode, attrName, bindingStart, sanitizeFn) {\n  ngDevMode && assertGreaterThanOrEqual(destinationNode, HEADER_OFFSET, 'Index must be in absolute LView offset');\n  const maskIndex = updateOpCodes.length; // Location of mask\n  const sizeIndex = maskIndex + 1; // location of size for skipping\n  updateOpCodes.push(null, null); // Alloc space for mask and size\n  const startIndex = maskIndex + 2; // location of first allocation.\n  if (ngDevMode) {\n    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\n  }\n  const textParts = str.split(BINDING_REGEXP);\n  let mask = 0;\n  for (let j = 0; j < textParts.length; j++) {\n    const textValue = textParts[j];\n    if (j & 1) {\n      // Odd indexes are bindings\n      const bindingIndex = bindingStart + parseInt(textValue, 10);\n      updateOpCodes.push(-1 - bindingIndex);\n      mask = mask | toMaskBit(bindingIndex);\n    } else if (textValue !== '') {\n      // Even indexes are text\n      updateOpCodes.push(textValue);\n    }\n  }\n  updateOpCodes.push(destinationNode << 2 /* I18nUpdateOpCode.SHIFT_REF */ | (attrName ? 1 /* I18nUpdateOpCode.Attr */ : 0 /* I18nUpdateOpCode.Text */));\n  if (attrName) {\n    updateOpCodes.push(attrName, sanitizeFn);\n  }\n  updateOpCodes[maskIndex] = mask;\n  updateOpCodes[sizeIndex] = updateOpCodes.length - startIndex;\n  return mask;\n}\n/**\n * Count the number of bindings in the given `opCodes`.\n *\n * It could be possible to speed this up, by passing the number of bindings found back from\n * `generateBindingUpdateOpCodes()` to `i18nAttributesFirstPass()` but this would then require more\n * complexity in the code and/or transient objects to be created.\n *\n * Since this function is only called once when the template is instantiated, is trivial in the\n * first instance (since `opCodes` will be an empty array), and it is not common for elements to\n * contain multiple i18n bound attributes, it seems like this is a reasonable compromise.\n */\nfunction countBindings(opCodes) {\n  let count = 0;\n  for (let i = 0; i < opCodes.length; i++) {\n    const opCode = opCodes[i];\n    // Bindings are negative numbers.\n    if (typeof opCode === 'number' && opCode < 0) {\n      count++;\n    }\n  }\n  return count;\n}\n/**\n * Convert binding index to mask bit.\n *\n * Each index represents a single bit on the bit-mask. Because bit-mask only has 32 bits, we make\n * the 32nd bit share all masks for all bindings higher than 32. Since it is extremely rare to\n * have more than 32 bindings this will be hit very rarely. The downside of hitting this corner\n * case is that we will execute binding code more often than necessary. (penalty of performance)\n */\nfunction toMaskBit(bindingIndex) {\n  return 1 << Math.min(bindingIndex, 31);\n}\nfunction isRootTemplateMessage(subTemplateIndex) {\n  return subTemplateIndex === -1;\n}\n/**\n * Removes everything inside the sub-templates of a message.\n */\nfunction removeInnerTemplateTranslation(message) {\n  let match;\n  let res = '';\n  let index = 0;\n  let inTemplate = false;\n  let tagMatched;\n  while ((match = SUBTEMPLATE_REGEXP.exec(message)) !== null) {\n    if (!inTemplate) {\n      res += message.substring(index, match.index + match[0].length);\n      tagMatched = match[1];\n      inTemplate = true;\n    } else {\n      if (match[0] === `${MARKER}/*${tagMatched}${MARKER}`) {\n        index = match.index;\n        inTemplate = false;\n      }\n    }\n  }\n  ngDevMode && assertEqual(inTemplate, false, `Tag mismatch: unable to find the end of the sub-template in the translation \"${message}\"`);\n  res += message.slice(index);\n  return res;\n}\n/**\n * Extracts a part of a message and removes the rest.\n *\n * This method is used for extracting a part of the message associated with a template. A\n * translated message can span multiple templates.\n *\n * Example:\n * ```\n * <div i18n>Translate <span *ngIf>me</span>!</div>\n * ```\n *\n * @param message The message to crop\n * @param subTemplateIndex Index of the sub-template to extract. If undefined it returns the\n * external template and removes all sub-templates.\n */\nfunction getTranslationForTemplate(message, subTemplateIndex) {\n  if (isRootTemplateMessage(subTemplateIndex)) {\n    // We want the root template message, ignore all sub-templates\n    return removeInnerTemplateTranslation(message);\n  } else {\n    // We want a specific sub-template\n    const start = message.indexOf(`:${subTemplateIndex}${MARKER}`) + 2 + subTemplateIndex.toString().length;\n    const end = message.search(new RegExp(`${MARKER}\\\\/\\\\*\\\\d+:${subTemplateIndex}${MARKER}`));\n    return removeInnerTemplateTranslation(message.substring(start, end));\n  }\n}\n/**\n * Generate the OpCodes for ICU expressions.\n *\n * @param icuExpression\n * @param index Index where the anchor is stored and an optional `TIcuContainerNode`\n *   - `lView[anchorIdx]` points to a `Comment` node representing the anchor for the ICU.\n *   - `tView.data[anchorIdx]` points to the `TIcuContainerNode` if ICU is root (`null` otherwise)\n */\nfunction icuStart(tView, lView, updateOpCodes, parentIdx, icuExpression, anchorIdx) {\n  ngDevMode && assertDefined(icuExpression, 'ICU expression must be defined');\n  let bindingMask = 0;\n  const tIcu = {\n    type: icuExpression.type,\n    currentCaseLViewIndex: allocExpando(tView, lView, 1, null),\n    anchorIdx,\n    cases: [],\n    create: [],\n    remove: [],\n    update: []\n  };\n  addUpdateIcuSwitch(updateOpCodes, icuExpression, anchorIdx);\n  setTIcu(tView, anchorIdx, tIcu);\n  const values = icuExpression.values;\n  for (let i = 0; i < values.length; i++) {\n    // Each value is an array of strings & other ICU expressions\n    const valueArr = values[i];\n    const nestedIcus = [];\n    for (let j = 0; j < valueArr.length; j++) {\n      const value = valueArr[j];\n      if (typeof value !== 'string') {\n        // It is an nested ICU expression\n        const icuIndex = nestedIcus.push(value) - 1;\n        // Replace nested ICU expression by a comment node\n        valueArr[j] = `<!--�${icuIndex}�-->`;\n      }\n    }\n    bindingMask = parseIcuCase(tView, tIcu, lView, updateOpCodes, parentIdx, icuExpression.cases[i], valueArr.join(''), nestedIcus) | bindingMask;\n  }\n  if (bindingMask) {\n    addUpdateIcuUpdate(updateOpCodes, bindingMask, anchorIdx);\n  }\n}\n/**\n * Parses text containing an ICU expression and produces a JSON object for it.\n * Original code from closure library, modified for Angular.\n *\n * @param pattern Text containing an ICU expression that needs to be parsed.\n *\n */\nfunction parseICUBlock(pattern) {\n  const cases = [];\n  const values = [];\n  let icuType = 1 /* IcuType.plural */;\n  let mainBinding = 0;\n  pattern = pattern.replace(ICU_BLOCK_REGEXP, function (str, binding, type) {\n    if (type === 'select') {\n      icuType = 0 /* IcuType.select */;\n    } else {\n      icuType = 1 /* IcuType.plural */;\n    }\n\n    mainBinding = parseInt(binding.slice(1), 10);\n    return '';\n  });\n  const parts = i18nParseTextIntoPartsAndICU(pattern);\n  // Looking for (key block)+ sequence. One of the keys has to be \"other\".\n  for (let pos = 0; pos < parts.length;) {\n    let key = parts[pos++].trim();\n    if (icuType === 1 /* IcuType.plural */) {\n      // Key can be \"=x\", we just want \"x\"\n      key = key.replace(/\\s*(?:=)?(\\w+)\\s*/, '$1');\n    }\n    if (key.length) {\n      cases.push(key);\n    }\n    const blocks = i18nParseTextIntoPartsAndICU(parts[pos++]);\n    if (cases.length > values.length) {\n      values.push(blocks);\n    }\n  }\n  // TODO(ocombe): support ICU expressions in attributes, see #21615\n  return {\n    type: icuType,\n    mainBinding: mainBinding,\n    cases,\n    values\n  };\n}\n/**\n * Breaks pattern into strings and top level {...} blocks.\n * Can be used to break a message into text and ICU expressions, or to break an ICU expression\n * into keys and cases. Original code from closure library, modified for Angular.\n *\n * @param pattern (sub)Pattern to be broken.\n * @returns An `Array<string|IcuExpression>` where:\n *   - odd positions: `string` => text between ICU expressions\n *   - even positions: `ICUExpression` => ICU expression parsed into `ICUExpression` record.\n */\nfunction i18nParseTextIntoPartsAndICU(pattern) {\n  if (!pattern) {\n    return [];\n  }\n  let prevPos = 0;\n  const braceStack = [];\n  const results = [];\n  const braces = /[{}]/g;\n  // lastIndex doesn't get set to 0 so we have to.\n  braces.lastIndex = 0;\n  let match;\n  while (match = braces.exec(pattern)) {\n    const pos = match.index;\n    if (match[0] == '}') {\n      braceStack.pop();\n      if (braceStack.length == 0) {\n        // End of the block.\n        const block = pattern.substring(prevPos, pos);\n        if (ICU_BLOCK_REGEXP.test(block)) {\n          results.push(parseICUBlock(block));\n        } else {\n          results.push(block);\n        }\n        prevPos = pos + 1;\n      }\n    } else {\n      if (braceStack.length == 0) {\n        const substring = pattern.substring(prevPos, pos);\n        results.push(substring);\n        prevPos = pos + 1;\n      }\n      braceStack.push('{');\n    }\n  }\n  const substring = pattern.substring(prevPos);\n  results.push(substring);\n  return results;\n}\n/**\n * Parses a node, its children and its siblings, and generates the mutate & update OpCodes.\n *\n */\nfunction parseIcuCase(tView, tIcu, lView, updateOpCodes, parentIdx, caseName, unsafeCaseHtml, nestedIcus) {\n  const create = [];\n  const remove = [];\n  const update = [];\n  if (ngDevMode) {\n    attachDebugGetter(create, icuCreateOpCodesToString);\n    attachDebugGetter(remove, i18nRemoveOpCodesToString);\n    attachDebugGetter(update, i18nUpdateOpCodesToString);\n  }\n  tIcu.cases.push(caseName);\n  tIcu.create.push(create);\n  tIcu.remove.push(remove);\n  tIcu.update.push(update);\n  const inertBodyHelper = getInertBodyHelper(getDocument());\n  const inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeCaseHtml);\n  ngDevMode && assertDefined(inertBodyElement, 'Unable to generate inert body element');\n  const inertRootNode = getTemplateContent(inertBodyElement) || inertBodyElement;\n  if (inertRootNode) {\n    return walkIcuTree(tView, tIcu, lView, updateOpCodes, create, remove, update, inertRootNode, parentIdx, nestedIcus, 0);\n  } else {\n    return 0;\n  }\n}\nfunction walkIcuTree(tView, tIcu, lView, sharedUpdateOpCodes, create, remove, update, parentNode, parentIdx, nestedIcus, depth) {\n  let bindingMask = 0;\n  let currentNode = parentNode.firstChild;\n  while (currentNode) {\n    const newIndex = allocExpando(tView, lView, 1, null);\n    switch (currentNode.nodeType) {\n      case Node.ELEMENT_NODE:\n        const element = currentNode;\n        const tagName = element.tagName.toLowerCase();\n        if (VALID_ELEMENTS.hasOwnProperty(tagName)) {\n          addCreateNodeAndAppend(create, ELEMENT_MARKER, tagName, parentIdx, newIndex);\n          tView.data[newIndex] = tagName;\n          const elAttrs = element.attributes;\n          for (let i = 0; i < elAttrs.length; i++) {\n            const attr = elAttrs.item(i);\n            const lowerAttrName = attr.name.toLowerCase();\n            const hasBinding = !!attr.value.match(BINDING_REGEXP);\n            // we assume the input string is safe, unless it's using a binding\n            if (hasBinding) {\n              if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {\n                if (URI_ATTRS[lowerAttrName]) {\n                  generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, _sanitizeUrl);\n                } else {\n                  generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, null);\n                }\n              } else {\n                ngDevMode && console.warn(`WARNING: ignoring unsafe attribute value ` + `${lowerAttrName} on element ${tagName} ` + `(see ${XSS_SECURITY_URL})`);\n              }\n            } else {\n              addCreateAttribute(create, newIndex, attr);\n            }\n          }\n          // Parse the children of this node (if any)\n          bindingMask = walkIcuTree(tView, tIcu, lView, sharedUpdateOpCodes, create, remove, update, currentNode, newIndex, nestedIcus, depth + 1) | bindingMask;\n          addRemoveNode(remove, newIndex, depth);\n        }\n        break;\n      case Node.TEXT_NODE:\n        const value = currentNode.textContent || '';\n        const hasBinding = value.match(BINDING_REGEXP);\n        addCreateNodeAndAppend(create, null, hasBinding ? '' : value, parentIdx, newIndex);\n        addRemoveNode(remove, newIndex, depth);\n        if (hasBinding) {\n          bindingMask = generateBindingUpdateOpCodes(update, value, newIndex, null, 0, null) | bindingMask;\n        }\n        break;\n      case Node.COMMENT_NODE:\n        // Check if the comment node is a placeholder for a nested ICU\n        const isNestedIcu = NESTED_ICU.exec(currentNode.textContent || '');\n        if (isNestedIcu) {\n          const nestedIcuIndex = parseInt(isNestedIcu[1], 10);\n          const icuExpression = nestedIcus[nestedIcuIndex];\n          // Create the comment node that will anchor the ICU expression\n          addCreateNodeAndAppend(create, ICU_MARKER, ngDevMode ? `nested ICU ${nestedIcuIndex}` : '', parentIdx, newIndex);\n          icuStart(tView, lView, sharedUpdateOpCodes, parentIdx, icuExpression, newIndex);\n          addRemoveNestedIcu(remove, newIndex, depth);\n        }\n        break;\n    }\n    currentNode = currentNode.nextSibling;\n  }\n  return bindingMask;\n}\nfunction addRemoveNode(remove, index, depth) {\n  if (depth === 0) {\n    remove.push(index);\n  }\n}\nfunction addRemoveNestedIcu(remove, index, depth) {\n  if (depth === 0) {\n    remove.push(~index); // remove ICU at `index`\n    remove.push(index); // remove ICU comment at `index`\n  }\n}\n\nfunction addUpdateIcuSwitch(update, icuExpression, index) {\n  update.push(toMaskBit(icuExpression.mainBinding), 2, -1 - icuExpression.mainBinding, index << 2 /* I18nUpdateOpCode.SHIFT_REF */ | 2 /* I18nUpdateOpCode.IcuSwitch */);\n}\n\nfunction addUpdateIcuUpdate(update, bindingMask, index) {\n  update.push(bindingMask, 1, index << 2 /* I18nUpdateOpCode.SHIFT_REF */ | 3 /* I18nUpdateOpCode.IcuUpdate */);\n}\n\nfunction addCreateNodeAndAppend(create, marker, text, appendToParentIdx, createAtIdx) {\n  if (marker !== null) {\n    create.push(marker);\n  }\n  create.push(text, createAtIdx, icuCreateOpCode(0 /* IcuCreateOpCode.AppendChild */, appendToParentIdx, createAtIdx));\n}\nfunction addCreateAttribute(create, newIndex, attr) {\n  create.push(newIndex << 1 /* IcuCreateOpCode.SHIFT_REF */ | 1 /* IcuCreateOpCode.Attr */, attr.name, attr.value);\n}\n\n// i18nPostprocess consts\nconst ROOT_TEMPLATE_ID = 0;\nconst PP_MULTI_VALUE_PLACEHOLDERS_REGEXP = /\\[(�.+?�?)\\]/;\nconst PP_PLACEHOLDERS_REGEXP = /\\[(�.+?�?)\\]|(�\\/?\\*\\d+:\\d+�)/g;\nconst PP_ICU_VARS_REGEXP = /({\\s*)(VAR_(PLURAL|SELECT)(_\\d+)?)(\\s*,)/g;\nconst PP_ICU_PLACEHOLDERS_REGEXP = /{([A-Z0-9_]+)}/g;\nconst PP_ICUS_REGEXP = /�I18N_EXP_(ICU(_\\d+)?)�/g;\nconst PP_CLOSE_TEMPLATE_REGEXP = /\\/\\*/;\nconst PP_TEMPLATE_ID_REGEXP = /\\d+\\:(\\d+)/;\n/**\n * Handles message string post-processing for internationalization.\n *\n * Handles message string post-processing by transforming it from intermediate\n * format (that might contain some markers that we need to replace) to the final\n * form, consumable by i18nStart instruction. Post processing steps include:\n *\n * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n *    in case multiple ICUs have the same placeholder name\n *\n * @param message Raw translation string for post processing\n * @param replacements Set of replacements that should be applied\n *\n * @returns Transformed string that can be consumed by i18nStart instruction\n *\n * @codeGenApi\n */\nfunction i18nPostprocess(message, replacements = {}) {\n  /**\n   * Step 1: resolve all multi-value placeholders like [�#5�|�*1:1��#2:1�|�#4:1�]\n   *\n   * Note: due to the way we process nested templates (BFS), multi-value placeholders are typically\n   * grouped by templates, for example: [�#5�|�#6�|�#1:1�|�#3:2�] where �#5� and �#6� belong to root\n   * template, �#1:1� belong to nested template with index 1 and �#1:2� - nested template with index\n   * 3. However in real templates the order might be different: i.e. �#1:1� and/or �#3:2� may go in\n   * front of �#6�. The post processing step restores the right order by keeping track of the\n   * template id stack and looks for placeholders that belong to the currently active template.\n   */\n  let result = message;\n  if (PP_MULTI_VALUE_PLACEHOLDERS_REGEXP.test(message)) {\n    const matches = {};\n    const templateIdsStack = [ROOT_TEMPLATE_ID];\n    result = result.replace(PP_PLACEHOLDERS_REGEXP, (m, phs, tmpl) => {\n      const content = phs || tmpl;\n      const placeholders = matches[content] || [];\n      if (!placeholders.length) {\n        content.split('|').forEach(placeholder => {\n          const match = placeholder.match(PP_TEMPLATE_ID_REGEXP);\n          const templateId = match ? parseInt(match[1], 10) : ROOT_TEMPLATE_ID;\n          const isCloseTemplateTag = PP_CLOSE_TEMPLATE_REGEXP.test(placeholder);\n          placeholders.push([templateId, isCloseTemplateTag, placeholder]);\n        });\n        matches[content] = placeholders;\n      }\n      if (!placeholders.length) {\n        throw new Error(`i18n postprocess: unmatched placeholder - ${content}`);\n      }\n      const currentTemplateId = templateIdsStack[templateIdsStack.length - 1];\n      let idx = 0;\n      // find placeholder index that matches current template id\n      for (let i = 0; i < placeholders.length; i++) {\n        if (placeholders[i][0] === currentTemplateId) {\n          idx = i;\n          break;\n        }\n      }\n      // update template id stack based on the current tag extracted\n      const [templateId, isCloseTemplateTag, placeholder] = placeholders[idx];\n      if (isCloseTemplateTag) {\n        templateIdsStack.pop();\n      } else if (currentTemplateId !== templateId) {\n        templateIdsStack.push(templateId);\n      }\n      // remove processed tag from the list\n      placeholders.splice(idx, 1);\n      return placeholder;\n    });\n  }\n  // return current result if no replacements specified\n  if (!Object.keys(replacements).length) {\n    return result;\n  }\n  /**\n   * Step 2: replace all ICU vars (like \"VAR_PLURAL\")\n   */\n  result = result.replace(PP_ICU_VARS_REGEXP, (match, start, key, _type, _idx, end) => {\n    return replacements.hasOwnProperty(key) ? `${start}${replacements[key]}${end}` : match;\n  });\n  /**\n   * Step 3: replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n   */\n  result = result.replace(PP_ICU_PLACEHOLDERS_REGEXP, (match, key) => {\n    return replacements.hasOwnProperty(key) ? replacements[key] : match;\n  });\n  /**\n   * Step 4: replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�) in case\n   * multiple ICUs have the same placeholder name\n   */\n  result = result.replace(PP_ICUS_REGEXP, (match, key) => {\n    if (replacements.hasOwnProperty(key)) {\n      const list = replacements[key];\n      if (!list.length) {\n        throw new Error(`i18n postprocess: unmatched ICU - ${match} with key: ${key}`);\n      }\n      return list.shift();\n    }\n    return match;\n  });\n  return result;\n}\n\n/**\n * Marks a block of text as translatable.\n *\n * The instructions `i18nStart` and `i18nEnd` mark the translation block in the template.\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param index A unique index of the translation in the static block.\n * @param messageIndex An index of the translation message from the `def.consts` array.\n * @param subTemplateIndex Optional sub-template index in the `message`.\n *\n * @codeGenApi\n */\nfunction ɵɵi18nStart(index, messageIndex, subTemplateIndex = -1) {\n  const tView = getTView();\n  const lView = getLView();\n  const adjustedIndex = HEADER_OFFSET + index;\n  ngDevMode && assertDefined(tView, `tView should be defined`);\n  const message = getConstant(tView.consts, messageIndex);\n  const parentTNode = getCurrentParentTNode();\n  if (tView.firstCreatePass) {\n    i18nStartFirstCreatePass(tView, parentTNode === null ? 0 : parentTNode.index, lView, adjustedIndex, message, subTemplateIndex);\n  }\n  // Set a flag that this LView has i18n blocks.\n  // The flag is later used to determine whether this component should\n  // be hydrated (currently hydration is not supported for i18n blocks).\n  if (tView.type === 2 /* TViewType.Embedded */) {\n    // Annotate host component's LView (not embedded view's LView),\n    // since hydration can be skipped on per-component basis only.\n    const componentLView = lView[DECLARATION_COMPONENT_VIEW];\n    componentLView[FLAGS] |= 32 /* LViewFlags.HasI18n */;\n  } else {\n    lView[FLAGS] |= 32 /* LViewFlags.HasI18n */;\n  }\n\n  const tI18n = tView.data[adjustedIndex];\n  const sameViewParentTNode = parentTNode === lView[T_HOST] ? null : parentTNode;\n  const parentRNode = getClosestRElement(tView, sameViewParentTNode, lView);\n  // If `parentTNode` is an `ElementContainer` than it has `<!--ng-container--->`.\n  // When we do inserts we have to make sure to insert in front of `<!--ng-container--->`.\n  const insertInFrontOf = parentTNode && parentTNode.type & 8 /* TNodeType.ElementContainer */ ? lView[parentTNode.index] : null;\n  applyCreateOpCodes(lView, tI18n.create, parentRNode, insertInFrontOf);\n  setInI18nBlock(true);\n}\n/**\n * Translates a translation block marked by `i18nStart` and `i18nEnd`. It inserts the text/ICU nodes\n * into the render tree, moves the placeholder nodes and removes the deleted nodes.\n *\n * @codeGenApi\n */\nfunction ɵɵi18nEnd() {\n  setInI18nBlock(false);\n}\n/**\n *\n * Use this instruction to create a translation block that doesn't contain any placeholder.\n * It calls both {@link i18nStart} and {@link i18nEnd} in one instruction.\n *\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param index A unique index of the translation in the static block.\n * @param messageIndex An index of the translation message from the `def.consts` array.\n * @param subTemplateIndex Optional sub-template index in the `message`.\n *\n * @codeGenApi\n */\nfunction ɵɵi18n(index, messageIndex, subTemplateIndex) {\n  ɵɵi18nStart(index, messageIndex, subTemplateIndex);\n  ɵɵi18nEnd();\n}\n/**\n * Marks a list of attributes as translatable.\n *\n * @param index A unique index in the static block\n * @param values\n *\n * @codeGenApi\n */\nfunction ɵɵi18nAttributes(index, attrsIndex) {\n  const tView = getTView();\n  ngDevMode && assertDefined(tView, `tView should be defined`);\n  const attrs = getConstant(tView.consts, attrsIndex);\n  i18nAttributesFirstPass(tView, index + HEADER_OFFSET, attrs);\n}\n/**\n * Stores the values of the bindings during each update cycle in order to determine if we need to\n * update the translated nodes.\n *\n * @param value The binding's value\n * @returns This function returns itself so that it may be chained\n * (e.g. `i18nExp(ctx.name)(ctx.title)`)\n *\n * @codeGenApi\n */\nfunction ɵɵi18nExp(value) {\n  const lView = getLView();\n  setMaskBit(bindingUpdated(lView, nextBindingIndex(), value));\n  return ɵɵi18nExp;\n}\n/**\n * Updates a translation block or an i18n attribute when the bindings have changed.\n *\n * @param index Index of either {@link i18nStart} (translation block) or {@link i18nAttributes}\n * (i18n attribute) on which it should update the content.\n *\n * @codeGenApi\n */\nfunction ɵɵi18nApply(index) {\n  applyI18n(getTView(), getLView(), index + HEADER_OFFSET);\n}\n/**\n * Handles message string post-processing for internationalization.\n *\n * Handles message string post-processing by transforming it from intermediate\n * format (that might contain some markers that we need to replace) to the final\n * form, consumable by i18nStart instruction. Post processing steps include:\n *\n * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n *    in case multiple ICUs have the same placeholder name\n *\n * @param message Raw translation string for post processing\n * @param replacements Set of replacements that should be applied\n *\n * @returns Transformed string that can be consumed by i18nStart instruction\n *\n * @codeGenApi\n */\nfunction ɵɵi18nPostprocess(message, replacements = {}) {\n  return i18nPostprocess(message, replacements);\n}\n\n/**\n * Determine if the argument is shaped like a Promise\n */\nfunction isPromise(obj) {\n  // allow any Promise/A+ compliant thenable.\n  // It's up to the caller to ensure that obj.then conforms to the spec\n  return !!obj && typeof obj.then === 'function';\n}\n/**\n * Determine if the argument is a Subscribable\n */\nfunction isSubscribable(obj) {\n  return !!obj && typeof obj.subscribe === 'function';\n}\n\n/**\n * Adds an event listener to the current node.\n *\n * If an output exists on one of the node's directives, it also subscribes to the output\n * and saves the subscription for later cleanup.\n *\n * @param eventName Name of the event\n * @param listenerFn The function to be called when event emits\n * @param useCapture Whether or not to use capture in event listener - this argument is a reminder\n *     from the Renderer3 infrastructure and should be removed from the instruction arguments\n * @param eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n *\n * @codeGenApi\n */\nfunction ɵɵlistener(eventName, listenerFn, useCapture, eventTargetResolver) {\n  const lView = getLView();\n  const tView = getTView();\n  const tNode = getCurrentTNode();\n  listenerInternal(tView, lView, lView[RENDERER], tNode, eventName, listenerFn, eventTargetResolver);\n  return ɵɵlistener;\n}\n/**\n * Registers a synthetic host listener (e.g. `(@foo.start)`) on a component or directive.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host listener (e.g. `@HostListener('@foo.start')`) properly gets rendered\n * in the component's renderer. Normally all host listeners are evaluated with the\n * parent component's renderer, but, in the case of animation @triggers, they need\n * to be evaluated with the sub component's renderer (because that's where the\n * animation triggers are defined).\n *\n * Do not use this instruction as a replacement for `listener`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * @param eventName Name of the event\n * @param listenerFn The function to be called when event emits\n * @param useCapture Whether or not to use capture in event listener\n * @param eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n *\n * @codeGenApi\n */\nfunction ɵɵsyntheticHostListener(eventName, listenerFn) {\n  const tNode = getCurrentTNode();\n  const lView = getLView();\n  const tView = getTView();\n  const currentDef = getCurrentDirectiveDef(tView.data);\n  const renderer = loadComponentRenderer(currentDef, tNode, lView);\n  listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn);\n  return ɵɵsyntheticHostListener;\n}\n/**\n * A utility function that checks if a given element has already an event handler registered for an\n * event with a specified name. The TView.cleanup data structure is used to find out which events\n * are registered for a given element.\n */\nfunction findExistingListener(tView, lView, eventName, tNodeIdx) {\n  const tCleanup = tView.cleanup;\n  if (tCleanup != null) {\n    for (let i = 0; i < tCleanup.length - 1; i += 2) {\n      const cleanupEventName = tCleanup[i];\n      if (cleanupEventName === eventName && tCleanup[i + 1] === tNodeIdx) {\n        // We have found a matching event name on the same node but it might not have been\n        // registered yet, so we must explicitly verify entries in the LView cleanup data\n        // structures.\n        const lCleanup = lView[CLEANUP];\n        const listenerIdxInLCleanup = tCleanup[i + 2];\n        return lCleanup.length > listenerIdxInLCleanup ? lCleanup[listenerIdxInLCleanup] : null;\n      }\n      // TView.cleanup can have a mix of 4-elements entries (for event handler cleanups) or\n      // 2-element entries (for directive and queries destroy hooks). As such we can encounter\n      // blocks of 4 or 2 items in the tView.cleanup and this is why we iterate over 2 elements\n      // first and jump another 2 elements if we detect listeners cleanup (4 elements). Also check\n      // documentation of TView.cleanup for more details of this data structure layout.\n      if (typeof cleanupEventName === 'string') {\n        i += 2;\n      }\n    }\n  }\n  return null;\n}\nfunction listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn, eventTargetResolver) {\n  const isTNodeDirectiveHost = isDirectiveHost(tNode);\n  const firstCreatePass = tView.firstCreatePass;\n  const tCleanup = firstCreatePass && getOrCreateTViewCleanup(tView);\n  const context = lView[CONTEXT];\n  // When the ɵɵlistener instruction was generated and is executed we know that there is either a\n  // native listener or a directive output on this element. As such we we know that we will have to\n  // register a listener and store its cleanup function on LView.\n  const lCleanup = getOrCreateLViewCleanup(lView);\n  ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */);\n  let processOutputs = true;\n  // Adding a native event listener is applicable when:\n  // - The corresponding TNode represents a DOM element.\n  // - The event target has a resolver (usually resulting in a global object,\n  //   such as `window` or `document`).\n  if (tNode.type & 3 /* TNodeType.AnyRNode */ || eventTargetResolver) {\n    const native = getNativeByTNode(tNode, lView);\n    const target = eventTargetResolver ? eventTargetResolver(native) : native;\n    const lCleanupIndex = lCleanup.length;\n    const idxOrTargetGetter = eventTargetResolver ? _lView => eventTargetResolver(unwrapRNode(_lView[tNode.index])) : tNode.index;\n    // In order to match current behavior, native DOM event listeners must be added for all\n    // events (including outputs).\n    // There might be cases where multiple directives on the same element try to register an event\n    // handler function for the same event. In this situation we want to avoid registration of\n    // several native listeners as each registration would be intercepted by NgZone and\n    // trigger change detection. This would mean that a single user action would result in several\n    // change detections being invoked. To avoid this situation we want to have only one call to\n    // native handler registration (for the same element and same type of event).\n    //\n    // In order to have just one native event handler in presence of multiple handler functions,\n    // we just register a first handler function as a native event listener and then chain\n    // (coalesce) other handler functions on top of the first native handler function.\n    let existingListener = null;\n    // Please note that the coalescing described here doesn't happen for events specifying an\n    // alternative target (ex. (document:click)) - this is to keep backward compatibility with the\n    // view engine.\n    // Also, we don't have to search for existing listeners is there are no directives\n    // matching on a given node as we can't register multiple event handlers for the same event in\n    // a template (this would mean having duplicate attributes).\n    if (!eventTargetResolver && isTNodeDirectiveHost) {\n      existingListener = findExistingListener(tView, lView, eventName, tNode.index);\n    }\n    if (existingListener !== null) {\n      // Attach a new listener to coalesced listeners list, maintaining the order in which\n      // listeners are registered. For performance reasons, we keep a reference to the last\n      // listener in that list (in `__ngLastListenerFn__` field), so we can avoid going through\n      // the entire set each time we need to add a new listener.\n      const lastListenerFn = existingListener.__ngLastListenerFn__ || existingListener;\n      lastListenerFn.__ngNextListenerFn__ = listenerFn;\n      existingListener.__ngLastListenerFn__ = listenerFn;\n      processOutputs = false;\n    } else {\n      listenerFn = wrapListener(tNode, lView, context, listenerFn, false /** preventDefault */);\n      const cleanupFn = renderer.listen(target, eventName, listenerFn);\n      ngDevMode && ngDevMode.rendererAddEventListener++;\n      lCleanup.push(listenerFn, cleanupFn);\n      tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, lCleanupIndex + 1);\n    }\n  } else {\n    // Even if there is no native listener to add, we still need to wrap the listener so that OnPush\n    // ancestors are marked dirty when an event occurs.\n    listenerFn = wrapListener(tNode, lView, context, listenerFn, false /** preventDefault */);\n  }\n  // subscribe to directive outputs\n  const outputs = tNode.outputs;\n  let props;\n  if (processOutputs && outputs !== null && (props = outputs[eventName])) {\n    const propsLength = props.length;\n    if (propsLength) {\n      for (let i = 0; i < propsLength; i += 2) {\n        const index = props[i];\n        ngDevMode && assertIndexInRange(lView, index);\n        const minifiedName = props[i + 1];\n        const directiveInstance = lView[index];\n        const output = directiveInstance[minifiedName];\n        if (ngDevMode && !isSubscribable(output)) {\n          throw new Error(`@Output ${minifiedName} not initialized in '${directiveInstance.constructor.name}'.`);\n        }\n        const subscription = output.subscribe(listenerFn);\n        const idx = lCleanup.length;\n        lCleanup.push(listenerFn, subscription);\n        tCleanup && tCleanup.push(eventName, tNode.index, idx, -(idx + 1));\n      }\n    }\n  }\n}\nfunction executeListenerWithErrorHandling(lView, context, listenerFn, e) {\n  try {\n    profiler(6 /* ProfilerEvent.OutputStart */, context, listenerFn);\n    // Only explicitly returning false from a listener should preventDefault\n    return listenerFn(e) !== false;\n  } catch (error) {\n    handleError(lView, error);\n    return false;\n  } finally {\n    profiler(7 /* ProfilerEvent.OutputEnd */, context, listenerFn);\n  }\n}\n/**\n * Wraps an event listener with a function that marks ancestors dirty and prevents default behavior,\n * if applicable.\n *\n * @param tNode The TNode associated with this listener\n * @param lView The LView that contains this listener\n * @param listenerFn The listener function to call\n * @param wrapWithPreventDefault Whether or not to prevent default behavior\n * (the procedural renderer does this already, so in those cases, we should skip)\n */\nfunction wrapListener(tNode, lView, context, listenerFn, wrapWithPreventDefault) {\n  // Note: we are performing most of the work in the listener function itself\n  // to optimize listener registration.\n  return function wrapListenerIn_markDirtyAndPreventDefault(e) {\n    // Ivy uses `Function` as a special token that allows us to unwrap the function\n    // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`.\n    if (e === Function) {\n      return listenerFn;\n    }\n    // In order to be backwards compatible with View Engine, events on component host nodes\n    // must also mark the component view itself dirty (i.e. the view that it owns).\n    const startView = tNode.componentOffset > -1 ? getComponentLViewByIndex(tNode.index, lView) : lView;\n    markViewDirty(startView);\n    let result = executeListenerWithErrorHandling(lView, context, listenerFn, e);\n    // A just-invoked listener function might have coalesced listeners so we need to check for\n    // their presence and invoke as needed.\n    let nextListenerFn = wrapListenerIn_markDirtyAndPreventDefault.__ngNextListenerFn__;\n    while (nextListenerFn) {\n      // We should prevent default if any of the listeners explicitly return false\n      result = executeListenerWithErrorHandling(lView, context, nextListenerFn, e) && result;\n      nextListenerFn = nextListenerFn.__ngNextListenerFn__;\n    }\n    if (wrapWithPreventDefault && result === false) {\n      e.preventDefault();\n    }\n    return result;\n  };\n}\n\n/**\n * Retrieves a context at the level specified and saves it as the global, contextViewData.\n * Will get the next level up if level is not specified.\n *\n * This is used to save contexts of parent views so they can be bound in embedded views, or\n * in conjunction with reference() to bind a ref from a parent view.\n *\n * @param level The relative level of the view from which to grab context compared to contextVewData\n * @returns context\n *\n * @codeGenApi\n */\nfunction ɵɵnextContext(level = 1) {\n  return nextContextImpl(level);\n}\n\n/**\n * Checks a given node against matching projection slots and returns the\n * determined slot index. Returns \"null\" if no slot matched the given node.\n *\n * This function takes into account the parsed ngProjectAs selector from the\n * node's attributes. If present, it will check whether the ngProjectAs selector\n * matches any of the projection slot selectors.\n */\nfunction matchingProjectionSlotIndex(tNode, projectionSlots) {\n  let wildcardNgContentIndex = null;\n  const ngProjectAsAttrVal = getProjectAsAttrValue(tNode);\n  for (let i = 0; i < projectionSlots.length; i++) {\n    const slotValue = projectionSlots[i];\n    // The last wildcard projection slot should match all nodes which aren't matching\n    // any selector. This is necessary to be backwards compatible with view engine.\n    if (slotValue === '*') {\n      wildcardNgContentIndex = i;\n      continue;\n    }\n    // If we ran into an `ngProjectAs` attribute, we should match its parsed selector\n    // to the list of selectors, otherwise we fall back to matching against the node.\n    if (ngProjectAsAttrVal === null ? isNodeMatchingSelectorList(tNode, slotValue, /* isProjectionMode */true) : isSelectorInSelectorList(ngProjectAsAttrVal, slotValue)) {\n      return i; // first matching selector \"captures\" a given node\n    }\n  }\n\n  return wildcardNgContentIndex;\n}\n/**\n * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\n * It takes all the selectors from the entire component's template and decides where\n * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\n * backed by a selector).\n *\n * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\n * un-parsed form.\n *\n * The parsed form is needed for efficient matching of a node against a given CSS selector.\n * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\n *\n * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\n * drawbacks:\n * - having only a textual form would require runtime parsing of CSS selectors;\n * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\n * template author).\n *\n * @param projectionSlots? A collection of projection slots. A projection slot can be based\n *        on a parsed CSS selectors or set to the wildcard selector (\"*\") in order to match\n *        all nodes which do not match any selector. If not specified, a single wildcard\n *        selector projection slot will be defined.\n *\n * @codeGenApi\n */\nfunction ɵɵprojectionDef(projectionSlots) {\n  const componentNode = getLView()[DECLARATION_COMPONENT_VIEW][T_HOST];\n  if (!componentNode.projection) {\n    // If no explicit projection slots are defined, fall back to a single\n    // projection slot with the wildcard selector.\n    const numProjectionSlots = projectionSlots ? projectionSlots.length : 1;\n    const projectionHeads = componentNode.projection = newArray(numProjectionSlots, null);\n    const tails = projectionHeads.slice();\n    let componentChild = componentNode.child;\n    while (componentChild !== null) {\n      const slotIndex = projectionSlots ? matchingProjectionSlotIndex(componentChild, projectionSlots) : 0;\n      if (slotIndex !== null) {\n        if (tails[slotIndex]) {\n          tails[slotIndex].projectionNext = componentChild;\n        } else {\n          projectionHeads[slotIndex] = componentChild;\n        }\n        tails[slotIndex] = componentChild;\n      }\n      componentChild = componentChild.next;\n    }\n  }\n}\n/**\n * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\n * to the projectionDef instruction.\n *\n * @param nodeIndex\n * @param selectorIndex:\n *        - 0 when the selector is `*` (or unspecified as this is the default value),\n *        - 1 based index of the selector from the {@link projectionDef}\n *\n * @codeGenApi\n */\nfunction ɵɵprojection(nodeIndex, selectorIndex = 0, attrs) {\n  const lView = getLView();\n  const tView = getTView();\n  const tProjectionNode = getOrCreateTNode(tView, HEADER_OFFSET + nodeIndex, 16 /* TNodeType.Projection */, null, attrs || null);\n  // We can't use viewData[HOST_NODE] because projection nodes can be nested in embedded views.\n  if (tProjectionNode.projection === null) tProjectionNode.projection = selectorIndex;\n  // `<ng-content>` has no content\n  setCurrentTNodeAsNotParent();\n  const hydrationInfo = lView[HYDRATION];\n  const isNodeCreationMode = !hydrationInfo || isInSkipHydrationBlock$1();\n  if (isNodeCreationMode && (tProjectionNode.flags & 32 /* TNodeFlags.isDetached */) !== 32 /* TNodeFlags.isDetached */) {\n    // re-distribution of projectable nodes is stored on a component's view level\n    applyProjection(tView, lView, tProjectionNode);\n  }\n}\n\n/**\n *\n * Update an interpolated property on an element with a lone bound value\n *\n * Used when the value passed to a property has 1 interpolated value in it, an no additional text\n * surrounds that interpolated value:\n *\n * ```html\n * <div title=\"{{v0}}\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate('title', v0);\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate(propName, v0, sanitizer) {\n  ɵɵpropertyInterpolate1(propName, '', v0, '', sanitizer);\n  return ɵɵpropertyInterpolate;\n}\n/**\n *\n * Update an interpolated property on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate1('title', 'prefix', v0, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate1(propName, prefix, v0, suffix, sanitizer) {\n  const lView = getLView();\n  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 1, prefix, suffix);\n  }\n  return ɵɵpropertyInterpolate1;\n}\n/**\n *\n * Update an interpolated property on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate2(propName, prefix, v0, i0, v1, suffix, sanitizer) {\n  const lView = getLView();\n  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 2, prefix, i0, suffix);\n  }\n  return ɵɵpropertyInterpolate2;\n}\n/**\n *\n * Update an interpolated property on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate3(\n * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate3(propName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer) {\n  const lView = getLView();\n  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 3, prefix, i0, i1, suffix);\n  }\n  return ɵɵpropertyInterpolate3;\n}\n/**\n *\n * Update an interpolated property on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate4(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate4(propName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer) {\n  const lView = getLView();\n  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);\n  }\n  return ɵɵpropertyInterpolate4;\n}\n/**\n *\n * Update an interpolated property on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate5(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate5(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer) {\n  const lView = getLView();\n  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);\n  }\n  return ɵɵpropertyInterpolate5;\n}\n/**\n *\n * Update an interpolated property on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate6(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate6(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer) {\n  const lView = getLView();\n  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);\n  }\n  return ɵɵpropertyInterpolate6;\n}\n/**\n *\n * Update an interpolated property on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate7(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate7(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer) {\n  const lView = getLView();\n  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);\n  }\n  return ɵɵpropertyInterpolate7;\n}\n/**\n *\n * Update an interpolated property on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate8(\n *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate8(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer) {\n  const lView = getLView();\n  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);\n  }\n  return ɵɵpropertyInterpolate8;\n}\n/**\n * Update an interpolated property on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolateV(\n *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update.\n * @param values The collection of values and the strings in between those values, beginning with a\n * string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolateV(propName, values, sanitizer) {\n  const lView = getLView();\n  const interpolatedValue = interpolationV(lView, values);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    if (ngDevMode) {\n      const interpolationInBetween = [values[0]]; // prefix\n      for (let i = 2; i < values.length; i += 2) {\n        interpolationInBetween.push(values[i]);\n      }\n      storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - interpolationInBetween.length + 1, ...interpolationInBetween);\n    }\n  }\n  return ɵɵpropertyInterpolateV;\n}\n\n/** Store a value in the `data` at a given `index`. */\nfunction store(tView, lView, index, value) {\n  // We don't store any static data for local variables, so the first time\n  // we see the template, we should store as null to avoid a sparse array\n  if (index >= tView.data.length) {\n    tView.data[index] = null;\n    tView.blueprint[index] = null;\n  }\n  lView[index] = value;\n}\n/**\n * Retrieves a local reference from the current contextViewData.\n *\n * If the reference to retrieve is in a parent view, this instruction is used in conjunction\n * with a nextContext() call, which walks up the tree and updates the contextViewData instance.\n *\n * @param index The index of the local ref in contextViewData.\n *\n * @codeGenApi\n */\nfunction ɵɵreference(index) {\n  const contextLView = getContextLView();\n  return load(contextLView, HEADER_OFFSET + index);\n}\n\n/**\n *\n * Update an interpolated style on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div style=\"key: {{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate1('key: ', v0, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate1(prefix, v0, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate2('key: ', v0, '; key1: ', v1, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate2(prefix, v0, i0, v1, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key2: {{v1}}; key2: {{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate3(\n *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate4(\n *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate5(\n *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}};\n *             key5: {{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate6(\n *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *    'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};\n *             key6: {{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate7(\n *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *    '; key6: ', v6, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};\n *             key6: {{v6}}; key7: {{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate8(\n *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *    '; key6: ', v6, '; key7: ', v7, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n/**\n * Update an interpolated style on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  class=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};\n *         key6: {{v6}}; key7: {{v7}}; key8: {{v8}}; key9: {{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolateV(\n *    ['key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *     '; key6: ', v6, '; key7: ', v7, '; key8: ', v8, '; key9: ', v9, 'suffix']);\n * ```\n *.\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '; key2: ', value1, '; key2: ', value2, ..., value99, 'suffix']`)\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolateV(values) {\n  const lView = getLView();\n  const interpolatedValue = interpolationV(lView, values);\n  ɵɵstyleMap(interpolatedValue);\n}\n\n/**\n *\n * Update an interpolated style property on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate1(0, 'prefix', v0, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate1(prop, prefix, v0, suffix, valueSuffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate1;\n}\n/**\n *\n * Update an interpolated style property on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate2(0, 'prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate2(prop, prefix, v0, i0, v1, suffix, valueSuffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate2;\n}\n/**\n *\n * Update an interpolated style property on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate3(0, 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate3(prop, prefix, v0, i0, v1, i1, v2, suffix, valueSuffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate3;\n}\n/**\n *\n * Update an interpolated style property on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate4(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate4(prop, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, valueSuffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate4;\n}\n/**\n *\n * Update an interpolated style property on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate5(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate5(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, valueSuffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate5;\n}\n/**\n *\n * Update an interpolated style property on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate6(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate6(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, valueSuffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate6;\n}\n/**\n *\n * Update an interpolated style property on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate7(\n *    0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate7(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, valueSuffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate7;\n}\n/**\n *\n * Update an interpolated style property on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate8(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6,\n * '-', v7, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate8(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, valueSuffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate8;\n}\n/**\n * Update an interpolated style property on an element with 9 or more bound values surrounded by\n * text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\">\n * </div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolateV(\n *  0, ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`..\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolateV(prop, values, valueSuffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolationV(lView, values);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolateV;\n}\n\n/**\n * Create static text node\n *\n * @param index Index of the node in the data array\n * @param value Static string value to write.\n *\n * @codeGenApi\n */\nfunction ɵɵtext(index, value = '') {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = index + HEADER_OFFSET;\n  ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'text nodes should be created before any bindings');\n  ngDevMode && assertIndexInRange(lView, adjustedIndex);\n  const tNode = tView.firstCreatePass ? getOrCreateTNode(tView, adjustedIndex, 1 /* TNodeType.Text */, value, null) : tView.data[adjustedIndex];\n  const textNative = _locateOrCreateTextNode(tView, lView, tNode, value, index);\n  lView[adjustedIndex] = textNative;\n  if (wasLastNodeCreated()) {\n    appendChild(tView, lView, textNative, tNode);\n  }\n  // Text nodes are self closing.\n  setCurrentTNode(tNode, false);\n}\nlet _locateOrCreateTextNode = (tView, lView, tNode, value, index) => {\n  lastNodeWasCreated(true);\n  return createTextNode(lView[RENDERER], value);\n};\n/**\n * Enables hydration code path (to lookup existing elements in DOM)\n * in addition to the regular creation mode of text nodes.\n */\nfunction locateOrCreateTextNodeImpl(tView, lView, tNode, value, index) {\n  const hydrationInfo = lView[HYDRATION];\n  const isNodeCreationMode = !hydrationInfo || isInSkipHydrationBlock$1() || isDisconnectedNode$1(hydrationInfo, index);\n  lastNodeWasCreated(isNodeCreationMode);\n  // Regular creation mode.\n  if (isNodeCreationMode) {\n    return createTextNode(lView[RENDERER], value);\n  }\n  // Hydration mode, looking up an existing element in DOM.\n  const textNative = locateNextRNode(hydrationInfo, tView, lView, tNode);\n  ngDevMode && validateMatchingNode(textNative, Node.TEXT_NODE, null, lView, tNode);\n  ngDevMode && markRNodeAsClaimedByHydration(textNative);\n  return textNative;\n}\nfunction enableLocateOrCreateTextNodeImpl() {\n  _locateOrCreateTextNode = locateOrCreateTextNodeImpl;\n}\n\n/**\n *\n * Update text content with a lone bound value\n *\n * Used when a text node has 1 interpolated value in it, an no additional text\n * surrounds that interpolated value:\n *\n * ```html\n * <div>{{v0}}</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate(v0);\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate(v0) {\n  ɵɵtextInterpolate1('', v0, '');\n  return ɵɵtextInterpolate;\n}\n/**\n *\n * Update text content with single bound value surrounded by other text.\n *\n * Used when a text node has 1 interpolated value in it:\n *\n * ```html\n * <div>prefix{{v0}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate1('prefix', v0, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate1(prefix, v0, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation1(lView, prefix, v0, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate1;\n}\n/**\n *\n * Update text content with 2 bound values surrounded by other text.\n *\n * Used when a text node has 2 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate2('prefix', v0, '-', v1, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate2(prefix, v0, i0, v1, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate2;\n}\n/**\n *\n * Update text content with 3 bound values surrounded by other text.\n *\n * Used when a text node has 3 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate3(\n * 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate3;\n}\n/**\n *\n * Update text content with 4 bound values surrounded by other text.\n *\n * Used when a text node has 4 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate4(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see ɵɵtextInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate4;\n}\n/**\n *\n * Update text content with 5 bound values surrounded by other text.\n *\n * Used when a text node has 5 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate5(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate5;\n}\n/**\n *\n * Update text content with 6 bound values surrounded by other text.\n *\n * Used when a text node has 6 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate6(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change. @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate6;\n}\n/**\n *\n * Update text content with 7 bound values surrounded by other text.\n *\n * Used when a text node has 7 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate7(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate7;\n}\n/**\n *\n * Update text content with 8 bound values surrounded by other text.\n *\n * Used when a text node has 8 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate8(\n *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate8;\n}\n/**\n * Update text content with 9 or more bound values other surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolateV(\n *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *.\n * @param values The collection of values and the strings in between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n *\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵtextInterpolateV(values) {\n  const lView = getLView();\n  const interpolated = interpolationV(lView, values);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolateV;\n}\n\n/*\n * This file re-exports all symbols contained in this directory.\n *\n * Why is this file not `index.ts`?\n *\n * There seems to be an inconsistent path resolution of an `index.ts` file\n * when only the parent directory is referenced. This could be due to the\n * node module resolution configuration differing from rollup and/or typescript.\n *\n * With commit\n * https://github.com/angular/angular/commit/d5e3f2c64bd13ce83e7c70788b7fc514ca4a9918\n * the `instructions.ts` file was moved to `instructions/instructions.ts` and an\n * `index.ts` file was used to re-export everything. Having had file names that were\n * importing from `instructions' directly (not the from the sub file or the `index.ts`\n * file) caused strange CI issues. `index.ts` had to be renamed to `all.ts` for this\n * to work.\n *\n * Jira Issue = FW-1184\n */\n\n/**\n * Resolves the providers which are defined in the DirectiveDef.\n *\n * When inserting the tokens and the factories in their respective arrays, we can assume that\n * this method is called first for the component (if any), and then for other directives on the same\n * node.\n * As a consequence,the providers are always processed in that order:\n * 1) The view providers of the component\n * 2) The providers of the component\n * 3) The providers of the other directives\n * This matches the structure of the injectables arrays of a view (for each node).\n * So the tokens and the factories can be pushed at the end of the arrays, except\n * in one case for multi providers.\n *\n * @param def the directive definition\n * @param providers: Array of `providers`.\n * @param viewProviders: Array of `viewProviders`.\n */\nfunction providersResolver(def, providers, viewProviders) {\n  const tView = getTView();\n  if (tView.firstCreatePass) {\n    const isComponent = isComponentDef(def);\n    // The list of view providers is processed first, and the flags are updated\n    resolveProvider(viewProviders, tView.data, tView.blueprint, isComponent, true);\n    // Then, the list of providers is processed, and the flags are updated\n    resolveProvider(providers, tView.data, tView.blueprint, isComponent, false);\n  }\n}\n/**\n * Resolves a provider and publishes it to the DI system.\n */\nfunction resolveProvider(provider, tInjectables, lInjectablesBlueprint, isComponent, isViewProvider) {\n  provider = resolveForwardRef(provider);\n  if (Array.isArray(provider)) {\n    // Recursively call `resolveProvider`\n    // Recursion is OK in this case because this code will not be in hot-path once we implement\n    // cloning of the initial state.\n    for (let i = 0; i < provider.length; i++) {\n      resolveProvider(provider[i], tInjectables, lInjectablesBlueprint, isComponent, isViewProvider);\n    }\n  } else {\n    const tView = getTView();\n    const lView = getLView();\n    const tNode = getCurrentTNode();\n    let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);\n    const providerFactory = providerToFactory(provider);\n    if (ngDevMode) {\n      const injector = new NodeInjector(tNode, lView);\n      runInInjectorProfilerContext(injector, token, () => {\n        emitProviderConfiguredEvent(provider, isViewProvider);\n      });\n    }\n    const beginIndex = tNode.providerIndexes & 1048575 /* TNodeProviderIndexes.ProvidersStartIndexMask */;\n    const endIndex = tNode.directiveStart;\n    const cptViewProvidersCount = tNode.providerIndexes >> 20 /* TNodeProviderIndexes.CptViewProvidersCountShift */;\n    if (isTypeProvider(provider) || !provider.multi) {\n      // Single provider case: the factory is created and pushed immediately\n      const factory = new NodeInjectorFactory(providerFactory, isViewProvider, ɵɵdirectiveInject);\n      const existingFactoryIndex = indexOf(token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount, endIndex);\n      if (existingFactoryIndex === -1) {\n        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);\n        registerDestroyHooksIfSupported(tView, provider, tInjectables.length);\n        tInjectables.push(token);\n        tNode.directiveStart++;\n        tNode.directiveEnd++;\n        if (isViewProvider) {\n          tNode.providerIndexes += 1048576 /* TNodeProviderIndexes.CptViewProvidersCountShifter */;\n        }\n\n        lInjectablesBlueprint.push(factory);\n        lView.push(factory);\n      } else {\n        lInjectablesBlueprint[existingFactoryIndex] = factory;\n        lView[existingFactoryIndex] = factory;\n      }\n    } else {\n      // Multi provider case:\n      // We create a multi factory which is going to aggregate all the values.\n      // Since the output of such a factory depends on content or view injection,\n      // we create two of them, which are linked together.\n      //\n      // The first one (for view providers) is always in the first block of the injectables array,\n      // and the second one (for providers) is always in the second block.\n      // This is important because view providers have higher priority. When a multi token\n      // is being looked up, the view providers should be found first.\n      // Note that it is not possible to have a multi factory in the third block (directive block).\n      //\n      // The algorithm to process multi providers is as follows:\n      // 1) If the multi provider comes from the `viewProviders` of the component:\n      //   a) If the special view providers factory doesn't exist, it is created and pushed.\n      //   b) Else, the multi provider is added to the existing multi factory.\n      // 2) If the multi provider comes from the `providers` of the component or of another\n      // directive:\n      //   a) If the multi factory doesn't exist, it is created and provider pushed into it.\n      //      It is also linked to the multi factory for view providers, if it exists.\n      //   b) Else, the multi provider is added to the existing multi factory.\n      const existingProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);\n      const existingViewProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);\n      const doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 && lInjectablesBlueprint[existingProvidersFactoryIndex];\n      const doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 && lInjectablesBlueprint[existingViewProvidersFactoryIndex];\n      if (isViewProvider && !doesViewProvidersFactoryExist || !isViewProvider && !doesProvidersFactoryExist) {\n        // Cases 1.a and 2.a\n        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);\n        const factory = multiFactory(isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver, lInjectablesBlueprint.length, isViewProvider, isComponent, providerFactory);\n        if (!isViewProvider && doesViewProvidersFactoryExist) {\n          lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = factory;\n        }\n        registerDestroyHooksIfSupported(tView, provider, tInjectables.length, 0);\n        tInjectables.push(token);\n        tNode.directiveStart++;\n        tNode.directiveEnd++;\n        if (isViewProvider) {\n          tNode.providerIndexes += 1048576 /* TNodeProviderIndexes.CptViewProvidersCountShifter */;\n        }\n\n        lInjectablesBlueprint.push(factory);\n        lView.push(factory);\n      } else {\n        // Cases 1.b and 2.b\n        const indexInFactory = multiFactoryAdd(lInjectablesBlueprint[isViewProvider ? existingViewProvidersFactoryIndex : existingProvidersFactoryIndex], providerFactory, !isViewProvider && isComponent);\n        registerDestroyHooksIfSupported(tView, provider, existingProvidersFactoryIndex > -1 ? existingProvidersFactoryIndex : existingViewProvidersFactoryIndex, indexInFactory);\n      }\n      if (!isViewProvider && isComponent && doesViewProvidersFactoryExist) {\n        lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders++;\n      }\n    }\n  }\n}\n/**\n * Registers the `ngOnDestroy` hook of a provider, if the provider supports destroy hooks.\n * @param tView `TView` in which to register the hook.\n * @param provider Provider whose hook should be registered.\n * @param contextIndex Index under which to find the context for the hook when it's being invoked.\n * @param indexInFactory Only required for `multi` providers. Index of the provider in the multi\n * provider factory.\n */\nfunction registerDestroyHooksIfSupported(tView, provider, contextIndex, indexInFactory) {\n  const providerIsTypeProvider = isTypeProvider(provider);\n  const providerIsClassProvider = isClassProvider(provider);\n  if (providerIsTypeProvider || providerIsClassProvider) {\n    // Resolve forward references as `useClass` can hold a forward reference.\n    const classToken = providerIsClassProvider ? resolveForwardRef(provider.useClass) : provider;\n    const prototype = classToken.prototype;\n    const ngOnDestroy = prototype.ngOnDestroy;\n    if (ngOnDestroy) {\n      const hooks = tView.destroyHooks || (tView.destroyHooks = []);\n      if (!providerIsTypeProvider && provider.multi) {\n        ngDevMode && assertDefined(indexInFactory, 'indexInFactory when registering multi factory destroy hook');\n        const existingCallbacksIndex = hooks.indexOf(contextIndex);\n        if (existingCallbacksIndex === -1) {\n          hooks.push(contextIndex, [indexInFactory, ngOnDestroy]);\n        } else {\n          hooks[existingCallbacksIndex + 1].push(indexInFactory, ngOnDestroy);\n        }\n      } else {\n        hooks.push(contextIndex, ngOnDestroy);\n      }\n    }\n  }\n}\n/**\n * Add a factory in a multi factory.\n * @returns Index at which the factory was inserted.\n */\nfunction multiFactoryAdd(multiFactory, factory, isComponentProvider) {\n  if (isComponentProvider) {\n    multiFactory.componentProviders++;\n  }\n  return multiFactory.multi.push(factory) - 1;\n}\n/**\n * Returns the index of item in the array, but only in the begin to end range.\n */\nfunction indexOf(item, arr, begin, end) {\n  for (let i = begin; i < end; i++) {\n    if (arr[i] === item) return i;\n  }\n  return -1;\n}\n/**\n * Use this with `multi` `providers`.\n */\nfunction multiProvidersFactoryResolver(_, tData, lData, tNode) {\n  return multiResolve(this.multi, []);\n}\n/**\n * Use this with `multi` `viewProviders`.\n *\n * This factory knows how to concatenate itself with the existing `multi` `providers`.\n */\nfunction multiViewProvidersFactoryResolver(_, tData, lView, tNode) {\n  const factories = this.multi;\n  let result;\n  if (this.providerFactory) {\n    const componentCount = this.providerFactory.componentProviders;\n    const multiProviders = getNodeInjectable(lView, lView[TVIEW], this.providerFactory.index, tNode);\n    // Copy the section of the array which contains `multi` `providers` from the component\n    result = multiProviders.slice(0, componentCount);\n    // Insert the `viewProvider` instances.\n    multiResolve(factories, result);\n    // Copy the section of the array which contains `multi` `providers` from other directives\n    for (let i = componentCount; i < multiProviders.length; i++) {\n      result.push(multiProviders[i]);\n    }\n  } else {\n    result = [];\n    // Insert the `viewProvider` instances.\n    multiResolve(factories, result);\n  }\n  return result;\n}\n/**\n * Maps an array of factories into an array of values.\n */\nfunction multiResolve(factories, result) {\n  for (let i = 0; i < factories.length; i++) {\n    const factory = factories[i];\n    result.push(factory());\n  }\n  return result;\n}\n/**\n * Creates a multi factory.\n */\nfunction multiFactory(factoryFn, index, isViewProvider, isComponent, f) {\n  const factory = new NodeInjectorFactory(factoryFn, isViewProvider, ɵɵdirectiveInject);\n  factory.multi = [];\n  factory.index = index;\n  factory.componentProviders = 0;\n  multiFactoryAdd(factory, f, isComponent && !isViewProvider);\n  return factory;\n}\n\n/**\n * This feature resolves the providers of a directive (or component),\n * and publish them into the DI system, making it visible to others for injection.\n *\n * For example:\n * ```ts\n * class ComponentWithProviders {\n *   constructor(private greeter: GreeterDE) {}\n *\n *   static ɵcmp = defineComponent({\n *     type: ComponentWithProviders,\n *     selectors: [['component-with-providers']],\n *    factory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),\n *    decls: 1,\n *    vars: 1,\n *    template: function(fs: RenderFlags, ctx: ComponentWithProviders) {\n *      if (fs & RenderFlags.Create) {\n *        ɵɵtext(0);\n *      }\n *      if (fs & RenderFlags.Update) {\n *        ɵɵtextInterpolate(ctx.greeter.greet());\n *      }\n *    },\n *    features: [ɵɵProvidersFeature([GreeterDE])]\n *  });\n * }\n * ```\n *\n * @param definition\n *\n * @codeGenApi\n */\nfunction ɵɵProvidersFeature(providers, viewProviders = []) {\n  return definition => {\n    definition.providersResolver = (def, processProvidersFn) => {\n      return providersResolver(def,\n      //\n      processProvidersFn ? processProvidersFn(providers) : providers,\n      //\n      viewProviders);\n    };\n  };\n}\n\n/**\n * Represents an instance of an `NgModule` created by an `NgModuleFactory`.\n * Provides access to the `NgModule` instance and related objects.\n *\n * @publicApi\n */\nclass NgModuleRef$1 {}\n/**\n * @publicApi\n *\n * @deprecated\n * This class was mostly used as a part of ViewEngine-based JIT API and is no longer needed in Ivy\n * JIT mode. See [JIT API changes due to ViewEngine deprecation](guide/deprecations#jit-api-changes)\n * for additional context. Angular provides APIs that accept NgModule classes directly (such as\n * [PlatformRef.bootstrapModule](api/core/PlatformRef#bootstrapModule) and\n * [createNgModule](api/core/createNgModule)), consider switching to those APIs instead of\n * using factory-based ones.\n */\nclass NgModuleFactory$1 {}\n\n/**\n * Returns a new NgModuleRef instance based on the NgModule class and parent injector provided.\n *\n * @param ngModule NgModule class.\n * @param parentInjector Optional injector instance to use as a parent for the module injector. If\n *     not provided, `NullInjector` will be used instead.\n * @returns NgModuleRef that represents an NgModule instance.\n *\n * @publicApi\n */\nfunction createNgModule(ngModule, parentInjector) {\n  return new NgModuleRef(ngModule, parentInjector !== null && parentInjector !== void 0 ? parentInjector : null, []);\n}\n/**\n * The `createNgModule` function alias for backwards-compatibility.\n * Please avoid using it directly and use `createNgModule` instead.\n *\n * @deprecated Use `createNgModule` instead.\n */\nconst createNgModuleRef = createNgModule;\nclass NgModuleRef extends NgModuleRef$1 {\n  constructor(ngModuleType, _parent, additionalProviders) {\n    super();\n    this._parent = _parent;\n    // tslint:disable-next-line:require-internal-with-underscore\n    this._bootstrapComponents = [];\n    this.destroyCbs = [];\n    // When bootstrapping a module we have a dependency graph that looks like this:\n    // ApplicationRef -> ComponentFactoryResolver -> NgModuleRef. The problem is that if the\n    // module being resolved tries to inject the ComponentFactoryResolver, it'll create a\n    // circular dependency which will result in a runtime error, because the injector doesn't\n    // exist yet. We work around the issue by creating the ComponentFactoryResolver ourselves\n    // and providing it, rather than letting the injector resolve it.\n    this.componentFactoryResolver = new ComponentFactoryResolver(this);\n    const ngModuleDef = getNgModuleDef(ngModuleType);\n    ngDevMode && assertDefined(ngModuleDef, `NgModule '${stringify(ngModuleType)}' is not a subtype of 'NgModuleType'.`);\n    this._bootstrapComponents = maybeUnwrapFn(ngModuleDef.bootstrap);\n    this._r3Injector = createInjectorWithoutInjectorInstances(ngModuleType, _parent, [{\n      provide: NgModuleRef$1,\n      useValue: this\n    }, {\n      provide: ComponentFactoryResolver$1,\n      useValue: this.componentFactoryResolver\n    }, ...additionalProviders], stringify(ngModuleType), new Set(['environment']));\n    // We need to resolve the injector types separately from the injector creation, because\n    // the module might be trying to use this ref in its constructor for DI which will cause a\n    // circular error that will eventually error out, because the injector isn't created yet.\n    this._r3Injector.resolveInjectorInitializers();\n    this.instance = this._r3Injector.get(ngModuleType);\n  }\n  get injector() {\n    return this._r3Injector;\n  }\n  destroy() {\n    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n    const injector = this._r3Injector;\n    !injector.destroyed && injector.destroy();\n    this.destroyCbs.forEach(fn => fn());\n    this.destroyCbs = null;\n  }\n  onDestroy(callback) {\n    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n    this.destroyCbs.push(callback);\n  }\n}\nclass NgModuleFactory extends NgModuleFactory$1 {\n  constructor(moduleType) {\n    super();\n    this.moduleType = moduleType;\n  }\n  create(parentInjector) {\n    return new NgModuleRef(this.moduleType, parentInjector, []);\n  }\n}\nfunction createNgModuleRefWithProviders(moduleType, parentInjector, additionalProviders) {\n  return new NgModuleRef(moduleType, parentInjector, additionalProviders);\n}\nclass EnvironmentNgModuleRefAdapter extends NgModuleRef$1 {\n  constructor(config) {\n    super();\n    this.componentFactoryResolver = new ComponentFactoryResolver(this);\n    this.instance = null;\n    const injector = new R3Injector([...config.providers, {\n      provide: NgModuleRef$1,\n      useValue: this\n    }, {\n      provide: ComponentFactoryResolver$1,\n      useValue: this.componentFactoryResolver\n    }], config.parent || getNullInjector(), config.debugName, new Set(['environment']));\n    this.injector = injector;\n    if (config.runEnvironmentInitializers) {\n      injector.resolveInjectorInitializers();\n    }\n  }\n  destroy() {\n    this.injector.destroy();\n  }\n  onDestroy(callback) {\n    this.injector.onDestroy(callback);\n  }\n}\n/**\n * Create a new environment injector.\n *\n * Learn more about environment injectors in\n * [this guide](guide/standalone-components#environment-injectors).\n *\n * @param providers An array of providers.\n * @param parent A parent environment injector.\n * @param debugName An optional name for this injector instance, which will be used in error\n *     messages.\n *\n * @publicApi\n */\nfunction createEnvironmentInjector(providers, parent, debugName = null) {\n  const adapter = new EnvironmentNgModuleRefAdapter({\n    providers,\n    parent,\n    debugName,\n    runEnvironmentInitializers: true\n  });\n  return adapter.injector;\n}\n\n/**\n * A service used by the framework to create instances of standalone injectors. Those injectors are\n * created on demand in case of dynamic component instantiation and contain ambient providers\n * collected from the imports graph rooted at a given standalone component.\n */\nclass StandaloneService {\n  constructor(_injector) {\n    this._injector = _injector;\n    this.cachedInjectors = new Map();\n  }\n  getOrCreateStandaloneInjector(componentDef) {\n    if (!componentDef.standalone) {\n      return null;\n    }\n    if (!this.cachedInjectors.has(componentDef)) {\n      const providers = internalImportProvidersFrom(false, componentDef.type);\n      const standaloneInjector = providers.length > 0 ? createEnvironmentInjector([providers], this._injector, `Standalone[${componentDef.type.name}]`) : null;\n      this.cachedInjectors.set(componentDef, standaloneInjector);\n    }\n    return this.cachedInjectors.get(componentDef);\n  }\n  ngOnDestroy() {\n    try {\n      for (const injector of this.cachedInjectors.values()) {\n        if (injector !== null) {\n          injector.destroy();\n        }\n      }\n    } finally {\n      this.cachedInjectors.clear();\n    }\n  }\n  /** @nocollapse */\n}\n/**\n * A feature that acts as a setup code for the {@link StandaloneService}.\n *\n * The most important responsibility of this feature is to expose the \"getStandaloneInjector\"\n * function (an entry points to a standalone injector creation) on a component definition object. We\n * go through the features infrastructure to make sure that the standalone injector creation logic\n * is tree-shakable and not included in applications that don't use standalone components.\n *\n * @codeGenApi\n */\n_class17 = StandaloneService;\n_class17.ɵprov = ɵɵdefineInjectable({\n  token: _class17,\n  providedIn: 'environment',\n  factory: () => new _class17(ɵɵinject(EnvironmentInjector))\n});\nfunction ɵɵStandaloneFeature(definition) {\n  performanceMarkFeature('NgStandalone');\n  definition.getStandaloneInjector = parentInjector => {\n    return parentInjector.get(StandaloneService).getOrCreateStandaloneInjector(definition);\n  };\n}\n\n/**\n * Generated next to NgModules to monkey-patch directive and pipe references onto a component's\n * definition, when generating a direct reference in the component file would otherwise create an\n * import cycle.\n *\n * See [this explanation](https://hackmd.io/Odw80D0pR6yfsOjg_7XCJg?view) for more details.\n *\n * @codeGenApi\n */\nfunction ɵɵsetComponentScope(type, directives, pipes) {\n  const def = type.ɵcmp;\n  def.directiveDefs = extractDefListOrFactory(directives, /* pipeDef */false);\n  def.pipeDefs = extractDefListOrFactory(pipes, /* pipeDef */true);\n}\n/**\n * Adds the module metadata that is necessary to compute the module's transitive scope to an\n * existing module definition.\n *\n * Scope metadata of modules is not used in production builds, so calls to this function can be\n * marked pure to tree-shake it from the bundle, allowing for all referenced declarations\n * to become eligible for tree-shaking as well.\n *\n * @codeGenApi\n */\nfunction ɵɵsetNgModuleScope(type, scope) {\n  return noSideEffects(() => {\n    const ngModuleDef = getNgModuleDef(type, true);\n    ngModuleDef.declarations = convertToTypeArray(scope.declarations || EMPTY_ARRAY);\n    ngModuleDef.imports = convertToTypeArray(scope.imports || EMPTY_ARRAY);\n    ngModuleDef.exports = convertToTypeArray(scope.exports || EMPTY_ARRAY);\n    if (scope.bootstrap) {\n      // This only happens in local compilation mode.\n      ngModuleDef.bootstrap = convertToTypeArray(scope.bootstrap);\n    }\n    depsTracker.registerNgModule(type, scope);\n  });\n}\nfunction convertToTypeArray(values) {\n  if (typeof values === 'function') {\n    return values;\n  }\n  const flattenValues = flatten(values);\n  if (flattenValues.some(isForwardRef)) {\n    return () => flattenValues.map(resolveForwardRef).map(maybeUnwrapModuleWithProviders);\n  } else {\n    return flattenValues.map(maybeUnwrapModuleWithProviders);\n  }\n}\nfunction maybeUnwrapModuleWithProviders(value) {\n  return isModuleWithProviders(value) ? value.ngModule : value;\n}\n\n/**\n * Retrieves the component instance associated with a given DOM element.\n *\n * @usageNotes\n * Given the following DOM structure:\n *\n * ```html\n * <app-root>\n *   <div>\n *     <child-comp></child-comp>\n *   </div>\n * </app-root>\n * ```\n *\n * Calling `getComponent` on `<child-comp>` will return the instance of `ChildComponent`\n * associated with this DOM element.\n *\n * Calling the function on `<app-root>` will return the `MyApp` instance.\n *\n *\n * @param element DOM element from which the component should be retrieved.\n * @returns Component instance associated with the element or `null` if there\n *    is no component associated with it.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getComponent(element) {\n  ngDevMode && assertDomElement(element);\n  const context = getLContext(element);\n  if (context === null) return null;\n  if (context.component === undefined) {\n    const lView = context.lView;\n    if (lView === null) {\n      return null;\n    }\n    context.component = getComponentAtNodeIndex(context.nodeIndex, lView);\n  }\n  return context.component;\n}\n/**\n * If inside an embedded view (e.g. `*ngIf` or `*ngFor`), retrieves the context of the embedded\n * view that the element is part of. Otherwise retrieves the instance of the component whose view\n * owns the element (in this case, the result is the same as calling `getOwningComponent`).\n *\n * @param element Element for which to get the surrounding component instance.\n * @returns Instance of the component that is around the element or null if the element isn't\n *    inside any component.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getContext(element) {\n  assertDomElement(element);\n  const context = getLContext(element);\n  const lView = context ? context.lView : null;\n  return lView === null ? null : lView[CONTEXT];\n}\n/**\n * Retrieves the component instance whose view contains the DOM element.\n *\n * For example, if `<child-comp>` is used in the template of `<app-comp>`\n * (i.e. a `ViewChild` of `<app-comp>`), calling `getOwningComponent` on `<child-comp>`\n * would return `<app-comp>`.\n *\n * @param elementOrDir DOM element, component or directive instance\n *    for which to retrieve the root components.\n * @returns Component instance whose view owns the DOM element or null if the element is not\n *    part of a component view.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getOwningComponent(elementOrDir) {\n  const context = getLContext(elementOrDir);\n  let lView = context ? context.lView : null;\n  if (lView === null) return null;\n  let parent;\n  while (lView[TVIEW].type === 2 /* TViewType.Embedded */ && (parent = getLViewParent(lView))) {\n    lView = parent;\n  }\n  return lView[FLAGS] & 512 /* LViewFlags.IsRoot */ ? null : lView[CONTEXT];\n}\n/**\n * Retrieves all root components associated with a DOM element, directive or component instance.\n * Root components are those which have been bootstrapped by Angular.\n *\n * @param elementOrDir DOM element, component or directive instance\n *    for which to retrieve the root components.\n * @returns Root components associated with the target object.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getRootComponents(elementOrDir) {\n  const lView = readPatchedLView(elementOrDir);\n  return lView !== null ? [getRootContext(lView)] : [];\n}\n/**\n * Retrieves an `Injector` associated with an element, component or directive instance.\n *\n * @param elementOrDir DOM element, component or directive instance for which to\n *    retrieve the injector.\n * @returns Injector associated with the element, component or directive instance.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getInjector(elementOrDir) {\n  const context = getLContext(elementOrDir);\n  const lView = context ? context.lView : null;\n  if (lView === null) return Injector.NULL;\n  const tNode = lView[TVIEW].data[context.nodeIndex];\n  return new NodeInjector(tNode, lView);\n}\n/**\n * Retrieve a set of injection tokens at a given DOM node.\n *\n * @param element Element for which the injection tokens should be retrieved.\n */\nfunction getInjectionTokens(element) {\n  const context = getLContext(element);\n  const lView = context ? context.lView : null;\n  if (lView === null) return [];\n  const tView = lView[TVIEW];\n  const tNode = tView.data[context.nodeIndex];\n  const providerTokens = [];\n  const startIndex = tNode.providerIndexes & 1048575 /* TNodeProviderIndexes.ProvidersStartIndexMask */;\n  const endIndex = tNode.directiveEnd;\n  for (let i = startIndex; i < endIndex; i++) {\n    let value = tView.data[i];\n    if (isDirectiveDefHack(value)) {\n      // The fact that we sometimes store Type and sometimes DirectiveDef in this location is a\n      // design flaw.  We should always store same type so that we can be monomorphic. The issue\n      // is that for Components/Directives we store the def instead the type. The correct behavior\n      // is that we should always be storing injectable type in this location.\n      value = value.type;\n    }\n    providerTokens.push(value);\n  }\n  return providerTokens;\n}\n/**\n * Retrieves directive instances associated with a given DOM node. Does not include\n * component instances.\n *\n * @usageNotes\n * Given the following DOM structure:\n *\n * ```html\n * <app-root>\n *   <button my-button></button>\n *   <my-comp></my-comp>\n * </app-root>\n * ```\n *\n * Calling `getDirectives` on `<button>` will return an array with an instance of the `MyButton`\n * directive that is associated with the DOM node.\n *\n * Calling `getDirectives` on `<my-comp>` will return an empty array.\n *\n * @param node DOM node for which to get the directives.\n * @returns Array of directives associated with the node.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getDirectives(node) {\n  // Skip text nodes because we can't have directives associated with them.\n  if (node instanceof Text) {\n    return [];\n  }\n  const context = getLContext(node);\n  const lView = context ? context.lView : null;\n  if (lView === null) {\n    return [];\n  }\n  const tView = lView[TVIEW];\n  const nodeIndex = context.nodeIndex;\n  if (!(tView !== null && tView !== void 0 && tView.data[nodeIndex])) {\n    return [];\n  }\n  if (context.directives === undefined) {\n    context.directives = getDirectivesAtNodeIndex(nodeIndex, lView);\n  }\n  // The `directives` in this case are a named array called `LComponentView`. Clone the\n  // result so we don't expose an internal data structure in the user's console.\n  return context.directives === null ? [] : [...context.directives];\n}\n/**\n * Returns the debug (partial) metadata for a particular directive or component instance.\n * The function accepts an instance of a directive or component and returns the corresponding\n * metadata.\n *\n * @param directiveOrComponentInstance Instance of a directive or component\n * @returns metadata of the passed directive or component\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getDirectiveMetadata$1(directiveOrComponentInstance) {\n  const {\n    constructor\n  } = directiveOrComponentInstance;\n  if (!constructor) {\n    throw new Error('Unable to find the instance constructor');\n  }\n  // In case a component inherits from a directive, we may have component and directive metadata\n  // To ensure we don't get the metadata of the directive, we want to call `getComponentDef` first.\n  const componentDef = getComponentDef(constructor);\n  if (componentDef) {\n    return {\n      inputs: componentDef.inputs,\n      outputs: componentDef.outputs,\n      encapsulation: componentDef.encapsulation,\n      changeDetection: componentDef.onPush ? ChangeDetectionStrategy.OnPush : ChangeDetectionStrategy.Default\n    };\n  }\n  const directiveDef = getDirectiveDef(constructor);\n  if (directiveDef) {\n    return {\n      inputs: directiveDef.inputs,\n      outputs: directiveDef.outputs\n    };\n  }\n  return null;\n}\n/**\n * Retrieve map of local references.\n *\n * The references are retrieved as a map of local reference name to element or directive instance.\n *\n * @param target DOM element, component or directive instance for which to retrieve\n *    the local references.\n */\nfunction getLocalRefs(target) {\n  const context = getLContext(target);\n  if (context === null) return {};\n  if (context.localRefs === undefined) {\n    const lView = context.lView;\n    if (lView === null) {\n      return {};\n    }\n    context.localRefs = discoverLocalRefs(lView, context.nodeIndex);\n  }\n  return context.localRefs || {};\n}\n/**\n * Retrieves the host element of a component or directive instance.\n * The host element is the DOM element that matched the selector of the directive.\n *\n * @param componentOrDirective Component or directive instance for which the host\n *     element should be retrieved.\n * @returns Host element of the target.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getHostElement(componentOrDirective) {\n  return getLContext(componentOrDirective).native;\n}\n/**\n * Retrieves the rendered text for a given component.\n *\n * This function retrieves the host element of a component and\n * and then returns the `textContent` for that element. This implies\n * that the text returned will include re-projected content of\n * the component as well.\n *\n * @param component The component to return the content text for.\n */\nfunction getRenderedText(component) {\n  const hostElement = getHostElement(component);\n  return hostElement.textContent || '';\n}\n/**\n * Retrieves a list of event listeners associated with a DOM element. The list does include host\n * listeners, but it does not include event listeners defined outside of the Angular context\n * (e.g. through `addEventListener`).\n *\n * @usageNotes\n * Given the following DOM structure:\n *\n * ```html\n * <app-root>\n *   <div (click)=\"doSomething()\"></div>\n * </app-root>\n * ```\n *\n * Calling `getListeners` on `<div>` will return an object that looks as follows:\n *\n * ```ts\n * {\n *   name: 'click',\n *   element: <div>,\n *   callback: () => doSomething(),\n *   useCapture: false\n * }\n * ```\n *\n * @param element Element for which the DOM listeners should be retrieved.\n * @returns Array of event listeners on the DOM element.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getListeners(element) {\n  ngDevMode && assertDomElement(element);\n  const lContext = getLContext(element);\n  const lView = lContext === null ? null : lContext.lView;\n  if (lView === null) return [];\n  const tView = lView[TVIEW];\n  const lCleanup = lView[CLEANUP];\n  const tCleanup = tView.cleanup;\n  const listeners = [];\n  if (tCleanup && lCleanup) {\n    for (let i = 0; i < tCleanup.length;) {\n      const firstParam = tCleanup[i++];\n      const secondParam = tCleanup[i++];\n      if (typeof firstParam === 'string') {\n        const name = firstParam;\n        const listenerElement = unwrapRNode(lView[secondParam]);\n        const callback = lCleanup[tCleanup[i++]];\n        const useCaptureOrIndx = tCleanup[i++];\n        // if useCaptureOrIndx is boolean then report it as is.\n        // if useCaptureOrIndx is positive number then it in unsubscribe method\n        // if useCaptureOrIndx is negative number then it is a Subscription\n        const type = typeof useCaptureOrIndx === 'boolean' || useCaptureOrIndx >= 0 ? 'dom' : 'output';\n        const useCapture = typeof useCaptureOrIndx === 'boolean' ? useCaptureOrIndx : false;\n        if (element == listenerElement) {\n          listeners.push({\n            element,\n            name,\n            callback,\n            useCapture,\n            type\n          });\n        }\n      }\n    }\n  }\n  listeners.sort(sortListeners);\n  return listeners;\n}\nfunction sortListeners(a, b) {\n  if (a.name == b.name) return 0;\n  return a.name < b.name ? -1 : 1;\n}\n/**\n * This function should not exist because it is megamorphic and only mostly correct.\n *\n * See call site for more info.\n */\nfunction isDirectiveDefHack(obj) {\n  return obj.type !== undefined && obj.declaredInputs !== undefined && obj.findHostDirectiveDefs !== undefined;\n}\n/**\n * Retrieve the component `LView` from component/element.\n *\n * NOTE: `LView` is a private and should not be leaked outside.\n *       Don't export this method to `ng.*` on window.\n *\n * @param target DOM element or component instance for which to retrieve the LView.\n */\nfunction getComponentLView(target) {\n  const lContext = getLContext(target);\n  const nodeIndx = lContext.nodeIndex;\n  const lView = lContext.lView;\n  ngDevMode && assertLView(lView);\n  const componentLView = lView[nodeIndx];\n  ngDevMode && assertLView(componentLView);\n  return componentLView;\n}\n/** Asserts that a value is a DOM Element. */\nfunction assertDomElement(value) {\n  if (typeof Element !== 'undefined' && !(value instanceof Element)) {\n    throw new Error('Expecting instance of DOM Element');\n  }\n}\n\n/**\n * The name of a field that Angular monkey-patches onto a component\n * class to store a function that loads defer-loadable dependencies\n * and applies metadata to a class.\n */\nconst ASYNC_COMPONENT_METADATA_FN = '__ngAsyncComponentMetadataFn__';\n/**\n * If a given component has unresolved async metadata - returns a reference\n * to a function that applies component metadata after resolving defer-loadable\n * dependencies. Otherwise - this function returns `null`.\n */\nfunction getAsyncClassMetadataFn(type) {\n  var _componentClass$ASYNC;\n  const componentClass = type; // cast to `any`, so that we can read a monkey-patched field\n  return (_componentClass$ASYNC = componentClass[ASYNC_COMPONENT_METADATA_FN]) !== null && _componentClass$ASYNC !== void 0 ? _componentClass$ASYNC : null;\n}\n/**\n * Handles the process of applying metadata info to a component class in case\n * component template has defer blocks (thus some dependencies became deferrable).\n *\n * @param type Component class where metadata should be added\n * @param dependencyLoaderFn Function that loads dependencies\n * @param metadataSetterFn Function that forms a scope in which the `setClassMetadata` is invoked\n */\nfunction setClassMetadataAsync(type, dependencyLoaderFn, metadataSetterFn) {\n  const componentClass = type; // cast to `any`, so that we can monkey-patch it\n  componentClass[ASYNC_COMPONENT_METADATA_FN] = () => Promise.all(dependencyLoaderFn()).then(dependencies => {\n    metadataSetterFn(...dependencies);\n    // Metadata is now set, reset field value to indicate that this component\n    // can by used/compiled synchronously.\n    componentClass[ASYNC_COMPONENT_METADATA_FN] = null;\n    return dependencies;\n  });\n  return componentClass[ASYNC_COMPONENT_METADATA_FN];\n}\n/**\n * Adds decorator, constructor, and property metadata to a given type via static metadata fields\n * on the type.\n *\n * These metadata fields can later be read with Angular's `ReflectionCapabilities` API.\n *\n * Calls to `setClassMetadata` can be guarded by ngDevMode, resulting in the metadata assignments\n * being tree-shaken away during production builds.\n */\nfunction setClassMetadata(type, decorators, ctorParameters, propDecorators) {\n  return noSideEffects(() => {\n    const clazz = type;\n    if (decorators !== null) {\n      if (clazz.hasOwnProperty('decorators') && clazz.decorators !== undefined) {\n        clazz.decorators.push(...decorators);\n      } else {\n        clazz.decorators = decorators;\n      }\n    }\n    if (ctorParameters !== null) {\n      // Rather than merging, clobber the existing parameters. If other projects exist which\n      // use tsickle-style annotations and reflect over them in the same way, this could\n      // cause issues, but that is vanishingly unlikely.\n      clazz.ctorParameters = ctorParameters;\n    }\n    if (propDecorators !== null) {\n      // The property decorator objects are merged as it is possible different fields have\n      // different decorator types. Decorators on individual fields are not merged, as it's\n      // also incredibly unlikely that a field will be decorated both with an Angular\n      // decorator and a non-Angular decorator that's also been downleveled.\n      if (clazz.hasOwnProperty('propDecorators') && clazz.propDecorators !== undefined) {\n        clazz.propDecorators = {\n          ...clazz.propDecorators,\n          ...propDecorators\n        };\n      } else {\n        clazz.propDecorators = propDecorators;\n      }\n    }\n  });\n}\n\n/**\n * Bindings for pure functions are stored after regular bindings.\n *\n * |-------decls------|---------vars---------|                 |----- hostVars (dir1) ------|\n * ------------------------------------------------------------------------------------------\n * | nodes/refs/pipes | bindings | fn slots  | injector | dir1 | host bindings | host slots |\n * ------------------------------------------------------------------------------------------\n *                    ^                      ^\n *      TView.bindingStartIndex      TView.expandoStartIndex\n *\n * Pure function instructions are given an offset from the binding root. Adding the offset to the\n * binding root gives the first index where the bindings are stored. In component views, the binding\n * root is the bindingStartIndex. In host bindings, the binding root is the expandoStartIndex +\n * any directive instances + any hostVars in directives evaluated before it.\n *\n * See VIEW_DATA.md for more information about host binding resolution.\n */\n/**\n * If the value hasn't been saved, calls the pure function to store and return the\n * value. If it has been saved, returns the saved value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns a value\n * @param thisArg Optional calling context of pureFn\n * @returns value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction0(slotOffset, pureFn, thisArg) {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  return lView[bindingIndex] === NO_CHANGE ? updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) : getBinding(lView, bindingIndex);\n}\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns an updated value\n * @param exp Updated expression value\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction1(slotOffset, pureFn, exp, thisArg) {\n  return pureFunction1Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp, thisArg);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction2(slotOffset, pureFn, exp1, exp2, thisArg) {\n  return pureFunction2Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, thisArg);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction3(slotOffset, pureFn, exp1, exp2, exp3, thisArg) {\n  return pureFunction3Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, thisArg);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction4(slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {\n  return pureFunction4Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction5(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated(lView, bindingIndex + 4, exp5) || different ? updateBinding(lView, bindingIndex + 5, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) : pureFn(exp1, exp2, exp3, exp4, exp5)) : getBinding(lView, bindingIndex + 5);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction6(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different ? updateBinding(lView, bindingIndex + 6, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) : getBinding(lView, bindingIndex + 6);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param exp7\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction7(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  let different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different ? updateBinding(lView, bindingIndex + 7, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) : getBinding(lView, bindingIndex + 7);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param exp7\n * @param exp8\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction8(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different ? updateBinding(lView, bindingIndex + 8, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) : getBinding(lView, bindingIndex + 8);\n}\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param exps An array of binding values\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunctionV(slotOffset, pureFn, exps, thisArg) {\n  return pureFunctionVInternal(getLView(), getBindingRoot(), slotOffset, pureFn, exps, thisArg);\n}\n/**\n * Results of a pure function invocation are stored in LView in a dedicated slot that is initialized\n * to NO_CHANGE. In rare situations a pure pipe might throw an exception on the very first\n * invocation and not produce any valid results. In this case LView would keep holding the NO_CHANGE\n * value. The NO_CHANGE is not something that we can use in expressions / bindings thus we convert\n * it to `undefined`.\n */\nfunction getPureFunctionReturnValue(lView, returnValueIndex) {\n  ngDevMode && assertIndexInRange(lView, returnValueIndex);\n  const lastReturnValue = lView[returnValueIndex];\n  return lastReturnValue === NO_CHANGE ? undefined : lastReturnValue;\n}\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns an updated value\n * @param exp Updated expression value\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunction1Internal(lView, bindingRoot, slotOffset, pureFn, exp, thisArg) {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated(lView, bindingIndex, exp) ? updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) : getPureFunctionReturnValue(lView, bindingIndex + 1);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunction2Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, thisArg) {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated2(lView, bindingIndex, exp1, exp2) ? updateBinding(lView, bindingIndex + 2, thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) : getPureFunctionReturnValue(lView, bindingIndex + 2);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunction3Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, thisArg) {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) ? updateBinding(lView, bindingIndex + 3, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) : getPureFunctionReturnValue(lView, bindingIndex + 3);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n */\nfunction pureFunction4Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) ? updateBinding(lView, bindingIndex + 4, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) : getPureFunctionReturnValue(lView, bindingIndex + 4);\n}\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param exps An array of binding values\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunctionVInternal(lView, bindingRoot, slotOffset, pureFn, exps, thisArg) {\n  let bindingIndex = bindingRoot + slotOffset;\n  let different = false;\n  for (let i = 0; i < exps.length; i++) {\n    bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);\n  }\n  return different ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps)) : getPureFunctionReturnValue(lView, bindingIndex);\n}\n\n/**\n * Create a pipe.\n *\n * @param index Pipe index where the pipe will be stored.\n * @param pipeName The name of the pipe\n * @returns T the instance of the pipe.\n *\n * @codeGenApi\n */\nfunction ɵɵpipe(index, pipeName) {\n  const tView = getTView();\n  let pipeDef;\n  const adjustedIndex = index + HEADER_OFFSET;\n  if (tView.firstCreatePass) {\n    // The `getPipeDef` throws if a pipe with a given name is not found\n    // (so we use non-null assertion below).\n    pipeDef = getPipeDef(pipeName, tView.pipeRegistry);\n    tView.data[adjustedIndex] = pipeDef;\n    if (pipeDef.onDestroy) {\n      var _tView$destroyHooks2;\n      ((_tView$destroyHooks2 = tView.destroyHooks) !== null && _tView$destroyHooks2 !== void 0 ? _tView$destroyHooks2 : tView.destroyHooks = []).push(adjustedIndex, pipeDef.onDestroy);\n    }\n  } else {\n    pipeDef = tView.data[adjustedIndex];\n  }\n  const pipeFactory = pipeDef.factory || (pipeDef.factory = getFactoryDef(pipeDef.type, true));\n  let previousInjectorProfilerContext;\n  if (ngDevMode) {\n    previousInjectorProfilerContext = setInjectorProfilerContext({\n      injector: new NodeInjector(getCurrentTNode(), getLView()),\n      token: pipeDef.type\n    });\n  }\n  const previousInjectImplementation = setInjectImplementation(ɵɵdirectiveInject);\n  try {\n    // DI for pipes is supposed to behave like directives when placed on a component\n    // host node, which means that we have to disable access to `viewProviders`.\n    const previousIncludeViewProviders = setIncludeViewProviders(false);\n    const pipeInstance = pipeFactory();\n    setIncludeViewProviders(previousIncludeViewProviders);\n    store(tView, getLView(), adjustedIndex, pipeInstance);\n    return pipeInstance;\n  } finally {\n    // we have to restore the injector implementation in finally, just in case the creation of the\n    // pipe throws an error.\n    setInjectImplementation(previousInjectImplementation);\n    ngDevMode && setInjectorProfilerContext(previousInjectorProfilerContext);\n  }\n}\n/**\n * Searches the pipe registry for a pipe with the given name. If one is found,\n * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.\n *\n * @param name Name of pipe to resolve\n * @param registry Full list of available pipes\n * @returns Matching PipeDef\n */\nfunction getPipeDef(name, registry) {\n  if (registry) {\n    if (ngDevMode) {\n      const pipes = registry.filter(pipe => pipe.name === name);\n      // TODO: Throw an error in the next major\n      if (pipes.length > 1) {\n        console.warn(formatRuntimeError(313 /* RuntimeErrorCode.MULTIPLE_MATCHING_PIPES */, getMultipleMatchingPipesMessage(name)));\n      }\n    }\n    for (let i = registry.length - 1; i >= 0; i--) {\n      const pipeDef = registry[i];\n      if (name === pipeDef.name) {\n        return pipeDef;\n      }\n    }\n  }\n  if (ngDevMode) {\n    throw new RuntimeError(-302 /* RuntimeErrorCode.PIPE_NOT_FOUND */, getPipeNotFoundErrorMessage(name));\n  }\n  return;\n}\n/**\n * Generates a helpful error message for the user when multiple pipes match the name.\n *\n * @param name Name of the pipe\n * @returns The error message\n */\nfunction getMultipleMatchingPipesMessage(name) {\n  const lView = getLView();\n  const declarationLView = lView[DECLARATION_COMPONENT_VIEW];\n  const context = declarationLView[CONTEXT];\n  const hostIsStandalone = isHostComponentStandalone(lView);\n  const componentInfoMessage = context ? ` in the '${context.constructor.name}' component` : '';\n  const verifyMessage = `check ${hostIsStandalone ? '\\'@Component.imports\\' of this component' : 'the imports of this module'}`;\n  const errorMessage = `Multiple pipes match the name \\`${name}\\`${componentInfoMessage}. ${verifyMessage}`;\n  return errorMessage;\n}\n/**\n * Generates a helpful error message for the user when a pipe is not found.\n *\n * @param name Name of the missing pipe\n * @returns The error message\n */\nfunction getPipeNotFoundErrorMessage(name) {\n  const lView = getLView();\n  const declarationLView = lView[DECLARATION_COMPONENT_VIEW];\n  const context = declarationLView[CONTEXT];\n  const hostIsStandalone = isHostComponentStandalone(lView);\n  const componentInfoMessage = context ? ` in the '${context.constructor.name}' component` : '';\n  const verifyMessage = `Verify that it is ${hostIsStandalone ? 'included in the \\'@Component.imports\\' of this component' : 'declared or imported in this module'}`;\n  const errorMessage = `The pipe '${name}' could not be found${componentInfoMessage}. ${verifyMessage}`;\n  return errorMessage;\n}\n/**\n * Invokes a pipe with 1 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param offset the binding offset\n * @param v1 1st argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nfunction ɵɵpipeBind1(index, offset, v1) {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ? pureFunction1Internal(lView, getBindingRoot(), offset, pipeInstance.transform, v1, pipeInstance) : pipeInstance.transform(v1);\n}\n/**\n * Invokes a pipe with 2 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nfunction ɵɵpipeBind2(index, slotOffset, v1, v2) {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ? pureFunction2Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, pipeInstance) : pipeInstance.transform(v1, v2);\n}\n/**\n * Invokes a pipe with 3 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n * @param v3 4rd argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nfunction ɵɵpipeBind3(index, slotOffset, v1, v2, v3) {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ? pureFunction3Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) : pipeInstance.transform(v1, v2, v3);\n}\n/**\n * Invokes a pipe with 4 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n * @param v3 3rd argument to {@link PipeTransform#transform}.\n * @param v4 4th argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nfunction ɵɵpipeBind4(index, slotOffset, v1, v2, v3, v4) {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ? pureFunction4Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, v4, pipeInstance) : pipeInstance.transform(v1, v2, v3, v4);\n}\n/**\n * Invokes a pipe with variable number of arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param values Array of arguments to pass to {@link PipeTransform#transform} method.\n *\n * @codeGenApi\n */\nfunction ɵɵpipeBindV(index, slotOffset, values) {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ? pureFunctionVInternal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, values, pipeInstance) : pipeInstance.transform.apply(pipeInstance, values);\n}\nfunction isPure(lView, index) {\n  return lView[TVIEW].data[index].pure;\n}\nfunction symbolIterator() {\n  // @ts-expect-error accessing a private member\n  return this._results[Symbol.iterator]();\n}\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {@link ViewChildren}, {@link ContentChildren}, and {@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * @usageNotes\n * ### Example\n * ```typescript\n * @Component({...})\n * class Container {\n *   @ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n *\n * @publicApi\n */\nclass QueryList {\n  /**\n   * Returns `Observable` of `QueryList` notifying the subscriber of changes.\n   */\n  get changes() {\n    var _this$_changes;\n    return (_this$_changes = this._changes) !== null && _this$_changes !== void 0 ? _this$_changes : this._changes = new EventEmitter();\n  }\n  /**\n   * @param emitDistinctChangesOnly Whether `QueryList.changes` should fire only when actual change\n   *     has occurred. Or if it should fire when query is recomputed. (recomputing could resolve in\n   *     the same result)\n   */\n  constructor(_emitDistinctChangesOnly = false) {\n    this._emitDistinctChangesOnly = _emitDistinctChangesOnly;\n    this.dirty = true;\n    this._results = [];\n    this._changesDetected = false;\n    this._changes = undefined;\n    this.length = 0;\n    this.first = undefined;\n    this.last = undefined;\n    // This function should be declared on the prototype, but doing so there will cause the class\n    // declaration to have side-effects and become not tree-shakable. For this reason we do it in\n    // the constructor.\n    // [Symbol.iterator](): Iterator<T> { ... }\n    const proto = QueryList.prototype;\n    if (!proto[Symbol.iterator]) proto[Symbol.iterator] = symbolIterator;\n  }\n  /**\n   * Returns the QueryList entry at `index`.\n   */\n  get(index) {\n    return this._results[index];\n  }\n  /**\n   * See\n   * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n   */\n  map(fn) {\n    return this._results.map(fn);\n  }\n  filter(fn) {\n    return this._results.filter(fn);\n  }\n  /**\n   * See\n   * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n   */\n  find(fn) {\n    return this._results.find(fn);\n  }\n  /**\n   * See\n   * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n   */\n  reduce(fn, init) {\n    return this._results.reduce(fn, init);\n  }\n  /**\n   * See\n   * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n   */\n  forEach(fn) {\n    this._results.forEach(fn);\n  }\n  /**\n   * See\n   * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n   */\n  some(fn) {\n    return this._results.some(fn);\n  }\n  /**\n   * Returns a copy of the internal results list as an Array.\n   */\n  toArray() {\n    return this._results.slice();\n  }\n  toString() {\n    return this._results.toString();\n  }\n  /**\n   * Updates the stored data of the query list, and resets the `dirty` flag to `false`, so that\n   * on change detection, it will not notify of changes to the queries, unless a new change\n   * occurs.\n   *\n   * @param resultsTree The query results to store\n   * @param identityAccessor Optional function for extracting stable object identity from a value\n   *    in the array. This function is executed for each element of the query result list while\n   *    comparing current query list with the new one (provided as a first argument of the `reset`\n   *    function) to detect if the lists are different. If the function is not provided, elements\n   *    are compared as is (without any pre-processing).\n   */\n  reset(resultsTree, identityAccessor) {\n    this.dirty = false;\n    const newResultFlat = flatten(resultsTree);\n    if (this._changesDetected = !arrayEquals(this._results, newResultFlat, identityAccessor)) {\n      this._results = newResultFlat;\n      this.length = newResultFlat.length;\n      this.last = newResultFlat[this.length - 1];\n      this.first = newResultFlat[0];\n    }\n  }\n  /**\n   * Triggers a change event by emitting on the `changes` {@link EventEmitter}.\n   */\n  notifyOnChanges() {\n    if (this._changes !== undefined && (this._changesDetected || !this._emitDistinctChangesOnly)) this._changes.emit(this);\n  }\n  /** internal */\n  setDirty() {\n    this.dirty = true;\n  }\n  /** internal */\n  destroy() {\n    if (this._changes !== undefined) {\n      this._changes.complete();\n      this._changes.unsubscribe();\n    }\n  }\n}\n\n/**\n * Represents an embedded template that can be used to instantiate embedded views.\n * To instantiate embedded views based on a template, use the `ViewContainerRef`\n * method `createEmbeddedView()`.\n *\n * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`\n * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view\n * is injected into the constructor of the directive,\n * using the `TemplateRef` token.\n *\n * You can also use a `Query` to find a `TemplateRef` associated with\n * a component or a directive.\n *\n * @see {@link ViewContainerRef}\n * @see [Navigate the Component Tree with DI](guide/dependency-injection-navtree)\n *\n * @publicApi\n */\nSymbol.iterator;\nclass TemplateRef {}\n_class19 = TemplateRef;\n/**\n * @internal\n * @nocollapse\n */\n_class19.__NG_ELEMENT_ID__ = injectTemplateRef;\nconst ViewEngineTemplateRef = TemplateRef;\n// TODO(alxhub): combine interface and implementation. Currently this is challenging since something\n// in g3 depends on them being separate.\nconst R3TemplateRef = class TemplateRef extends ViewEngineTemplateRef {\n  constructor(_declarationLView, _declarationTContainer, elementRef) {\n    super();\n    this._declarationLView = _declarationLView;\n    this._declarationTContainer = _declarationTContainer;\n    this.elementRef = elementRef;\n  }\n  /**\n   * Returns an `ssrId` associated with a TView, which was used to\n   * create this instance of the `TemplateRef`.\n   *\n   * @internal\n   */\n  get ssrId() {\n    var _this$_declarationTCo;\n    return ((_this$_declarationTCo = this._declarationTContainer.tView) === null || _this$_declarationTCo === void 0 ? void 0 : _this$_declarationTCo.ssrId) || null;\n  }\n  createEmbeddedView(context, injector) {\n    return this.createEmbeddedViewImpl(context, injector);\n  }\n  /**\n   * @internal\n   */\n  createEmbeddedViewImpl(context, injector, dehydratedView) {\n    const embeddedLView = createAndRenderEmbeddedLView(this._declarationLView, this._declarationTContainer, context, {\n      injector,\n      dehydratedView\n    });\n    return new ViewRef$1(embeddedLView);\n  }\n};\n/**\n * Creates a TemplateRef given a node.\n *\n * @returns The TemplateRef instance to use\n */\nfunction injectTemplateRef() {\n  return createTemplateRef(getCurrentTNode(), getLView());\n}\n/**\n * Creates a TemplateRef and stores it on the injector.\n *\n * @param hostTNode The node on which a TemplateRef is requested\n * @param hostLView The `LView` to which the node belongs\n * @returns The TemplateRef instance or null if we can't create a TemplateRef on a given node type\n */\nfunction createTemplateRef(hostTNode, hostLView) {\n  if (hostTNode.type & 4 /* TNodeType.Container */) {\n    ngDevMode && assertDefined(hostTNode.tView, 'TView must be allocated');\n    return new R3TemplateRef(hostLView, hostTNode, createElementRef(hostTNode, hostLView));\n  }\n  return null;\n}\nclass LQuery_ {\n  constructor(queryList) {\n    this.queryList = queryList;\n    this.matches = null;\n  }\n  clone() {\n    return new LQuery_(this.queryList);\n  }\n  setDirty() {\n    this.queryList.setDirty();\n  }\n}\nclass LQueries_ {\n  constructor(queries = []) {\n    this.queries = queries;\n  }\n  createEmbeddedView(tView) {\n    const tQueries = tView.queries;\n    if (tQueries !== null) {\n      const noOfInheritedQueries = tView.contentQueries !== null ? tView.contentQueries[0] : tQueries.length;\n      const viewLQueries = [];\n      // An embedded view has queries propagated from a declaration view at the beginning of the\n      // TQueries collection and up until a first content query declared in the embedded view. Only\n      // propagated LQueries are created at this point (LQuery corresponding to declared content\n      // queries will be instantiated from the content query instructions for each directive).\n      for (let i = 0; i < noOfInheritedQueries; i++) {\n        const tQuery = tQueries.getByIndex(i);\n        const parentLQuery = this.queries[tQuery.indexInDeclarationView];\n        viewLQueries.push(parentLQuery.clone());\n      }\n      return new LQueries_(viewLQueries);\n    }\n    return null;\n  }\n  insertView(tView) {\n    this.dirtyQueriesWithMatches(tView);\n  }\n  detachView(tView) {\n    this.dirtyQueriesWithMatches(tView);\n  }\n  dirtyQueriesWithMatches(tView) {\n    for (let i = 0; i < this.queries.length; i++) {\n      if (getTQuery(tView, i).matches !== null) {\n        this.queries[i].setDirty();\n      }\n    }\n  }\n}\nclass TQueryMetadata_ {\n  constructor(predicate, flags, read = null) {\n    this.predicate = predicate;\n    this.flags = flags;\n    this.read = read;\n  }\n}\nclass TQueries_ {\n  constructor(queries = []) {\n    this.queries = queries;\n  }\n  elementStart(tView, tNode) {\n    ngDevMode && assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');\n    for (let i = 0; i < this.queries.length; i++) {\n      this.queries[i].elementStart(tView, tNode);\n    }\n  }\n  elementEnd(tNode) {\n    for (let i = 0; i < this.queries.length; i++) {\n      this.queries[i].elementEnd(tNode);\n    }\n  }\n  embeddedTView(tNode) {\n    let queriesForTemplateRef = null;\n    for (let i = 0; i < this.length; i++) {\n      const childQueryIndex = queriesForTemplateRef !== null ? queriesForTemplateRef.length : 0;\n      const tqueryClone = this.getByIndex(i).embeddedTView(tNode, childQueryIndex);\n      if (tqueryClone) {\n        tqueryClone.indexInDeclarationView = i;\n        if (queriesForTemplateRef !== null) {\n          queriesForTemplateRef.push(tqueryClone);\n        } else {\n          queriesForTemplateRef = [tqueryClone];\n        }\n      }\n    }\n    return queriesForTemplateRef !== null ? new TQueries_(queriesForTemplateRef) : null;\n  }\n  template(tView, tNode) {\n    ngDevMode && assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');\n    for (let i = 0; i < this.queries.length; i++) {\n      this.queries[i].template(tView, tNode);\n    }\n  }\n  getByIndex(index) {\n    ngDevMode && assertIndexInRange(this.queries, index);\n    return this.queries[index];\n  }\n  get length() {\n    return this.queries.length;\n  }\n  track(tquery) {\n    this.queries.push(tquery);\n  }\n}\nclass TQuery_ {\n  constructor(metadata, nodeIndex = -1) {\n    this.metadata = metadata;\n    this.matches = null;\n    this.indexInDeclarationView = -1;\n    this.crossesNgTemplate = false;\n    /**\n     * A flag indicating if a given query still applies to nodes it is crossing. We use this flag\n     * (alongside with _declarationNodeIndex) to know when to stop applying content queries to\n     * elements in a template.\n     */\n    this._appliesToNextNode = true;\n    this._declarationNodeIndex = nodeIndex;\n  }\n  elementStart(tView, tNode) {\n    if (this.isApplyingToNode(tNode)) {\n      this.matchTNode(tView, tNode);\n    }\n  }\n  elementEnd(tNode) {\n    if (this._declarationNodeIndex === tNode.index) {\n      this._appliesToNextNode = false;\n    }\n  }\n  template(tView, tNode) {\n    this.elementStart(tView, tNode);\n  }\n  embeddedTView(tNode, childQueryIndex) {\n    if (this.isApplyingToNode(tNode)) {\n      this.crossesNgTemplate = true;\n      // A marker indicating a `<ng-template>` element (a placeholder for query results from\n      // embedded views created based on this `<ng-template>`).\n      this.addMatch(-tNode.index, childQueryIndex);\n      return new TQuery_(this.metadata);\n    }\n    return null;\n  }\n  isApplyingToNode(tNode) {\n    if (this._appliesToNextNode && (this.metadata.flags & 1 /* QueryFlags.descendants */) !== 1 /* QueryFlags.descendants */) {\n      const declarationNodeIdx = this._declarationNodeIndex;\n      let parent = tNode.parent;\n      // Determine if a given TNode is a \"direct\" child of a node on which a content query was\n      // declared (only direct children of query's host node can match with the descendants: false\n      // option). There are 3 main use-case / conditions to consider here:\n      // - <needs-target><i #target></i></needs-target>: here <i #target> parent node is a query\n      // host node;\n      // - <needs-target><ng-template [ngIf]=\"true\"><i #target></i></ng-template></needs-target>:\n      // here <i #target> parent node is null;\n      // - <needs-target><ng-container><i #target></i></ng-container></needs-target>: here we need\n      // to go past `<ng-container>` to determine <i #target> parent node (but we shouldn't traverse\n      // up past the query's host node!).\n      while (parent !== null && parent.type & 8 /* TNodeType.ElementContainer */ && parent.index !== declarationNodeIdx) {\n        parent = parent.parent;\n      }\n      return declarationNodeIdx === (parent !== null ? parent.index : -1);\n    }\n    return this._appliesToNextNode;\n  }\n  matchTNode(tView, tNode) {\n    const predicate = this.metadata.predicate;\n    if (Array.isArray(predicate)) {\n      for (let i = 0; i < predicate.length; i++) {\n        const name = predicate[i];\n        this.matchTNodeWithReadOption(tView, tNode, getIdxOfMatchingSelector(tNode, name));\n        // Also try matching the name to a provider since strings can be used as DI tokens too.\n        this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, name, false, false));\n      }\n    } else {\n      if (predicate === TemplateRef) {\n        if (tNode.type & 4 /* TNodeType.Container */) {\n          this.matchTNodeWithReadOption(tView, tNode, -1);\n        }\n      } else {\n        this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, predicate, false, false));\n      }\n    }\n  }\n  matchTNodeWithReadOption(tView, tNode, nodeMatchIdx) {\n    if (nodeMatchIdx !== null) {\n      const read = this.metadata.read;\n      if (read !== null) {\n        if (read === ElementRef || read === ViewContainerRef || read === TemplateRef && tNode.type & 4 /* TNodeType.Container */) {\n          this.addMatch(tNode.index, -2);\n        } else {\n          const directiveOrProviderIdx = locateDirectiveOrProvider(tNode, tView, read, false, false);\n          if (directiveOrProviderIdx !== null) {\n            this.addMatch(tNode.index, directiveOrProviderIdx);\n          }\n        }\n      } else {\n        this.addMatch(tNode.index, nodeMatchIdx);\n      }\n    }\n  }\n  addMatch(tNodeIdx, matchIdx) {\n    if (this.matches === null) {\n      this.matches = [tNodeIdx, matchIdx];\n    } else {\n      this.matches.push(tNodeIdx, matchIdx);\n    }\n  }\n}\n/**\n * Iterates over local names for a given node and returns directive index\n * (or -1 if a local name points to an element).\n *\n * @param tNode static data of a node to check\n * @param selector selector to match\n * @returns directive index, -1 or null if a selector didn't match any of the local names\n */\nfunction getIdxOfMatchingSelector(tNode, selector) {\n  const localNames = tNode.localNames;\n  if (localNames !== null) {\n    for (let i = 0; i < localNames.length; i += 2) {\n      if (localNames[i] === selector) {\n        return localNames[i + 1];\n      }\n    }\n  }\n  return null;\n}\nfunction createResultByTNodeType(tNode, currentView) {\n  if (tNode.type & (3 /* TNodeType.AnyRNode */ | 8 /* TNodeType.ElementContainer */)) {\n    return createElementRef(tNode, currentView);\n  } else if (tNode.type & 4 /* TNodeType.Container */) {\n    return createTemplateRef(tNode, currentView);\n  }\n  return null;\n}\nfunction createResultForNode(lView, tNode, matchingIdx, read) {\n  if (matchingIdx === -1) {\n    // if read token and / or strategy is not specified, detect it using appropriate tNode type\n    return createResultByTNodeType(tNode, lView);\n  } else if (matchingIdx === -2) {\n    // read a special token from a node injector\n    return createSpecialToken(lView, tNode, read);\n  } else {\n    // read a token\n    return getNodeInjectable(lView, lView[TVIEW], matchingIdx, tNode);\n  }\n}\nfunction createSpecialToken(lView, tNode, read) {\n  if (read === ElementRef) {\n    return createElementRef(tNode, lView);\n  } else if (read === TemplateRef) {\n    return createTemplateRef(tNode, lView);\n  } else if (read === ViewContainerRef) {\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */);\n    return createContainerRef(tNode, lView);\n  } else {\n    ngDevMode && throwError(`Special token to read should be one of ElementRef, TemplateRef or ViewContainerRef but got ${stringify(read)}.`);\n  }\n}\n/**\n * A helper function that creates query results for a given view. This function is meant to do the\n * processing once and only once for a given view instance (a set of results for a given view\n * doesn't change).\n */\nfunction materializeViewResults(tView, lView, tQuery, queryIndex) {\n  const lQuery = lView[QUERIES].queries[queryIndex];\n  if (lQuery.matches === null) {\n    const tViewData = tView.data;\n    const tQueryMatches = tQuery.matches;\n    const result = [];\n    for (let i = 0; i < tQueryMatches.length; i += 2) {\n      const matchedNodeIdx = tQueryMatches[i];\n      if (matchedNodeIdx < 0) {\n        // we at the <ng-template> marker which might have results in views created based on this\n        // <ng-template> - those results will be in separate views though, so here we just leave\n        // null as a placeholder\n        result.push(null);\n      } else {\n        ngDevMode && assertIndexInRange(tViewData, matchedNodeIdx);\n        const tNode = tViewData[matchedNodeIdx];\n        result.push(createResultForNode(lView, tNode, tQueryMatches[i + 1], tQuery.metadata.read));\n      }\n    }\n    lQuery.matches = result;\n  }\n  return lQuery.matches;\n}\n/**\n * A helper function that collects (already materialized) query results from a tree of views,\n * starting with a provided LView.\n */\nfunction collectQueryResults(tView, lView, queryIndex, result) {\n  const tQuery = tView.queries.getByIndex(queryIndex);\n  const tQueryMatches = tQuery.matches;\n  if (tQueryMatches !== null) {\n    const lViewResults = materializeViewResults(tView, lView, tQuery, queryIndex);\n    for (let i = 0; i < tQueryMatches.length; i += 2) {\n      const tNodeIdx = tQueryMatches[i];\n      if (tNodeIdx > 0) {\n        result.push(lViewResults[i / 2]);\n      } else {\n        const childQueryIndex = tQueryMatches[i + 1];\n        const declarationLContainer = lView[-tNodeIdx];\n        ngDevMode && assertLContainer(declarationLContainer);\n        // collect matches for views inserted in this container\n        for (let i = CONTAINER_HEADER_OFFSET; i < declarationLContainer.length; i++) {\n          const embeddedLView = declarationLContainer[i];\n          if (embeddedLView[DECLARATION_LCONTAINER] === embeddedLView[PARENT]) {\n            collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);\n          }\n        }\n        // collect matches for views created from this declaration container and inserted into\n        // different containers\n        if (declarationLContainer[MOVED_VIEWS] !== null) {\n          const embeddedLViews = declarationLContainer[MOVED_VIEWS];\n          for (let i = 0; i < embeddedLViews.length; i++) {\n            const embeddedLView = embeddedLViews[i];\n            collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n/**\n * Refreshes a query by combining matches from all active views and removing matches from deleted\n * views.\n *\n * @returns `true` if a query got dirty during change detection or if this is a static query\n * resolving in creation mode, `false` otherwise.\n *\n * @codeGenApi\n */\nfunction ɵɵqueryRefresh(queryList) {\n  const lView = getLView();\n  const tView = getTView();\n  const queryIndex = getCurrentQueryIndex();\n  setCurrentQueryIndex(queryIndex + 1);\n  const tQuery = getTQuery(tView, queryIndex);\n  if (queryList.dirty && isCreationMode(lView) === ((tQuery.metadata.flags & 2 /* QueryFlags.isStatic */) === 2 /* QueryFlags.isStatic */)) {\n    if (tQuery.matches === null) {\n      queryList.reset([]);\n    } else {\n      const result = tQuery.crossesNgTemplate ? collectQueryResults(tView, lView, queryIndex, []) : materializeViewResults(tView, lView, tQuery, queryIndex);\n      queryList.reset(result, unwrapElementRef);\n      queryList.notifyOnChanges();\n    }\n    return true;\n  }\n  return false;\n}\n/**\n * Creates new QueryList, stores the reference in LView and returns QueryList.\n *\n * @param predicate The type for which the query will search\n * @param flags Flags associated with the query\n * @param read What to save in the query\n *\n * @codeGenApi\n */\nfunction ɵɵviewQuery(predicate, flags, read) {\n  ngDevMode && assertNumber(flags, 'Expecting flags');\n  const tView = getTView();\n  if (tView.firstCreatePass) {\n    createTQuery(tView, new TQueryMetadata_(predicate, flags, read), -1);\n    if ((flags & 2 /* QueryFlags.isStatic */) === 2 /* QueryFlags.isStatic */) {\n      tView.staticViewQueries = true;\n    }\n  }\n  createLQuery(tView, getLView(), flags);\n}\n/**\n * Registers a QueryList, associated with a content query, for later refresh (part of a view\n * refresh).\n *\n * @param directiveIndex Current directive index\n * @param predicate The type for which the query will search\n * @param flags Flags associated with the query\n * @param read What to save in the query\n * @returns QueryList<T>\n *\n * @codeGenApi\n */\nfunction ɵɵcontentQuery(directiveIndex, predicate, flags, read) {\n  ngDevMode && assertNumber(flags, 'Expecting flags');\n  const tView = getTView();\n  if (tView.firstCreatePass) {\n    const tNode = getCurrentTNode();\n    createTQuery(tView, new TQueryMetadata_(predicate, flags, read), tNode.index);\n    saveContentQueryAndDirectiveIndex(tView, directiveIndex);\n    if ((flags & 2 /* QueryFlags.isStatic */) === 2 /* QueryFlags.isStatic */) {\n      tView.staticContentQueries = true;\n    }\n  }\n  createLQuery(tView, getLView(), flags);\n}\n/**\n * Loads a QueryList corresponding to the current view or content query.\n *\n * @codeGenApi\n */\nfunction ɵɵloadQuery() {\n  return loadQueryInternal(getLView(), getCurrentQueryIndex());\n}\nfunction loadQueryInternal(lView, queryIndex) {\n  ngDevMode && assertDefined(lView[QUERIES], 'LQueries should be defined when trying to load a query');\n  ngDevMode && assertIndexInRange(lView[QUERIES].queries, queryIndex);\n  return lView[QUERIES].queries[queryIndex].queryList;\n}\nfunction createLQuery(tView, lView, flags) {\n  const queryList = new QueryList((flags & 4 /* QueryFlags.emitDistinctChangesOnly */) === 4 /* QueryFlags.emitDistinctChangesOnly */);\n  storeCleanupWithContext(tView, lView, queryList, queryList.destroy);\n  if (lView[QUERIES] === null) lView[QUERIES] = new LQueries_();\n  lView[QUERIES].queries.push(new LQuery_(queryList));\n}\nfunction createTQuery(tView, metadata, nodeIndex) {\n  if (tView.queries === null) tView.queries = new TQueries_();\n  tView.queries.track(new TQuery_(metadata, nodeIndex));\n}\nfunction saveContentQueryAndDirectiveIndex(tView, directiveIndex) {\n  const tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);\n  const lastSavedDirectiveIndex = tViewContentQueries.length ? tViewContentQueries[tViewContentQueries.length - 1] : -1;\n  if (directiveIndex !== lastSavedDirectiveIndex) {\n    tViewContentQueries.push(tView.queries.length - 1, directiveIndex);\n  }\n}\nfunction getTQuery(tView, index) {\n  ngDevMode && assertDefined(tView.queries, 'TQueries must be defined to retrieve a TQuery');\n  return tView.queries.getByIndex(index);\n}\n\n/**\n * Retrieves `TemplateRef` instance from `Injector` when a local reference is placed on the\n * `<ng-template>` element.\n *\n * @codeGenApi\n */\nfunction ɵɵtemplateRefExtractor(tNode, lView) {\n  return createTemplateRef(tNode, lView);\n}\nfunction ɵɵgetComponentDepsFactory(type, rawImports) {\n  return () => {\n    try {\n      return depsTracker.getComponentDependencies(type, rawImports).dependencies;\n    } catch (e) {\n      console.error(`Computing dependencies in local compilation mode for the component \"${type.name}\" failed with the exception:`, e);\n      throw e;\n    }\n  };\n}\n\n/**\n * Sets the debug info for an Angular class.\n *\n * This runtime is guarded by ngDevMode flag.\n */\nfunction ɵsetClassDebugInfo(type, debugInfo) {\n  const def = getComponentDef(type);\n  if (def !== null) {\n    def.debugInfo = debugInfo;\n  }\n}\n\n/**\n * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.\n *\n * This should be kept up to date with the public exports of @angular/core.\n */\nconst angularCoreEnv = (() => ({\n  'ɵɵattribute': ɵɵattribute,\n  'ɵɵattributeInterpolate1': ɵɵattributeInterpolate1,\n  'ɵɵattributeInterpolate2': ɵɵattributeInterpolate2,\n  'ɵɵattributeInterpolate3': ɵɵattributeInterpolate3,\n  'ɵɵattributeInterpolate4': ɵɵattributeInterpolate4,\n  'ɵɵattributeInterpolate5': ɵɵattributeInterpolate5,\n  'ɵɵattributeInterpolate6': ɵɵattributeInterpolate6,\n  'ɵɵattributeInterpolate7': ɵɵattributeInterpolate7,\n  'ɵɵattributeInterpolate8': ɵɵattributeInterpolate8,\n  'ɵɵattributeInterpolateV': ɵɵattributeInterpolateV,\n  'ɵɵdefineComponent': ɵɵdefineComponent,\n  'ɵɵdefineDirective': ɵɵdefineDirective,\n  'ɵɵdefineInjectable': ɵɵdefineInjectable,\n  'ɵɵdefineInjector': ɵɵdefineInjector,\n  'ɵɵdefineNgModule': ɵɵdefineNgModule,\n  'ɵɵdefinePipe': ɵɵdefinePipe,\n  'ɵɵdirectiveInject': ɵɵdirectiveInject,\n  'ɵɵgetInheritedFactory': ɵɵgetInheritedFactory,\n  'ɵɵinject': ɵɵinject,\n  'ɵɵinjectAttribute': ɵɵinjectAttribute,\n  'ɵɵinvalidFactory': ɵɵinvalidFactory,\n  'ɵɵinvalidFactoryDep': ɵɵinvalidFactoryDep,\n  'ɵɵtemplateRefExtractor': ɵɵtemplateRefExtractor,\n  'ɵɵresetView': ɵɵresetView,\n  'ɵɵHostDirectivesFeature': ɵɵHostDirectivesFeature,\n  'ɵɵNgOnChangesFeature': ɵɵNgOnChangesFeature,\n  'ɵɵProvidersFeature': ɵɵProvidersFeature,\n  'ɵɵCopyDefinitionFeature': ɵɵCopyDefinitionFeature,\n  'ɵɵInheritDefinitionFeature': ɵɵInheritDefinitionFeature,\n  'ɵɵInputTransformsFeature': ɵɵInputTransformsFeature,\n  'ɵɵStandaloneFeature': ɵɵStandaloneFeature,\n  'ɵɵnextContext': ɵɵnextContext,\n  'ɵɵnamespaceHTML': ɵɵnamespaceHTML,\n  'ɵɵnamespaceMathML': ɵɵnamespaceMathML,\n  'ɵɵnamespaceSVG': ɵɵnamespaceSVG,\n  'ɵɵenableBindings': ɵɵenableBindings,\n  'ɵɵdisableBindings': ɵɵdisableBindings,\n  'ɵɵelementStart': ɵɵelementStart,\n  'ɵɵelementEnd': ɵɵelementEnd,\n  'ɵɵelement': ɵɵelement,\n  'ɵɵelementContainerStart': ɵɵelementContainerStart,\n  'ɵɵelementContainerEnd': ɵɵelementContainerEnd,\n  'ɵɵelementContainer': ɵɵelementContainer,\n  'ɵɵpureFunction0': ɵɵpureFunction0,\n  'ɵɵpureFunction1': ɵɵpureFunction1,\n  'ɵɵpureFunction2': ɵɵpureFunction2,\n  'ɵɵpureFunction3': ɵɵpureFunction3,\n  'ɵɵpureFunction4': ɵɵpureFunction4,\n  'ɵɵpureFunction5': ɵɵpureFunction5,\n  'ɵɵpureFunction6': ɵɵpureFunction6,\n  'ɵɵpureFunction7': ɵɵpureFunction7,\n  'ɵɵpureFunction8': ɵɵpureFunction8,\n  'ɵɵpureFunctionV': ɵɵpureFunctionV,\n  'ɵɵgetCurrentView': ɵɵgetCurrentView,\n  'ɵɵrestoreView': ɵɵrestoreView,\n  'ɵɵlistener': ɵɵlistener,\n  'ɵɵprojection': ɵɵprojection,\n  'ɵɵsyntheticHostProperty': ɵɵsyntheticHostProperty,\n  'ɵɵsyntheticHostListener': ɵɵsyntheticHostListener,\n  'ɵɵpipeBind1': ɵɵpipeBind1,\n  'ɵɵpipeBind2': ɵɵpipeBind2,\n  'ɵɵpipeBind3': ɵɵpipeBind3,\n  'ɵɵpipeBind4': ɵɵpipeBind4,\n  'ɵɵpipeBindV': ɵɵpipeBindV,\n  'ɵɵprojectionDef': ɵɵprojectionDef,\n  'ɵɵhostProperty': ɵɵhostProperty,\n  'ɵɵproperty': ɵɵproperty,\n  'ɵɵpropertyInterpolate': ɵɵpropertyInterpolate,\n  'ɵɵpropertyInterpolate1': ɵɵpropertyInterpolate1,\n  'ɵɵpropertyInterpolate2': ɵɵpropertyInterpolate2,\n  'ɵɵpropertyInterpolate3': ɵɵpropertyInterpolate3,\n  'ɵɵpropertyInterpolate4': ɵɵpropertyInterpolate4,\n  'ɵɵpropertyInterpolate5': ɵɵpropertyInterpolate5,\n  'ɵɵpropertyInterpolate6': ɵɵpropertyInterpolate6,\n  'ɵɵpropertyInterpolate7': ɵɵpropertyInterpolate7,\n  'ɵɵpropertyInterpolate8': ɵɵpropertyInterpolate8,\n  'ɵɵpropertyInterpolateV': ɵɵpropertyInterpolateV,\n  'ɵɵpipe': ɵɵpipe,\n  'ɵɵqueryRefresh': ɵɵqueryRefresh,\n  'ɵɵviewQuery': ɵɵviewQuery,\n  'ɵɵloadQuery': ɵɵloadQuery,\n  'ɵɵcontentQuery': ɵɵcontentQuery,\n  'ɵɵreference': ɵɵreference,\n  'ɵɵclassMap': ɵɵclassMap,\n  'ɵɵclassMapInterpolate1': ɵɵclassMapInterpolate1,\n  'ɵɵclassMapInterpolate2': ɵɵclassMapInterpolate2,\n  'ɵɵclassMapInterpolate3': ɵɵclassMapInterpolate3,\n  'ɵɵclassMapInterpolate4': ɵɵclassMapInterpolate4,\n  'ɵɵclassMapInterpolate5': ɵɵclassMapInterpolate5,\n  'ɵɵclassMapInterpolate6': ɵɵclassMapInterpolate6,\n  'ɵɵclassMapInterpolate7': ɵɵclassMapInterpolate7,\n  'ɵɵclassMapInterpolate8': ɵɵclassMapInterpolate8,\n  'ɵɵclassMapInterpolateV': ɵɵclassMapInterpolateV,\n  'ɵɵstyleMap': ɵɵstyleMap,\n  'ɵɵstyleMapInterpolate1': ɵɵstyleMapInterpolate1,\n  'ɵɵstyleMapInterpolate2': ɵɵstyleMapInterpolate2,\n  'ɵɵstyleMapInterpolate3': ɵɵstyleMapInterpolate3,\n  'ɵɵstyleMapInterpolate4': ɵɵstyleMapInterpolate4,\n  'ɵɵstyleMapInterpolate5': ɵɵstyleMapInterpolate5,\n  'ɵɵstyleMapInterpolate6': ɵɵstyleMapInterpolate6,\n  'ɵɵstyleMapInterpolate7': ɵɵstyleMapInterpolate7,\n  'ɵɵstyleMapInterpolate8': ɵɵstyleMapInterpolate8,\n  'ɵɵstyleMapInterpolateV': ɵɵstyleMapInterpolateV,\n  'ɵɵstyleProp': ɵɵstyleProp,\n  'ɵɵstylePropInterpolate1': ɵɵstylePropInterpolate1,\n  'ɵɵstylePropInterpolate2': ɵɵstylePropInterpolate2,\n  'ɵɵstylePropInterpolate3': ɵɵstylePropInterpolate3,\n  'ɵɵstylePropInterpolate4': ɵɵstylePropInterpolate4,\n  'ɵɵstylePropInterpolate5': ɵɵstylePropInterpolate5,\n  'ɵɵstylePropInterpolate6': ɵɵstylePropInterpolate6,\n  'ɵɵstylePropInterpolate7': ɵɵstylePropInterpolate7,\n  'ɵɵstylePropInterpolate8': ɵɵstylePropInterpolate8,\n  'ɵɵstylePropInterpolateV': ɵɵstylePropInterpolateV,\n  'ɵɵclassProp': ɵɵclassProp,\n  'ɵɵadvance': ɵɵadvance,\n  'ɵɵtemplate': ɵɵtemplate,\n  'ɵɵconditional': ɵɵconditional,\n  'ɵɵdefer': ɵɵdefer,\n  'ɵɵdeferWhen': ɵɵdeferWhen,\n  'ɵɵdeferOnIdle': ɵɵdeferOnIdle,\n  'ɵɵdeferOnImmediate': ɵɵdeferOnImmediate,\n  'ɵɵdeferOnTimer': ɵɵdeferOnTimer,\n  'ɵɵdeferOnHover': ɵɵdeferOnHover,\n  'ɵɵdeferOnInteraction': ɵɵdeferOnInteraction,\n  'ɵɵdeferOnViewport': ɵɵdeferOnViewport,\n  'ɵɵdeferPrefetchWhen': ɵɵdeferPrefetchWhen,\n  'ɵɵdeferPrefetchOnIdle': ɵɵdeferPrefetchOnIdle,\n  'ɵɵdeferPrefetchOnImmediate': ɵɵdeferPrefetchOnImmediate,\n  'ɵɵdeferPrefetchOnTimer': ɵɵdeferPrefetchOnTimer,\n  'ɵɵdeferPrefetchOnHover': ɵɵdeferPrefetchOnHover,\n  'ɵɵdeferPrefetchOnInteraction': ɵɵdeferPrefetchOnInteraction,\n  'ɵɵdeferPrefetchOnViewport': ɵɵdeferPrefetchOnViewport,\n  'ɵɵdeferEnableTimerScheduling': ɵɵdeferEnableTimerScheduling,\n  'ɵɵrepeater': ɵɵrepeater,\n  'ɵɵrepeaterCreate': ɵɵrepeaterCreate,\n  'ɵɵrepeaterTrackByIndex': ɵɵrepeaterTrackByIndex,\n  'ɵɵrepeaterTrackByIdentity': ɵɵrepeaterTrackByIdentity,\n  'ɵɵcomponentInstance': ɵɵcomponentInstance,\n  'ɵɵtext': ɵɵtext,\n  'ɵɵtextInterpolate': ɵɵtextInterpolate,\n  'ɵɵtextInterpolate1': ɵɵtextInterpolate1,\n  'ɵɵtextInterpolate2': ɵɵtextInterpolate2,\n  'ɵɵtextInterpolate3': ɵɵtextInterpolate3,\n  'ɵɵtextInterpolate4': ɵɵtextInterpolate4,\n  'ɵɵtextInterpolate5': ɵɵtextInterpolate5,\n  'ɵɵtextInterpolate6': ɵɵtextInterpolate6,\n  'ɵɵtextInterpolate7': ɵɵtextInterpolate7,\n  'ɵɵtextInterpolate8': ɵɵtextInterpolate8,\n  'ɵɵtextInterpolateV': ɵɵtextInterpolateV,\n  'ɵɵi18n': ɵɵi18n,\n  'ɵɵi18nAttributes': ɵɵi18nAttributes,\n  'ɵɵi18nExp': ɵɵi18nExp,\n  'ɵɵi18nStart': ɵɵi18nStart,\n  'ɵɵi18nEnd': ɵɵi18nEnd,\n  'ɵɵi18nApply': ɵɵi18nApply,\n  'ɵɵi18nPostprocess': ɵɵi18nPostprocess,\n  'ɵɵresolveWindow': ɵɵresolveWindow,\n  'ɵɵresolveDocument': ɵɵresolveDocument,\n  'ɵɵresolveBody': ɵɵresolveBody,\n  'ɵɵsetComponentScope': ɵɵsetComponentScope,\n  'ɵɵsetNgModuleScope': ɵɵsetNgModuleScope,\n  'ɵɵregisterNgModuleType': registerNgModuleType,\n  'ɵɵgetComponentDepsFactory': ɵɵgetComponentDepsFactory,\n  'ɵsetClassDebugInfo': ɵsetClassDebugInfo,\n  'ɵɵsanitizeHtml': ɵɵsanitizeHtml,\n  'ɵɵsanitizeStyle': ɵɵsanitizeStyle,\n  'ɵɵsanitizeResourceUrl': ɵɵsanitizeResourceUrl,\n  'ɵɵsanitizeScript': ɵɵsanitizeScript,\n  'ɵɵsanitizeUrl': ɵɵsanitizeUrl,\n  'ɵɵsanitizeUrlOrResourceUrl': ɵɵsanitizeUrlOrResourceUrl,\n  'ɵɵtrustConstantHtml': ɵɵtrustConstantHtml,\n  'ɵɵtrustConstantResourceUrl': ɵɵtrustConstantResourceUrl,\n  'ɵɵvalidateIframeAttribute': ɵɵvalidateIframeAttribute,\n  'forwardRef': forwardRef,\n  'resolveForwardRef': resolveForwardRef\n}))();\nlet jitOptions = null;\nfunction setJitOptions(options) {\n  if (jitOptions !== null) {\n    if (options.defaultEncapsulation !== jitOptions.defaultEncapsulation) {\n      ngDevMode && console.error('Provided value for `defaultEncapsulation` can not be changed once it has been set.');\n      return;\n    }\n    if (options.preserveWhitespaces !== jitOptions.preserveWhitespaces) {\n      ngDevMode && console.error('Provided value for `preserveWhitespaces` can not be changed once it has been set.');\n      return;\n    }\n  }\n  jitOptions = options;\n}\nfunction getJitOptions() {\n  return jitOptions;\n}\nfunction resetJitOptions() {\n  jitOptions = null;\n}\nfunction patchModuleCompilation() {\n  // Does nothing, but exists as a target for patching.\n}\nconst moduleQueue = [];\n/**\n * Enqueues moduleDef to be checked later to see if scope can be set on its\n * component declarations.\n */\nfunction enqueueModuleForDelayedScoping(moduleType, ngModule) {\n  moduleQueue.push({\n    moduleType,\n    ngModule\n  });\n}\nlet flushingModuleQueue = false;\n/**\n * Loops over queued module definitions, if a given module definition has all of its\n * declarations resolved, it dequeues that module definition and sets the scope on\n * its declarations.\n */\nfunction flushModuleScopingQueueAsMuchAsPossible() {\n  if (!flushingModuleQueue) {\n    flushingModuleQueue = true;\n    try {\n      for (let i = moduleQueue.length - 1; i >= 0; i--) {\n        const {\n          moduleType,\n          ngModule\n        } = moduleQueue[i];\n        if (ngModule.declarations && ngModule.declarations.every(isResolvedDeclaration)) {\n          // dequeue\n          moduleQueue.splice(i, 1);\n          setScopeOnDeclaredComponents(moduleType, ngModule);\n        }\n      }\n    } finally {\n      flushingModuleQueue = false;\n    }\n  }\n}\n/**\n * Returns truthy if a declaration has resolved. If the declaration happens to be\n * an array of declarations, it will recurse to check each declaration in that array\n * (which may also be arrays).\n */\nfunction isResolvedDeclaration(declaration) {\n  if (Array.isArray(declaration)) {\n    return declaration.every(isResolvedDeclaration);\n  }\n  return !!resolveForwardRef(declaration);\n}\n/**\n * Compiles a module in JIT mode.\n *\n * This function automatically gets called when a class has a `@NgModule` decorator.\n */\nfunction compileNgModule(moduleType, ngModule = {}) {\n  patchModuleCompilation();\n  compileNgModuleDefs(moduleType, ngModule);\n  if (ngModule.id !== undefined) {\n    registerNgModuleType(moduleType, ngModule.id);\n  }\n  // Because we don't know if all declarations have resolved yet at the moment the\n  // NgModule decorator is executing, we're enqueueing the setting of module scope\n  // on its declarations to be run at a later time when all declarations for the module,\n  // including forward refs, have resolved.\n  enqueueModuleForDelayedScoping(moduleType, ngModule);\n}\n/**\n * Compiles and adds the `ɵmod`, `ɵfac` and `ɵinj` properties to the module class.\n *\n * It's possible to compile a module via this API which will allow duplicate declarations in its\n * root.\n */\nfunction compileNgModuleDefs(moduleType, ngModule, allowDuplicateDeclarationsInRoot = false) {\n  ngDevMode && assertDefined(moduleType, 'Required value moduleType');\n  ngDevMode && assertDefined(ngModule, 'Required value ngModule');\n  const declarations = flatten(ngModule.declarations || EMPTY_ARRAY);\n  let ngModuleDef = null;\n  Object.defineProperty(moduleType, NG_MOD_DEF, {\n    configurable: true,\n    get: () => {\n      if (ngModuleDef === null) {\n        if (ngDevMode && ngModule.imports && ngModule.imports.indexOf(moduleType) > -1) {\n          // We need to assert this immediately, because allowing it to continue will cause it to\n          // go into an infinite loop before we've reached the point where we throw all the errors.\n          throw new Error(`'${stringifyForError(moduleType)}' module can't import itself`);\n        }\n        const compiler = getCompilerFacade({\n          usage: 0 /* JitCompilerUsage.Decorator */,\n          kind: 'NgModule',\n          type: moduleType\n        });\n        ngModuleDef = compiler.compileNgModule(angularCoreEnv, `ng:///${moduleType.name}/ɵmod.js`, {\n          type: moduleType,\n          bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY).map(resolveForwardRef),\n          declarations: declarations.map(resolveForwardRef),\n          imports: flatten(ngModule.imports || EMPTY_ARRAY).map(resolveForwardRef).map(expandModuleWithProviders),\n          exports: flatten(ngModule.exports || EMPTY_ARRAY).map(resolveForwardRef).map(expandModuleWithProviders),\n          schemas: ngModule.schemas ? flatten(ngModule.schemas) : null,\n          id: ngModule.id || null\n        });\n        // Set `schemas` on ngModuleDef to an empty array in JIT mode to indicate that runtime\n        // should verify that there are no unknown elements in a template. In AOT mode, that check\n        // happens at compile time and `schemas` information is not present on Component and Module\n        // defs after compilation (so the check doesn't happen the second time at runtime).\n        if (!ngModuleDef.schemas) {\n          ngModuleDef.schemas = [];\n        }\n      }\n      return ngModuleDef;\n    }\n  });\n  let ngFactoryDef = null;\n  Object.defineProperty(moduleType, NG_FACTORY_DEF, {\n    get: () => {\n      if (ngFactoryDef === null) {\n        const compiler = getCompilerFacade({\n          usage: 0 /* JitCompilerUsage.Decorator */,\n          kind: 'NgModule',\n          type: moduleType\n        });\n        ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${moduleType.name}/ɵfac.js`, {\n          name: moduleType.name,\n          type: moduleType,\n          deps: reflectDependencies(moduleType),\n          target: compiler.FactoryTarget.NgModule,\n          typeArgumentCount: 0\n        });\n      }\n      return ngFactoryDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode\n  });\n  let ngInjectorDef = null;\n  Object.defineProperty(moduleType, NG_INJ_DEF, {\n    get: () => {\n      if (ngInjectorDef === null) {\n        ngDevMode && verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot);\n        const meta = {\n          name: moduleType.name,\n          type: moduleType,\n          providers: ngModule.providers || EMPTY_ARRAY,\n          imports: [(ngModule.imports || EMPTY_ARRAY).map(resolveForwardRef), (ngModule.exports || EMPTY_ARRAY).map(resolveForwardRef)]\n        };\n        const compiler = getCompilerFacade({\n          usage: 0 /* JitCompilerUsage.Decorator */,\n          kind: 'NgModule',\n          type: moduleType\n        });\n        ngInjectorDef = compiler.compileInjector(angularCoreEnv, `ng:///${moduleType.name}/ɵinj.js`, meta);\n      }\n      return ngInjectorDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode\n  });\n}\nfunction generateStandaloneInDeclarationsError(type, location) {\n  const prefix = `Unexpected \"${stringifyForError(type)}\" found in the \"declarations\" array of the`;\n  const suffix = `\"${stringifyForError(type)}\" is marked as standalone and can't be declared ` + 'in any NgModule - did you intend to import it instead (by adding it to the \"imports\" array)?';\n  return `${prefix} ${location}, ${suffix}`;\n}\nfunction verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot, importingModule) {\n  if (verifiedNgModule.get(moduleType)) return;\n  // skip verifications of standalone components, directives, and pipes\n  if (isStandalone(moduleType)) return;\n  verifiedNgModule.set(moduleType, true);\n  moduleType = resolveForwardRef(moduleType);\n  let ngModuleDef;\n  if (importingModule) {\n    ngModuleDef = getNgModuleDef(moduleType);\n    if (!ngModuleDef) {\n      throw new Error(`Unexpected value '${moduleType.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);\n    }\n  } else {\n    ngModuleDef = getNgModuleDef(moduleType, true);\n  }\n  const errors = [];\n  const declarations = maybeUnwrapFn(ngModuleDef.declarations);\n  const imports = maybeUnwrapFn(ngModuleDef.imports);\n  flatten(imports).map(unwrapModuleWithProvidersImports).forEach(modOrStandaloneCmpt => {\n    verifySemanticsOfNgModuleImport(modOrStandaloneCmpt, moduleType);\n    verifySemanticsOfNgModuleDef(modOrStandaloneCmpt, false, moduleType);\n  });\n  const exports = maybeUnwrapFn(ngModuleDef.exports);\n  declarations.forEach(verifyDeclarationsHaveDefinitions);\n  declarations.forEach(verifyDirectivesHaveSelector);\n  declarations.forEach(declarationType => verifyNotStandalone(declarationType, moduleType));\n  const combinedDeclarations = [...declarations.map(resolveForwardRef), ...flatten(imports.map(computeCombinedExports)).map(resolveForwardRef)];\n  exports.forEach(verifyExportsAreDeclaredOrReExported);\n  declarations.forEach(decl => verifyDeclarationIsUnique(decl, allowDuplicateDeclarationsInRoot));\n  const ngModule = getAnnotation(moduleType, 'NgModule');\n  if (ngModule) {\n    ngModule.imports && flatten(ngModule.imports).map(unwrapModuleWithProvidersImports).forEach(mod => {\n      verifySemanticsOfNgModuleImport(mod, moduleType);\n      verifySemanticsOfNgModuleDef(mod, false, moduleType);\n    });\n    ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyCorrectBootstrapType);\n    ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyComponentIsPartOfNgModule);\n  }\n  // Throw Error if any errors were detected.\n  if (errors.length) {\n    throw new Error(errors.join('\\n'));\n  }\n  ////////////////////////////////////////////////////////////////////////////////////////////////\n  function verifyDeclarationsHaveDefinitions(type) {\n    type = resolveForwardRef(type);\n    const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef$1(type);\n    if (!def) {\n      errors.push(`Unexpected value '${stringifyForError(type)}' declared by the module '${stringifyForError(moduleType)}'. Please add a @Pipe/@Directive/@Component annotation.`);\n    }\n  }\n  function verifyDirectivesHaveSelector(type) {\n    type = resolveForwardRef(type);\n    const def = getDirectiveDef(type);\n    if (!getComponentDef(type) && def && def.selectors.length == 0) {\n      errors.push(`Directive ${stringifyForError(type)} has no selector, please add it!`);\n    }\n  }\n  function verifyNotStandalone(type, moduleType) {\n    type = resolveForwardRef(type);\n    const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef$1(type);\n    if (def !== null && def !== void 0 && def.standalone) {\n      const location = `\"${stringifyForError(moduleType)}\" NgModule`;\n      errors.push(generateStandaloneInDeclarationsError(type, location));\n    }\n  }\n  function verifyExportsAreDeclaredOrReExported(type) {\n    type = resolveForwardRef(type);\n    const kind = getComponentDef(type) && 'component' || getDirectiveDef(type) && 'directive' || getPipeDef$1(type) && 'pipe';\n    if (kind) {\n      // only checked if we are declared as Component, Directive, or Pipe\n      // Modules don't need to be declared or imported.\n      if (combinedDeclarations.lastIndexOf(type) === -1) {\n        // We are exporting something which we don't explicitly declare or import.\n        errors.push(`Can't export ${kind} ${stringifyForError(type)} from ${stringifyForError(moduleType)} as it was neither declared nor imported!`);\n      }\n    }\n  }\n  function verifyDeclarationIsUnique(type, suppressErrors) {\n    type = resolveForwardRef(type);\n    const existingModule = ownerNgModule.get(type);\n    if (existingModule && existingModule !== moduleType) {\n      if (!suppressErrors) {\n        const modules = [existingModule, moduleType].map(stringifyForError).sort();\n        errors.push(`Type ${stringifyForError(type)} is part of the declarations of 2 modules: ${modules[0]} and ${modules[1]}! ` + `Please consider moving ${stringifyForError(type)} to a higher module that imports ${modules[0]} and ${modules[1]}. ` + `You can also create a new NgModule that exports and includes ${stringifyForError(type)} then import that NgModule in ${modules[0]} and ${modules[1]}.`);\n      }\n    } else {\n      // Mark type as having owner.\n      ownerNgModule.set(type, moduleType);\n    }\n  }\n  function verifyComponentIsPartOfNgModule(type) {\n    type = resolveForwardRef(type);\n    const existingModule = ownerNgModule.get(type);\n    if (!existingModule && !isStandalone(type)) {\n      errors.push(`Component ${stringifyForError(type)} is not part of any NgModule or the module has not been imported into your module.`);\n    }\n  }\n  function verifyCorrectBootstrapType(type) {\n    type = resolveForwardRef(type);\n    if (!getComponentDef(type)) {\n      errors.push(`${stringifyForError(type)} cannot be used as an entry component.`);\n    }\n    if (isStandalone(type)) {\n      // Note: this error should be the same as the\n      // `NGMODULE_BOOTSTRAP_IS_STANDALONE` one in AOT compiler.\n      errors.push(`The \\`${stringifyForError(type)}\\` class is a standalone component, which can ` + `not be used in the \\`@NgModule.bootstrap\\` array. Use the \\`bootstrapApplication\\` ` + `function for bootstrap instead.`);\n    }\n  }\n  function verifySemanticsOfNgModuleImport(type, importingModule) {\n    type = resolveForwardRef(type);\n    const directiveDef = getComponentDef(type) || getDirectiveDef(type);\n    if (directiveDef !== null && !directiveDef.standalone) {\n      throw new Error(`Unexpected directive '${type.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);\n    }\n    const pipeDef = getPipeDef$1(type);\n    if (pipeDef !== null && !pipeDef.standalone) {\n      throw new Error(`Unexpected pipe '${type.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);\n    }\n  }\n}\nfunction unwrapModuleWithProvidersImports(typeOrWithProviders) {\n  typeOrWithProviders = resolveForwardRef(typeOrWithProviders);\n  return typeOrWithProviders.ngModule || typeOrWithProviders;\n}\nfunction getAnnotation(type, name) {\n  let annotation = null;\n  collect(type.__annotations__);\n  collect(type.decorators);\n  return annotation;\n  function collect(annotations) {\n    if (annotations) {\n      annotations.forEach(readAnnotation);\n    }\n  }\n  function readAnnotation(decorator) {\n    if (!annotation) {\n      const proto = Object.getPrototypeOf(decorator);\n      if (proto.ngMetadataName == name) {\n        annotation = decorator;\n      } else if (decorator.type) {\n        const proto = Object.getPrototypeOf(decorator.type);\n        if (proto.ngMetadataName == name) {\n          annotation = decorator.args[0];\n        }\n      }\n    }\n  }\n}\n/**\n * Keep track of compiled components. This is needed because in tests we often want to compile the\n * same component with more than one NgModule. This would cause an error unless we reset which\n * NgModule the component belongs to. We keep the list of compiled components here so that the\n * TestBed can reset it later.\n */\nlet ownerNgModule = new WeakMap();\nlet verifiedNgModule = new WeakMap();\nfunction resetCompiledComponents() {\n  ownerNgModule = new WeakMap();\n  verifiedNgModule = new WeakMap();\n  moduleQueue.length = 0;\n  GENERATED_COMP_IDS.clear();\n}\n/**\n * Computes the combined declarations of explicit declarations, as well as declarations inherited by\n * traversing the exports of imported modules.\n * @param type\n */\nfunction computeCombinedExports(type) {\n  type = resolveForwardRef(type);\n  const ngModuleDef = getNgModuleDef(type);\n  // a standalone component, directive or pipe\n  if (ngModuleDef === null) {\n    return [type];\n  }\n  return flatten(maybeUnwrapFn(ngModuleDef.exports).map(type => {\n    const ngModuleDef = getNgModuleDef(type);\n    if (ngModuleDef) {\n      verifySemanticsOfNgModuleDef(type, false);\n      return computeCombinedExports(type);\n    } else {\n      return type;\n    }\n  }));\n}\n/**\n * Some declared components may be compiled asynchronously, and thus may not have their\n * ɵcmp set yet. If this is the case, then a reference to the module is written into\n * the `ngSelectorScope` property of the declared type.\n */\nfunction setScopeOnDeclaredComponents(moduleType, ngModule) {\n  const declarations = flatten(ngModule.declarations || EMPTY_ARRAY);\n  const transitiveScopes = transitiveScopesFor(moduleType);\n  declarations.forEach(declaration => {\n    declaration = resolveForwardRef(declaration);\n    if (declaration.hasOwnProperty(NG_COMP_DEF)) {\n      // A `ɵcmp` field exists - go ahead and patch the component directly.\n      const component = declaration;\n      const componentDef = getComponentDef(component);\n      patchComponentDefWithScope(componentDef, transitiveScopes);\n    } else if (!declaration.hasOwnProperty(NG_DIR_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {\n      // Set `ngSelectorScope` for future reference when the component compilation finishes.\n      declaration.ngSelectorScope = moduleType;\n    }\n  });\n}\n/**\n * Patch the definition of a component with directives and pipes from the compilation scope of\n * a given module.\n */\nfunction patchComponentDefWithScope(componentDef, transitiveScopes) {\n  componentDef.directiveDefs = () => Array.from(transitiveScopes.compilation.directives).map(dir => dir.hasOwnProperty(NG_COMP_DEF) ? getComponentDef(dir) : getDirectiveDef(dir)).filter(def => !!def);\n  componentDef.pipeDefs = () => Array.from(transitiveScopes.compilation.pipes).map(pipe => getPipeDef$1(pipe));\n  componentDef.schemas = transitiveScopes.schemas;\n  // Since we avoid Components/Directives/Pipes recompiling in case there are no overrides, we\n  // may face a problem where previously compiled defs available to a given Component/Directive\n  // are cached in TView and may become stale (in case any of these defs gets recompiled). In\n  // order to avoid this problem, we force fresh TView to be created.\n  componentDef.tView = null;\n}\n/**\n * Compute the pair of transitive scopes (compilation scope and exported scope) for a given type\n * (either a NgModule or a standalone component / directive / pipe).\n */\nfunction transitiveScopesFor(type) {\n  if (isNgModule(type)) {\n    if (USE_RUNTIME_DEPS_TRACKER_FOR_JIT) {\n      const scope = depsTracker.getNgModuleScope(type);\n      const def = getNgModuleDef(type, true);\n      return {\n        schemas: def.schemas || null,\n        ...scope\n      };\n    } else {\n      return transitiveScopesForNgModule(type);\n    }\n  } else if (isStandalone(type)) {\n    const directiveDef = getComponentDef(type) || getDirectiveDef(type);\n    if (directiveDef !== null) {\n      return {\n        schemas: null,\n        compilation: {\n          directives: new Set(),\n          pipes: new Set()\n        },\n        exported: {\n          directives: new Set([type]),\n          pipes: new Set()\n        }\n      };\n    }\n    const pipeDef = getPipeDef$1(type);\n    if (pipeDef !== null) {\n      return {\n        schemas: null,\n        compilation: {\n          directives: new Set(),\n          pipes: new Set()\n        },\n        exported: {\n          directives: new Set(),\n          pipes: new Set([type])\n        }\n      };\n    }\n  }\n  // TODO: change the error message to be more user-facing and take standalone into account\n  throw new Error(`${type.name} does not have a module def (ɵmod property)`);\n}\n/**\n * Compute the pair of transitive scopes (compilation scope and exported scope) for a given module.\n *\n * This operation is memoized and the result is cached on the module's definition. This function can\n * be called on modules with components that have not fully compiled yet, but the result should not\n * be used until they have.\n *\n * @param moduleType module that transitive scope should be calculated for.\n */\nfunction transitiveScopesForNgModule(moduleType) {\n  const def = getNgModuleDef(moduleType, true);\n  if (def.transitiveCompileScopes !== null) {\n    return def.transitiveCompileScopes;\n  }\n  const scopes = {\n    schemas: def.schemas || null,\n    compilation: {\n      directives: new Set(),\n      pipes: new Set()\n    },\n    exported: {\n      directives: new Set(),\n      pipes: new Set()\n    }\n  };\n  maybeUnwrapFn(def.imports).forEach(imported => {\n    // When this module imports another, the imported module's exported directives and pipes are\n    // added to the compilation scope of this module.\n    const importedScope = transitiveScopesFor(imported);\n    importedScope.exported.directives.forEach(entry => scopes.compilation.directives.add(entry));\n    importedScope.exported.pipes.forEach(entry => scopes.compilation.pipes.add(entry));\n  });\n  maybeUnwrapFn(def.declarations).forEach(declared => {\n    const declaredWithDefs = declared;\n    if (getPipeDef$1(declaredWithDefs)) {\n      scopes.compilation.pipes.add(declared);\n    } else {\n      // Either declared has a ɵcmp or ɵdir, or it's a component which hasn't\n      // had its template compiled yet. In either case, it gets added to the compilation's\n      // directives.\n      scopes.compilation.directives.add(declared);\n    }\n  });\n  maybeUnwrapFn(def.exports).forEach(exported => {\n    const exportedType = exported;\n    // Either the type is a module, a pipe, or a component/directive (which may not have a\n    // ɵcmp as it might be compiled asynchronously).\n    if (isNgModule(exportedType)) {\n      // When this module exports another, the exported module's exported directives and pipes are\n      // added to both the compilation and exported scopes of this module.\n      const exportedScope = transitiveScopesFor(exportedType);\n      exportedScope.exported.directives.forEach(entry => {\n        scopes.compilation.directives.add(entry);\n        scopes.exported.directives.add(entry);\n      });\n      exportedScope.exported.pipes.forEach(entry => {\n        scopes.compilation.pipes.add(entry);\n        scopes.exported.pipes.add(entry);\n      });\n    } else if (getPipeDef$1(exportedType)) {\n      scopes.exported.pipes.add(exportedType);\n    } else {\n      scopes.exported.directives.add(exportedType);\n    }\n  });\n  def.transitiveCompileScopes = scopes;\n  return scopes;\n}\nfunction expandModuleWithProviders(value) {\n  if (isModuleWithProviders(value)) {\n    return value.ngModule;\n  }\n  return value;\n}\n\n/**\n * Keep track of the compilation depth to avoid reentrancy issues during JIT compilation. This\n * matters in the following scenario:\n *\n * Consider a component 'A' that extends component 'B', both declared in module 'M'. During\n * the compilation of 'A' the definition of 'B' is requested to capture the inheritance chain,\n * potentially triggering compilation of 'B'. If this nested compilation were to trigger\n * `flushModuleScopingQueueAsMuchAsPossible` it may happen that module 'M' is still pending in the\n * queue, resulting in 'A' and 'B' to be patched with the NgModule scope. As the compilation of\n * 'A' is still in progress, this would introduce a circular dependency on its compilation. To avoid\n * this issue, the module scope queue is only flushed for compilations at the depth 0, to ensure\n * all compilations have finished.\n */\nlet compilationDepth = 0;\n/**\n * Compile an Angular component according to its decorator metadata, and patch the resulting\n * component def (ɵcmp) onto the component type.\n *\n * Compilation may be asynchronous (due to the need to resolve URLs for the component template or\n * other resources, for example). In the event that compilation is not immediate, `compileComponent`\n * will enqueue resource resolution into a global queue and will fail to return the `ɵcmp`\n * until the global queue has been resolved with a call to `resolveComponentResources`.\n */\nfunction compileComponent(type, metadata) {\n  // Initialize ngDevMode. This must be the first statement in compileComponent.\n  // See the `initNgDevMode` docstring for more information.\n  (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();\n  let ngComponentDef = null;\n  // Metadata may have resources which need to be resolved.\n  maybeQueueResolutionOfComponentResources(type, metadata);\n  // Note that we're using the same function as `Directive`, because that's only subset of metadata\n  // that we need to create the ngFactoryDef. We're avoiding using the component metadata\n  // because we'd have to resolve the asynchronous templates.\n  addDirectiveFactoryDef(type, metadata);\n  Object.defineProperty(type, NG_COMP_DEF, {\n    get: () => {\n      if (ngComponentDef === null) {\n        const compiler = getCompilerFacade({\n          usage: 0 /* JitCompilerUsage.Decorator */,\n          kind: 'component',\n          type: type\n        });\n        if (componentNeedsResolution(metadata)) {\n          const error = [`Component '${type.name}' is not resolved:`];\n          if (metadata.templateUrl) {\n            error.push(` - templateUrl: ${metadata.templateUrl}`);\n          }\n          if (metadata.styleUrls && metadata.styleUrls.length) {\n            error.push(` - styleUrls: ${JSON.stringify(metadata.styleUrls)}`);\n          }\n          if (metadata.styleUrl) {\n            error.push(` - styleUrl: ${metadata.styleUrl}`);\n          }\n          error.push(`Did you run and wait for 'resolveComponentResources()'?`);\n          throw new Error(error.join('\\n'));\n        }\n        // This const was called `jitOptions` previously but had to be renamed to `options` because\n        // of a bug with Terser that caused optimized JIT builds to throw a `ReferenceError`.\n        // This bug was investigated in https://github.com/angular/angular-cli/issues/17264.\n        // We should not rename it back until https://github.com/terser/terser/issues/615 is fixed.\n        const options = getJitOptions();\n        let preserveWhitespaces = metadata.preserveWhitespaces;\n        if (preserveWhitespaces === undefined) {\n          if (options !== null && options.preserveWhitespaces !== undefined) {\n            preserveWhitespaces = options.preserveWhitespaces;\n          } else {\n            preserveWhitespaces = false;\n          }\n        }\n        let encapsulation = metadata.encapsulation;\n        if (encapsulation === undefined) {\n          if (options !== null && options.defaultEncapsulation !== undefined) {\n            encapsulation = options.defaultEncapsulation;\n          } else {\n            encapsulation = ViewEncapsulation$1.Emulated;\n          }\n        }\n        const templateUrl = metadata.templateUrl || `ng:///${type.name}/template.html`;\n        const meta = {\n          ...directiveMetadata(type, metadata),\n          typeSourceSpan: compiler.createParseSourceSpan('Component', type.name, templateUrl),\n          template: metadata.template || '',\n          preserveWhitespaces,\n          styles: typeof metadata.styles === 'string' ? [metadata.styles] : metadata.styles || EMPTY_ARRAY,\n          animations: metadata.animations,\n          // JIT components are always compiled against an empty set of `declarations`. Instead, the\n          // `directiveDefs` and `pipeDefs` are updated at a later point:\n          //  * for NgModule-based components, they're set when the NgModule which declares the\n          //    component resolves in the module scoping queue\n          //  * for standalone components, they're set just below, after `compileComponent`.\n          declarations: [],\n          changeDetection: metadata.changeDetection,\n          encapsulation,\n          interpolation: metadata.interpolation,\n          viewProviders: metadata.viewProviders || null\n        };\n        compilationDepth++;\n        try {\n          if (meta.usesInheritance) {\n            addDirectiveDefToUndecoratedParents(type);\n          }\n          ngComponentDef = compiler.compileComponent(angularCoreEnv, templateUrl, meta);\n          if (metadata.standalone) {\n            // Patch the component definition for standalone components with `directiveDefs` and\n            // `pipeDefs` functions which lazily compute the directives/pipes available in the\n            // standalone component. Also set `dependencies` to the lazily resolved list of imports.\n            const imports = flatten(metadata.imports || EMPTY_ARRAY);\n            const {\n              directiveDefs,\n              pipeDefs\n            } = getStandaloneDefFunctions(type, imports);\n            ngComponentDef.directiveDefs = directiveDefs;\n            ngComponentDef.pipeDefs = pipeDefs;\n            ngComponentDef.dependencies = () => imports.map(resolveForwardRef);\n          }\n        } finally {\n          // Ensure that the compilation depth is decremented even when the compilation failed.\n          compilationDepth--;\n        }\n        if (compilationDepth === 0) {\n          // When NgModule decorator executed, we enqueued the module definition such that\n          // it would only dequeue and add itself as module scope to all of its declarations,\n          // but only if  if all of its declarations had resolved. This call runs the check\n          // to see if any modules that are in the queue can be dequeued and add scope to\n          // their declarations.\n          flushModuleScopingQueueAsMuchAsPossible();\n        }\n        // If component compilation is async, then the @NgModule annotation which declares the\n        // component may execute and set an ngSelectorScope property on the component type. This\n        // allows the component to patch itself with directiveDefs from the module after it\n        // finishes compiling.\n        if (hasSelectorScope(type)) {\n          const scopes = transitiveScopesFor(type.ngSelectorScope);\n          patchComponentDefWithScope(ngComponentDef, scopes);\n        }\n        if (metadata.schemas) {\n          if (metadata.standalone) {\n            ngComponentDef.schemas = metadata.schemas;\n          } else {\n            throw new Error(`The 'schemas' was specified for the ${stringifyForError(type)} but is only valid on a component that is standalone.`);\n          }\n        } else if (metadata.standalone) {\n          ngComponentDef.schemas = [];\n        }\n      }\n      return ngComponentDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode\n  });\n}\n/**\n * Build memoized `directiveDefs` and `pipeDefs` functions for the component definition of a\n * standalone component, which process `imports` and filter out directives and pipes. The use of\n * memoized functions here allows for the delayed resolution of any `forwardRef`s present in the\n * component's `imports`.\n */\nfunction getStandaloneDefFunctions(type, imports) {\n  let cachedDirectiveDefs = null;\n  let cachedPipeDefs = null;\n  const directiveDefs = () => {\n    if (!USE_RUNTIME_DEPS_TRACKER_FOR_JIT) {\n      if (cachedDirectiveDefs === null) {\n        // Standalone components are always able to self-reference, so include the component's own\n        // definition in its `directiveDefs`.\n        cachedDirectiveDefs = [getComponentDef(type)];\n        const seen = new Set([type]);\n        for (const rawDep of imports) {\n          ngDevMode && verifyStandaloneImport(rawDep, type);\n          const dep = resolveForwardRef(rawDep);\n          if (seen.has(dep)) {\n            continue;\n          }\n          seen.add(dep);\n          if (!!getNgModuleDef(dep)) {\n            const scope = transitiveScopesFor(dep);\n            for (const dir of scope.exported.directives) {\n              const def = getComponentDef(dir) || getDirectiveDef(dir);\n              if (def && !seen.has(dir)) {\n                seen.add(dir);\n                cachedDirectiveDefs.push(def);\n              }\n            }\n          } else {\n            const def = getComponentDef(dep) || getDirectiveDef(dep);\n            if (def) {\n              cachedDirectiveDefs.push(def);\n            }\n          }\n        }\n      }\n      return cachedDirectiveDefs;\n    } else {\n      if (ngDevMode) {\n        for (const rawDep of imports) {\n          verifyStandaloneImport(rawDep, type);\n        }\n      }\n      if (!isComponent(type)) {\n        return [];\n      }\n      const scope = depsTracker.getStandaloneComponentScope(type, imports);\n      return [...scope.compilation.directives].map(p => getComponentDef(p) || getDirectiveDef(p)).filter(d => d !== null);\n    }\n  };\n  const pipeDefs = () => {\n    if (!USE_RUNTIME_DEPS_TRACKER_FOR_JIT) {\n      if (cachedPipeDefs === null) {\n        cachedPipeDefs = [];\n        const seen = new Set();\n        for (const rawDep of imports) {\n          const dep = resolveForwardRef(rawDep);\n          if (seen.has(dep)) {\n            continue;\n          }\n          seen.add(dep);\n          if (!!getNgModuleDef(dep)) {\n            const scope = transitiveScopesFor(dep);\n            for (const pipe of scope.exported.pipes) {\n              const def = getPipeDef$1(pipe);\n              if (def && !seen.has(pipe)) {\n                seen.add(pipe);\n                cachedPipeDefs.push(def);\n              }\n            }\n          } else {\n            const def = getPipeDef$1(dep);\n            if (def) {\n              cachedPipeDefs.push(def);\n            }\n          }\n        }\n      }\n      return cachedPipeDefs;\n    } else {\n      if (ngDevMode) {\n        for (const rawDep of imports) {\n          verifyStandaloneImport(rawDep, type);\n        }\n      }\n      if (!isComponent(type)) {\n        return [];\n      }\n      const scope = depsTracker.getStandaloneComponentScope(type, imports);\n      return [...scope.compilation.pipes].map(p => getPipeDef$1(p)).filter(d => d !== null);\n    }\n  };\n  return {\n    directiveDefs,\n    pipeDefs\n  };\n}\nfunction hasSelectorScope(component) {\n  return component.ngSelectorScope !== undefined;\n}\n/**\n * Compile an Angular directive according to its decorator metadata, and patch the resulting\n * directive def onto the component type.\n *\n * In the event that compilation is not immediate, `compileDirective` will return a `Promise` which\n * will resolve when compilation completes and the directive becomes usable.\n */\nfunction compileDirective(type, directive) {\n  let ngDirectiveDef = null;\n  addDirectiveFactoryDef(type, directive || {});\n  Object.defineProperty(type, NG_DIR_DEF, {\n    get: () => {\n      if (ngDirectiveDef === null) {\n        // `directive` can be null in the case of abstract directives as a base class\n        // that use `@Directive()` with no selector. In that case, pass empty object to the\n        // `directiveMetadata` function instead of null.\n        const meta = getDirectiveMetadata(type, directive || {});\n        const compiler = getCompilerFacade({\n          usage: 0 /* JitCompilerUsage.Decorator */,\n          kind: 'directive',\n          type\n        });\n        ngDirectiveDef = compiler.compileDirective(angularCoreEnv, meta.sourceMapUrl, meta.metadata);\n      }\n      return ngDirectiveDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode\n  });\n}\nfunction getDirectiveMetadata(type, metadata) {\n  const name = type && type.name;\n  const sourceMapUrl = `ng:///${name}/ɵdir.js`;\n  const compiler = getCompilerFacade({\n    usage: 0 /* JitCompilerUsage.Decorator */,\n    kind: 'directive',\n    type\n  });\n  const facade = directiveMetadata(type, metadata);\n  facade.typeSourceSpan = compiler.createParseSourceSpan('Directive', name, sourceMapUrl);\n  if (facade.usesInheritance) {\n    addDirectiveDefToUndecoratedParents(type);\n  }\n  return {\n    metadata: facade,\n    sourceMapUrl\n  };\n}\nfunction addDirectiveFactoryDef(type, metadata) {\n  let ngFactoryDef = null;\n  Object.defineProperty(type, NG_FACTORY_DEF, {\n    get: () => {\n      if (ngFactoryDef === null) {\n        const meta = getDirectiveMetadata(type, metadata);\n        const compiler = getCompilerFacade({\n          usage: 0 /* JitCompilerUsage.Decorator */,\n          kind: 'directive',\n          type\n        });\n        ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${type.name}/ɵfac.js`, {\n          name: meta.metadata.name,\n          type: meta.metadata.type,\n          typeArgumentCount: 0,\n          deps: reflectDependencies(type),\n          target: compiler.FactoryTarget.Directive\n        });\n      }\n      return ngFactoryDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode\n  });\n}\nfunction extendsDirectlyFromObject(type) {\n  return Object.getPrototypeOf(type.prototype) === Object.prototype;\n}\n/**\n * Extract the `R3DirectiveMetadata` for a particular directive (either a `Directive` or a\n * `Component`).\n */\nfunction directiveMetadata(type, metadata) {\n  var _metadata$hostDirecti;\n  // Reflect inputs and outputs.\n  const reflect = getReflect();\n  const propMetadata = reflect.ownPropMetadata(type);\n  return {\n    name: type.name,\n    type: type,\n    selector: metadata.selector !== undefined ? metadata.selector : null,\n    host: metadata.host || EMPTY_OBJ,\n    propMetadata: propMetadata,\n    inputs: metadata.inputs || EMPTY_ARRAY,\n    outputs: metadata.outputs || EMPTY_ARRAY,\n    queries: extractQueriesMetadata(type, propMetadata, isContentQuery),\n    lifecycle: {\n      usesOnChanges: reflect.hasLifecycleHook(type, 'ngOnChanges')\n    },\n    typeSourceSpan: null,\n    usesInheritance: !extendsDirectlyFromObject(type),\n    exportAs: extractExportAs(metadata.exportAs),\n    providers: metadata.providers || null,\n    viewQueries: extractQueriesMetadata(type, propMetadata, isViewQuery),\n    isStandalone: !!metadata.standalone,\n    isSignal: !!metadata.signals,\n    hostDirectives: ((_metadata$hostDirecti = metadata.hostDirectives) === null || _metadata$hostDirecti === void 0 ? void 0 : _metadata$hostDirecti.map(directive => typeof directive === 'function' ? {\n      directive\n    } : directive)) || null\n  };\n}\n/**\n * Adds a directive definition to all parent classes of a type that don't have an Angular decorator.\n */\nfunction addDirectiveDefToUndecoratedParents(type) {\n  const objPrototype = Object.prototype;\n  let parent = Object.getPrototypeOf(type.prototype).constructor;\n  // Go up the prototype until we hit `Object`.\n  while (parent && parent !== objPrototype) {\n    // Since inheritance works if the class was annotated already, we only need to add\n    // the def if there are no annotations and the def hasn't been created already.\n    if (!getDirectiveDef(parent) && !getComponentDef(parent) && shouldAddAbstractDirective(parent)) {\n      compileDirective(parent, null);\n    }\n    parent = Object.getPrototypeOf(parent);\n  }\n}\nfunction convertToR3QueryPredicate(selector) {\n  return typeof selector === 'string' ? splitByComma(selector) : resolveForwardRef(selector);\n}\nfunction convertToR3QueryMetadata(propertyName, ann) {\n  return {\n    propertyName: propertyName,\n    predicate: convertToR3QueryPredicate(ann.selector),\n    descendants: ann.descendants,\n    first: ann.first,\n    read: ann.read ? ann.read : null,\n    static: !!ann.static,\n    emitDistinctChangesOnly: !!ann.emitDistinctChangesOnly\n  };\n}\nfunction extractQueriesMetadata(type, propMetadata, isQueryAnn) {\n  const queriesMeta = [];\n  for (const field in propMetadata) {\n    if (propMetadata.hasOwnProperty(field)) {\n      const annotations = propMetadata[field];\n      annotations.forEach(ann => {\n        if (isQueryAnn(ann)) {\n          if (!ann.selector) {\n            throw new Error(`Can't construct a query for the property \"${field}\" of ` + `\"${stringifyForError(type)}\" since the query selector wasn't defined.`);\n          }\n          if (annotations.some(isInputAnnotation)) {\n            throw new Error(`Cannot combine @Input decorators with query decorators`);\n          }\n          queriesMeta.push(convertToR3QueryMetadata(field, ann));\n        }\n      });\n    }\n  }\n  return queriesMeta;\n}\nfunction extractExportAs(exportAs) {\n  return exportAs === undefined ? null : splitByComma(exportAs);\n}\nfunction isContentQuery(value) {\n  const name = value.ngMetadataName;\n  return name === 'ContentChild' || name === 'ContentChildren';\n}\nfunction isViewQuery(value) {\n  const name = value.ngMetadataName;\n  return name === 'ViewChild' || name === 'ViewChildren';\n}\nfunction isInputAnnotation(value) {\n  return value.ngMetadataName === 'Input';\n}\nfunction splitByComma(value) {\n  return value.split(',').map(piece => piece.trim());\n}\nconst LIFECYCLE_HOOKS = ['ngOnChanges', 'ngOnInit', 'ngOnDestroy', 'ngDoCheck', 'ngAfterViewInit', 'ngAfterViewChecked', 'ngAfterContentInit', 'ngAfterContentChecked'];\nfunction shouldAddAbstractDirective(type) {\n  const reflect = getReflect();\n  if (LIFECYCLE_HOOKS.some(hookName => reflect.hasLifecycleHook(type, hookName))) {\n    return true;\n  }\n  const propMetadata = reflect.propMetadata(type);\n  for (const field in propMetadata) {\n    const annotations = propMetadata[field];\n    for (let i = 0; i < annotations.length; i++) {\n      const current = annotations[i];\n      const metadataName = current.ngMetadataName;\n      if (isInputAnnotation(current) || isContentQuery(current) || isViewQuery(current) || metadataName === 'Output' || metadataName === 'HostBinding' || metadataName === 'HostListener') {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nfunction compilePipe(type, meta) {\n  let ngPipeDef = null;\n  let ngFactoryDef = null;\n  Object.defineProperty(type, NG_FACTORY_DEF, {\n    get: () => {\n      if (ngFactoryDef === null) {\n        const metadata = getPipeMetadata(type, meta);\n        const compiler = getCompilerFacade({\n          usage: 0 /* JitCompilerUsage.Decorator */,\n          kind: 'pipe',\n          type: metadata.type\n        });\n        ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${metadata.name}/ɵfac.js`, {\n          name: metadata.name,\n          type: metadata.type,\n          typeArgumentCount: 0,\n          deps: reflectDependencies(type),\n          target: compiler.FactoryTarget.Pipe\n        });\n      }\n      return ngFactoryDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode\n  });\n  Object.defineProperty(type, NG_PIPE_DEF, {\n    get: () => {\n      if (ngPipeDef === null) {\n        const metadata = getPipeMetadata(type, meta);\n        const compiler = getCompilerFacade({\n          usage: 0 /* JitCompilerUsage.Decorator */,\n          kind: 'pipe',\n          type: metadata.type\n        });\n        ngPipeDef = compiler.compilePipe(angularCoreEnv, `ng:///${metadata.name}/ɵpipe.js`, metadata);\n      }\n      return ngPipeDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode\n  });\n}\nfunction getPipeMetadata(type, meta) {\n  return {\n    type: type,\n    name: type.name,\n    pipeName: meta.name,\n    pure: meta.pure !== undefined ? meta.pure : true,\n    isStandalone: !!meta.standalone\n  };\n}\n\n/**\n * Type of the Directive metadata.\n *\n * @publicApi\n */\nconst Directive = makeDecorator('Directive', (dir = {}) => dir, undefined, undefined, (type, meta) => compileDirective(type, meta));\n/**\n * Component decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Component = makeDecorator('Component', (c = {}) => ({\n  changeDetection: ChangeDetectionStrategy.Default,\n  ...c\n}), Directive, undefined, (type, meta) => compileComponent(type, meta));\n/**\n * @Annotation\n * @publicApi\n */\nconst Pipe = makeDecorator('Pipe', p => ({\n  pure: true,\n  ...p\n}), undefined, undefined, (type, meta) => compilePipe(type, meta));\n/**\n * @Annotation\n * @publicApi\n */\nconst Input = makePropDecorator('Input', arg => {\n  if (!arg) {\n    return {};\n  }\n  return typeof arg === 'string' ? {\n    alias: arg\n  } : arg;\n});\n/**\n * @Annotation\n * @publicApi\n */\nconst Output = makePropDecorator('Output', alias => ({\n  alias\n}));\n/**\n * @Annotation\n * @publicApi\n */\nconst HostBinding = makePropDecorator('HostBinding', hostPropertyName => ({\n  hostPropertyName\n}));\n/**\n * Decorator that binds a DOM event to a host listener and supplies configuration metadata.\n * Angular invokes the supplied handler method when the host element emits the specified event,\n * and updates the bound element with the result.\n *\n * If the handler method returns false, applies `preventDefault` on the bound element.\n *\n * @usageNotes\n *\n * The following example declares a directive\n * that attaches a click listener to a button and counts clicks.\n *\n * ```ts\n * @Directive({selector: 'button[counting]'})\n * class CountClicks {\n *   numberOfClicks = 0;\n *\n *   @HostListener('click', ['$event.target'])\n *   onClick(btn) {\n *     console.log('button', btn, 'number of clicks:', this.numberOfClicks++);\n *   }\n * }\n *\n * @Component({\n *   selector: 'app',\n *   template: '<button counting>Increment</button>',\n * })\n * class App {}\n *\n * ```\n *\n * The following example registers another DOM event handler that listens for `Enter` key-press\n * events on the global `window`.\n * ``` ts\n * import { HostListener, Component } from \"@angular/core\";\n *\n * @Component({\n *   selector: 'app',\n *   template: `<h1>Hello, you have pressed enter {{counter}} number of times!</h1> Press enter key\n * to increment the counter.\n *   <button (click)=\"resetCounter()\">Reset Counter</button>`\n * })\n * class AppComponent {\n *   counter = 0;\n *   @HostListener('window:keydown.enter', ['$event'])\n *   handleKeyDown(event: KeyboardEvent) {\n *     this.counter++;\n *   }\n *   resetCounter() {\n *     this.counter = 0;\n *   }\n * }\n * ```\n * The list of valid key names for `keydown` and `keyup` events\n * can be found here:\n * https://www.w3.org/TR/DOM-Level-3-Events-key/#named-key-attribute-values\n *\n * Note that keys can also be combined, e.g. `@HostListener('keydown.shift.a')`.\n *\n * The global target names that can be used to prefix an event name are\n * `document:`, `window:` and `body:`.\n *\n * @Annotation\n * @publicApi\n */\nconst HostListener = makePropDecorator('HostListener', (eventName, args) => ({\n  eventName,\n  args\n}));\n\n/**\n * @Annotation\n */\nconst NgModule = makeDecorator('NgModule', ngModule => ngModule, undefined, undefined,\n/**\n * Decorator that marks the following class as an NgModule, and supplies\n * configuration metadata for it.\n *\n * * The `declarations` option configures the compiler\n * with information about what belongs to the NgModule.\n * * The `providers` options configures the NgModule's injector to provide\n * dependencies the NgModule members.\n * * The `imports` and `exports` options bring in members from other modules, and make\n * this module's members available to others.\n */\n(type, meta) => compileNgModule(type, meta));\n\n/**\n * This indirection is needed to free up Component, etc symbols in the public API\n * to be used by the decorator versions of these annotations.\n */\n\n/**\n * @description Represents the version of Angular\n *\n * @publicApi\n */\nclass Version {\n  constructor(full) {\n    this.full = full;\n    const parts = full.split('.');\n    this.major = parts[0];\n    this.minor = parts[1];\n    this.patch = parts.slice(2).join('.');\n  }\n}\n/**\n * @publicApi\n */\nconst VERSION = new Version('17.0.8');\n\n/*\n * This file exists to support compilation of @angular/core in Ivy mode.\n *\n * When the Angular compiler processes a compilation unit, it normally writes imports to\n * @angular/core. When compiling the core package itself this strategy isn't usable. Instead, the\n * compiler writes imports to this file.\n *\n * Only a subset of such imports are supported - core is not allowed to declare components or pipes.\n * A check in ngtsc's `R3SymbolsImportRewriter` validates this condition. The rewriter is only used\n * when compiling @angular/core and is responsible for translating an external name (prefixed with\n * ɵ) to the internal symbol name as exported below.\n *\n * The below symbols are used for @Injectable and @NgModule compilation.\n */\n/**\n * The existence of this constant (in this particular file) informs the Angular compiler that the\n * current program is actually @angular/core, which needs to be compiled specially.\n */\nconst ITS_JUST_ANGULAR = true;\nclass Console {\n  log(message) {\n    // tslint:disable-next-line:no-console\n    console.log(message);\n  }\n  // Note: for reporting errors use `DOM.logError()` as it is platform specific\n  warn(message) {\n    // tslint:disable-next-line:no-console\n    console.warn(message);\n  }\n}\n_class20 = Console;\n_class20.ɵfac = function Console_Factory(t) {\n  return new (t || _class20)();\n};\n_class20.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n  token: _class20,\n  factory: _class20.ɵfac,\n  providedIn: 'platform'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(Console, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'platform'\n    }]\n  }], null, null);\n})();\n\n/**\n * Combination of NgModuleFactory and ComponentFactories.\n *\n * @publicApi\n *\n * @deprecated\n * Ivy JIT mode doesn't require accessing this symbol.\n * See [JIT API changes due to ViewEngine deprecation](guide/deprecations#jit-api-changes) for\n * additional context.\n */\nclass ModuleWithComponentFactories {\n  constructor(ngModuleFactory, componentFactories) {\n    this.ngModuleFactory = ngModuleFactory;\n    this.componentFactories = componentFactories;\n  }\n}\n/**\n * Low-level service for running the angular compiler during runtime\n * to create {@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n *\n * Each `@NgModule` provides an own `Compiler` to its injector,\n * that will use the directives/pipes of the ng module for compilation\n * of components.\n *\n * @publicApi\n *\n * @deprecated\n * Ivy JIT mode doesn't require accessing this symbol.\n * See [JIT API changes due to ViewEngine deprecation](guide/deprecations#jit-api-changes) for\n * additional context.\n */\nclass Compiler {\n  /**\n   * Compiles the given NgModule and all of its components. All templates of the components\n   * have to be inlined.\n   */\n  compileModuleSync(moduleType) {\n    return new NgModuleFactory(moduleType);\n  }\n  /**\n   * Compiles the given NgModule and all of its components\n   */\n  compileModuleAsync(moduleType) {\n    return Promise.resolve(this.compileModuleSync(moduleType));\n  }\n  /**\n   * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.\n   */\n  compileModuleAndAllComponentsSync(moduleType) {\n    const ngModuleFactory = this.compileModuleSync(moduleType);\n    const moduleDef = getNgModuleDef(moduleType);\n    const componentFactories = maybeUnwrapFn(moduleDef.declarations).reduce((factories, declaration) => {\n      const componentDef = getComponentDef(declaration);\n      componentDef && factories.push(new ComponentFactory(componentDef));\n      return factories;\n    }, []);\n    return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n  }\n  /**\n   * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.\n   */\n  compileModuleAndAllComponentsAsync(moduleType) {\n    return Promise.resolve(this.compileModuleAndAllComponentsSync(moduleType));\n  }\n  /**\n   * Clears all caches.\n   */\n  clearCache() {}\n  /**\n   * Clears the cache for the given component/ngModule.\n   */\n  clearCacheFor(type) {}\n  /**\n   * Returns the id for a given NgModule, if one is defined and known to the compiler.\n   */\n  getModuleId(moduleType) {\n    return undefined;\n  }\n}\n_class21 = Compiler;\n_class21.ɵfac = function Compiler_Factory(t) {\n  return new (t || _class21)();\n};\n_class21.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n  token: _class21,\n  factory: _class21.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(Compiler, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/**\n * Token to provide CompilerOptions in the platform injector.\n *\n * @publicApi\n */\nconst COMPILER_OPTIONS = new InjectionToken('compilerOptions');\n/**\n * A factory for creating a Compiler\n *\n * @publicApi\n *\n * @deprecated\n * Ivy JIT mode doesn't require accessing this symbol.\n * See [JIT API changes due to ViewEngine deprecation](guide/deprecations#jit-api-changes) for\n * additional context.\n */\nclass CompilerFactory {}\n\n/**\n * *Internal* service that keeps track of pending tasks happening in the system.\n *\n * This information is needed to make sure that the serialization on the server\n * is delayed until all tasks in the queue (such as an initial navigation or a\n * pending HTTP request) are completed.\n *\n * Pending tasks continue to contribute to the stableness of `ApplicationRef`\n * throughout the lifetime of the application.\n */\nclass PendingTasks {\n  constructor() {\n    this.taskId = 0;\n    this.pendingTasks = new Set();\n    this.hasPendingTasks = new BehaviorSubject(false);\n  }\n  get _hasPendingTasks() {\n    return this.hasPendingTasks.value;\n  }\n  add() {\n    if (!this._hasPendingTasks) {\n      this.hasPendingTasks.next(true);\n    }\n    const taskId = this.taskId++;\n    this.pendingTasks.add(taskId);\n    return taskId;\n  }\n  remove(taskId) {\n    this.pendingTasks.delete(taskId);\n    if (this.pendingTasks.size === 0 && this._hasPendingTasks) {\n      this.hasPendingTasks.next(false);\n    }\n  }\n  ngOnDestroy() {\n    this.pendingTasks.clear();\n    if (this._hasPendingTasks) {\n      this.hasPendingTasks.next(false);\n    }\n  }\n}\n_class22 = PendingTasks;\n_class22.ɵfac = function PendingTasks_Factory(t) {\n  return new (t || _class22)();\n};\n_class22.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n  token: _class22,\n  factory: _class22.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(PendingTasks, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\n/**\n * These are the data structures that our framework injector profiler will fill with data in order\n * to support DI debugging APIs.\n *\n * resolverToTokenToDependencies: Maps an injector to a Map of tokens to an Array of\n * dependencies. Injector -> Token -> Dependencies This is used to support the\n * getDependenciesFromInjectable API, which takes in an injector and a token and returns it's\n * dependencies.\n *\n * resolverToProviders: Maps a DI resolver (an Injector or a TNode) to the providers configured\n * within it This is used to support the getInjectorProviders API, which takes in an injector and\n * returns the providers that it was configured with. Note that for the element injector case we\n * use the TNode instead of the LView as the DI resolver. This is because the registration of\n * providers happens only once per type of TNode. If an injector is created with an identical TNode,\n * the providers for that injector will not be reconfigured.\n *\n * standaloneInjectorToComponent: Maps the injector of a standalone component to the standalone\n * component that it is associated with. Used in the getInjectorProviders API, specificially in the\n * discovery of import paths for each provider. This is necessary because the imports array of a\n * standalone component is processed and configured in its standalone injector, but exists within\n * the component's definition. Because getInjectorProviders takes in an injector, if that injector\n * is the injector of a standalone component, we need to be able to discover the place where the\n * imports array is located (the component) in order to flatten the imports array within it to\n * discover all of it's providers.\n *\n *\n * All of these data structures are instantiated with WeakMaps. This will ensure that the presence\n * of any object in the keys of these maps does not prevent the garbage collector from collecting\n * those objects. Because of this property of WeakMaps, these data structures will never be the\n * source of a memory leak.\n *\n * An example of this advantage: When components are destroyed, we don't need to do\n * any additional work to remove that component from our mappings.\n *\n */\nclass DIDebugData {\n  constructor() {\n    this.resolverToTokenToDependencies = new WeakMap();\n    this.resolverToProviders = new WeakMap();\n    this.standaloneInjectorToComponent = new WeakMap();\n  }\n  reset() {\n    this.resolverToTokenToDependencies = new WeakMap();\n    this.resolverToProviders = new WeakMap();\n    this.standaloneInjectorToComponent = new WeakMap();\n  }\n}\nlet frameworkDIDebugData = new DIDebugData();\nfunction getFrameworkDIDebugData() {\n  return frameworkDIDebugData;\n}\n/**\n * Initalize default handling of injector events. This handling parses events\n * as they are emitted and constructs the data structures necessary to support\n * some of debug APIs.\n *\n * See handleInjectEvent, handleCreateEvent and handleProviderConfiguredEvent\n * for descriptions of each handler\n *\n * Supported APIs:\n *               - getDependenciesFromInjectable\n *               - getInjectorProviders\n */\nfunction setupFrameworkInjectorProfiler() {\n  frameworkDIDebugData.reset();\n  setInjectorProfiler(injectorProfilerEvent => handleInjectorProfilerEvent(injectorProfilerEvent));\n}\nfunction handleInjectorProfilerEvent(injectorProfilerEvent) {\n  const {\n    context,\n    type\n  } = injectorProfilerEvent;\n  if (type === 0 /* InjectorProfilerEventType.Inject */) {\n    handleInjectEvent(context, injectorProfilerEvent.service);\n  } else if (type === 1 /* InjectorProfilerEventType.InstanceCreatedByInjector */) {\n    handleInstanceCreatedByInjectorEvent(context, injectorProfilerEvent.instance);\n  } else if (type === 2 /* InjectorProfilerEventType.ProviderConfigured */) {\n    handleProviderConfiguredEvent(context, injectorProfilerEvent.providerRecord);\n  }\n}\n/**\n *\n * Stores the injected service in frameworkDIDebugData.resolverToTokenToDependencies\n * based on it's injector and token.\n *\n * @param context InjectorProfilerContext the injection context that this event occurred in.\n * @param data InjectedService the service associated with this inject event.\n *\n */\nfunction handleInjectEvent(context, data) {\n  const diResolver = getDIResolver(context.injector);\n  if (diResolver === null) {\n    throwError('An Inject event must be run within an injection context.');\n  }\n  const diResolverToInstantiatedToken = frameworkDIDebugData.resolverToTokenToDependencies;\n  if (!diResolverToInstantiatedToken.has(diResolver)) {\n    diResolverToInstantiatedToken.set(diResolver, new WeakMap());\n  }\n  // if token is a primitive type, ignore this event. We do this because we cannot keep track of\n  // non-primitive tokens in WeakMaps since they are not garbage collectable.\n  if (!canBeHeldWeakly(context.token)) {\n    return;\n  }\n  const instantiatedTokenToDependencies = diResolverToInstantiatedToken.get(diResolver);\n  if (!instantiatedTokenToDependencies.has(context.token)) {\n    instantiatedTokenToDependencies.set(context.token, []);\n  }\n  const {\n    token,\n    value,\n    flags\n  } = data;\n  assertDefined(context.token, 'Injector profiler context token is undefined.');\n  const dependencies = instantiatedTokenToDependencies.get(context.token);\n  assertDefined(dependencies, 'Could not resolve dependencies for token.');\n  if (context.injector instanceof NodeInjector) {\n    dependencies.push({\n      token,\n      value,\n      flags,\n      injectedIn: getNodeInjectorContext(context.injector)\n    });\n  } else {\n    dependencies.push({\n      token,\n      value,\n      flags\n    });\n  }\n}\n/**\n *\n * Returns the LView and TNode associated with a NodeInjector. Returns undefined if the injector\n * is not a NodeInjector.\n *\n * @param injector\n * @returns {lView: LView, tNode: TNode}|undefined\n */\nfunction getNodeInjectorContext(injector) {\n  if (!(injector instanceof NodeInjector)) {\n    throwError('getNodeInjectorContext must be called with a NodeInjector');\n  }\n  const lView = getNodeInjectorLView(injector);\n  const tNode = getNodeInjectorTNode(injector);\n  if (tNode === null) {\n    return;\n  }\n  assertTNodeForLView(tNode, lView);\n  return {\n    lView,\n    tNode\n  };\n}\n/**\n *\n * If the created instance is an instance of a standalone component, maps the injector to that\n * standalone component in frameworkDIDebugData.standaloneInjectorToComponent\n *\n * @param context InjectorProfilerContext the injection context that this event occurred in.\n * @param data InjectorCreatedInstance an object containing the instance that was just created\n *\n */\nfunction handleInstanceCreatedByInjectorEvent(context, data) {\n  const {\n    value\n  } = data;\n  if (getDIResolver(context.injector) === null) {\n    throwError('An InjectorCreatedInstance event must be run within an injection context.');\n  }\n  // if our value is an instance of a standalone component, map the injector of that standalone\n  // component to the component class. Otherwise, this event is a noop.\n  let standaloneComponent = undefined;\n  if (typeof value === 'object') {\n    standaloneComponent = value === null || value === void 0 ? void 0 : value.constructor;\n  }\n  if (standaloneComponent === undefined || !isStandaloneComponent(standaloneComponent)) {\n    return;\n  }\n  const environmentInjector = context.injector.get(EnvironmentInjector, null, {\n    optional: true\n  });\n  // Standalone components should have an environment injector. If one cannot be\n  // found we may be in a test case for low level functionality that did not explictly\n  // setup this injector. In those cases, we simply ignore this event.\n  if (environmentInjector === null) {\n    return;\n  }\n  const {\n    standaloneInjectorToComponent\n  } = frameworkDIDebugData;\n  // If our injector has already been mapped, as is the case\n  // when a standalone component imports another standalone component,\n  // we consider the original component (the component doing the importing)\n  // as the component connected to our injector.\n  if (standaloneInjectorToComponent.has(environmentInjector)) {\n    return;\n  }\n  // If our injector hasn't been mapped, then we map it to the standalone component\n  standaloneInjectorToComponent.set(environmentInjector, standaloneComponent);\n}\nfunction isStandaloneComponent(value) {\n  const def = getComponentDef(value);\n  return !!(def !== null && def !== void 0 && def.standalone);\n}\n/**\n *\n * Stores the emitted ProviderRecords from the InjectorProfilerEventType.ProviderConfigured\n * event in frameworkDIDebugData.resolverToProviders\n *\n * @param context InjectorProfilerContext the injection context that this event occurred in.\n * @param data ProviderRecord an object containing the instance that was just created\n *\n */\nfunction handleProviderConfiguredEvent(context, data) {\n  const {\n    resolverToProviders\n  } = frameworkDIDebugData;\n  let diResolver;\n  if ((context === null || context === void 0 ? void 0 : context.injector) instanceof NodeInjector) {\n    diResolver = getNodeInjectorTNode(context.injector);\n  } else {\n    diResolver = context.injector;\n  }\n  if (diResolver === null) {\n    throwError('A ProviderConfigured event must be run within an injection context.');\n  }\n  if (!resolverToProviders.has(diResolver)) {\n    resolverToProviders.set(diResolver, []);\n  }\n  resolverToProviders.get(diResolver).push(data);\n}\nfunction getDIResolver(injector) {\n  let diResolver = null;\n  if (injector === undefined) {\n    return diResolver;\n  }\n  // We use the LView as the diResolver for NodeInjectors because they\n  // do not persist anywhere in the framework. They are simply wrappers around an LView and a TNode\n  // that do persist. Because of this, we rely on the LView of the NodeInjector in order to use\n  // as a concrete key to represent this injector. If we get the same LView back later, we know\n  // we're looking at the same injector.\n  if (injector instanceof NodeInjector) {\n    diResolver = getNodeInjectorLView(injector);\n  }\n  // Other injectors can be used a keys for a map because their instances\n  // persist\n  else {\n    diResolver = injector;\n  }\n  return diResolver;\n}\n// inspired by\n// https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-canbeheldweakly\nfunction canBeHeldWeakly(value) {\n  // we check for value !== null here because typeof null === 'object\n  return value !== null && (typeof value === 'object' || typeof value === 'function' || typeof value === 'symbol');\n}\n\n/**\n * Marks a component for check (in case of OnPush components) and synchronously\n * performs change detection on the application this component belongs to.\n *\n * @param component Component to {@link ChangeDetectorRef#markForCheck mark for check}.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction applyChanges(component) {\n  ngDevMode && assertDefined(component, 'component');\n  markViewDirty(getComponentViewByInstance(component));\n  getRootComponents(component).forEach(rootComponent => detectChanges(rootComponent));\n}\n/**\n * Synchronously perform change detection on a component (and possibly its sub-components).\n *\n * This function triggers change detection in a synchronous way on a component.\n *\n * @param component The component which the change detection should be performed on.\n */\nfunction detectChanges(component) {\n  const view = getComponentViewByInstance(component);\n  view[FLAGS] |= 1024 /* LViewFlags.RefreshView */;\n  detectChangesInternal(view);\n}\n\n/**\n * Discovers the dependencies of an injectable instance. Provides DI information about each\n * dependency that the injectable was instantiated with, including where they were provided from.\n *\n * @param injector An injector instance\n * @param token a DI token that was constructed by the given injector instance\n * @returns an object that contains the created instance of token as well as all of the dependencies\n * that it was instantiated with OR undefined if the token was not created within the given\n * injector.\n */\nfunction getDependenciesFromInjectable(injector, token) {\n  // First we check to see if the token given maps to an actual instance in the injector given.\n  // We use `self: true` because we only want to look at the injector we were given.\n  // We use `optional: true` because it's possible that the token we were given was never\n  // constructed by the injector we were given.\n  const instance = injector.get(token, null, {\n    self: true,\n    optional: true\n  });\n  if (instance === null) {\n    throw new Error(`Unable to determine instance of ${token} in given injector`);\n  }\n  const unformattedDependencies = getDependenciesForTokenInInjector(token, injector);\n  const resolutionPath = getInjectorResolutionPath(injector);\n  const dependencies = unformattedDependencies.map(dep => {\n    // injectedIn contains private fields, so we omit it from the response\n    const formattedDependency = {\n      value: dep.value\n    };\n    // convert injection flags to booleans\n    const flags = dep.flags;\n    formattedDependency.flags = {\n      optional: (8 /* InternalInjectFlags.Optional */ & flags) === 8 /* InternalInjectFlags.Optional */,\n      host: (1 /* InternalInjectFlags.Host */ & flags) === 1 /* InternalInjectFlags.Host */,\n      self: (2 /* InternalInjectFlags.Self */ & flags) === 2 /* InternalInjectFlags.Self */,\n      skipSelf: (4 /* InternalInjectFlags.SkipSelf */ & flags) === 4 /* InternalInjectFlags.SkipSelf */\n    };\n    // find the injector that provided the dependency\n    for (let i = 0; i < resolutionPath.length; i++) {\n      const injectorToCheck = resolutionPath[i];\n      // if skipSelf is true we skip the first injector\n      if (i === 0 && formattedDependency.flags.skipSelf) {\n        continue;\n      }\n      // host only applies to NodeInjectors\n      if (formattedDependency.flags.host && injectorToCheck instanceof EnvironmentInjector) {\n        break;\n      }\n      const instance = injectorToCheck.get(dep.token, null, {\n        self: true,\n        optional: true\n      });\n      if (instance !== null) {\n        // if host flag is true we double check that we can get the service from the first element\n        // in the resolution path by using the host flag. This is done to make sure that we've found\n        // the correct providing injector, and not a node injector that is connected to our path via\n        // a router outlet.\n        if (formattedDependency.flags.host) {\n          const firstInjector = resolutionPath[0];\n          const lookupFromFirstInjector = firstInjector.get(dep.token, null, {\n            ...formattedDependency.flags,\n            optional: true\n          });\n          if (lookupFromFirstInjector !== null) {\n            formattedDependency.providedIn = injectorToCheck;\n          }\n          break;\n        }\n        formattedDependency.providedIn = injectorToCheck;\n        break;\n      }\n      // if self is true we stop after the first injector\n      if (i === 0 && formattedDependency.flags.self) {\n        break;\n      }\n    }\n    if (dep.token) formattedDependency.token = dep.token;\n    return formattedDependency;\n  });\n  return {\n    instance,\n    dependencies\n  };\n}\nfunction getDependenciesForTokenInInjector(token, injector) {\n  var _tokenDependencyMap$g;\n  const {\n    resolverToTokenToDependencies\n  } = getFrameworkDIDebugData();\n  if (!(injector instanceof NodeInjector)) {\n    var _resolverToTokenToDep, _resolverToTokenToDep2, _resolverToTokenToDep3;\n    return (_resolverToTokenToDep = (_resolverToTokenToDep2 = resolverToTokenToDependencies.get(injector)) === null || _resolverToTokenToDep2 === void 0 || (_resolverToTokenToDep3 = _resolverToTokenToDep2.get) === null || _resolverToTokenToDep3 === void 0 ? void 0 : _resolverToTokenToDep3.call(_resolverToTokenToDep2, token)) !== null && _resolverToTokenToDep !== void 0 ? _resolverToTokenToDep : [];\n  }\n  const lView = getNodeInjectorLView(injector);\n  const tokenDependencyMap = resolverToTokenToDependencies.get(lView);\n  const dependencies = (_tokenDependencyMap$g = tokenDependencyMap === null || tokenDependencyMap === void 0 ? void 0 : tokenDependencyMap.get(token)) !== null && _tokenDependencyMap$g !== void 0 ? _tokenDependencyMap$g : [];\n  // In the NodeInjector case, all injections for every node are stored in the same lView.\n  // We use the injectedIn field of the dependency to filter out the dependencies that\n  // do not come from the same node as the instance we're looking at.\n  return dependencies.filter(dependency => {\n    var _dependency$injectedI;\n    const dependencyNode = (_dependency$injectedI = dependency.injectedIn) === null || _dependency$injectedI === void 0 ? void 0 : _dependency$injectedI.tNode;\n    if (dependencyNode === undefined) {\n      return false;\n    }\n    const instanceNode = getNodeInjectorTNode(injector);\n    assertTNode(dependencyNode);\n    assertTNode(instanceNode);\n    return dependencyNode === instanceNode;\n  });\n}\n/**\n * Gets the class associated with an injector that contains a provider `imports` array in it's\n * definition\n *\n * For Module Injectors this returns the NgModule constructor.\n *\n * For Standalone injectors this returns the standalone component constructor.\n *\n * @param injector Injector an injector instance\n * @returns the constructor where the `imports` array that configures this injector is located\n */\nfunction getProviderImportsContainer(injector) {\n  const {\n    standaloneInjectorToComponent\n  } = getFrameworkDIDebugData();\n  // standalone components configure providers through a component def, so we have to\n  // use the standalone component associated with this injector if Injector represents\n  // a standalone components EnvironmentInjector\n  if (standaloneInjectorToComponent.has(injector)) {\n    return standaloneInjectorToComponent.get(injector);\n  }\n  // Module injectors configure providers through their NgModule def, so we use the\n  // injector to lookup its NgModuleRef and through that grab its instance\n  const defTypeRef = injector.get(NgModuleRef$1, null, {\n    self: true,\n    optional: true\n  });\n  // If we can't find an associated imports container, return null.\n  // This could be the case if this function is called with an R3Injector that does not represent\n  // a standalone component or NgModule.\n  if (defTypeRef === null) {\n    return null;\n  }\n  // In standalone applications, the root environment injector created by bootstrapApplication\n  // may have no associated \"instance\".\n  if (defTypeRef.instance === null) {\n    return null;\n  }\n  return defTypeRef.instance.constructor;\n}\n/**\n * Gets the providers configured on a NodeInjector\n *\n * @param injector A NodeInjector instance\n * @returns ProviderRecord[] an array of objects representing the providers configured on this\n *     injector\n */\nfunction getNodeInjectorProviders(injector) {\n  var _resolverToProviders$;\n  const diResolver = getNodeInjectorTNode(injector);\n  const {\n    resolverToProviders\n  } = getFrameworkDIDebugData();\n  return (_resolverToProviders$ = resolverToProviders.get(diResolver)) !== null && _resolverToProviders$ !== void 0 ? _resolverToProviders$ : [];\n}\n/**\n * Gets a mapping of providers configured on an injector to their import paths\n *\n * ModuleA -> imports ModuleB\n * ModuleB -> imports ModuleC\n * ModuleB -> provides MyServiceA\n * ModuleC -> provides MyServiceB\n *\n * getProviderImportPaths(ModuleA)\n * > Map(2) {\n *   MyServiceA => [ModuleA, ModuleB]\n *   MyServiceB => [ModuleA, ModuleB, ModuleC]\n *  }\n *\n * @param providerImportsContainer constructor of class that contains an `imports` array in it's\n *     definition\n * @returns A Map object that maps providers to an array of constructors representing it's import\n *     path\n *\n */\nfunction getProviderImportPaths(providerImportsContainer) {\n  const providerToPath = new Map();\n  const visitedContainers = new Set();\n  const visitor = walkProviderTreeToDiscoverImportPaths(providerToPath, visitedContainers);\n  walkProviderTree(providerImportsContainer, visitor, [], new Set());\n  return providerToPath;\n}\n/**\n *\n * Higher order function that returns a visitor for WalkProviderTree\n *\n * Takes in a Map and Set to keep track of the providers and containers\n * visited, so that we can discover the import paths of these providers\n * during the traversal.\n *\n * This visitor takes advantage of the fact that walkProviderTree performs a\n * postorder traversal of the provider tree for the passed in container. Because postorder\n * traversal recursively processes subtrees from leaf nodes until the traversal reaches the root,\n * we write a visitor that constructs provider import paths in reverse.\n *\n *\n * We use the visitedContainers set defined outside this visitor\n * because we want to run some logic only once for\n * each container in the tree. That logic can be described as:\n *\n *\n * 1. for each discovered_provider and discovered_path in the incomplete provider paths we've\n * already discovered\n * 2. get the first container in discovered_path\n * 3. if that first container is in the imports array of the container we're visiting\n *    Then the container we're visiting is also in the import path of discovered_provider, so we\n *    unshift discovered_path with the container we're currently visiting\n *\n *\n * Example Run:\n * ```\n *                 ┌──────────┐\n *                 │containerA│\n *      ┌─imports-─┤          ├──imports─┐\n *      │          │  provA   │          │\n *      │          │  provB   │          │\n *      │          └──────────┘          │\n *      │                                │\n *     ┌▼─────────┐             ┌────────▼─┐\n *     │containerB│             │containerC│\n *     │          │             │          │\n *     │  provD   │             │  provF   │\n *     │  provE   │             │  provG   │\n *     └──────────┘             └──────────┘\n * ```\n *\n * Each step of the traversal,\n *\n * ```\n * visitor(provD, containerB)\n * providerToPath === Map { provD => [containerB] }\n * visitedContainers === Set { containerB }\n *\n * visitor(provE, containerB)\n * providerToPath === Map { provD => [containerB], provE => [containerB] }\n * visitedContainers === Set { containerB }\n *\n * visitor(provF, containerC)\n * providerToPath === Map { provD => [containerB], provE => [containerB], provF => [containerC] }\n * visitedContainers === Set { containerB, containerC }\n *\n * visitor(provG, containerC)\n * providerToPath === Map {\n *   provD => [containerB], provE => [containerB], provF => [containerC], provG => [containerC]\n * }\n * visitedContainers === Set { containerB, containerC }\n *\n * visitor(provA, containerA)\n * providerToPath === Map {\n *   provD => [containerA, containerB],\n *   provE => [containerA, containerB],\n *   provF => [containerA, containerC],\n *   provG => [containerA, containerC],\n *   provA => [containerA]\n * }\n * visitedContainers === Set { containerB, containerC, containerA }\n *\n * visitor(provB, containerA)\n * providerToPath === Map {\n *   provD => [containerA, containerB],\n *   provE => [containerA, containerB],\n *   provF => [containerA, containerC],\n *   provG => [containerA, containerC],\n *   provA => [containerA]\n *   provB => [containerA]\n * }\n * visitedContainers === Set { containerB, containerC, containerA }\n * ```\n *\n * @param providerToPath Map map of providers to paths that this function fills\n * @param visitedContainers Set a set to keep track of the containers we've already visited\n * @return function(provider SingleProvider, container: Type<unknown> | InjectorType<unknown>) =>\n *     void\n */\nfunction walkProviderTreeToDiscoverImportPaths(providerToPath, visitedContainers) {\n  return (provider, container) => {\n    // If the provider is not already in the providerToPath map,\n    // add an entry with the provider as the key and an array containing the current container as\n    // the value\n    if (!providerToPath.has(provider)) {\n      providerToPath.set(provider, [container]);\n    }\n    // This block will run exactly once for each container in the import tree.\n    // This is where we run the logic to check the imports array of the current\n    // container to see if it's the next container in the path for our currently\n    // discovered providers.\n    if (!visitedContainers.has(container)) {\n      // Iterate through the providers we've already seen\n      for (const prov of providerToPath.keys()) {\n        const existingImportPath = providerToPath.get(prov);\n        let containerDef = getInjectorDef(container);\n        if (!containerDef) {\n          const ngModule = container.ngModule;\n          containerDef = getInjectorDef(ngModule);\n        }\n        if (!containerDef) {\n          return;\n        }\n        const lastContainerAddedToPath = existingImportPath[0];\n        let isNextStepInPath = false;\n        deepForEach(containerDef.imports, moduleImport => {\n          if (isNextStepInPath) {\n            return;\n          }\n          isNextStepInPath = moduleImport.ngModule === lastContainerAddedToPath || moduleImport === lastContainerAddedToPath;\n          if (isNextStepInPath) {\n            var _providerToPath$get;\n            (_providerToPath$get = providerToPath.get(prov)) === null || _providerToPath$get === void 0 || _providerToPath$get.unshift(container);\n          }\n        });\n      }\n    }\n    visitedContainers.add(container);\n  };\n}\n/**\n * Gets the providers configured on an EnvironmentInjector\n *\n * @param injector EnvironmentInjector\n * @returns an array of objects representing the providers of the given injector\n */\nfunction getEnvironmentInjectorProviders(injector) {\n  var _getFrameworkDIDebugD;\n  const providerRecordsWithoutImportPaths = (_getFrameworkDIDebugD = getFrameworkDIDebugData().resolverToProviders.get(injector)) !== null && _getFrameworkDIDebugD !== void 0 ? _getFrameworkDIDebugD : [];\n  // platform injector has no provider imports container so can we skip trying to\n  // find import paths\n  if (isPlatformInjector(injector)) {\n    return providerRecordsWithoutImportPaths;\n  }\n  const providerImportsContainer = getProviderImportsContainer(injector);\n  if (providerImportsContainer === null) {\n    // We assume that if an environment injector exists without an associated provider imports\n    // container, it was created without such a container. Some examples cases where this could\n    // happen:\n    // - The root injector of a standalone application\n    // - A router injector created by using the providers array in a lazy loaded route\n    // - A manually created injector that is attached to the injector tree\n    // Since each of these cases has no provider container, there is no concept of import paths,\n    // so we can simply return the provider records.\n    return providerRecordsWithoutImportPaths;\n  }\n  const providerToPath = getProviderImportPaths(providerImportsContainer);\n  const providerRecords = [];\n  for (const providerRecord of providerRecordsWithoutImportPaths) {\n    var _providerToPath$get2;\n    const provider = providerRecord.provider;\n    // Ignore these special providers for now until we have a cleaner way of\n    // determing when they are provided by the framework vs provided by the user.\n    const token = provider.provide;\n    if (token === ENVIRONMENT_INITIALIZER || token === INJECTOR_DEF_TYPES) {\n      continue;\n    }\n    let importPath = (_providerToPath$get2 = providerToPath.get(provider)) !== null && _providerToPath$get2 !== void 0 ? _providerToPath$get2 : [];\n    const def = getComponentDef(providerImportsContainer);\n    const isStandaloneComponent = !!(def !== null && def !== void 0 && def.standalone);\n    // We prepend the component constructor in the standalone case\n    // because walkProviderTree does not visit this constructor during it's traversal\n    if (isStandaloneComponent) {\n      importPath = [providerImportsContainer, ...importPath];\n    }\n    providerRecords.push({\n      ...providerRecord,\n      importPath\n    });\n  }\n  return providerRecords;\n}\nfunction isPlatformInjector(injector) {\n  return injector instanceof R3Injector && injector.scopes.has('platform');\n}\n/**\n * Gets the providers configured on an injector.\n *\n * @param injector the injector to lookup the providers of\n * @returns ProviderRecord[] an array of objects representing the providers of the given injector\n */\nfunction getInjectorProviders(injector) {\n  if (injector instanceof NodeInjector) {\n    return getNodeInjectorProviders(injector);\n  } else if (injector instanceof EnvironmentInjector) {\n    return getEnvironmentInjectorProviders(injector);\n  }\n  throwError('getInjectorProviders only supports NodeInjector and EnvironmentInjector');\n}\n/**\n *\n * Given an injector, this function will return\n * an object containing the type and source of the injector.\n *\n * |              | type        | source                                                      |\n * |--------------|-------------|-------------------------------------------------------------|\n * | NodeInjector | element     | DOM element that created this injector                      |\n * | R3Injector   | environment | `injector.source`                                           |\n * | NullInjector | null        | null                                                        |\n *\n * @param injector the Injector to get metadata for\n * @returns an object containing the type and source of the given injector. If the injector metadata\n *     cannot be determined, returns null.\n */\nfunction getInjectorMetadata(injector) {\n  if (injector instanceof NodeInjector) {\n    const lView = getNodeInjectorLView(injector);\n    const tNode = getNodeInjectorTNode(injector);\n    assertTNodeForLView(tNode, lView);\n    return {\n      type: 'element',\n      source: getNativeByTNode(tNode, lView)\n    };\n  }\n  if (injector instanceof R3Injector) {\n    var _injector$source;\n    return {\n      type: 'environment',\n      source: (_injector$source = injector.source) !== null && _injector$source !== void 0 ? _injector$source : null\n    };\n  }\n  if (injector instanceof NullInjector) {\n    return {\n      type: 'null',\n      source: null\n    };\n  }\n  return null;\n}\nfunction getInjectorResolutionPath(injector) {\n  const resolutionPath = [injector];\n  getInjectorResolutionPathHelper(injector, resolutionPath);\n  return resolutionPath;\n}\nfunction getInjectorResolutionPathHelper(injector, resolutionPath) {\n  const parent = getInjectorParent(injector);\n  // if getInjectorParent can't find a parent, then we've either reached the end\n  // of the path, or we need to move from the Element Injector tree to the\n  // module injector tree using the first injector in our path as the connection point.\n  if (parent === null) {\n    if (injector instanceof NodeInjector) {\n      const firstInjector = resolutionPath[0];\n      if (firstInjector instanceof NodeInjector) {\n        const moduleInjector = getModuleInjectorOfNodeInjector(firstInjector);\n        if (moduleInjector === null) {\n          throwError('NodeInjector must have some connection to the module injector tree');\n        }\n        resolutionPath.push(moduleInjector);\n        getInjectorResolutionPathHelper(moduleInjector, resolutionPath);\n      }\n      return resolutionPath;\n    }\n  } else {\n    resolutionPath.push(parent);\n    getInjectorResolutionPathHelper(parent, resolutionPath);\n  }\n  return resolutionPath;\n}\n/**\n * Gets the parent of an injector.\n *\n * This function is not able to make the jump from the Element Injector Tree to the Module\n * injector tree. This is because the \"parent\" (the next step in the reoslution path)\n * of a root NodeInjector is dependent on which NodeInjector ancestor initiated\n * the DI lookup. See getInjectorResolutionPath for a function that can make this jump.\n *\n * In the below diagram:\n * ```ts\n * getInjectorParent(NodeInjectorB)\n *  > NodeInjectorA\n * getInjectorParent(NodeInjectorA) // or getInjectorParent(getInjectorParent(NodeInjectorB))\n *  > null // cannot jump to ModuleInjector tree\n * ```\n *\n * ```\n *                ┌───────┐                ┌───────────────────┐\n *    ┌───────────┤ModuleA├───Injector────►│EnvironmentInjector│\n *    │           └───┬───┘                └───────────────────┘\n *    │               │\n *    │           bootstraps\n *    │               │\n *    │               │\n *    │          ┌────▼─────┐                 ┌─────────────┐\n * declares      │ComponentA├────Injector────►│NodeInjectorA│\n *    │          └────┬─────┘                 └─────▲───────┘\n *    │               │                             │\n *    │            renders                        parent\n *    │               │                             │\n *    │          ┌────▼─────┐                 ┌─────┴───────┐\n *    └─────────►│ComponentB├────Injector────►│NodeInjectorB│\n *               └──────────┘                 └─────────────┘\n *```\n *\n * @param injector an Injector to get the parent of\n * @returns Injector the parent of the given injector\n */\nfunction getInjectorParent(injector) {\n  if (injector instanceof R3Injector) {\n    return injector.parent;\n  }\n  let tNode;\n  let lView;\n  if (injector instanceof NodeInjector) {\n    tNode = getNodeInjectorTNode(injector);\n    lView = getNodeInjectorLView(injector);\n  } else if (injector instanceof NullInjector) {\n    return null;\n  } else {\n    throwError('getInjectorParent only support injectors of type R3Injector, NodeInjector, NullInjector');\n  }\n  const parentLocation = getParentInjectorLocation(tNode, lView);\n  if (hasParentInjector(parentLocation)) {\n    const parentInjectorIndex = getParentInjectorIndex(parentLocation);\n    const parentLView = getParentInjectorView(parentLocation, lView);\n    const parentTView = parentLView[TVIEW];\n    const parentTNode = parentTView.data[parentInjectorIndex + 8 /* NodeInjectorOffset.TNODE */];\n    return new NodeInjector(parentTNode, parentLView);\n  } else {\n    var _chainedInjector$inje;\n    const chainedInjector = lView[INJECTOR$1];\n    // Case where chainedInjector.injector is an OutletInjector and chainedInjector.injector.parent\n    // is a NodeInjector.\n    // todo(aleksanderbodurri): ideally nothing in packages/core should deal\n    // directly with router concerns. Refactor this so that we can make the jump from\n    // NodeInjector -> OutletInjector -> NodeInjector\n    // without explictly relying on types contracts from packages/router\n    const injectorParent = (_chainedInjector$inje = chainedInjector.injector) === null || _chainedInjector$inje === void 0 ? void 0 : _chainedInjector$inje.parent;\n    if (injectorParent instanceof NodeInjector) {\n      return injectorParent;\n    }\n  }\n  return null;\n}\n/**\n * Gets the module injector of a NodeInjector.\n *\n * @param injector NodeInjector to get module injector of\n * @returns Injector representing module injector of the given NodeInjector\n */\nfunction getModuleInjectorOfNodeInjector(injector) {\n  let lView;\n  if (injector instanceof NodeInjector) {\n    lView = getNodeInjectorLView(injector);\n  } else {\n    throwError('getModuleInjectorOfNodeInjector must be called with a NodeInjector');\n  }\n  const chainedInjector = lView[INJECTOR$1];\n  const moduleInjector = chainedInjector.parentInjector;\n  if (!moduleInjector) {\n    throwError('NodeInjector must have some connection to the module injector tree');\n  }\n  return moduleInjector;\n}\n\n/**\n * This file introduces series of globally accessible debug tools\n * to allow for the Angular debugging story to function.\n *\n * To see this in action run the following command:\n *\n *   bazel run //packages/core/test/bundling/todo:devserver\n *\n *  Then load `localhost:5432` and start using the console tools.\n */\n/**\n * This value reflects the property on the window where the dev\n * tools are patched (window.ng).\n * */\nconst GLOBAL_PUBLISH_EXPANDO_KEY = 'ng';\nlet _published = false;\n/**\n * Publishes a collection of default debug tools onto`window.ng`.\n *\n * These functions are available globally when Angular is in development\n * mode and are automatically stripped away from prod mode is on.\n */\nfunction publishDefaultGlobalUtils$1() {\n  if (!_published) {\n    _published = true;\n    setupFrameworkInjectorProfiler();\n    publishGlobalUtil('ɵgetDependenciesFromInjectable', getDependenciesFromInjectable);\n    publishGlobalUtil('ɵgetInjectorProviders', getInjectorProviders);\n    publishGlobalUtil('ɵgetInjectorResolutionPath', getInjectorResolutionPath);\n    publishGlobalUtil('ɵgetInjectorMetadata', getInjectorMetadata);\n    /**\n     * Warning: this function is *INTERNAL* and should not be relied upon in application's code.\n     * The contract of the function might be changed in any release and/or the function can be\n     * removed completely.\n     */\n    publishGlobalUtil('ɵsetProfiler', setProfiler);\n    publishGlobalUtil('getDirectiveMetadata', getDirectiveMetadata$1);\n    publishGlobalUtil('getComponent', getComponent);\n    publishGlobalUtil('getContext', getContext);\n    publishGlobalUtil('getListeners', getListeners);\n    publishGlobalUtil('getOwningComponent', getOwningComponent);\n    publishGlobalUtil('getHostElement', getHostElement);\n    publishGlobalUtil('getInjector', getInjector);\n    publishGlobalUtil('getRootComponents', getRootComponents);\n    publishGlobalUtil('getDirectives', getDirectives);\n    publishGlobalUtil('applyChanges', applyChanges);\n  }\n}\n/**\n * Publishes the given function to `window.ng` so that it can be\n * used from the browser console when an application is not in production.\n */\nfunction publishGlobalUtil(name, fn) {\n  if (typeof COMPILED === 'undefined' || !COMPILED) {\n    // Note: we can't export `ng` when using closure enhanced optimization as:\n    // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\n    // - we can't declare a closure extern as the namespace `ng` is already used within Google\n    //   for typings for AngularJS (via `goog.provide('ng....')`).\n    const w = _global;\n    ngDevMode && assertDefined(fn, 'function not defined');\n    if (w) {\n      let container = w[GLOBAL_PUBLISH_EXPANDO_KEY];\n      if (!container) {\n        container = w[GLOBAL_PUBLISH_EXPANDO_KEY] = {};\n      }\n      container[name] = fn;\n    }\n  }\n}\n\n/**\n * Internal injection token that can used to access an instance of a Testability class.\n *\n * This token acts as a bridge between the core bootstrap code and the `Testability` class. This is\n * needed to ensure that there are no direct references to the `Testability` class, so it can be\n * tree-shaken away (if not referenced). For the environments/setups when the `Testability` class\n * should be available, this token is used to add a provider that references the `Testability`\n * class. Otherwise, only this token is retained in a bundle, but the `Testability` class is not.\n */\nconst TESTABILITY = new InjectionToken('');\n/**\n * Internal injection token to retrieve Testability getter class instance.\n */\nconst TESTABILITY_GETTER = new InjectionToken('');\n/**\n * The Testability service provides testing hooks that can be accessed from\n * the browser.\n *\n * Angular applications bootstrapped using an NgModule (via `@NgModule.bootstrap` field) will also\n * instantiate Testability by default (in both development and production modes).\n *\n * For applications bootstrapped using the `bootstrapApplication` function, Testability is not\n * included by default. You can include it into your applications by getting the list of necessary\n * providers using the `provideProtractorTestingSupport()` function and adding them into the\n * `options.providers` array. Example:\n *\n * ```typescript\n * import {provideProtractorTestingSupport} from '@angular/platform-browser';\n *\n * await bootstrapApplication(RootComponent, providers: [provideProtractorTestingSupport()]);\n * ```\n *\n * @publicApi\n */\nclass Testability {\n  constructor(_ngZone, registry, testabilityGetter) {\n    this._ngZone = _ngZone;\n    this.registry = registry;\n    this._pendingCount = 0;\n    this._isZoneStable = true;\n    /**\n     * Whether any work was done since the last 'whenStable' callback. This is\n     * useful to detect if this could have potentially destabilized another\n     * component while it is stabilizing.\n     * @internal\n     */\n    this._didWork = false;\n    this._callbacks = [];\n    this.taskTrackingZone = null;\n    // If there was no Testability logic registered in the global scope\n    // before, register the current testability getter as a global one.\n    if (!_testabilityGetter) {\n      setTestabilityGetter(testabilityGetter);\n      testabilityGetter.addToWindow(registry);\n    }\n    this._watchAngularEvents();\n    _ngZone.run(() => {\n      this.taskTrackingZone = typeof Zone == 'undefined' ? null : Zone.current.get('TaskTrackingZone');\n    });\n  }\n  _watchAngularEvents() {\n    this._ngZone.onUnstable.subscribe({\n      next: () => {\n        this._didWork = true;\n        this._isZoneStable = false;\n      }\n    });\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.subscribe({\n        next: () => {\n          NgZone.assertNotInAngularZone();\n          queueMicrotask(() => {\n            this._isZoneStable = true;\n            this._runCallbacksIfReady();\n          });\n        }\n      });\n    });\n  }\n  /**\n   * Increases the number of pending request\n   * @deprecated pending requests are now tracked with zones.\n   */\n  increasePendingRequestCount() {\n    this._pendingCount += 1;\n    this._didWork = true;\n    return this._pendingCount;\n  }\n  /**\n   * Decreases the number of pending request\n   * @deprecated pending requests are now tracked with zones\n   */\n  decreasePendingRequestCount() {\n    this._pendingCount -= 1;\n    if (this._pendingCount < 0) {\n      throw new Error('pending async requests below zero');\n    }\n    this._runCallbacksIfReady();\n    return this._pendingCount;\n  }\n  /**\n   * Whether an associated application is stable\n   */\n  isStable() {\n    return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;\n  }\n  _runCallbacksIfReady() {\n    if (this.isStable()) {\n      // Schedules the call backs in a new frame so that it is always async.\n      queueMicrotask(() => {\n        while (this._callbacks.length !== 0) {\n          let cb = this._callbacks.pop();\n          clearTimeout(cb.timeoutId);\n          cb.doneCb(this._didWork);\n        }\n        this._didWork = false;\n      });\n    } else {\n      // Still not stable, send updates.\n      let pending = this.getPendingTasks();\n      this._callbacks = this._callbacks.filter(cb => {\n        if (cb.updateCb && cb.updateCb(pending)) {\n          clearTimeout(cb.timeoutId);\n          return false;\n        }\n        return true;\n      });\n      this._didWork = true;\n    }\n  }\n  getPendingTasks() {\n    if (!this.taskTrackingZone) {\n      return [];\n    }\n    // Copy the tasks data so that we don't leak tasks.\n    return this.taskTrackingZone.macroTasks.map(t => {\n      return {\n        source: t.source,\n        // From TaskTrackingZone:\n        // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40\n        creationLocation: t.creationLocation,\n        data: t.data\n      };\n    });\n  }\n  addCallback(cb, timeout, updateCb) {\n    let timeoutId = -1;\n    if (timeout && timeout > 0) {\n      timeoutId = setTimeout(() => {\n        this._callbacks = this._callbacks.filter(cb => cb.timeoutId !== timeoutId);\n        cb(this._didWork, this.getPendingTasks());\n      }, timeout);\n    }\n    this._callbacks.push({\n      doneCb: cb,\n      timeoutId: timeoutId,\n      updateCb: updateCb\n    });\n  }\n  /**\n   * Wait for the application to be stable with a timeout. If the timeout is reached before that\n   * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n   *\n   * @param doneCb The callback to invoke when Angular is stable or the timeout expires\n   *    whichever comes first.\n   * @param timeout Optional. The maximum time to wait for Angular to become stable. If not\n   *    specified, whenStable() will wait forever.\n   * @param updateCb Optional. If specified, this callback will be invoked whenever the set of\n   *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n   *    and no further updates will be issued.\n   */\n  whenStable(doneCb, timeout, updateCb) {\n    if (updateCb && !this.taskTrackingZone) {\n      throw new Error('Task tracking zone is required when passing an update callback to ' + 'whenStable(). Is \"zone.js/plugins/task-tracking\" loaded?');\n    }\n    // These arguments are 'Function' above to keep the public API simple.\n    this.addCallback(doneCb, timeout, updateCb);\n    this._runCallbacksIfReady();\n  }\n  /**\n   * Get the number of pending requests\n   * @deprecated pending requests are now tracked with zones\n   */\n  getPendingRequestCount() {\n    return this._pendingCount;\n  }\n  /**\n   * Registers an application with a testability hook so that it can be tracked.\n   * @param token token of application, root element\n   *\n   * @internal\n   */\n  registerApplication(token) {\n    this.registry.registerApplication(token, this);\n  }\n  /**\n   * Unregisters an application.\n   * @param token token of application, root element\n   *\n   * @internal\n   */\n  unregisterApplication(token) {\n    this.registry.unregisterApplication(token);\n  }\n  /**\n   * Find providers by name\n   * @param using The root element to search from\n   * @param provider The name of binding variable\n   * @param exactMatch Whether using exactMatch\n   */\n  findProviders(using, provider, exactMatch) {\n    // TODO(juliemr): implement.\n    return [];\n  }\n}\n_class23 = Testability;\n_class23.ɵfac = function Testability_Factory(t) {\n  return new (t || _class23)(ɵɵinject(NgZone), ɵɵinject(TestabilityRegistry), ɵɵinject(TESTABILITY_GETTER));\n};\n_class23.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n  token: _class23,\n  factory: _class23.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(Testability, [{\n    type: Injectable\n  }], () => [{\n    type: NgZone\n  }, {\n    type: TestabilityRegistry\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [TESTABILITY_GETTER]\n    }]\n  }], null);\n})();\n/**\n * A global registry of {@link Testability} instances for specific elements.\n * @publicApi\n */\nclass TestabilityRegistry {\n  constructor() {\n    /** @internal */\n    this._applications = new Map();\n  }\n  /**\n   * Registers an application with a testability hook so that it can be tracked\n   * @param token token of application, root element\n   * @param testability Testability hook\n   */\n  registerApplication(token, testability) {\n    this._applications.set(token, testability);\n  }\n  /**\n   * Unregisters an application.\n   * @param token token of application, root element\n   */\n  unregisterApplication(token) {\n    this._applications.delete(token);\n  }\n  /**\n   * Unregisters all applications\n   */\n  unregisterAllApplications() {\n    this._applications.clear();\n  }\n  /**\n   * Get a testability hook associated with the application\n   * @param elem root element\n   */\n  getTestability(elem) {\n    return this._applications.get(elem) || null;\n  }\n  /**\n   * Get all registered testabilities\n   */\n  getAllTestabilities() {\n    return Array.from(this._applications.values());\n  }\n  /**\n   * Get all registered applications(root elements)\n   */\n  getAllRootElements() {\n    return Array.from(this._applications.keys());\n  }\n  /**\n   * Find testability of a node in the Tree\n   * @param elem node\n   * @param findInAncestors whether finding testability in ancestors if testability was not found in\n   * current node\n   */\n  findTestabilityInTree(elem, findInAncestors = true) {\n    var _testabilityGetter$fi, _testabilityGetter2;\n    return (_testabilityGetter$fi = (_testabilityGetter2 = _testabilityGetter) === null || _testabilityGetter2 === void 0 ? void 0 : _testabilityGetter2.findTestabilityInTree(this, elem, findInAncestors)) !== null && _testabilityGetter$fi !== void 0 ? _testabilityGetter$fi : null;\n  }\n}\n_class24 = TestabilityRegistry;\n_class24.ɵfac = function TestabilityRegistry_Factory(t) {\n  return new (t || _class24)();\n};\n_class24.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n  token: _class24,\n  factory: _class24.ɵfac,\n  providedIn: 'platform'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(TestabilityRegistry, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'platform'\n    }]\n  }], null, null);\n})();\n/**\n * Set the {@link GetTestability} implementation used by the Angular testing framework.\n * @publicApi\n */\nfunction setTestabilityGetter(getter) {\n  _testabilityGetter = getter;\n}\nlet _testabilityGetter;\n\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") that you can use to provide\n * one or more initialization functions.\n *\n * The provided functions are injected at application startup and executed during\n * app initialization. If any of these functions returns a Promise or an Observable, initialization\n * does not complete until the Promise is resolved or the Observable is completed.\n *\n * You can, for example, create a factory function that loads language data\n * or an external configuration, and provide that function to the `APP_INITIALIZER` token.\n * The function is executed during the application bootstrap process,\n * and the needed data is available on startup.\n *\n * @see {@link ApplicationInitStatus}\n *\n * @usageNotes\n *\n * The following example illustrates how to configure a multi-provider using `APP_INITIALIZER` token\n * and a function returning a promise.\n * ### Example with NgModule-based application\n * ```\n *  function initializeApp(): Promise<any> {\n *    return new Promise((resolve, reject) => {\n *      // Do some asynchronous stuff\n *      resolve();\n *    });\n *  }\n *\n *  @NgModule({\n *   imports: [BrowserModule],\n *   declarations: [AppComponent],\n *   bootstrap: [AppComponent],\n *   providers: [{\n *     provide: APP_INITIALIZER,\n *     useFactory: () => initializeApp,\n *     multi: true\n *    }]\n *   })\n *  export class AppModule {}\n * ```\n *\n * ### Example with standalone application\n * ```\n * export function initializeApp(http: HttpClient) {\n *   return (): Promise<any> =>\n *     firstValueFrom(\n *       http\n *         .get(\"https://someUrl.com/api/user\")\n *         .pipe(tap(user => { ... }))\n *     );\n * }\n *\n * bootstrapApplication(App, {\n *   providers: [\n *     provideHttpClient(),\n *     {\n *       provide: APP_INITIALIZER,\n *       useFactory: initializeApp,\n *       multi: true,\n *       deps: [HttpClient],\n *     },\n *   ],\n * });\n\n * ```\n *\n *\n * It's also possible to configure a multi-provider using `APP_INITIALIZER` token and a function\n * returning an observable, see an example below. Note: the `HttpClient` in this example is used for\n * demo purposes to illustrate how the factory function can work with other providers available\n * through DI.\n *\n * ### Example with NgModule-based application\n * ```\n *  function initializeAppFactory(httpClient: HttpClient): () => Observable<any> {\n *   return () => httpClient.get(\"https://someUrl.com/api/user\")\n *     .pipe(\n *        tap(user => { ... })\n *     );\n *  }\n *\n *  @NgModule({\n *    imports: [BrowserModule, HttpClientModule],\n *    declarations: [AppComponent],\n *    bootstrap: [AppComponent],\n *    providers: [{\n *      provide: APP_INITIALIZER,\n *      useFactory: initializeAppFactory,\n *      deps: [HttpClient],\n *      multi: true\n *    }]\n *  })\n *  export class AppModule {}\n * ```\n *\n * ### Example with standalone application\n * ```\n *  function initializeAppFactory(httpClient: HttpClient): () => Observable<any> {\n *   return () => httpClient.get(\"https://someUrl.com/api/user\")\n *     .pipe(\n *        tap(user => { ... })\n *     );\n *  }\n *\n * bootstrapApplication(App, {\n *   providers: [\n *     provideHttpClient(),\n *     {\n *       provide: APP_INITIALIZER,\n *       useFactory: initializeAppFactory,\n *       multi: true,\n *       deps: [HttpClient],\n *     },\n *   ],\n * });\n * ```\n *\n * @publicApi\n */\nconst APP_INITIALIZER = new InjectionToken('Application Initializer');\n/**\n * A class that reflects the state of running {@link APP_INITIALIZER} functions.\n *\n * @publicApi\n */\nclass ApplicationInitStatus {\n  constructor() {\n    var _inject;\n    this.initialized = false;\n    this.done = false;\n    this.donePromise = new Promise((res, rej) => {\n      this.resolve = res;\n      this.reject = rej;\n    });\n    this.appInits = (_inject = inject(APP_INITIALIZER, {\n      optional: true\n    })) !== null && _inject !== void 0 ? _inject : [];\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && !Array.isArray(this.appInits)) {\n      throw new RuntimeError(-209 /* RuntimeErrorCode.INVALID_MULTI_PROVIDER */, 'Unexpected type of the `APP_INITIALIZER` token value ' + `(expected an array, but got ${typeof this.appInits}). ` + 'Please check that the `APP_INITIALIZER` token is configured as a ' + '`multi: true` provider.');\n    }\n  }\n  /** @internal */\n  runInitializers() {\n    if (this.initialized) {\n      return;\n    }\n    const asyncInitPromises = [];\n    for (const appInits of this.appInits) {\n      const initResult = appInits();\n      if (isPromise(initResult)) {\n        asyncInitPromises.push(initResult);\n      } else if (isSubscribable(initResult)) {\n        const observableAsPromise = new Promise((resolve, reject) => {\n          initResult.subscribe({\n            complete: resolve,\n            error: reject\n          });\n        });\n        asyncInitPromises.push(observableAsPromise);\n      }\n    }\n    const complete = () => {\n      // @ts-expect-error overwriting a readonly\n      this.done = true;\n      this.resolve();\n    };\n    Promise.all(asyncInitPromises).then(() => {\n      complete();\n    }).catch(e => {\n      this.reject(e);\n    });\n    if (asyncInitPromises.length === 0) {\n      complete();\n    }\n    this.initialized = true;\n  }\n}\n_class25 = ApplicationInitStatus;\n_class25.ɵfac = function ApplicationInitStatus_Factory(t) {\n  return new (t || _class25)();\n};\n_class25.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n  token: _class25,\n  factory: _class25.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(ApplicationInitStatus, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [], null);\n})();\n\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") that provides a set of callbacks to\n * be called for every component that is bootstrapped.\n *\n * Each callback must take a `ComponentRef` instance and return nothing.\n *\n * `(componentRef: ComponentRef) => void`\n *\n * @publicApi\n */\nconst APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');\nfunction compileNgModuleFactory(injector, options, moduleType) {\n  ngDevMode && assertNgModuleType(moduleType);\n  const moduleFactory = new NgModuleFactory(moduleType);\n  // All of the logic below is irrelevant for AOT-compiled code.\n  if (typeof ngJitMode !== 'undefined' && !ngJitMode) {\n    return Promise.resolve(moduleFactory);\n  }\n  const compilerOptions = injector.get(COMPILER_OPTIONS, []).concat(options);\n  // Configure the compiler to use the provided options. This call may fail when multiple modules\n  // are bootstrapped with incompatible options, as a component can only be compiled according to\n  // a single set of options.\n  setJitOptions({\n    defaultEncapsulation: _lastDefined(compilerOptions.map(opts => opts.defaultEncapsulation)),\n    preserveWhitespaces: _lastDefined(compilerOptions.map(opts => opts.preserveWhitespaces))\n  });\n  if (isComponentResourceResolutionQueueEmpty()) {\n    return Promise.resolve(moduleFactory);\n  }\n  const compilerProviders = compilerOptions.flatMap(option => {\n    var _option$providers;\n    return (_option$providers = option.providers) !== null && _option$providers !== void 0 ? _option$providers : [];\n  });\n  // In case there are no compiler providers, we just return the module factory as\n  // there won't be any resource loader. This can happen with Ivy, because AOT compiled\n  // modules can be still passed through \"bootstrapModule\". In that case we shouldn't\n  // unnecessarily require the JIT compiler.\n  if (compilerProviders.length === 0) {\n    return Promise.resolve(moduleFactory);\n  }\n  const compiler = getCompilerFacade({\n    usage: 0 /* JitCompilerUsage.Decorator */,\n    kind: 'NgModule',\n    type: moduleType\n  });\n  const compilerInjector = Injector.create({\n    providers: compilerProviders\n  });\n  const resourceLoader = compilerInjector.get(compiler.ResourceLoader);\n  // The resource loader can also return a string while the \"resolveComponentResources\"\n  // always expects a promise. Therefore we need to wrap the returned value in a promise.\n  return resolveComponentResources(url => Promise.resolve(resourceLoader.get(url))).then(() => moduleFactory);\n}\nfunction publishDefaultGlobalUtils() {\n  ngDevMode && publishDefaultGlobalUtils$1();\n}\n/**\n * Sets the error for an invalid write to a signal to be an Angular `RuntimeError`.\n */\nfunction publishSignalConfiguration() {\n  setThrowInvalidWriteToSignalError$1(() => {\n    throw new RuntimeError(600 /* RuntimeErrorCode.SIGNAL_WRITE_FROM_ILLEGAL_CONTEXT */, ngDevMode && 'Writing to signals is not allowed in a `computed` or an `effect` by default. ' + 'Use `allowSignalWrites` in the `CreateEffectOptions` to enable this inside effects.');\n  });\n}\nfunction isBoundToModule(cf) {\n  return cf.isBoundToModule;\n}\n/**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * @deprecated\n * @publicApi\n */\nclass NgProbeToken {\n  constructor(name, token) {\n    this.name = name;\n    this.token = token;\n  }\n}\nfunction _callAndReportToErrorHandler(errorHandler, ngZone, callback) {\n  try {\n    const result = callback();\n    if (isPromise(result)) {\n      return result.catch(e => {\n        ngZone.runOutsideAngular(() => errorHandler.handleError(e));\n        // rethrow as the exception handler might not do it\n        throw e;\n      });\n    }\n    return result;\n  } catch (e) {\n    ngZone.runOutsideAngular(() => errorHandler.handleError(e));\n    // rethrow as the exception handler might not do it\n    throw e;\n  }\n}\nfunction optionsReducer(dst, objs) {\n  if (Array.isArray(objs)) {\n    return objs.reduce(optionsReducer, dst);\n  }\n  return {\n    ...dst,\n    ...objs\n  };\n}\n/**\n * A reference to an Angular application running on a page.\n *\n * @usageNotes\n * {@a is-stable-examples}\n * ### isStable examples and caveats\n *\n * Note two important points about `isStable`, demonstrated in the examples below:\n * - the application will never be stable if you start any kind\n * of recurrent asynchronous task when the application starts\n * (for example for a polling process, started with a `setInterval`, a `setTimeout`\n * or using RxJS operators like `interval`);\n * - the `isStable` Observable runs outside of the Angular zone.\n *\n * Let's imagine that you start a recurrent task\n * (here incrementing a counter, using RxJS `interval`),\n * and at the same time subscribe to `isStable`.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *      filter(stable => stable)\n *   ).subscribe(() => console.log('App is stable now');\n *   interval(1000).subscribe(counter => console.log(counter));\n * }\n * ```\n * In this example, `isStable` will never emit `true`,\n * and the trace \"App is stable now\" will never get logged.\n *\n * If you want to execute something when the app is stable,\n * you have to wait for the application to be stable\n * before starting your polling process.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     tap(stable => console.log('App is stable now')),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => console.log(counter));\n * }\n * ```\n * In this example, the trace \"App is stable now\" will be logged\n * and then the counter starts incrementing every second.\n *\n * Note also that this Observable runs outside of the Angular zone,\n * which means that the code in the subscription\n * to this Observable will not trigger the change detection.\n *\n * Let's imagine that instead of logging the counter value,\n * you update a field of your component\n * and display it in its template.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => this.value = counter);\n * }\n * ```\n * As the `isStable` Observable runs outside the zone,\n * the `value` field will be updated properly,\n * but the template will not be refreshed!\n *\n * You'll have to manually trigger the change detection to update the template.\n *\n * ```\n * constructor(appRef: ApplicationRef, cd: ChangeDetectorRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => {\n *     this.value = counter;\n *     cd.detectChanges();\n *   });\n * }\n * ```\n *\n * Or make the subscription callback run inside the zone.\n *\n * ```\n * constructor(appRef: ApplicationRef, zone: NgZone) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => zone.run(() => this.value = counter));\n * }\n * ```\n *\n * @publicApi\n */\nclass ApplicationRef {\n  constructor() {\n    /** @internal */\n    this._bootstrapListeners = [];\n    this._runningTick = false;\n    this._destroyed = false;\n    this._destroyListeners = [];\n    /** @internal */\n    this._views = [];\n    this.internalErrorHandler = inject(INTERNAL_APPLICATION_ERROR_HANDLER);\n    /**\n     * Get a list of component types registered to this application.\n     * This list is populated even before the component is created.\n     */\n    this.componentTypes = [];\n    /**\n     * Get a list of components registered to this application.\n     */\n    this.components = [];\n    /**\n     * Returns an Observable that indicates when the application is stable or unstable.\n     */\n    this.isStable = inject(PendingTasks).hasPendingTasks.pipe(map(pending => !pending));\n    this._injector = inject(EnvironmentInjector);\n  }\n  /**\n   * Indicates whether this instance was destroyed.\n   */\n  get destroyed() {\n    return this._destroyed;\n  }\n  /**\n   * The `EnvironmentInjector` used to create this application.\n   */\n  get injector() {\n    return this._injector;\n  }\n  /**\n   * Bootstrap a component onto the element identified by its selector or, optionally, to a\n   * specified element.\n   *\n   * @usageNotes\n   * ### Bootstrap process\n   *\n   * When bootstrapping a component, Angular mounts it onto a target DOM element\n   * and kicks off automatic change detection. The target DOM element can be\n   * provided using the `rootSelectorOrNode` argument.\n   *\n   * If the target DOM element is not provided, Angular tries to find one on a page\n   * using the `selector` of the component that is being bootstrapped\n   * (first matched element is used).\n   *\n   * ### Example\n   *\n   * Generally, we define the component to bootstrap in the `bootstrap` array of `NgModule`,\n   * but it requires us to know the component while writing the application code.\n   *\n   * Imagine a situation where we have to wait for an API call to decide about the component to\n   * bootstrap. We can use the `ngDoBootstrap` hook of the `NgModule` and call this method to\n   * dynamically bootstrap a component.\n   *\n   * {@example core/ts/platform/platform.ts region='componentSelector'}\n   *\n   * Optionally, a component can be mounted onto a DOM element that does not match the\n   * selector of the bootstrapped component.\n   *\n   * In the following example, we are providing a CSS selector to match the target element.\n   *\n   * {@example core/ts/platform/platform.ts region='cssSelector'}\n   *\n   * While in this example, we are providing reference to a DOM node.\n   *\n   * {@example core/ts/platform/platform.ts region='domNode'}\n   */\n  bootstrap(componentOrFactory, rootSelectorOrNode) {\n    (typeof ngDevMode === 'undefined' || ngDevMode) && this.warnIfDestroyed();\n    const isComponentFactory = componentOrFactory instanceof ComponentFactory$1;\n    const initStatus = this._injector.get(ApplicationInitStatus);\n    if (!initStatus.done) {\n      const standalone = !isComponentFactory && isStandalone(componentOrFactory);\n      const errorMessage = 'Cannot bootstrap as there are still asynchronous initializers running.' + (standalone ? '' : ' Bootstrap components in the `ngDoBootstrap` method of the root module.');\n      throw new RuntimeError(405 /* RuntimeErrorCode.ASYNC_INITIALIZERS_STILL_RUNNING */, (typeof ngDevMode === 'undefined' || ngDevMode) && errorMessage);\n    }\n    let componentFactory;\n    if (isComponentFactory) {\n      componentFactory = componentOrFactory;\n    } else {\n      const resolver = this._injector.get(ComponentFactoryResolver$1);\n      componentFactory = resolver.resolveComponentFactory(componentOrFactory);\n    }\n    this.componentTypes.push(componentFactory.componentType);\n    // Create a factory associated with the current module if it's not bound to some other\n    const ngModule = isBoundToModule(componentFactory) ? undefined : this._injector.get(NgModuleRef$1);\n    const selectorOrNode = rootSelectorOrNode || componentFactory.selector;\n    const compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);\n    const nativeElement = compRef.location.nativeElement;\n    const testability = compRef.injector.get(TESTABILITY, null);\n    testability === null || testability === void 0 || testability.registerApplication(nativeElement);\n    compRef.onDestroy(() => {\n      this.detachView(compRef.hostView);\n      remove(this.components, compRef);\n      testability === null || testability === void 0 || testability.unregisterApplication(nativeElement);\n    });\n    this._loadComponent(compRef);\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      const _console = this._injector.get(Console);\n      _console.log(`Angular is running in development mode.`);\n    }\n    return compRef;\n  }\n  /**\n   * Invoke this method to explicitly process change detection and its side-effects.\n   *\n   * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n   * further changes are detected. If additional changes are picked up during this second cycle,\n   * bindings in the app have side-effects that cannot be resolved in a single change detection\n   * pass.\n   * In this case, Angular throws an error, since an Angular application can only have one change\n   * detection pass during which all change detection must complete.\n   */\n  tick() {\n    (typeof ngDevMode === 'undefined' || ngDevMode) && this.warnIfDestroyed();\n    if (this._runningTick) {\n      throw new RuntimeError(101 /* RuntimeErrorCode.RECURSIVE_APPLICATION_REF_TICK */, ngDevMode && 'ApplicationRef.tick is called recursively');\n    }\n    try {\n      this._runningTick = true;\n      for (let view of this._views) {\n        view.detectChanges();\n      }\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        for (let view of this._views) {\n          view.checkNoChanges();\n        }\n      }\n    } catch (e) {\n      // Attention: Don't rethrow as it could cancel subscriptions to Observables!\n      this.internalErrorHandler(e);\n    } finally {\n      this._runningTick = false;\n    }\n  }\n  /**\n   * Attaches a view so that it will be dirty checked.\n   * The view will be automatically detached when it is destroyed.\n   * This will throw if the view is already attached to a ViewContainer.\n   */\n  attachView(viewRef) {\n    (typeof ngDevMode === 'undefined' || ngDevMode) && this.warnIfDestroyed();\n    const view = viewRef;\n    this._views.push(view);\n    view.attachToAppRef(this);\n  }\n  /**\n   * Detaches a view from dirty checking again.\n   */\n  detachView(viewRef) {\n    (typeof ngDevMode === 'undefined' || ngDevMode) && this.warnIfDestroyed();\n    const view = viewRef;\n    remove(this._views, view);\n    view.detachFromAppRef();\n  }\n  _loadComponent(componentRef) {\n    this.attachView(componentRef.hostView);\n    this.tick();\n    this.components.push(componentRef);\n    // Get the listeners lazily to prevent DI cycles.\n    const listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []);\n    if (ngDevMode && !Array.isArray(listeners)) {\n      throw new RuntimeError(-209 /* RuntimeErrorCode.INVALID_MULTI_PROVIDER */, 'Unexpected type of the `APP_BOOTSTRAP_LISTENER` token value ' + `(expected an array, but got ${typeof listeners}). ` + 'Please check that the `APP_BOOTSTRAP_LISTENER` token is configured as a ' + '`multi: true` provider.');\n    }\n    [...this._bootstrapListeners, ...listeners].forEach(listener => listener(componentRef));\n  }\n  /** @internal */\n  ngOnDestroy() {\n    if (this._destroyed) return;\n    try {\n      // Call all the lifecycle hooks.\n      this._destroyListeners.forEach(listener => listener());\n      // Destroy all registered views.\n      this._views.slice().forEach(view => view.destroy());\n    } finally {\n      // Indicate that this instance is destroyed.\n      this._destroyed = true;\n      // Release all references.\n      this._views = [];\n      this._bootstrapListeners = [];\n      this._destroyListeners = [];\n    }\n  }\n  /**\n   * Registers a listener to be called when an instance is destroyed.\n   *\n   * @param callback A callback function to add as a listener.\n   * @returns A function which unregisters a listener.\n   */\n  onDestroy(callback) {\n    (typeof ngDevMode === 'undefined' || ngDevMode) && this.warnIfDestroyed();\n    this._destroyListeners.push(callback);\n    return () => remove(this._destroyListeners, callback);\n  }\n  /**\n   * Destroys an Angular application represented by this `ApplicationRef`. Calling this function\n   * will destroy the associated environment injectors as well as all the bootstrapped components\n   * with their views.\n   */\n  destroy() {\n    if (this._destroyed) {\n      throw new RuntimeError(406 /* RuntimeErrorCode.APPLICATION_REF_ALREADY_DESTROYED */, ngDevMode && 'This instance of the `ApplicationRef` has already been destroyed.');\n    }\n    const injector = this._injector;\n    // Check that this injector instance supports destroy operation.\n    if (injector.destroy && !injector.destroyed) {\n      // Destroying an underlying injector will trigger the `ngOnDestroy` lifecycle\n      // hook, which invokes the remaining cleanup actions.\n      injector.destroy();\n    }\n  }\n  /**\n   * Returns the number of attached views.\n   */\n  get viewCount() {\n    return this._views.length;\n  }\n  warnIfDestroyed() {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && this._destroyed) {\n      console.warn(formatRuntimeError(406 /* RuntimeErrorCode.APPLICATION_REF_ALREADY_DESTROYED */, 'This instance of the `ApplicationRef` has already been destroyed.'));\n    }\n  }\n}\n_class26 = ApplicationRef;\n_class26.ɵfac = function ApplicationRef_Factory(t) {\n  return new (t || _class26)();\n};\n_class26.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n  token: _class26,\n  factory: _class26.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(ApplicationRef, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nfunction remove(list, el) {\n  const index = list.indexOf(el);\n  if (index > -1) {\n    list.splice(index, 1);\n  }\n}\nfunction _lastDefined(args) {\n  for (let i = args.length - 1; i >= 0; i--) {\n    if (args[i] !== undefined) {\n      return args[i];\n    }\n  }\n  return undefined;\n}\nlet whenStableStore;\n/**\n * Returns a Promise that resolves when the application becomes stable after this method is called\n * the first time.\n */\nfunction whenStable(applicationRef) {\n  var _whenStableStore;\n  (_whenStableStore = whenStableStore) !== null && _whenStableStore !== void 0 ? _whenStableStore : whenStableStore = new WeakMap();\n  const cachedWhenStable = whenStableStore.get(applicationRef);\n  if (cachedWhenStable) {\n    return cachedWhenStable;\n  }\n  const whenStablePromise = applicationRef.isStable.pipe(first(isStable => isStable)).toPromise().then(() => void 0);\n  whenStableStore.set(applicationRef, whenStablePromise);\n  // Be a good citizen and clean the store `onDestroy` even though we are using `WeakMap`.\n  applicationRef.onDestroy(() => {\n    var _whenStableStore2;\n    return (_whenStableStore2 = whenStableStore) === null || _whenStableStore2 === void 0 ? void 0 : _whenStableStore2.delete(applicationRef);\n  });\n  return whenStablePromise;\n}\nclass NgZoneChangeDetectionScheduler {\n  constructor() {\n    this.zone = inject(NgZone);\n    this.applicationRef = inject(ApplicationRef);\n  }\n  initialize() {\n    if (this._onMicrotaskEmptySubscription) {\n      return;\n    }\n    this._onMicrotaskEmptySubscription = this.zone.onMicrotaskEmpty.subscribe({\n      next: () => {\n        this.zone.run(() => {\n          this.applicationRef.tick();\n        });\n      }\n    });\n  }\n  ngOnDestroy() {\n    var _this$_onMicrotaskEmp;\n    (_this$_onMicrotaskEmp = this._onMicrotaskEmptySubscription) === null || _this$_onMicrotaskEmp === void 0 || _this$_onMicrotaskEmp.unsubscribe();\n  }\n}\n_class27 = NgZoneChangeDetectionScheduler;\n_class27.ɵfac = function NgZoneChangeDetectionScheduler_Factory(t) {\n  return new (t || _class27)();\n};\n_class27.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n  token: _class27,\n  factory: _class27.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(NgZoneChangeDetectionScheduler, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/**\n * Internal token used to verify that `provideZoneChangeDetection` is not used\n * with the bootstrapModule API.\n */\nconst PROVIDED_NG_ZONE = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'provideZoneChangeDetection token' : '');\nfunction internalProvideZoneChangeDetection(ngZoneFactory) {\n  return [{\n    provide: NgZone,\n    useFactory: ngZoneFactory\n  }, {\n    provide: ENVIRONMENT_INITIALIZER,\n    multi: true,\n    useFactory: () => {\n      const ngZoneChangeDetectionScheduler = inject(NgZoneChangeDetectionScheduler, {\n        optional: true\n      });\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && ngZoneChangeDetectionScheduler === null) {\n        throw new RuntimeError(402 /* RuntimeErrorCode.MISSING_REQUIRED_INJECTABLE_IN_BOOTSTRAP */, `A required Injectable was not found in the dependency injection tree. ` + 'If you are bootstrapping an NgModule, make sure that the `BrowserModule` is imported.');\n      }\n      return () => ngZoneChangeDetectionScheduler.initialize();\n    }\n  }, {\n    provide: ENVIRONMENT_INITIALIZER,\n    multi: true,\n    useFactory: () => {\n      const service = inject(ZoneStablePendingTask);\n      return () => {\n        service.initialize();\n      };\n    }\n  }, {\n    provide: INTERNAL_APPLICATION_ERROR_HANDLER,\n    useFactory: ngZoneApplicationErrorHandlerFactory\n  }];\n}\nfunction ngZoneApplicationErrorHandlerFactory() {\n  const zone = inject(NgZone);\n  const userErrorHandler = inject(ErrorHandler);\n  return e => zone.runOutsideAngular(() => userErrorHandler.handleError(e));\n}\n/**\n * Provides `NgZone`-based change detection for the application bootstrapped using\n * `bootstrapApplication`.\n *\n * `NgZone` is already provided in applications by default. This provider allows you to configure\n * options like `eventCoalescing` in the `NgZone`.\n * This provider is not available for `platformBrowser().bootstrapModule`, which uses\n * `BootstrapOptions` instead.\n *\n * @usageNotes\n * ```typescript\n * bootstrapApplication(MyApp, {providers: [\n *   provideZoneChangeDetection({eventCoalescing: true}),\n * ]});\n * ```\n *\n * @publicApi\n * @see {@link bootstrapApplication}\n * @see {@link NgZoneOptions}\n */\nfunction provideZoneChangeDetection(options) {\n  const zoneProviders = internalProvideZoneChangeDetection(() => new NgZone(getNgZoneOptions(options)));\n  return makeEnvironmentProviders([typeof ngDevMode === 'undefined' || ngDevMode ? {\n    provide: PROVIDED_NG_ZONE,\n    useValue: true\n  } : [], zoneProviders]);\n}\n// Transforms a set of `BootstrapOptions` (supported by the NgModule-based bootstrap APIs) ->\n// `NgZoneOptions` that are recognized by the NgZone constructor. Passing no options will result in\n// a set of default options returned.\nfunction getNgZoneOptions(options) {\n  var _options$eventCoalesc, _options$runCoalescin;\n  return {\n    enableLongStackTrace: typeof ngDevMode === 'undefined' ? false : !!ngDevMode,\n    shouldCoalesceEventChangeDetection: (_options$eventCoalesc = options === null || options === void 0 ? void 0 : options.eventCoalescing) !== null && _options$eventCoalesc !== void 0 ? _options$eventCoalesc : false,\n    shouldCoalesceRunChangeDetection: (_options$runCoalescin = options === null || options === void 0 ? void 0 : options.runCoalescing) !== null && _options$runCoalescin !== void 0 ? _options$runCoalescin : false\n  };\n}\nclass ZoneStablePendingTask {\n  constructor() {\n    this.subscription = new Subscription();\n    this.initialized = false;\n    this.zone = inject(NgZone);\n    this.pendingTasks = inject(PendingTasks);\n  }\n  initialize() {\n    if (this.initialized) {\n      return;\n    }\n    this.initialized = true;\n    let task = null;\n    if (!this.zone.isStable && !this.zone.hasPendingMacrotasks && !this.zone.hasPendingMicrotasks) {\n      task = this.pendingTasks.add();\n    }\n    this.zone.runOutsideAngular(() => {\n      this.subscription.add(this.zone.onStable.subscribe(() => {\n        NgZone.assertNotInAngularZone();\n        // Check whether there are no pending macro/micro tasks in the next tick\n        // to allow for NgZone to update the state.\n        queueMicrotask(() => {\n          if (task !== null && !this.zone.hasPendingMacrotasks && !this.zone.hasPendingMicrotasks) {\n            this.pendingTasks.remove(task);\n            task = null;\n          }\n        });\n      }));\n    });\n    this.subscription.add(this.zone.onUnstable.subscribe(() => {\n      var _task;\n      NgZone.assertInAngularZone();\n      (_task = task) !== null && _task !== void 0 ? _task : task = this.pendingTasks.add();\n    }));\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n_class28 = ZoneStablePendingTask;\n_class28.ɵfac = function ZoneStablePendingTask_Factory(t) {\n  return new (t || _class28)();\n};\n_class28.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n  token: _class28,\n  factory: _class28.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(ZoneStablePendingTask, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\n/**\n * Work out the locale from the potential global properties.\n *\n * * Closure Compiler: use `goog.LOCALE`.\n * * Ivy enabled: use `$localize.locale`\n */\nfunction getGlobalLocale() {\n  if (typeof ngI18nClosureMode !== 'undefined' && ngI18nClosureMode && typeof goog !== 'undefined' && goog.LOCALE !== 'en') {\n    // * The default `goog.LOCALE` value is `en`, while Angular used `en-US`.\n    // * In order to preserve backwards compatibility, we use Angular default value over\n    //   Closure Compiler's one.\n    return goog.LOCALE;\n  } else {\n    // KEEP `typeof $localize !== 'undefined' && $localize.locale` IN SYNC WITH THE LOCALIZE\n    // COMPILE-TIME INLINER.\n    //\n    // * During compile time inlining of translations the expression will be replaced\n    //   with a string literal that is the current locale. Other forms of this expression are not\n    //   guaranteed to be replaced.\n    //\n    // * During runtime translation evaluation, the developer is required to set `$localize.locale`\n    //   if required, or just to provide their own `LOCALE_ID` provider.\n    return typeof $localize !== 'undefined' && $localize.locale || DEFAULT_LOCALE_ID;\n  }\n}\n/**\n * Provide this token to set the locale of your application.\n * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\n * DecimalPipe and PercentPipe) and by ICU expressions.\n *\n * See the [i18n guide](guide/i18n-common-locale-id) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { LOCALE_ID } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\n * });\n * ```\n *\n * @publicApi\n */\nconst LOCALE_ID = new InjectionToken('LocaleId', {\n  providedIn: 'root',\n  factory: () => inject(LOCALE_ID, InjectFlags.Optional | InjectFlags.SkipSelf) || getGlobalLocale()\n});\n/**\n * Provide this token to set the default currency code your application uses for\n * CurrencyPipe when there is no currency code passed into it. This is only used by\n * CurrencyPipe and has no relation to locale currency. Defaults to USD if not configured.\n *\n * See the [i18n guide](guide/i18n-common-locale-id) for more information.\n *\n * <div class=\"alert is-helpful\">\n *\n * **Deprecation notice:**\n *\n * The default currency code is currently always `USD` but this is deprecated from v9.\n *\n * **In v10 the default currency code will be taken from the current locale.**\n *\n * If you need the previous behavior then set it by creating a `DEFAULT_CURRENCY_CODE` provider in\n * your application `NgModule`:\n *\n * ```ts\n * {provide: DEFAULT_CURRENCY_CODE, useValue: 'USD'}\n * ```\n *\n * </div>\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: DEFAULT_CURRENCY_CODE, useValue: 'EUR' }]\n * });\n * ```\n *\n * @publicApi\n */\nconst DEFAULT_CURRENCY_CODE = new InjectionToken('DefaultCurrencyCode', {\n  providedIn: 'root',\n  factory: () => USD_CURRENCY_CODE\n});\n/**\n * Use this token at bootstrap to provide the content of your translation file (`xtb`,\n * `xlf` or `xlf2`) when you want to translate your application in another language.\n *\n * See the [i18n guide](guide/i18n-common-merge) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * // content of your translation file\n * const translations = '....';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS, useValue: translations }]\n * });\n * ```\n *\n * @publicApi\n */\nconst TRANSLATIONS = new InjectionToken('Translations');\n/**\n * Provide this token at bootstrap to set the format of your {@link TRANSLATIONS}: `xtb`,\n * `xlf` or `xlf2`.\n *\n * See the [i18n guide](guide/i18n-common-merge) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS_FORMAT } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\n * });\n * ```\n *\n * @publicApi\n */\nconst TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');\n/**\n * Use this enum at bootstrap as an option of `bootstrapModule` to define the strategy\n * that the compiler should use in case of missing translations:\n * - Error: throw if you have missing translations.\n * - Warning (default): show a warning in the console and/or shell.\n * - Ignore: do nothing.\n *\n * See the [i18n guide](guide/i18n-common-merge#report-missing-translations) for more information.\n *\n * @usageNotes\n * ### Example\n * ```typescript\n * import { MissingTranslationStrategy } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   missingTranslation: MissingTranslationStrategy.Error\n * });\n * ```\n *\n * @publicApi\n */\nvar MissingTranslationStrategy;\n(function (MissingTranslationStrategy) {\n  MissingTranslationStrategy[MissingTranslationStrategy[\"Error\"] = 0] = \"Error\";\n  MissingTranslationStrategy[MissingTranslationStrategy[\"Warning\"] = 1] = \"Warning\";\n  MissingTranslationStrategy[MissingTranslationStrategy[\"Ignore\"] = 2] = \"Ignore\";\n})(MissingTranslationStrategy || (MissingTranslationStrategy = {}));\n\n/**\n * Internal token that allows to register extra callbacks that should be invoked during the\n * `PlatformRef.destroy` operation. This token is needed to avoid a direct reference to the\n * `PlatformRef` class (i.e. register the callback via `PlatformRef.onDestroy`), thus making the\n * entire class tree-shakeable.\n */\nconst PLATFORM_DESTROY_LISTENERS = new InjectionToken('PlatformDestroyListeners');\n/**\n * The Angular platform is the entry point for Angular on a web page.\n * Each page has exactly one platform. Services (such as reflection) which are common\n * to every Angular application running on the page are bound in its scope.\n * A page's platform is initialized implicitly when a platform is created using a platform\n * factory such as `PlatformBrowser`, or explicitly by calling the `createPlatform()` function.\n *\n * @publicApi\n */\nclass PlatformRef {\n  /** @internal */\n  constructor(_injector) {\n    this._injector = _injector;\n    this._modules = [];\n    this._destroyListeners = [];\n    this._destroyed = false;\n  }\n  /**\n   * Creates an instance of an `@NgModule` for the given platform.\n   *\n   * @deprecated Passing NgModule factories as the `PlatformRef.bootstrapModuleFactory` function\n   *     argument is deprecated. Use the `PlatformRef.bootstrapModule` API instead.\n   */\n  bootstrapModuleFactory(moduleFactory, options) {\n    // Note: We need to create the NgZone _before_ we instantiate the module,\n    // as instantiating the module creates some providers eagerly.\n    // So we create a mini parent injector that just contains the new NgZone and\n    // pass that as parent to the NgModuleFactory.\n    const ngZone = getNgZone(options === null || options === void 0 ? void 0 : options.ngZone, getNgZoneOptions({\n      eventCoalescing: options === null || options === void 0 ? void 0 : options.ngZoneEventCoalescing,\n      runCoalescing: options === null || options === void 0 ? void 0 : options.ngZoneRunCoalescing\n    }));\n    // Note: Create ngZoneInjector within ngZone.run so that all of the instantiated services are\n    // created within the Angular zone\n    // Do not try to replace ngZone.run with ApplicationRef#run because ApplicationRef would then be\n    // created outside of the Angular zone.\n    return ngZone.run(() => {\n      const moduleRef = createNgModuleRefWithProviders(moduleFactory.moduleType, this.injector, internalProvideZoneChangeDetection(() => ngZone));\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && moduleRef.injector.get(PROVIDED_NG_ZONE, null) !== null) {\n        throw new RuntimeError(207 /* RuntimeErrorCode.PROVIDER_IN_WRONG_CONTEXT */, '`bootstrapModule` does not support `provideZoneChangeDetection`. Use `BootstrapOptions` instead.');\n      }\n      const exceptionHandler = moduleRef.injector.get(ErrorHandler, null);\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && exceptionHandler === null) {\n        throw new RuntimeError(402 /* RuntimeErrorCode.MISSING_REQUIRED_INJECTABLE_IN_BOOTSTRAP */, 'No ErrorHandler. Is platform module (BrowserModule) included?');\n      }\n      ngZone.runOutsideAngular(() => {\n        const subscription = ngZone.onError.subscribe({\n          next: error => {\n            exceptionHandler.handleError(error);\n          }\n        });\n        moduleRef.onDestroy(() => {\n          remove(this._modules, moduleRef);\n          subscription.unsubscribe();\n        });\n      });\n      return _callAndReportToErrorHandler(exceptionHandler, ngZone, () => {\n        const initStatus = moduleRef.injector.get(ApplicationInitStatus);\n        initStatus.runInitializers();\n        return initStatus.donePromise.then(() => {\n          // If the `LOCALE_ID` provider is defined at bootstrap then we set the value for ivy\n          const localeId = moduleRef.injector.get(LOCALE_ID, DEFAULT_LOCALE_ID);\n          setLocaleId(localeId || DEFAULT_LOCALE_ID);\n          this._moduleDoBootstrap(moduleRef);\n          return moduleRef;\n        });\n      });\n    });\n  }\n  /**\n   * Creates an instance of an `@NgModule` for a given platform.\n   *\n   * @usageNotes\n   * ### Simple Example\n   *\n   * ```typescript\n   * @NgModule({\n   *   imports: [BrowserModule]\n   * })\n   * class MyModule {}\n   *\n   * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n   * ```\n   *\n   */\n  bootstrapModule(moduleType, compilerOptions = []) {\n    const options = optionsReducer({}, compilerOptions);\n    return compileNgModuleFactory(this.injector, options, moduleType).then(moduleFactory => this.bootstrapModuleFactory(moduleFactory, options));\n  }\n  _moduleDoBootstrap(moduleRef) {\n    const appRef = moduleRef.injector.get(ApplicationRef);\n    if (moduleRef._bootstrapComponents.length > 0) {\n      moduleRef._bootstrapComponents.forEach(f => appRef.bootstrap(f));\n    } else if (moduleRef.instance.ngDoBootstrap) {\n      moduleRef.instance.ngDoBootstrap(appRef);\n    } else {\n      throw new RuntimeError(-403 /* RuntimeErrorCode.BOOTSTRAP_COMPONENTS_NOT_FOUND */, ngDevMode && `The module ${stringify(moduleRef.instance.constructor)} was bootstrapped, ` + `but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ` + `Please define one of these.`);\n    }\n    this._modules.push(moduleRef);\n  }\n  /**\n   * Registers a listener to be called when the platform is destroyed.\n   */\n  onDestroy(callback) {\n    this._destroyListeners.push(callback);\n  }\n  /**\n   * Retrieves the platform {@link Injector}, which is the parent injector for\n   * every Angular application on the page and provides singleton providers.\n   */\n  get injector() {\n    return this._injector;\n  }\n  /**\n   * Destroys the current Angular platform and all Angular applications on the page.\n   * Destroys all modules and listeners registered with the platform.\n   */\n  destroy() {\n    if (this._destroyed) {\n      throw new RuntimeError(404 /* RuntimeErrorCode.PLATFORM_ALREADY_DESTROYED */, ngDevMode && 'The platform has already been destroyed!');\n    }\n    this._modules.slice().forEach(module => module.destroy());\n    this._destroyListeners.forEach(listener => listener());\n    const destroyListeners = this._injector.get(PLATFORM_DESTROY_LISTENERS, null);\n    if (destroyListeners) {\n      destroyListeners.forEach(listener => listener());\n      destroyListeners.clear();\n    }\n    this._destroyed = true;\n  }\n  /**\n   * Indicates whether this instance was destroyed.\n   */\n  get destroyed() {\n    return this._destroyed;\n  }\n}\n_class29 = PlatformRef;\n_class29.ɵfac = function PlatformRef_Factory(t) {\n  return new (t || _class29)(ɵɵinject(Injector));\n};\n_class29.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n  token: _class29,\n  factory: _class29.ɵfac,\n  providedIn: 'platform'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(PlatformRef, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'platform'\n    }]\n  }], () => [{\n    type: Injector\n  }], null);\n})();\nlet _platformInjector = null;\n/**\n * Internal token to indicate whether having multiple bootstrapped platform should be allowed (only\n * one bootstrapped platform is allowed by default). This token helps to support SSR scenarios.\n */\nconst ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');\n/**\n * Creates a platform.\n * Platforms must be created on launch using this function.\n *\n * @publicApi\n */\nfunction createPlatform(injector) {\n  if (_platformInjector && !_platformInjector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n    throw new RuntimeError(400 /* RuntimeErrorCode.MULTIPLE_PLATFORMS */, ngDevMode && 'There can be only one platform. Destroy the previous one to create a new one.');\n  }\n  publishDefaultGlobalUtils();\n  publishSignalConfiguration();\n  _platformInjector = injector;\n  const platform = injector.get(PlatformRef);\n  runPlatformInitializers(injector);\n  return platform;\n}\n/**\n * Creates a factory for a platform. Can be used to provide or override `Providers` specific to\n * your application's runtime needs, such as `PLATFORM_INITIALIZER` and `PLATFORM_ID`.\n * @param parentPlatformFactory Another platform factory to modify. Allows you to compose factories\n * to build up configurations that might be required by different libraries or parts of the\n * application.\n * @param name Identifies the new platform factory.\n * @param providers A set of dependency providers for platforms created with the new factory.\n *\n * @publicApi\n */\nfunction createPlatformFactory(parentPlatformFactory, name, providers = []) {\n  const desc = `Platform: ${name}`;\n  const marker = new InjectionToken(desc);\n  return (extraProviders = []) => {\n    let platform = getPlatform();\n    if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n      const platformProviders = [...providers, ...extraProviders, {\n        provide: marker,\n        useValue: true\n      }];\n      if (parentPlatformFactory) {\n        parentPlatformFactory(platformProviders);\n      } else {\n        createPlatform(createPlatformInjector(platformProviders, desc));\n      }\n    }\n    return assertPlatform(marker);\n  };\n}\n/**\n * Helper function to create an instance of a platform injector (that maintains the 'platform'\n * scope).\n */\nfunction createPlatformInjector(providers = [], name) {\n  return Injector.create({\n    name,\n    providers: [{\n      provide: INJECTOR_SCOPE,\n      useValue: 'platform'\n    }, {\n      provide: PLATFORM_DESTROY_LISTENERS,\n      useValue: new Set([() => _platformInjector = null])\n    }, ...providers]\n  });\n}\n/**\n * Checks that there is currently a platform that contains the given token as a provider.\n *\n * @publicApi\n */\nfunction assertPlatform(requiredToken) {\n  const platform = getPlatform();\n  if (!platform) {\n    throw new RuntimeError(401 /* RuntimeErrorCode.PLATFORM_NOT_FOUND */, ngDevMode && 'No platform exists!');\n  }\n  if ((typeof ngDevMode === 'undefined' || ngDevMode) && !platform.injector.get(requiredToken, null)) {\n    throw new RuntimeError(400 /* RuntimeErrorCode.MULTIPLE_PLATFORMS */, 'A platform with a different configuration has been created. Please destroy it first.');\n  }\n  return platform;\n}\n/**\n * Returns the current platform.\n *\n * @publicApi\n */\nfunction getPlatform() {\n  var _platformInjector$get, _platformInjector2;\n  return (_platformInjector$get = (_platformInjector2 = _platformInjector) === null || _platformInjector2 === void 0 ? void 0 : _platformInjector2.get(PlatformRef)) !== null && _platformInjector$get !== void 0 ? _platformInjector$get : null;\n}\n/**\n * Destroys the current Angular platform and all Angular applications on the page.\n * Destroys all modules and listeners registered with the platform.\n *\n * @publicApi\n */\nfunction destroyPlatform() {\n  var _getPlatform;\n  (_getPlatform = getPlatform()) === null || _getPlatform === void 0 || _getPlatform.destroy();\n}\n/**\n * The goal of this function is to bootstrap a platform injector,\n * but avoid referencing `PlatformRef` class.\n * This function is needed for bootstrapping a Standalone Component.\n */\nfunction createOrReusePlatformInjector(providers = []) {\n  // If a platform injector already exists, it means that the platform\n  // is already bootstrapped and no additional actions are required.\n  if (_platformInjector) return _platformInjector;\n  publishDefaultGlobalUtils();\n  // Otherwise, setup a new platform injector and run platform initializers.\n  const injector = createPlatformInjector(providers);\n  _platformInjector = injector;\n  publishSignalConfiguration();\n  runPlatformInitializers(injector);\n  return injector;\n}\nfunction runPlatformInitializers(injector) {\n  const inits = injector.get(PLATFORM_INITIALIZER, null);\n  inits === null || inits === void 0 || inits.forEach(init => init());\n}\n\n/**\n * Returns whether Angular is in development mode.\n *\n * By default, this is true, unless `enableProdMode` is invoked prior to calling this method or the\n * application is built using the Angular CLI with the `optimization` option.\n * @see {@link cli/build ng build}\n *\n * @publicApi\n */\nfunction isDevMode() {\n  return typeof ngDevMode === 'undefined' || !!ngDevMode;\n}\n/**\n * Disable Angular's development mode, which turns off assertions and other\n * checks within the framework.\n *\n * One important assertion this disables verifies that a change detection pass\n * does not result in additional changes to any bindings (also known as\n * unidirectional data flow).\n *\n * Using this method is discouraged as the Angular CLI will set production mode when using the\n * `optimization` option.\n * @see {@link cli/build ng build}\n *\n * @publicApi\n */\nfunction enableProdMode() {\n  // The below check is there so when ngDevMode is set via terser\n  // `global['ngDevMode'] = false;` is also dropped.\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    _global['ngDevMode'] = false;\n  }\n}\n\n// Public API for render\n\n/**\n * Returns the NgModuleFactory with the given id (specified using [@NgModule.id\n * field](api/core/NgModule#id)), if it exists and has been loaded. Factories for NgModules that do\n * not specify an `id` cannot be retrieved. Throws if an NgModule cannot be found.\n * @publicApi\n * @deprecated Use `getNgModuleById` instead.\n */\nfunction getModuleFactory(id) {\n  const type = getRegisteredNgModuleType(id);\n  if (!type) throw noModuleError(id);\n  return new NgModuleFactory(type);\n}\n/**\n * Returns the NgModule class with the given id (specified using [@NgModule.id\n * field](api/core/NgModule#id)), if it exists and has been loaded. Classes for NgModules that do\n * not specify an `id` cannot be retrieved. Throws if an NgModule cannot be found.\n * @publicApi\n */\nfunction getNgModuleById(id) {\n  const type = getRegisteredNgModuleType(id);\n  if (!type) throw noModuleError(id);\n  return type;\n}\nfunction noModuleError(id) {\n  return new Error(`No module with ID ${id} loaded`);\n}\n\n/**\n * Represents an Angular [view](guide/glossary#view \"Definition\").\n *\n * @see {@link ChangeDetectorRef#usage-notes Change detection usage}\n *\n * @publicApi\n */\nclass ViewRef extends ChangeDetectorRef {}\n/**\n * Represents an Angular [view](guide/glossary#view) in a view container.\n * An [embedded view](guide/glossary#view-hierarchy) can be referenced from a component\n * other than the hosting component whose template defines it, or it can be defined\n * independently by a `TemplateRef`.\n *\n * Properties of elements in a view can change, but the structure (number and order) of elements in\n * a view cannot. Change the structure of elements by inserting, moving, or\n * removing nested views in a view container.\n *\n * @see {@link ViewContainerRef}\n *\n * @usageNotes\n *\n * The following template breaks down into two separate `TemplateRef` instances,\n * an outer one and an inner one.\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n *\n * This is the outer `TemplateRef`:\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n * </ul>\n * ```\n *\n * This is the inner `TemplateRef`:\n *\n * ```\n *   <li>{{item}}</li>\n * ```\n *\n * The outer and inner `TemplateRef` instances are assembled into views as follows:\n *\n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <ng-template view-container-ref></ng-template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n * @publicApi\n */\nclass EmbeddedViewRef extends ViewRef {}\n\n// Public API for compiler\n\n// This file exists for easily patching NgModuleFactoryLoader in g3\nvar ng_module_factory_loader_impl = {};\n\n/**\n * @publicApi\n */\nclass DebugEventListener {\n  constructor(name, callback) {\n    this.name = name;\n    this.callback = callback;\n  }\n}\n/**\n * @publicApi\n */\nfunction asNativeElements(debugEls) {\n  return debugEls.map(el => el.nativeElement);\n}\n/**\n * @publicApi\n */\nclass DebugNode {\n  constructor(nativeNode) {\n    this.nativeNode = nativeNode;\n  }\n  /**\n   * The `DebugElement` parent. Will be `null` if this is the root element.\n   */\n  get parent() {\n    const parent = this.nativeNode.parentNode;\n    return parent ? new DebugElement(parent) : null;\n  }\n  /**\n   * The host dependency injector. For example, the root element's component instance injector.\n   */\n  get injector() {\n    return getInjector(this.nativeNode);\n  }\n  /**\n   * The element's own component instance, if it has one.\n   */\n  get componentInstance() {\n    const nativeElement = this.nativeNode;\n    return nativeElement && (getComponent(nativeElement) || getOwningComponent(nativeElement));\n  }\n  /**\n   * An object that provides parent context for this element. Often an ancestor component instance\n   * that governs this element.\n   *\n   * When an element is repeated within *ngFor, the context is an `NgForOf` whose `$implicit`\n   * property is the value of the row instance value. For example, the `hero` in `*ngFor=\"let hero\n   * of heroes\"`.\n   */\n  get context() {\n    return getComponent(this.nativeNode) || getContext(this.nativeNode);\n  }\n  /**\n   * The callbacks attached to the component's @Output properties and/or the element's event\n   * properties.\n   */\n  get listeners() {\n    return getListeners(this.nativeNode).filter(listener => listener.type === 'dom');\n  }\n  /**\n   * Dictionary of objects associated with template local variables (e.g. #foo), keyed by the local\n   * variable name.\n   */\n  get references() {\n    return getLocalRefs(this.nativeNode);\n  }\n  /**\n   * This component's injector lookup tokens. Includes the component itself plus the tokens that the\n   * component lists in its providers metadata.\n   */\n  get providerTokens() {\n    return getInjectionTokens(this.nativeNode);\n  }\n}\n/**\n * @publicApi\n *\n * @see [Component testing scenarios](guide/testing-components-scenarios)\n * @see [Basics of testing components](guide/testing-components-basics)\n * @see [Testing utility APIs](guide/testing-utility-apis)\n */\nclass DebugElement extends DebugNode {\n  constructor(nativeNode) {\n    ngDevMode && assertDomNode(nativeNode);\n    super(nativeNode);\n  }\n  /**\n   * The underlying DOM element at the root of the component.\n   */\n  get nativeElement() {\n    return this.nativeNode.nodeType == Node.ELEMENT_NODE ? this.nativeNode : null;\n  }\n  /**\n   * The element tag name, if it is an element.\n   */\n  get name() {\n    const context = getLContext(this.nativeNode);\n    const lView = context ? context.lView : null;\n    if (lView !== null) {\n      const tData = lView[TVIEW].data;\n      const tNode = tData[context.nodeIndex];\n      return tNode.value;\n    } else {\n      return this.nativeNode.nodeName;\n    }\n  }\n  /**\n   *  Gets a map of property names to property values for an element.\n   *\n   *  This map includes:\n   *  - Regular property bindings (e.g. `[id]=\"id\"`)\n   *  - Host property bindings (e.g. `host: { '[id]': \"id\" }`)\n   *  - Interpolated property bindings (e.g. `id=\"{{ value }}\")\n   *\n   *  It does not include:\n   *  - input property bindings (e.g. `[myCustomInput]=\"value\"`)\n   *  - attribute bindings (e.g. `[attr.role]=\"menu\"`)\n   */\n  get properties() {\n    const context = getLContext(this.nativeNode);\n    const lView = context ? context.lView : null;\n    if (lView === null) {\n      return {};\n    }\n    const tData = lView[TVIEW].data;\n    const tNode = tData[context.nodeIndex];\n    const properties = {};\n    // Collect properties from the DOM.\n    copyDomProperties(this.nativeElement, properties);\n    // Collect properties from the bindings. This is needed for animation renderer which has\n    // synthetic properties which don't get reflected into the DOM.\n    collectPropertyBindings(properties, tNode, lView, tData);\n    return properties;\n  }\n  /**\n   *  A map of attribute names to attribute values for an element.\n   */\n  // TODO: replace null by undefined in the return type\n  get attributes() {\n    const attributes = {};\n    const element = this.nativeElement;\n    if (!element) {\n      return attributes;\n    }\n    const context = getLContext(element);\n    const lView = context ? context.lView : null;\n    if (lView === null) {\n      return {};\n    }\n    const tNodeAttrs = lView[TVIEW].data[context.nodeIndex].attrs;\n    const lowercaseTNodeAttrs = [];\n    // For debug nodes we take the element's attribute directly from the DOM since it allows us\n    // to account for ones that weren't set via bindings (e.g. ViewEngine keeps track of the ones\n    // that are set through `Renderer2`). The problem is that the browser will lowercase all names,\n    // however since we have the attributes already on the TNode, we can preserve the case by going\n    // through them once, adding them to the `attributes` map and putting their lower-cased name\n    // into an array. Afterwards when we're going through the native DOM attributes, we can check\n    // whether we haven't run into an attribute already through the TNode.\n    if (tNodeAttrs) {\n      let i = 0;\n      while (i < tNodeAttrs.length) {\n        const attrName = tNodeAttrs[i];\n        // Stop as soon as we hit a marker. We only care about the regular attributes. Everything\n        // else will be handled below when we read the final attributes off the DOM.\n        if (typeof attrName !== 'string') break;\n        const attrValue = tNodeAttrs[i + 1];\n        attributes[attrName] = attrValue;\n        lowercaseTNodeAttrs.push(attrName.toLowerCase());\n        i += 2;\n      }\n    }\n    for (const attr of element.attributes) {\n      // Make sure that we don't assign the same attribute both in its\n      // case-sensitive form and the lower-cased one from the browser.\n      if (!lowercaseTNodeAttrs.includes(attr.name)) {\n        attributes[attr.name] = attr.value;\n      }\n    }\n    return attributes;\n  }\n  /**\n   * The inline styles of the DOM element.\n   */\n  // TODO: replace null by undefined in the return type\n  get styles() {\n    var _element$style;\n    const element = this.nativeElement;\n    return (_element$style = element === null || element === void 0 ? void 0 : element.style) !== null && _element$style !== void 0 ? _element$style : {};\n  }\n  /**\n   * A map containing the class names on the element as keys.\n   *\n   * This map is derived from the `className` property of the DOM element.\n   *\n   * Note: The values of this object will always be `true`. The class key will not appear in the KV\n   * object if it does not exist on the element.\n   *\n   * @see [Element.className](https://developer.mozilla.org/en-US/docs/Web/API/Element/className)\n   */\n  get classes() {\n    const result = {};\n    const element = this.nativeElement;\n    // SVG elements return an `SVGAnimatedString` instead of a plain string for the `className`.\n    const className = element.className;\n    const classes = typeof className !== 'string' ? className.baseVal.split(' ') : className.split(' ');\n    classes.forEach(value => result[value] = true);\n    return result;\n  }\n  /**\n   * The `childNodes` of the DOM element as a `DebugNode` array.\n   *\n   * @see [Node.childNodes](https://developer.mozilla.org/en-US/docs/Web/API/Node/childNodes)\n   */\n  get childNodes() {\n    const childNodes = this.nativeNode.childNodes;\n    const children = [];\n    for (let i = 0; i < childNodes.length; i++) {\n      const element = childNodes[i];\n      children.push(getDebugNode(element));\n    }\n    return children;\n  }\n  /**\n   * The immediate `DebugElement` children. Walk the tree by descending through `children`.\n   */\n  get children() {\n    const nativeElement = this.nativeElement;\n    if (!nativeElement) return [];\n    const childNodes = nativeElement.children;\n    const children = [];\n    for (let i = 0; i < childNodes.length; i++) {\n      const element = childNodes[i];\n      children.push(getDebugNode(element));\n    }\n    return children;\n  }\n  /**\n   * @returns the first `DebugElement` that matches the predicate at any depth in the subtree.\n   */\n  query(predicate) {\n    const results = this.queryAll(predicate);\n    return results[0] || null;\n  }\n  /**\n   * @returns All `DebugElement` matches for the predicate at any depth in the subtree.\n   */\n  queryAll(predicate) {\n    const matches = [];\n    _queryAll(this, predicate, matches, true);\n    return matches;\n  }\n  /**\n   * @returns All `DebugNode` matches for the predicate at any depth in the subtree.\n   */\n  queryAllNodes(predicate) {\n    const matches = [];\n    _queryAll(this, predicate, matches, false);\n    return matches;\n  }\n  /**\n   * Triggers the event by its name if there is a corresponding listener in the element's\n   * `listeners` collection.\n   *\n   * If the event lacks a listener or there's some other problem, consider\n   * calling `nativeElement.dispatchEvent(eventObject)`.\n   *\n   * @param eventName The name of the event to trigger\n   * @param eventObj The _event object_ expected by the handler\n   *\n   * @see [Testing components scenarios](guide/testing-components-scenarios#trigger-event-handler)\n   */\n  triggerEventHandler(eventName, eventObj) {\n    const node = this.nativeNode;\n    const invokedListeners = [];\n    this.listeners.forEach(listener => {\n      if (listener.name === eventName) {\n        const callback = listener.callback;\n        callback.call(node, eventObj);\n        invokedListeners.push(callback);\n      }\n    });\n    // We need to check whether `eventListeners` exists, because it's something\n    // that Zone.js only adds to `EventTarget` in browser environments.\n    if (typeof node.eventListeners === 'function') {\n      // Note that in Ivy we wrap event listeners with a call to `event.preventDefault` in some\n      // cases. We use '__ngUnwrap__' as a special token that gives us access to the actual event\n      // listener.\n      node.eventListeners(eventName).forEach(listener => {\n        // In order to ensure that we can detect the special __ngUnwrap__ token described above, we\n        // use `toString` on the listener and see if it contains the token. We use this approach to\n        // ensure that it still worked with compiled code since it cannot remove or rename string\n        // literals. We also considered using a special function name (i.e. if(listener.name ===\n        // special)) but that was more cumbersome and we were also concerned the compiled code could\n        // strip the name, turning the condition in to (\"\" === \"\") and always returning true.\n        if (listener.toString().indexOf('__ngUnwrap__') !== -1) {\n          const unwrappedListener = listener('__ngUnwrap__');\n          return invokedListeners.indexOf(unwrappedListener) === -1 && unwrappedListener.call(node, eventObj);\n        }\n      });\n    }\n  }\n}\nfunction copyDomProperties(element, properties) {\n  if (element) {\n    // Skip own properties (as those are patched)\n    let obj = Object.getPrototypeOf(element);\n    const NodePrototype = Node.prototype;\n    while (obj !== null && obj !== NodePrototype) {\n      const descriptors = Object.getOwnPropertyDescriptors(obj);\n      for (let key in descriptors) {\n        if (!key.startsWith('__') && !key.startsWith('on')) {\n          // don't include properties starting with `__` and `on`.\n          // `__` are patched values which should not be included.\n          // `on` are listeners which also should not be included.\n          const value = element[key];\n          if (isPrimitiveValue(value)) {\n            properties[key] = value;\n          }\n        }\n      }\n      obj = Object.getPrototypeOf(obj);\n    }\n  }\n}\nfunction isPrimitiveValue(value) {\n  return typeof value === 'string' || typeof value === 'boolean' || typeof value === 'number' || value === null;\n}\nfunction _queryAll(parentElement, predicate, matches, elementsOnly) {\n  const context = getLContext(parentElement.nativeNode);\n  const lView = context ? context.lView : null;\n  if (lView !== null) {\n    const parentTNode = lView[TVIEW].data[context.nodeIndex];\n    _queryNodeChildren(parentTNode, lView, predicate, matches, elementsOnly, parentElement.nativeNode);\n  } else {\n    // If the context is null, then `parentElement` was either created with Renderer2 or native DOM\n    // APIs.\n    _queryNativeNodeDescendants(parentElement.nativeNode, predicate, matches, elementsOnly);\n  }\n}\n/**\n * Recursively match the current TNode against the predicate, and goes on with the next ones.\n *\n * @param tNode the current TNode\n * @param lView the LView of this TNode\n * @param predicate the predicate to match\n * @param matches the list of positive matches\n * @param elementsOnly whether only elements should be searched\n * @param rootNativeNode the root native node on which predicate should not be matched\n */\nfunction _queryNodeChildren(tNode, lView, predicate, matches, elementsOnly, rootNativeNode) {\n  ngDevMode && assertTNodeForLView(tNode, lView);\n  const nativeNode = getNativeByTNodeOrNull(tNode, lView);\n  // For each type of TNode, specific logic is executed.\n  if (tNode.type & (3 /* TNodeType.AnyRNode */ | 8 /* TNodeType.ElementContainer */)) {\n    // Case 1: the TNode is an element\n    // The native node has to be checked.\n    _addQueryMatch(nativeNode, predicate, matches, elementsOnly, rootNativeNode);\n    if (isComponentHost(tNode)) {\n      // If the element is the host of a component, then all nodes in its view have to be processed.\n      // Note: the component's content (tNode.child) will be processed from the insertion points.\n      const componentView = getComponentLViewByIndex(tNode.index, lView);\n      if (componentView && componentView[TVIEW].firstChild) {\n        _queryNodeChildren(componentView[TVIEW].firstChild, componentView, predicate, matches, elementsOnly, rootNativeNode);\n      }\n    } else {\n      if (tNode.child) {\n        // Otherwise, its children have to be processed.\n        _queryNodeChildren(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);\n      }\n      // We also have to query the DOM directly in order to catch elements inserted through\n      // Renderer2. Note that this is __not__ optimal, because we're walking similar trees multiple\n      // times. ViewEngine could do it more efficiently, because all the insertions go through\n      // Renderer2, however that's not the case in Ivy. This approach is being used because:\n      // 1. Matching the ViewEngine behavior would mean potentially introducing a dependency\n      //    from `Renderer2` to Ivy which could bring Ivy code into ViewEngine.\n      // 2. It allows us to capture nodes that were inserted directly via the DOM.\n      nativeNode && _queryNativeNodeDescendants(nativeNode, predicate, matches, elementsOnly);\n    }\n    // In all cases, if a dynamic container exists for this node, each view inside it has to be\n    // processed.\n    const nodeOrContainer = lView[tNode.index];\n    if (isLContainer(nodeOrContainer)) {\n      _queryNodeChildrenInContainer(nodeOrContainer, predicate, matches, elementsOnly, rootNativeNode);\n    }\n  } else if (tNode.type & 4 /* TNodeType.Container */) {\n    // Case 2: the TNode is a container\n    // The native node has to be checked.\n    const lContainer = lView[tNode.index];\n    _addQueryMatch(lContainer[NATIVE], predicate, matches, elementsOnly, rootNativeNode);\n    // Each view inside the container has to be processed.\n    _queryNodeChildrenInContainer(lContainer, predicate, matches, elementsOnly, rootNativeNode);\n  } else if (tNode.type & 16 /* TNodeType.Projection */) {\n    // Case 3: the TNode is a projection insertion point (i.e. a <ng-content>).\n    // The nodes projected at this location all need to be processed.\n    const componentView = lView[DECLARATION_COMPONENT_VIEW];\n    const componentHost = componentView[T_HOST];\n    const head = componentHost.projection[tNode.projection];\n    if (Array.isArray(head)) {\n      for (let nativeNode of head) {\n        _addQueryMatch(nativeNode, predicate, matches, elementsOnly, rootNativeNode);\n      }\n    } else if (head) {\n      const nextLView = componentView[PARENT];\n      const nextTNode = nextLView[TVIEW].data[head.index];\n      _queryNodeChildren(nextTNode, nextLView, predicate, matches, elementsOnly, rootNativeNode);\n    }\n  } else if (tNode.child) {\n    // Case 4: the TNode is a view.\n    _queryNodeChildren(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);\n  }\n  // We don't want to go to the next sibling of the root node.\n  if (rootNativeNode !== nativeNode) {\n    // To determine the next node to be processed, we need to use the next or the projectionNext\n    // link, depending on whether the current node has been projected.\n    const nextTNode = tNode.flags & 2 /* TNodeFlags.isProjected */ ? tNode.projectionNext : tNode.next;\n    if (nextTNode) {\n      _queryNodeChildren(nextTNode, lView, predicate, matches, elementsOnly, rootNativeNode);\n    }\n  }\n}\n/**\n * Process all TNodes in a given container.\n *\n * @param lContainer the container to be processed\n * @param predicate the predicate to match\n * @param matches the list of positive matches\n * @param elementsOnly whether only elements should be searched\n * @param rootNativeNode the root native node on which predicate should not be matched\n */\nfunction _queryNodeChildrenInContainer(lContainer, predicate, matches, elementsOnly, rootNativeNode) {\n  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n    const childView = lContainer[i];\n    const firstChild = childView[TVIEW].firstChild;\n    if (firstChild) {\n      _queryNodeChildren(firstChild, childView, predicate, matches, elementsOnly, rootNativeNode);\n    }\n  }\n}\n/**\n * Match the current native node against the predicate.\n *\n * @param nativeNode the current native node\n * @param predicate the predicate to match\n * @param matches the list of positive matches\n * @param elementsOnly whether only elements should be searched\n * @param rootNativeNode the root native node on which predicate should not be matched\n */\nfunction _addQueryMatch(nativeNode, predicate, matches, elementsOnly, rootNativeNode) {\n  if (rootNativeNode !== nativeNode) {\n    const debugNode = getDebugNode(nativeNode);\n    if (!debugNode) {\n      return;\n    }\n    // Type of the \"predicate and \"matches\" array are set based on the value of\n    // the \"elementsOnly\" parameter. TypeScript is not able to properly infer these\n    // types with generics, so we manually cast the parameters accordingly.\n    if (elementsOnly && debugNode instanceof DebugElement && predicate(debugNode) && matches.indexOf(debugNode) === -1) {\n      matches.push(debugNode);\n    } else if (!elementsOnly && predicate(debugNode) && matches.indexOf(debugNode) === -1) {\n      matches.push(debugNode);\n    }\n  }\n}\n/**\n * Match all the descendants of a DOM node against a predicate.\n *\n * @param nativeNode the current native node\n * @param predicate the predicate to match\n * @param matches the list where matches are stored\n * @param elementsOnly whether only elements should be searched\n */\nfunction _queryNativeNodeDescendants(parentNode, predicate, matches, elementsOnly) {\n  const nodes = parentNode.childNodes;\n  const length = nodes.length;\n  for (let i = 0; i < length; i++) {\n    const node = nodes[i];\n    const debugNode = getDebugNode(node);\n    if (debugNode) {\n      if (elementsOnly && debugNode instanceof DebugElement && predicate(debugNode) && matches.indexOf(debugNode) === -1) {\n        matches.push(debugNode);\n      } else if (!elementsOnly && predicate(debugNode) && matches.indexOf(debugNode) === -1) {\n        matches.push(debugNode);\n      }\n      _queryNativeNodeDescendants(node, predicate, matches, elementsOnly);\n    }\n  }\n}\n/**\n * Iterates through the property bindings for a given node and generates\n * a map of property names to values. This map only contains property bindings\n * defined in templates, not in host bindings.\n */\nfunction collectPropertyBindings(properties, tNode, lView, tData) {\n  let bindingIndexes = tNode.propertyBindings;\n  if (bindingIndexes !== null) {\n    for (let i = 0; i < bindingIndexes.length; i++) {\n      const bindingIndex = bindingIndexes[i];\n      const propMetadata = tData[bindingIndex];\n      const metadataParts = propMetadata.split(INTERPOLATION_DELIMITER);\n      const propertyName = metadataParts[0];\n      if (metadataParts.length > 1) {\n        let value = metadataParts[1];\n        for (let j = 1; j < metadataParts.length - 1; j++) {\n          value += renderStringify(lView[bindingIndex + j - 1]) + metadataParts[j + 1];\n        }\n        properties[propertyName] = value;\n      } else {\n        properties[propertyName] = lView[bindingIndex];\n      }\n    }\n  }\n}\n// Need to keep the nodes in a global Map so that multiple angular apps are supported.\nconst _nativeNodeToDebugNode = new Map();\nconst NG_DEBUG_PROPERTY = '__ng_debug__';\n/**\n * @publicApi\n */\nfunction getDebugNode(nativeNode) {\n  if (nativeNode instanceof Node) {\n    if (!nativeNode.hasOwnProperty(NG_DEBUG_PROPERTY)) {\n      nativeNode[NG_DEBUG_PROPERTY] = nativeNode.nodeType == Node.ELEMENT_NODE ? new DebugElement(nativeNode) : new DebugNode(nativeNode);\n    }\n    return nativeNode[NG_DEBUG_PROPERTY];\n  }\n  return null;\n}\nfunction getAllDebugNodes() {\n  return Array.from(_nativeNodeToDebugNode.values());\n}\nfunction indexDebugNode(node) {\n  _nativeNodeToDebugNode.set(node.nativeNode, node);\n}\nfunction removeDebugNodeFromIndex(node) {\n  _nativeNodeToDebugNode.delete(node.nativeNode);\n}\n\n/**\n * This platform has to be included in any other platform\n *\n * @publicApi\n */\nconst platformCore = createPlatformFactory(null, 'core', []);\n\n/**\n * Re-exported by `BrowserModule`, which is included automatically in the root\n * `AppModule` when you create a new app with the CLI `new` command. Eagerly injects\n * `ApplicationRef` to instantiate it.\n *\n * @publicApi\n */\nclass ApplicationModule {\n  // Inject ApplicationRef to make it eager...\n  constructor(appRef) {}\n}\n_class30 = ApplicationModule;\n_class30.ɵfac = function ApplicationModule_Factory(t) {\n  return new (t || _class30)(ɵɵinject(ApplicationRef));\n};\n_class30.ɵmod = /*@__PURE__*/ɵɵdefineNgModule({\n  type: _class30\n});\n_class30.ɵinj = /*@__PURE__*/ɵɵdefineInjector({});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(ApplicationModule, [{\n    type: NgModule\n  }], () => [{\n    type: ApplicationRef\n  }], null);\n})();\n\n/**\n * The default equality function used for `signal` and `computed`, which uses referential equality.\n */\nfunction defaultEquals(a, b) {\n  return Object.is(a, b);\n}\n\n/**\n * The currently active consumer `ReactiveNode`, if running code in a reactive context.\n *\n * Change this via `setActiveConsumer`.\n */\nlet activeConsumer = null;\nlet inNotificationPhase = false;\n/**\n * Global epoch counter. Incremented whenever a source signal is set.\n */\nlet epoch = 1;\n/**\n * Symbol used to tell `Signal`s apart from other functions.\n *\n * This can be used to auto-unwrap signals in various cases, or to auto-wrap non-signal values.\n */\nconst SIGNAL = /* @__PURE__ */Symbol('SIGNAL');\nfunction setActiveConsumer(consumer) {\n  const prev = activeConsumer;\n  activeConsumer = consumer;\n  return prev;\n}\nfunction getActiveConsumer() {\n  return activeConsumer;\n}\nfunction isInNotificationPhase() {\n  return inNotificationPhase;\n}\nfunction isReactive(value) {\n  return value[SIGNAL] !== undefined;\n}\nconst REACTIVE_NODE = {\n  version: 0,\n  lastCleanEpoch: 0,\n  dirty: false,\n  producerNode: undefined,\n  producerLastReadVersion: undefined,\n  producerIndexOfThis: undefined,\n  nextProducerIndex: 0,\n  liveConsumerNode: undefined,\n  liveConsumerIndexOfThis: undefined,\n  consumerAllowSignalWrites: false,\n  consumerIsAlwaysLive: false,\n  producerMustRecompute: () => false,\n  producerRecomputeValue: () => {},\n  consumerMarkedDirty: () => {},\n  consumerOnSignalRead: () => {}\n};\n/**\n * Called by implementations when a producer's signal is read.\n */\nfunction producerAccessed(node) {\n  if (inNotificationPhase) {\n    throw new Error(typeof ngDevMode !== 'undefined' && ngDevMode ? `Assertion error: signal read during notification phase` : '');\n  }\n  if (activeConsumer === null) {\n    // Accessed outside of a reactive context, so nothing to record.\n    return;\n  }\n  activeConsumer.consumerOnSignalRead(node);\n  // This producer is the `idx`th dependency of `activeConsumer`.\n  const idx = activeConsumer.nextProducerIndex++;\n  assertConsumerNode(activeConsumer);\n  if (idx < activeConsumer.producerNode.length && activeConsumer.producerNode[idx] !== node) {\n    // There's been a change in producers since the last execution of `activeConsumer`.\n    // `activeConsumer.producerNode[idx]` holds a stale dependency which will be be removed and\n    // replaced with `this`.\n    //\n    // If `activeConsumer` isn't live, then this is a no-op, since we can replace the producer in\n    // `activeConsumer.producerNode` directly. However, if `activeConsumer` is live, then we need\n    // to remove it from the stale producer's `liveConsumer`s.\n    if (consumerIsLive(activeConsumer)) {\n      const staleProducer = activeConsumer.producerNode[idx];\n      producerRemoveLiveConsumerAtIndex(staleProducer, activeConsumer.producerIndexOfThis[idx]);\n      // At this point, the only record of `staleProducer` is the reference at\n      // `activeConsumer.producerNode[idx]` which will be overwritten below.\n    }\n  }\n\n  if (activeConsumer.producerNode[idx] !== node) {\n    // We're a new dependency of the consumer (at `idx`).\n    activeConsumer.producerNode[idx] = node;\n    // If the active consumer is live, then add it as a live consumer. If not, then use 0 as a\n    // placeholder value.\n    activeConsumer.producerIndexOfThis[idx] = consumerIsLive(activeConsumer) ? producerAddLiveConsumer(node, activeConsumer, idx) : 0;\n  }\n  activeConsumer.producerLastReadVersion[idx] = node.version;\n}\n/**\n * Increment the global epoch counter.\n *\n * Called by source producers (that is, not computeds) whenever their values change.\n */\nfunction producerIncrementEpoch() {\n  epoch++;\n}\n/**\n * Ensure this producer's `version` is up-to-date.\n */\nfunction producerUpdateValueVersion(node) {\n  if (consumerIsLive(node) && !node.dirty) {\n    // A live consumer will be marked dirty by producers, so a clean state means that its version\n    // is guaranteed to be up-to-date.\n    return;\n  }\n  if (!node.dirty && node.lastCleanEpoch === epoch) {\n    // Even non-live consumers can skip polling if they previously found themselves to be clean at\n    // the current epoch, since their dependencies could not possibly have changed (such a change\n    // would've increased the epoch).\n    return;\n  }\n  if (!node.producerMustRecompute(node) && !consumerPollProducersForChange(node)) {\n    // None of our producers report a change since the last time they were read, so no\n    // recomputation of our value is necessary, and we can consider ourselves clean.\n    node.dirty = false;\n    node.lastCleanEpoch = epoch;\n    return;\n  }\n  node.producerRecomputeValue(node);\n  // After recomputing the value, we're no longer dirty.\n  node.dirty = false;\n  node.lastCleanEpoch = epoch;\n}\n/**\n * Propagate a dirty notification to live consumers of this producer.\n */\nfunction producerNotifyConsumers(node) {\n  if (node.liveConsumerNode === undefined) {\n    return;\n  }\n  // Prevent signal reads when we're updating the graph\n  const prev = inNotificationPhase;\n  inNotificationPhase = true;\n  try {\n    for (const consumer of node.liveConsumerNode) {\n      if (!consumer.dirty) {\n        consumerMarkDirty(consumer);\n      }\n    }\n  } finally {\n    inNotificationPhase = prev;\n  }\n}\n/**\n * Whether this `ReactiveNode` in its producer capacity is currently allowed to initiate updates,\n * based on the current consumer context.\n */\nfunction producerUpdatesAllowed() {\n  var _activeConsumer;\n  return ((_activeConsumer = activeConsumer) === null || _activeConsumer === void 0 ? void 0 : _activeConsumer.consumerAllowSignalWrites) !== false;\n}\nfunction consumerMarkDirty(node) {\n  var _node$consumerMarkedD;\n  node.dirty = true;\n  producerNotifyConsumers(node);\n  (_node$consumerMarkedD = node.consumerMarkedDirty) === null || _node$consumerMarkedD === void 0 || _node$consumerMarkedD.call(node, node);\n}\n/**\n * Prepare this consumer to run a computation in its reactive context.\n *\n * Must be called by subclasses which represent reactive computations, before those computations\n * begin.\n */\nfunction consumerBeforeComputation(node) {\n  node && (node.nextProducerIndex = 0);\n  return setActiveConsumer(node);\n}\n/**\n * Finalize this consumer's state after a reactive computation has run.\n *\n * Must be called by subclasses which represent reactive computations, after those computations\n * have finished.\n */\nfunction consumerAfterComputation(node, prevConsumer) {\n  setActiveConsumer(prevConsumer);\n  if (!node || node.producerNode === undefined || node.producerIndexOfThis === undefined || node.producerLastReadVersion === undefined) {\n    return;\n  }\n  if (consumerIsLive(node)) {\n    // For live consumers, we need to remove the producer -> consumer edge for any stale producers\n    // which weren't dependencies after the recomputation.\n    for (let i = node.nextProducerIndex; i < node.producerNode.length; i++) {\n      producerRemoveLiveConsumerAtIndex(node.producerNode[i], node.producerIndexOfThis[i]);\n    }\n  }\n  // Truncate the producer tracking arrays.\n  // Perf note: this is essentially truncating the length to `node.nextProducerIndex`, but\n  // benchmarking has shown that individual pop operations are faster.\n  while (node.producerNode.length > node.nextProducerIndex) {\n    node.producerNode.pop();\n    node.producerLastReadVersion.pop();\n    node.producerIndexOfThis.pop();\n  }\n}\n/**\n * Determine whether this consumer has any dependencies which have changed since the last time\n * they were read.\n */\nfunction consumerPollProducersForChange(node) {\n  assertConsumerNode(node);\n  // Poll producers for change.\n  for (let i = 0; i < node.producerNode.length; i++) {\n    const producer = node.producerNode[i];\n    const seenVersion = node.producerLastReadVersion[i];\n    // First check the versions. A mismatch means that the producer's value is known to have\n    // changed since the last time we read it.\n    if (seenVersion !== producer.version) {\n      return true;\n    }\n    // The producer's version is the same as the last time we read it, but it might itself be\n    // stale. Force the producer to recompute its version (calculating a new value if necessary).\n    producerUpdateValueVersion(producer);\n    // Now when we do this check, `producer.version` is guaranteed to be up to date, so if the\n    // versions still match then it has not changed since the last time we read it.\n    if (seenVersion !== producer.version) {\n      return true;\n    }\n  }\n  return false;\n}\n/**\n * Disconnect this consumer from the graph.\n */\nfunction consumerDestroy(node) {\n  assertConsumerNode(node);\n  if (consumerIsLive(node)) {\n    // Drop all connections from the graph to this node.\n    for (let i = 0; i < node.producerNode.length; i++) {\n      producerRemoveLiveConsumerAtIndex(node.producerNode[i], node.producerIndexOfThis[i]);\n    }\n  }\n  // Truncate all the arrays to drop all connection from this node to the graph.\n  node.producerNode.length = node.producerLastReadVersion.length = node.producerIndexOfThis.length = 0;\n  if (node.liveConsumerNode) {\n    node.liveConsumerNode.length = node.liveConsumerIndexOfThis.length = 0;\n  }\n}\n/**\n * Add `consumer` as a live consumer of this node.\n *\n * Note that this operation is potentially transitive. If this node becomes live, then it becomes\n * a live consumer of all of its current producers.\n */\nfunction producerAddLiveConsumer(node, consumer, indexOfThis) {\n  assertProducerNode(node);\n  assertConsumerNode(node);\n  if (node.liveConsumerNode.length === 0) {\n    // When going from 0 to 1 live consumers, we become a live consumer to our producers.\n    for (let i = 0; i < node.producerNode.length; i++) {\n      node.producerIndexOfThis[i] = producerAddLiveConsumer(node.producerNode[i], node, i);\n    }\n  }\n  node.liveConsumerIndexOfThis.push(indexOfThis);\n  return node.liveConsumerNode.push(consumer) - 1;\n}\n/**\n * Remove the live consumer at `idx`.\n */\nfunction producerRemoveLiveConsumerAtIndex(node, idx) {\n  assertProducerNode(node);\n  assertConsumerNode(node);\n  if (typeof ngDevMode !== 'undefined' && ngDevMode && idx >= node.liveConsumerNode.length) {\n    throw new Error(`Assertion error: active consumer index ${idx} is out of bounds of ${node.liveConsumerNode.length} consumers)`);\n  }\n  if (node.liveConsumerNode.length === 1) {\n    // When removing the last live consumer, we will no longer be live. We need to remove\n    // ourselves from our producers' tracking (which may cause consumer-producers to lose\n    // liveness as well).\n    for (let i = 0; i < node.producerNode.length; i++) {\n      producerRemoveLiveConsumerAtIndex(node.producerNode[i], node.producerIndexOfThis[i]);\n    }\n  }\n  // Move the last value of `liveConsumers` into `idx`. Note that if there's only a single\n  // live consumer, this is a no-op.\n  const lastIdx = node.liveConsumerNode.length - 1;\n  node.liveConsumerNode[idx] = node.liveConsumerNode[lastIdx];\n  node.liveConsumerIndexOfThis[idx] = node.liveConsumerIndexOfThis[lastIdx];\n  // Truncate the array.\n  node.liveConsumerNode.length--;\n  node.liveConsumerIndexOfThis.length--;\n  // If the index is still valid, then we need to fix the index pointer from the producer to this\n  // consumer, and update it from `lastIdx` to `idx` (accounting for the move above).\n  if (idx < node.liveConsumerNode.length) {\n    const idxProducer = node.liveConsumerIndexOfThis[idx];\n    const consumer = node.liveConsumerNode[idx];\n    assertConsumerNode(consumer);\n    consumer.producerIndexOfThis[idxProducer] = idx;\n  }\n}\nfunction consumerIsLive(node) {\n  var _node$liveConsumerNod, _node$liveConsumerNod2;\n  return node.consumerIsAlwaysLive || ((_node$liveConsumerNod = node === null || node === void 0 || (_node$liveConsumerNod2 = node.liveConsumerNode) === null || _node$liveConsumerNod2 === void 0 ? void 0 : _node$liveConsumerNod2.length) !== null && _node$liveConsumerNod !== void 0 ? _node$liveConsumerNod : 0) > 0;\n}\nfunction assertConsumerNode(node) {\n  var _node$producerNode, _node$producerIndexOf, _node$producerLastRea;\n  (_node$producerNode = node.producerNode) !== null && _node$producerNode !== void 0 ? _node$producerNode : node.producerNode = [];\n  (_node$producerIndexOf = node.producerIndexOfThis) !== null && _node$producerIndexOf !== void 0 ? _node$producerIndexOf : node.producerIndexOfThis = [];\n  (_node$producerLastRea = node.producerLastReadVersion) !== null && _node$producerLastRea !== void 0 ? _node$producerLastRea : node.producerLastReadVersion = [];\n}\nfunction assertProducerNode(node) {\n  var _node$liveConsumerNod3, _node$liveConsumerInd;\n  (_node$liveConsumerNod3 = node.liveConsumerNode) !== null && _node$liveConsumerNod3 !== void 0 ? _node$liveConsumerNod3 : node.liveConsumerNode = [];\n  (_node$liveConsumerInd = node.liveConsumerIndexOfThis) !== null && _node$liveConsumerInd !== void 0 ? _node$liveConsumerInd : node.liveConsumerIndexOfThis = [];\n}\n\n/**\n * Create a computed signal which derives a reactive value from an expression.\n */\nfunction createComputed(computation) {\n  const node = Object.create(COMPUTED_NODE);\n  node.computation = computation;\n  const computed = () => {\n    // Check if the value needs updating before returning it.\n    producerUpdateValueVersion(node);\n    // Record that someone looked at this signal.\n    producerAccessed(node);\n    if (node.value === ERRORED) {\n      throw node.error;\n    }\n    return node.value;\n  };\n  computed[SIGNAL] = node;\n  return computed;\n}\n/**\n * A dedicated symbol used before a computed value has been calculated for the first time.\n * Explicitly typed as `any` so we can use it as signal's value.\n */\nconst UNSET = /* @__PURE__ */Symbol('UNSET');\n/**\n * A dedicated symbol used in place of a computed signal value to indicate that a given computation\n * is in progress. Used to detect cycles in computation chains.\n * Explicitly typed as `any` so we can use it as signal's value.\n */\nconst COMPUTING = /* @__PURE__ */Symbol('COMPUTING');\n/**\n * A dedicated symbol used in place of a computed signal value to indicate that a given computation\n * failed. The thrown error is cached until the computation gets dirty again.\n * Explicitly typed as `any` so we can use it as signal's value.\n */\nconst ERRORED = /* @__PURE__ */Symbol('ERRORED');\n// Note: Using an IIFE here to ensure that the spread assignment is not considered\n// a side-effect, ending up preserving `COMPUTED_NODE` and `REACTIVE_NODE`.\n// TODO: remove when https://github.com/evanw/esbuild/issues/3392 is resolved.\nconst COMPUTED_NODE = /* @__PURE__ */(() => {\n  return {\n    ...REACTIVE_NODE,\n    value: UNSET,\n    dirty: true,\n    error: null,\n    equal: defaultEquals,\n    producerMustRecompute(node) {\n      // Force a recomputation if there's no current value, or if the current value is in the\n      // process of being calculated (which should throw an error).\n      return node.value === UNSET || node.value === COMPUTING;\n    },\n    producerRecomputeValue(node) {\n      if (node.value === COMPUTING) {\n        // Our computation somehow led to a cyclic read of itself.\n        throw new Error('Detected cycle in computations.');\n      }\n      const oldValue = node.value;\n      node.value = COMPUTING;\n      const prevConsumer = consumerBeforeComputation(node);\n      let newValue;\n      try {\n        newValue = node.computation();\n      } catch (err) {\n        newValue = ERRORED;\n        node.error = err;\n      } finally {\n        consumerAfterComputation(node, prevConsumer);\n      }\n      if (oldValue !== UNSET && oldValue !== ERRORED && newValue !== ERRORED && node.equal(oldValue, newValue)) {\n        // No change to `valueVersion` - old and new values are\n        // semantically equivalent.\n        node.value = oldValue;\n        return;\n      }\n      node.value = newValue;\n      node.version++;\n    }\n  };\n})();\nfunction defaultThrowError() {\n  throw new Error();\n}\nlet throwInvalidWriteToSignalErrorFn = defaultThrowError;\nfunction throwInvalidWriteToSignalError() {\n  throwInvalidWriteToSignalErrorFn();\n}\nfunction setThrowInvalidWriteToSignalError(fn) {\n  throwInvalidWriteToSignalErrorFn = fn;\n}\n\n/**\n * If set, called after `WritableSignal`s are updated.\n *\n * This hook can be used to achieve various effects, such as running effects synchronously as part\n * of setting a signal.\n */\nlet postSignalSetFn = null;\n/**\n * Create a `Signal` that can be set or updated directly.\n */\nfunction createSignal(initialValue) {\n  const node = Object.create(SIGNAL_NODE);\n  node.value = initialValue;\n  const getter = () => {\n    producerAccessed(node);\n    return node.value;\n  };\n  getter[SIGNAL] = node;\n  return getter;\n}\nfunction setPostSignalSetFn(fn) {\n  const prev = postSignalSetFn;\n  postSignalSetFn = fn;\n  return prev;\n}\nfunction signalGetFn() {\n  producerAccessed(this);\n  return this.value;\n}\nfunction signalSetFn(node, newValue) {\n  if (!producerUpdatesAllowed()) {\n    throwInvalidWriteToSignalError();\n  }\n  if (!node.equal(node.value, newValue)) {\n    node.value = newValue;\n    signalValueChanged(node);\n  }\n}\nfunction signalUpdateFn(node, updater) {\n  if (!producerUpdatesAllowed()) {\n    throwInvalidWriteToSignalError();\n  }\n  signalSetFn(node, updater(node.value));\n}\nfunction signalMutateFn(node, mutator) {\n  if (!producerUpdatesAllowed()) {\n    throwInvalidWriteToSignalError();\n  }\n  // Mutate bypasses equality checks as it's by definition changing the value.\n  mutator(node.value);\n  signalValueChanged(node);\n}\n// Note: Using an IIFE here to ensure that the spread assignment is not considered\n// a side-effect, ending up preserving `COMPUTED_NODE` and `REACTIVE_NODE`.\n// TODO: remove when https://github.com/evanw/esbuild/issues/3392 is resolved.\nconst SIGNAL_NODE = /* @__PURE__ */(() => {\n  return {\n    ...REACTIVE_NODE,\n    equal: defaultEquals,\n    value: undefined\n  };\n})();\nfunction signalValueChanged(node) {\n  var _postSignalSetFn;\n  node.version++;\n  producerIncrementEpoch();\n  producerNotifyConsumers(node);\n  (_postSignalSetFn = postSignalSetFn) === null || _postSignalSetFn === void 0 || _postSignalSetFn();\n}\nfunction createWatch(fn, schedule, allowSignalWrites) {\n  const node = Object.create(WATCH_NODE);\n  if (allowSignalWrites) {\n    node.consumerAllowSignalWrites = true;\n  }\n  node.fn = fn;\n  node.schedule = schedule;\n  const registerOnCleanup = cleanupFn => {\n    node.cleanupFn = cleanupFn;\n  };\n  function isWatchNodeDestroyed(node) {\n    return node.fn === null && node.schedule === null;\n  }\n  function destroyWatchNode(node) {\n    if (!isWatchNodeDestroyed(node)) {\n      consumerDestroy(node); // disconnect watcher from the reactive graph\n      node.cleanupFn();\n      // nullify references to the integration functions to mark node as destroyed\n      node.fn = null;\n      node.schedule = null;\n      node.cleanupFn = NOOP_CLEANUP_FN;\n    }\n  }\n  const run = () => {\n    if (node.fn === null) {\n      // trying to run a destroyed watch is noop\n      return;\n    }\n    if (isInNotificationPhase()) {\n      throw new Error(`Schedulers cannot synchronously execute watches while scheduling.`);\n    }\n    node.dirty = false;\n    if (node.hasRun && !consumerPollProducersForChange(node)) {\n      return;\n    }\n    node.hasRun = true;\n    const prevConsumer = consumerBeforeComputation(node);\n    try {\n      node.cleanupFn();\n      node.cleanupFn = NOOP_CLEANUP_FN;\n      node.fn(registerOnCleanup);\n    } finally {\n      consumerAfterComputation(node, prevConsumer);\n    }\n  };\n  node.ref = {\n    notify: () => consumerMarkDirty(node),\n    run,\n    cleanup: () => node.cleanupFn(),\n    destroy: () => destroyWatchNode(node),\n    [SIGNAL]: node\n  };\n  return node.ref;\n}\nconst NOOP_CLEANUP_FN = () => {};\n// Note: Using an IIFE here to ensure that the spread assignment is not considered\n// a side-effect, ending up preserving `COMPUTED_NODE` and `REACTIVE_NODE`.\n// TODO: remove when https://github.com/evanw/esbuild/issues/3392 is resolved.\nconst WATCH_NODE = /* @__PURE__ */(() => {\n  return {\n    ...REACTIVE_NODE,\n    consumerIsAlwaysLive: true,\n    consumerAllowSignalWrites: false,\n    consumerMarkedDirty: node => {\n      if (node.schedule !== null) {\n        node.schedule(node.ref);\n      }\n    },\n    hasRun: false,\n    cleanupFn: NOOP_CLEANUP_FN\n  };\n})();\nfunction setAlternateWeakRefImpl(impl) {\n  // TODO: remove this function\n}\n\n// A delay in milliseconds before the scan is run after onLoad, to avoid any\n// potential race conditions with other LCP-related functions. This delay\n// happens outside of the main JavaScript execution and will only effect the timing\n// on when the warning becomes visible in the console.\nconst SCAN_DELAY = 200;\nconst OVERSIZED_IMAGE_TOLERANCE = 1200;\nclass ImagePerformanceWarning {\n  constructor() {\n    // Map of full image URLs -> original `ngSrc` values.\n    this.window = null;\n    this.observer = null;\n    this.options = inject(IMAGE_CONFIG);\n    this.ngZone = inject(NgZone);\n  }\n  start() {\n    var _this$options, _this$options2;\n    if (typeof PerformanceObserver === 'undefined' || (_this$options = this.options) !== null && _this$options !== void 0 && _this$options.disableImageSizeWarning && (_this$options2 = this.options) !== null && _this$options2 !== void 0 && _this$options2.disableImageLazyLoadWarning) {\n      return;\n    }\n    this.observer = this.initPerformanceObserver();\n    const doc = getDocument();\n    const win = doc.defaultView;\n    if (typeof win !== 'undefined') {\n      this.window = win;\n      // Wait to avoid race conditions where LCP image triggers\n      // load event before it's recorded by the performance observer\n      const waitToScan = () => {\n        setTimeout(this.scanImages.bind(this), SCAN_DELAY);\n      };\n      // Angular doesn't have to run change detection whenever any asynchronous tasks are invoked in\n      // the scope of this functionality.\n      this.ngZone.runOutsideAngular(() => {\n        // Consider the case when the application is created and destroyed multiple times.\n        // Typically, applications are created instantly once the page is loaded, and the\n        // `window.load` listener is always triggered. However, the `window.load` event will never\n        // be fired if the page is loaded, and the application is created later. Checking for\n        // `readyState` is the easiest way to determine whether the page has been loaded or not.\n        if (doc.readyState === 'complete') {\n          waitToScan();\n        } else {\n          var _this$window;\n          (_this$window = this.window) === null || _this$window === void 0 || _this$window.addEventListener('load', waitToScan, {\n            once: true\n          });\n        }\n      });\n    }\n  }\n  ngOnDestroy() {\n    var _this$observer;\n    (_this$observer = this.observer) === null || _this$observer === void 0 || _this$observer.disconnect();\n  }\n  initPerformanceObserver() {\n    if (typeof PerformanceObserver === 'undefined') {\n      return null;\n    }\n    const observer = new PerformanceObserver(entryList => {\n      var _lcpElement$element$s, _lcpElement$element;\n      const entries = entryList.getEntries();\n      if (entries.length === 0) return;\n      // We use the latest entry produced by the `PerformanceObserver` as the best\n      // signal on which element is actually an LCP one. As an example, the first image to load on\n      // a page, by virtue of being the only thing on the page so far, is often a LCP candidate\n      // and gets reported by PerformanceObserver, but isn't necessarily the LCP element.\n      const lcpElement = entries[entries.length - 1];\n      // Cast to `any` due to missing `element` on the `LargestContentfulPaint` type of entry.\n      // See https://developer.mozilla.org/en-US/docs/Web/API/LargestContentfulPaint\n      const imgSrc = (_lcpElement$element$s = (_lcpElement$element = lcpElement.element) === null || _lcpElement$element === void 0 ? void 0 : _lcpElement$element.src) !== null && _lcpElement$element$s !== void 0 ? _lcpElement$element$s : '';\n      // Exclude `data:` and `blob:` URLs, since they are fetched resources.\n      if (imgSrc.startsWith('data:') || imgSrc.startsWith('blob:')) return;\n      this.lcpImageUrl = imgSrc;\n    });\n    observer.observe({\n      type: 'largest-contentful-paint',\n      buffered: true\n    });\n    return observer;\n  }\n  scanImages() {\n    var _this$options5;\n    const images = getDocument().querySelectorAll('img');\n    let lcpElementFound,\n      lcpElementLoadedCorrectly = false;\n    images.forEach(image => {\n      var _this$options3, _this$options4;\n      if (!((_this$options3 = this.options) !== null && _this$options3 !== void 0 && _this$options3.disableImageSizeWarning)) {\n        for (const image of images) {\n          // Image elements using the NgOptimizedImage directive are excluded,\n          // as that directive has its own version of this check.\n          if (!image.getAttribute('ng-img') && this.isOversized(image)) {\n            logOversizedImageWarning(image.src);\n          }\n        }\n      }\n      if (!((_this$options4 = this.options) !== null && _this$options4 !== void 0 && _this$options4.disableImageLazyLoadWarning) && this.lcpImageUrl) {\n        if (image.src === this.lcpImageUrl) {\n          lcpElementFound = true;\n          if (image.loading !== 'lazy' || image.getAttribute('ng-img')) {\n            // This variable is set to true and never goes back to false to account\n            // for the case where multiple images have the same src url, and some\n            // have lazy loading while others don't.\n            // Also ignore NgOptimizedImage because there's a different warning for that.\n            lcpElementLoadedCorrectly = true;\n          }\n        }\n      }\n    });\n    if (lcpElementFound && !lcpElementLoadedCorrectly && this.lcpImageUrl && !((_this$options5 = this.options) !== null && _this$options5 !== void 0 && _this$options5.disableImageLazyLoadWarning)) {\n      logLazyLCPWarning(this.lcpImageUrl);\n    }\n  }\n  isOversized(image) {\n    if (!this.window) {\n      return false;\n    }\n    const computedStyle = this.window.getComputedStyle(image);\n    let renderedWidth = parseFloat(computedStyle.getPropertyValue('width'));\n    let renderedHeight = parseFloat(computedStyle.getPropertyValue('height'));\n    const boxSizing = computedStyle.getPropertyValue('box-sizing');\n    const objectFit = computedStyle.getPropertyValue('object-fit');\n    if (objectFit === `cover`) {\n      // Object fit cover may indicate a use case such as a sprite sheet where\n      // this warning does not apply.\n      return false;\n    }\n    if (boxSizing === 'border-box') {\n      const paddingTop = computedStyle.getPropertyValue('padding-top');\n      const paddingRight = computedStyle.getPropertyValue('padding-right');\n      const paddingBottom = computedStyle.getPropertyValue('padding-bottom');\n      const paddingLeft = computedStyle.getPropertyValue('padding-left');\n      renderedWidth -= parseFloat(paddingRight) + parseFloat(paddingLeft);\n      renderedHeight -= parseFloat(paddingTop) + parseFloat(paddingBottom);\n    }\n    const intrinsicWidth = image.naturalWidth;\n    const intrinsicHeight = image.naturalHeight;\n    const recommendedWidth = this.window.devicePixelRatio * renderedWidth;\n    const recommendedHeight = this.window.devicePixelRatio * renderedHeight;\n    const oversizedWidth = intrinsicWidth - recommendedWidth >= OVERSIZED_IMAGE_TOLERANCE;\n    const oversizedHeight = intrinsicHeight - recommendedHeight >= OVERSIZED_IMAGE_TOLERANCE;\n    return oversizedWidth || oversizedHeight;\n  }\n}\n_class31 = ImagePerformanceWarning;\n_class31.ɵfac = function ImagePerformanceWarning_Factory(t) {\n  return new (t || _class31)();\n};\n_class31.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n  token: _class31,\n  factory: _class31.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(ImagePerformanceWarning, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nfunction logLazyLCPWarning(src) {\n  console.warn(formatRuntimeError(-913 /* RuntimeErrorCode.IMAGE_PERFORMANCE_WARNING */, `An image with src ${src} is the Largest Contentful Paint (LCP) element ` + `but was given a \"loading\" value of \"lazy\", which can negatively impact ` + `application loading performance. This warning can be addressed by ` + `changing the loading value of the LCP image to \"eager\", or by using the ` + `NgOptimizedImage directive's prioritization utilities. For more ` + `information about addressing or disabling this warning, see ` + `https://angular.io/errors/NG0913`));\n}\nfunction logOversizedImageWarning(src) {\n  console.warn(formatRuntimeError(-913 /* RuntimeErrorCode.IMAGE_PERFORMANCE_WARNING */, `An image with src ${src} has intrinsic file dimensions much larger than its ` + `rendered size. This can negatively impact application loading performance. ` + `For more information about addressing or disabling this warning, see ` + `https://angular.io/errors/NG0913`));\n}\n\n/**\n * Internal create application API that implements the core application creation logic and optional\n * bootstrap logic.\n *\n * Platforms (such as `platform-browser`) may require different set of application and platform\n * providers for an application to function correctly. As a result, platforms may use this function\n * internally and supply the necessary providers during the bootstrap, while exposing\n * platform-specific APIs as a part of their public API.\n *\n * @returns A promise that returns an `ApplicationRef` instance once resolved.\n */\nfunction internalCreateApplication(config) {\n  try {\n    const {\n      rootComponent,\n      appProviders,\n      platformProviders\n    } = config;\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && rootComponent !== undefined) {\n      assertStandaloneComponentType(rootComponent);\n    }\n    const platformInjector = createOrReusePlatformInjector(platformProviders);\n    // Create root application injector based on a set of providers configured at the platform\n    // bootstrap level as well as providers passed to the bootstrap call by a user.\n    const allAppProviders = [provideZoneChangeDetection(), ...(appProviders || [])];\n    const adapter = new EnvironmentNgModuleRefAdapter({\n      providers: allAppProviders,\n      parent: platformInjector,\n      debugName: typeof ngDevMode === 'undefined' || ngDevMode ? 'Environment Injector' : '',\n      // We skip environment initializers because we need to run them inside the NgZone, which\n      // happens after we get the NgZone instance from the Injector.\n      runEnvironmentInitializers: false\n    });\n    const envInjector = adapter.injector;\n    const ngZone = envInjector.get(NgZone);\n    return ngZone.run(() => {\n      envInjector.resolveInjectorInitializers();\n      const exceptionHandler = envInjector.get(ErrorHandler, null);\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && !exceptionHandler) {\n        throw new RuntimeError(402 /* RuntimeErrorCode.MISSING_REQUIRED_INJECTABLE_IN_BOOTSTRAP */, 'No `ErrorHandler` found in the Dependency Injection tree.');\n      }\n      let onErrorSubscription;\n      ngZone.runOutsideAngular(() => {\n        onErrorSubscription = ngZone.onError.subscribe({\n          next: error => {\n            exceptionHandler.handleError(error);\n          }\n        });\n      });\n      // If the whole platform is destroyed, invoke the `destroy` method\n      // for all bootstrapped applications as well.\n      const destroyListener = () => envInjector.destroy();\n      const onPlatformDestroyListeners = platformInjector.get(PLATFORM_DESTROY_LISTENERS);\n      onPlatformDestroyListeners.add(destroyListener);\n      envInjector.onDestroy(() => {\n        onErrorSubscription.unsubscribe();\n        onPlatformDestroyListeners.delete(destroyListener);\n      });\n      return _callAndReportToErrorHandler(exceptionHandler, ngZone, () => {\n        const initStatus = envInjector.get(ApplicationInitStatus);\n        initStatus.runInitializers();\n        return initStatus.donePromise.then(() => {\n          const localeId = envInjector.get(LOCALE_ID, DEFAULT_LOCALE_ID);\n          setLocaleId(localeId || DEFAULT_LOCALE_ID);\n          const appRef = envInjector.get(ApplicationRef);\n          if (rootComponent !== undefined) {\n            appRef.bootstrap(rootComponent);\n          }\n          if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const imagePerformanceService = envInjector.get(ImagePerformanceWarning);\n            imagePerformanceService.start();\n          }\n          return appRef;\n        });\n      });\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}\n\n/**\n * Retrieves all defer blocks in a given LView.\n *\n * @param lView lView with defer blocks\n * @param deferBlocks defer block aggregator array\n */\nfunction getDeferBlocks(lView, deferBlocks) {\n  const tView = lView[TVIEW];\n  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {\n    if (isLContainer(lView[i])) {\n      const lContainer = lView[i];\n      // An LContainer may represent an instance of a defer block, in which case\n      // we store it as a result. Otherwise, keep iterating over LContainer views and\n      // look for defer blocks.\n      const isLast = i === tView.bindingStartIndex - 1;\n      if (!isLast) {\n        const tNode = tView.data[i];\n        const tDetails = getTDeferBlockDetails(tView, tNode);\n        if (isTDeferBlockDetails(tDetails)) {\n          deferBlocks.push({\n            lContainer,\n            lView,\n            tNode,\n            tDetails\n          });\n          // This LContainer represents a defer block, so we exit\n          // this iteration and don't inspect views in this LContainer.\n          continue;\n        }\n      }\n      for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n        getDeferBlocks(lContainer[i], deferBlocks);\n      }\n    } else if (isLView(lView[i])) {\n      // This is a component, enter the `getDeferBlocks` recursively.\n      getDeferBlocks(lView[i], deferBlocks);\n    }\n  }\n}\n\n/**\n * A collection that tracks all serialized views (`ngh` DOM annotations)\n * to avoid duplication. An attempt to add a duplicate view results in the\n * collection returning the index of the previously collected serialized view.\n * This reduces the number of annotations needed for a given page.\n */\nclass SerializedViewCollection {\n  constructor() {\n    this.views = [];\n    this.indexByContent = new Map();\n  }\n  add(serializedView) {\n    const viewAsString = JSON.stringify(serializedView);\n    if (!this.indexByContent.has(viewAsString)) {\n      const index = this.views.length;\n      this.views.push(serializedView);\n      this.indexByContent.set(viewAsString, index);\n      return index;\n    }\n    return this.indexByContent.get(viewAsString);\n  }\n  getAll() {\n    return this.views;\n  }\n}\n/**\n * Global counter that is used to generate a unique id for TViews\n * during the serialization process.\n */\nlet tViewSsrId = 0;\n/**\n * Generates a unique id for a given TView and returns this id.\n * The id is also stored on this instance of a TView and reused in\n * subsequent calls.\n *\n * This id is needed to uniquely identify and pick up dehydrated views\n * at runtime.\n */\nfunction getSsrId(tView) {\n  if (!tView.ssrId) {\n    tView.ssrId = `t${tViewSsrId++}`;\n  }\n  return tView.ssrId;\n}\n/**\n * Computes the number of root nodes in a given view\n * (or child nodes in a given container if a tNode is provided).\n */\nfunction calcNumRootNodes(tView, lView, tNode) {\n  const rootNodes = [];\n  collectNativeNodes(tView, lView, tNode, rootNodes);\n  return rootNodes.length;\n}\n/**\n * Computes the number of root nodes in all views in a given LContainer.\n */\nfunction calcNumRootNodesInLContainer(lContainer) {\n  const rootNodes = [];\n  collectNativeNodesInLContainer(lContainer, rootNodes);\n  return rootNodes.length;\n}\n/**\n * Annotates root level component's LView for hydration,\n * see `annotateHostElementForHydration` for additional information.\n */\nfunction annotateComponentLViewForHydration(lView, context) {\n  const hostElement = lView[HOST];\n  // Root elements might also be annotated with the `ngSkipHydration` attribute,\n  // check if it's present before starting the serialization process.\n  if (hostElement && !hostElement.hasAttribute(SKIP_HYDRATION_ATTR_NAME)) {\n    return annotateHostElementForHydration(hostElement, lView, context);\n  }\n  return null;\n}\n/**\n * Annotates root level LContainer for hydration. This happens when a root component\n * injects ViewContainerRef, thus making the component an anchor for a view container.\n * This function serializes the component itself as well as all views from the view\n * container.\n */\nfunction annotateLContainerForHydration(lContainer, context) {\n  const componentLView = unwrapLView(lContainer[HOST]);\n  // Serialize the root component itself.\n  const componentLViewNghIndex = annotateComponentLViewForHydration(componentLView, context);\n  const hostElement = unwrapRNode(componentLView[HOST]);\n  // Serialize all views within this view container.\n  const rootLView = lContainer[PARENT];\n  const rootLViewNghIndex = annotateHostElementForHydration(hostElement, rootLView, context);\n  const renderer = componentLView[RENDERER];\n  // For cases when a root component also acts as an anchor node for a ViewContainerRef\n  // (for example, when ViewContainerRef is injected in a root component), there is a need\n  // to serialize information about the component itself, as well as an LContainer that\n  // represents this ViewContainerRef. Effectively, we need to serialize 2 pieces of info:\n  // (1) hydration info for the root component itself and (2) hydration info for the\n  // ViewContainerRef instance (an LContainer). Each piece of information is included into\n  // the hydration data (in the TransferState object) separately, thus we end up with 2 ids.\n  // Since we only have 1 root element, we encode both bits of info into a single string:\n  // ids are separated by the `|` char (e.g. `10|25`, where `10` is the ngh for a component view\n  // and 25 is the `ngh` for a root view which holds LContainer).\n  const finalIndex = `${componentLViewNghIndex}|${rootLViewNghIndex}`;\n  renderer.setAttribute(hostElement, NGH_ATTR_NAME, finalIndex);\n}\n/**\n * Annotates all components bootstrapped in a given ApplicationRef\n * with info needed for hydration.\n *\n * @param appRef An instance of an ApplicationRef.\n * @param doc A reference to the current Document instance.\n */\nfunction annotateForHydration(appRef, doc) {\n  const serializedViewCollection = new SerializedViewCollection();\n  const corruptedTextNodes = new Map();\n  const viewRefs = appRef._views;\n  for (const viewRef of viewRefs) {\n    const lNode = getLNodeForHydration(viewRef);\n    // An `lView` might be `null` if a `ViewRef` represents\n    // an embedded view (not a component view).\n    if (lNode !== null) {\n      const context = {\n        serializedViewCollection,\n        corruptedTextNodes\n      };\n      if (isLContainer(lNode)) {\n        annotateLContainerForHydration(lNode, context);\n      } else {\n        annotateComponentLViewForHydration(lNode, context);\n      }\n      insertCorruptedTextNodeMarkers(corruptedTextNodes, doc);\n    }\n  }\n  // Note: we *always* include hydration info key and a corresponding value\n  // into the TransferState, even if the list of serialized views is empty.\n  // This is needed as a signal to the client that the server part of the\n  // hydration logic was setup and enabled correctly. Otherwise, if a client\n  // hydration doesn't find a key in the transfer state - an error is produced.\n  const serializedViews = serializedViewCollection.getAll();\n  const transferState = appRef.injector.get(TransferState);\n  transferState.set(NGH_DATA_KEY, serializedViews);\n}\n/**\n * Serializes the lContainer data into a list of SerializedView objects,\n * that represent views within this lContainer.\n *\n * @param lContainer the lContainer we are serializing\n * @param context the hydration context\n * @returns an array of the `SerializedView` objects\n */\nfunction serializeLContainer(lContainer, context) {\n  const views = [];\n  let lastViewAsString = '';\n  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n    let childLView = lContainer[i];\n    let template;\n    let numRootNodes;\n    let serializedView;\n    if (isRootView(childLView)) {\n      // If this is a root view, get an LView for the underlying component,\n      // because it contains information about the view to serialize.\n      childLView = childLView[HEADER_OFFSET];\n      // If we have an LContainer at this position, this indicates that the\n      // host element was used as a ViewContainerRef anchor (e.g. a `ViewContainerRef`\n      // was injected within the component class). This case requires special handling.\n      if (isLContainer(childLView)) {\n        // Calculate the number of root nodes in all views in a given container\n        // and increment by one to account for an anchor node itself, i.e. in this\n        // scenario we'll have a layout that would look like this:\n        // `<app-root /><#VIEW1><#VIEW2>...<!--container-->`\n        // The `+1` is to capture the `<app-root />` element.\n        numRootNodes = calcNumRootNodesInLContainer(childLView) + 1;\n        annotateLContainerForHydration(childLView, context);\n        const componentLView = unwrapLView(childLView[HOST]);\n        serializedView = {\n          [TEMPLATE_ID]: componentLView[TVIEW].ssrId,\n          [NUM_ROOT_NODES]: numRootNodes\n        };\n      }\n    }\n    if (!serializedView) {\n      const childTView = childLView[TVIEW];\n      if (childTView.type === 1 /* TViewType.Component */) {\n        template = childTView.ssrId;\n        // This is a component view, thus it has only 1 root node: the component\n        // host node itself (other nodes would be inside that host node).\n        numRootNodes = 1;\n      } else {\n        template = getSsrId(childTView);\n        numRootNodes = calcNumRootNodes(childTView, childLView, childTView.firstChild);\n      }\n      serializedView = {\n        [TEMPLATE_ID]: template,\n        [NUM_ROOT_NODES]: numRootNodes,\n        ...serializeLView(lContainer[i], context)\n      };\n    }\n    // Check if the previous view has the same shape (for example, it was\n    // produced by the *ngFor), in which case bump the counter on the previous\n    // view instead of including the same information again.\n    const currentViewAsString = JSON.stringify(serializedView);\n    if (views.length > 0 && currentViewAsString === lastViewAsString) {\n      var _previousView$MULTIPL;\n      const previousView = views[views.length - 1];\n      (_previousView$MULTIPL = previousView[MULTIPLIER]) !== null && _previousView$MULTIPL !== void 0 ? _previousView$MULTIPL : previousView[MULTIPLIER] = 1;\n      previousView[MULTIPLIER]++;\n    } else {\n      // Record this view as most recently added.\n      lastViewAsString = currentViewAsString;\n      views.push(serializedView);\n    }\n  }\n  return views;\n}\n/**\n * Helper function to produce a node path (which navigation steps runtime logic\n * needs to take to locate a node) and stores it in the `NODES` section of the\n * current serialized view.\n */\nfunction appendSerializedNodePath(ngh, tNode, lView) {\n  var _ngh$NODES;\n  const noOffsetIndex = tNode.index - HEADER_OFFSET;\n  (_ngh$NODES = ngh[NODES]) !== null && _ngh$NODES !== void 0 ? _ngh$NODES : ngh[NODES] = {};\n  ngh[NODES][noOffsetIndex] = calcPathForNode(tNode, lView);\n}\n/**\n * Helper function to append information about a disconnected node.\n * This info is needed at runtime to avoid DOM lookups for this element\n * and instead, the element would be created from scratch.\n */\nfunction appendDisconnectedNodeIndex(ngh, tNode) {\n  var _ngh$DISCONNECTED_NOD;\n  const noOffsetIndex = tNode.index - HEADER_OFFSET;\n  (_ngh$DISCONNECTED_NOD = ngh[DISCONNECTED_NODES]) !== null && _ngh$DISCONNECTED_NOD !== void 0 ? _ngh$DISCONNECTED_NOD : ngh[DISCONNECTED_NODES] = [];\n  if (!ngh[DISCONNECTED_NODES].includes(noOffsetIndex)) {\n    ngh[DISCONNECTED_NODES].push(noOffsetIndex);\n  }\n}\n/**\n * Serializes the lView data into a SerializedView object that will later be added\n * to the TransferState storage and referenced using the `ngh` attribute on a host\n * element.\n *\n * @param lView the lView we are serializing\n * @param context the hydration context\n * @returns the `SerializedView` object containing the data to be added to the host node\n */\nfunction serializeLView(lView, context) {\n  const ngh = {};\n  const tView = lView[TVIEW];\n  // Iterate over DOM element references in an LView.\n  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {\n    const tNode = tView.data[i];\n    const noOffsetIndex = i - HEADER_OFFSET;\n    // Skip processing of a given slot in the following cases:\n    // - Local refs (e.g. <div #localRef>) take up an extra slot in LViews\n    //   to store the same element. In this case, there is no information in\n    //   a corresponding slot in TNode data structure.\n    // - When a slot contains something other than a TNode. For example, there\n    //   might be some metadata information about a defer block or a control flow block.\n    if (!isTNodeShape(tNode)) {\n      continue;\n    }\n    // Check if a native node that represents a given TNode is disconnected from the DOM tree.\n    // Such nodes must be excluded from the hydration (since the hydration won't be able to\n    // find them), so the TNode ids are collected and used at runtime to skip the hydration.\n    //\n    // This situation may happen during the content projection, when some nodes don't make it\n    // into one of the content projection slots (for example, when there is no default\n    // <ng-content /> slot in projector component's template).\n    if (isDisconnectedNode(tNode, lView) && isContentProjectedNode(tNode)) {\n      appendDisconnectedNodeIndex(ngh, tNode);\n      continue;\n    }\n    if (Array.isArray(tNode.projection)) {\n      for (const projectionHeadTNode of tNode.projection) {\n        // We may have `null`s in slots with no projected content.\n        if (!projectionHeadTNode) continue;\n        if (!Array.isArray(projectionHeadTNode)) {\n          // If we process re-projected content (i.e. `<ng-content>`\n          // appears at projection location), skip annotations for this content\n          // since all DOM nodes in this projection were handled while processing\n          // a parent lView, which contains those nodes.\n          if (!isProjectionTNode(projectionHeadTNode) && !isInSkipHydrationBlock(projectionHeadTNode)) {\n            if (isDisconnectedNode(projectionHeadTNode, lView)) {\n              // Check whether this node is connected, since we may have a TNode\n              // in the data structure as a projection segment head, but the\n              // content projection slot might be disabled (e.g.\n              // <ng-content *ngIf=\"false\" />).\n              appendDisconnectedNodeIndex(ngh, projectionHeadTNode);\n            } else {\n              appendSerializedNodePath(ngh, projectionHeadTNode, lView);\n            }\n          }\n        } else {\n          // If a value is an array, it means that we are processing a projection\n          // where projectable nodes were passed in as DOM nodes (for example, when\n          // calling `ViewContainerRef.createComponent(CmpA, {projectableNodes: [...]})`).\n          //\n          // In this scenario, nodes can come from anywhere (either created manually,\n          // accessed via `document.querySelector`, etc) and may be in any state\n          // (attached or detached from the DOM tree). As a result, we can not reliably\n          // restore the state for such cases during hydration.\n          throw unsupportedProjectionOfDomNodes(unwrapRNode(lView[i]));\n        }\n      }\n    }\n    conditionallyAnnotateNodePath(ngh, tNode, lView);\n    if (isLContainer(lView[i])) {\n      var _ngh$CONTAINERS;\n      // Serialize information about a template.\n      const embeddedTView = tNode.tView;\n      if (embeddedTView !== null) {\n        var _ngh$TEMPLATES;\n        (_ngh$TEMPLATES = ngh[TEMPLATES]) !== null && _ngh$TEMPLATES !== void 0 ? _ngh$TEMPLATES : ngh[TEMPLATES] = {};\n        ngh[TEMPLATES][noOffsetIndex] = getSsrId(embeddedTView);\n      }\n      // Serialize views within this LContainer.\n      const hostNode = lView[i][HOST]; // host node of this container\n      // LView[i][HOST] can be of 2 different types:\n      // - either a DOM node\n      // - or an array that represents an LView of a component\n      if (Array.isArray(hostNode)) {\n        // This is a component, serialize info about it.\n        const targetNode = unwrapRNode(hostNode);\n        if (!targetNode.hasAttribute(SKIP_HYDRATION_ATTR_NAME)) {\n          annotateHostElementForHydration(targetNode, hostNode, context);\n        }\n      }\n      (_ngh$CONTAINERS = ngh[CONTAINERS]) !== null && _ngh$CONTAINERS !== void 0 ? _ngh$CONTAINERS : ngh[CONTAINERS] = {};\n      ngh[CONTAINERS][noOffsetIndex] = serializeLContainer(lView[i], context);\n    } else if (Array.isArray(lView[i])) {\n      // This is a component, annotate the host node with an `ngh` attribute.\n      const targetNode = unwrapRNode(lView[i][HOST]);\n      if (!targetNode.hasAttribute(SKIP_HYDRATION_ATTR_NAME)) {\n        annotateHostElementForHydration(targetNode, lView[i], context);\n      }\n    } else {\n      // <ng-container> case\n      if (tNode.type & 8 /* TNodeType.ElementContainer */) {\n        var _ngh$ELEMENT_CONTAINE;\n        // An <ng-container> is represented by the number of\n        // top-level nodes. This information is needed to skip over\n        // those nodes to reach a corresponding anchor node (comment node).\n        (_ngh$ELEMENT_CONTAINE = ngh[ELEMENT_CONTAINERS]) !== null && _ngh$ELEMENT_CONTAINE !== void 0 ? _ngh$ELEMENT_CONTAINE : ngh[ELEMENT_CONTAINERS] = {};\n        ngh[ELEMENT_CONTAINERS][noOffsetIndex] = calcNumRootNodes(tView, lView, tNode.child);\n      } else if (tNode.type & 16 /* TNodeType.Projection */) {\n        // Current TNode represents an `<ng-content>` slot, thus it has no\n        // DOM elements associated with it, so the **next sibling** node would\n        // not be able to find an anchor. In this case, use full path instead.\n        let nextTNode = tNode.next;\n        // Skip over all `<ng-content>` slots in a row.\n        while (nextTNode !== null && nextTNode.type & 16 /* TNodeType.Projection */) {\n          nextTNode = nextTNode.next;\n        }\n        if (nextTNode && !isInSkipHydrationBlock(nextTNode)) {\n          // Handle a tNode after the `<ng-content>` slot.\n          appendSerializedNodePath(ngh, nextTNode, lView);\n        }\n      } else {\n        // Handle cases where text nodes can be lost after DOM serialization:\n        //  1. When there is an *empty text node* in DOM: in this case, this\n        //     node would not make it into the serialized string and as a result,\n        //     this node wouldn't be created in a browser. This would result in\n        //     a mismatch during the hydration, where the runtime logic would expect\n        //     a text node to be present in live DOM, but no text node would exist.\n        //     Example: `<span>{{ name }}</span>` when the `name` is an empty string.\n        //     This would result in `<span></span>` string after serialization and\n        //     in a browser only the `span` element would be created. To resolve that,\n        //     an extra comment node is appended in place of an empty text node and\n        //     that special comment node is replaced with an empty text node *before*\n        //     hydration.\n        //  2. When there are 2 consecutive text nodes present in the DOM.\n        //     Example: `<div>Hello <ng-container *ngIf=\"true\">world</ng-container></div>`.\n        //     In this scenario, the live DOM would look like this:\n        //       <div>#text('Hello ') #text('world') #comment('container')</div>\n        //     Serialized string would look like this: `<div>Hello world<!--container--></div>`.\n        //     The live DOM in a browser after that would be:\n        //       <div>#text('Hello world') #comment('container')</div>\n        //     Notice how 2 text nodes are now \"merged\" into one. This would cause hydration\n        //     logic to fail, since it'd expect 2 text nodes being present, not one.\n        //     To fix this, we insert a special comment node in between those text nodes, so\n        //     serialized representation is: `<div>Hello <!--ngtns-->world<!--container--></div>`.\n        //     This forces browser to create 2 text nodes separated by a comment node.\n        //     Before running a hydration process, this special comment node is removed, so the\n        //     live DOM has exactly the same state as it was before serialization.\n        if (tNode.type & 1 /* TNodeType.Text */) {\n          var _rNode$nextSibling;\n          const rNode = unwrapRNode(lView[i]);\n          // Collect this node as required special annotation only when its\n          // contents is empty. Otherwise, such text node would be present on\n          // the client after server-side rendering and no special handling needed.\n          if (rNode.textContent === '') {\n            context.corruptedTextNodes.set(rNode, \"ngetn\" /* TextNodeMarker.EmptyNode */);\n          } else if (((_rNode$nextSibling = rNode.nextSibling) === null || _rNode$nextSibling === void 0 ? void 0 : _rNode$nextSibling.nodeType) === Node.TEXT_NODE) {\n            context.corruptedTextNodes.set(rNode, \"ngtns\" /* TextNodeMarker.Separator */);\n          }\n        }\n      }\n    }\n  }\n\n  return ngh;\n}\n/**\n * Serializes node location in cases when it's needed, specifically:\n *\n *  1. If `tNode.projectionNext` is different from `tNode.next` - it means that\n *     the next `tNode` after projection is different from the one in the original\n *     template. Since hydration relies on `tNode.next`, this serialized info\n *     if required to help runtime code find the node at the correct location.\n *  2. In certain content projection-based use-cases, it's possible that only\n *     a content of a projected element is rendered. In this case, content nodes\n *     require an extra annotation, since runtime logic can't rely on parent-child\n *     connection to identify the location of a node.\n */\nfunction conditionallyAnnotateNodePath(ngh, tNode, lView) {\n  // Handle case #1 described above.\n  if (tNode.projectionNext && tNode.projectionNext !== tNode.next && !isInSkipHydrationBlock(tNode.projectionNext)) {\n    appendSerializedNodePath(ngh, tNode.projectionNext, lView);\n  }\n  // Handle case #2 described above.\n  // Note: we only do that for the first node (i.e. when `tNode.prev === null`),\n  // the rest of the nodes would rely on the current node location, so no extra\n  // annotation is needed.\n  if (tNode.prev === null && tNode.parent !== null && isDisconnectedNode(tNode.parent, lView) && !isDisconnectedNode(tNode, lView)) {\n    appendSerializedNodePath(ngh, tNode, lView);\n  }\n}\n/**\n * Determines whether a component instance that is represented\n * by a given LView uses `ViewEncapsulation.ShadowDom`.\n */\nfunction componentUsesShadowDomEncapsulation(lView) {\n  var _getComponentDef;\n  const instance = lView[CONTEXT];\n  return instance !== null && instance !== void 0 && instance.constructor ? ((_getComponentDef = getComponentDef(instance.constructor)) === null || _getComponentDef === void 0 ? void 0 : _getComponentDef.encapsulation) === ViewEncapsulation$1.ShadowDom : false;\n}\n/**\n * Annotates component host element for hydration:\n * - by either adding the `ngh` attribute and collecting hydration-related info\n *   for the serialization and transferring to the client\n * - or by adding the `ngSkipHydration` attribute in case Angular detects that\n *   component contents is not compatible with hydration.\n *\n * @param element The Host element to be annotated\n * @param lView The associated LView\n * @param context The hydration context\n * @returns An index of serialized view from the transfer state object\n *          or `null` when a given component can not be serialized.\n */\nfunction annotateHostElementForHydration(element, lView, context) {\n  const renderer = lView[RENDERER];\n  if (hasI18n(lView) || componentUsesShadowDomEncapsulation(lView)) {\n    // Attach the skip hydration attribute if this component:\n    // - either has i18n blocks, since hydrating such blocks is not yet supported\n    // - or uses ShadowDom view encapsulation, since Domino doesn't support\n    //   shadow DOM, so we can not guarantee that client and server representations\n    //   would exactly match\n    renderer.setAttribute(element, SKIP_HYDRATION_ATTR_NAME, '');\n    return null;\n  } else {\n    const ngh = serializeLView(lView, context);\n    const index = context.serializedViewCollection.add(ngh);\n    renderer.setAttribute(element, NGH_ATTR_NAME, index.toString());\n    return index;\n  }\n}\n/**\n * Physically inserts the comment nodes to ensure empty text nodes and adjacent\n * text node separators are preserved after server serialization of the DOM.\n * These get swapped back for empty text nodes or separators once hydration happens\n * on the client.\n *\n * @param corruptedTextNodes The Map of text nodes to be replaced with comments\n * @param doc The document\n */\nfunction insertCorruptedTextNodeMarkers(corruptedTextNodes, doc) {\n  for (const [textNode, marker] of corruptedTextNodes) {\n    textNode.after(doc.createComment(marker));\n  }\n}\n/**\n * Detects whether a given TNode represents a node that\n * is being content projected.\n */\nfunction isContentProjectedNode(tNode) {\n  let currentTNode = tNode;\n  while (currentTNode != null) {\n    // If we come across a component host node in parent nodes -\n    // this TNode is in the content projection section.\n    if (isComponentHost(currentTNode)) {\n      return true;\n    }\n    currentTNode = currentTNode.parent;\n  }\n  return false;\n}\n\n/**\n * Indicates whether the hydration-related code was added,\n * prevents adding it multiple times.\n */\nlet isHydrationSupportEnabled = false;\n/**\n * Defines a period of time that Angular waits for the `ApplicationRef.isStable` to emit `true`.\n * If there was no event with the `true` value during this time, Angular reports a warning.\n */\nconst APPLICATION_IS_STABLE_TIMEOUT = 10000;\n/**\n * Brings the necessary hydration code in tree-shakable manner.\n * The code is only present when the `provideClientHydration` is\n * invoked. Otherwise, this code is tree-shaken away during the\n * build optimization step.\n *\n * This technique allows us to swap implementations of methods so\n * tree shaking works appropriately when hydration is disabled or\n * enabled. It brings in the appropriate version of the method that\n * supports hydration only when enabled.\n */\nfunction enableHydrationRuntimeSupport() {\n  if (!isHydrationSupportEnabled) {\n    isHydrationSupportEnabled = true;\n    enableRetrieveHydrationInfoImpl();\n    enableLocateOrCreateElementNodeImpl();\n    enableLocateOrCreateTextNodeImpl();\n    enableLocateOrCreateElementContainerNodeImpl();\n    enableLocateOrCreateContainerAnchorImpl();\n    enableLocateOrCreateContainerRefImpl();\n    enableFindMatchingDehydratedViewImpl();\n    enableApplyRootElementTransformImpl();\n  }\n}\n/**\n * Outputs a message with hydration stats into a console.\n */\nfunction printHydrationStats(injector) {\n  const console = injector.get(Console);\n  const message = `Angular hydrated ${ngDevMode.hydratedComponents} component(s) ` + `and ${ngDevMode.hydratedNodes} node(s), ` + `${ngDevMode.componentsSkippedHydration} component(s) were skipped. ` + `Learn more at https://angular.io/guide/hydration.`;\n  // tslint:disable-next-line:no-console\n  console.log(message);\n}\n/**\n * Returns a Promise that is resolved when an application becomes stable.\n */\nfunction whenStableWithTimeout(appRef, injector) {\n  const whenStablePromise = whenStable(appRef);\n  if (typeof ngDevMode !== 'undefined' && ngDevMode) {\n    const timeoutTime = APPLICATION_IS_STABLE_TIMEOUT;\n    const console = injector.get(Console);\n    const ngZone = injector.get(NgZone);\n    // The following call should not and does not prevent the app to become stable\n    // We cannot use RxJS timer here because the app would remain unstable.\n    // This also avoids an extra change detection cycle.\n    const timeoutId = ngZone.runOutsideAngular(() => {\n      return setTimeout(() => logWarningOnStableTimedout(timeoutTime, console), timeoutTime);\n    });\n    whenStablePromise.finally(() => clearTimeout(timeoutId));\n  }\n  return whenStablePromise;\n}\n/**\n * Returns a set of providers required to setup hydration support\n * for an application that is server side rendered. This function is\n * included into the `provideClientHydration` public API function from\n * the `platform-browser` package.\n *\n * The function sets up an internal flag that would be recognized during\n * the server side rendering time as well, so there is no need to\n * configure or change anything in NgUniversal to enable the feature.\n */\nfunction withDomHydration() {\n  return makeEnvironmentProviders([{\n    provide: IS_HYDRATION_DOM_REUSE_ENABLED,\n    useFactory: () => {\n      let isEnabled = true;\n      if (isPlatformBrowser()) {\n        // On the client, verify that the server response contains\n        // hydration annotations. Otherwise, keep hydration disabled.\n        const transferState = inject(TransferState, {\n          optional: true\n        });\n        isEnabled = !!(transferState !== null && transferState !== void 0 && transferState.get(NGH_DATA_KEY, null));\n        if (!isEnabled && typeof ngDevMode !== 'undefined' && ngDevMode) {\n          const console = inject(Console);\n          const message = formatRuntimeError(-505 /* RuntimeErrorCode.MISSING_HYDRATION_ANNOTATIONS */, 'Angular hydration was requested on the client, but there was no ' + 'serialized information present in the server response, ' + 'thus hydration was not enabled. ' + 'Make sure the `provideClientHydration()` is included into the list ' + 'of providers in the server part of the application configuration.');\n          // tslint:disable-next-line:no-console\n          console.warn(message);\n        }\n      }\n      if (isEnabled) {\n        performanceMarkFeature('NgHydration');\n      }\n      return isEnabled;\n    }\n  }, {\n    provide: ENVIRONMENT_INITIALIZER,\n    useValue: () => {\n      // Since this function is used across both server and client,\n      // make sure that the runtime code is only added when invoked\n      // on the client. Moving forward, the `isPlatformBrowser` check should\n      // be replaced with a tree-shakable alternative (e.g. `isServer`\n      // flag).\n      if (isPlatformBrowser() && inject(IS_HYDRATION_DOM_REUSE_ENABLED)) {\n        verifySsrContentsIntegrity();\n        enableHydrationRuntimeSupport();\n      }\n    },\n    multi: true\n  }, {\n    provide: PRESERVE_HOST_CONTENT,\n    useFactory: () => {\n      // Preserve host element content only in a browser\n      // environment and when hydration is configured properly.\n      // On a server, an application is rendered from scratch,\n      // so the host content needs to be empty.\n      return isPlatformBrowser() && inject(IS_HYDRATION_DOM_REUSE_ENABLED);\n    }\n  }, {\n    provide: APP_BOOTSTRAP_LISTENER,\n    useFactory: () => {\n      if (isPlatformBrowser() && inject(IS_HYDRATION_DOM_REUSE_ENABLED)) {\n        const appRef = inject(ApplicationRef);\n        const injector = inject(Injector);\n        return () => {\n          // Wait until an app becomes stable and cleanup all views that\n          // were not claimed during the application bootstrap process.\n          // The timing is similar to when we start the serialization process\n          // on the server.\n          //\n          // Note: the cleanup task *MUST* be scheduled within the Angular zone\n          // to ensure that change detection is properly run afterward.\n          whenStableWithTimeout(appRef, injector).then(() => {\n            NgZone.assertInAngularZone();\n            cleanupDehydratedViews(appRef);\n            if (typeof ngDevMode !== 'undefined' && ngDevMode) {\n              printHydrationStats(injector);\n            }\n          });\n        };\n      }\n      return () => {}; // noop\n    },\n\n    multi: true\n  }]);\n}\n/**\n *\n * @param time The time in ms until the stable timedout warning message is logged\n */\nfunction logWarningOnStableTimedout(time, console) {\n  const message = `Angular hydration expected the ApplicationRef.isStable() to emit \\`true\\`, but it ` + `didn't happen within ${time}ms. Angular hydration logic depends on the application becoming stable ` + `as a signal to complete hydration process.`;\n  console.warn(formatRuntimeError(-506 /* RuntimeErrorCode.HYDRATION_STABLE_TIMEDOUT */, message));\n}\n/**\n * Verifies whether the DOM contains a special marker added during SSR time to make sure\n * there is no SSR'ed contents transformations happen after SSR is completed. Typically that\n * happens either by CDN or during the build process as an optimization to remove comment nodes.\n * Hydration process requires comment nodes produced by Angular to locate correct DOM segments.\n * When this special marker is *not* present - throw an error and do not proceed with hydration,\n * since it will not be able to function correctly.\n *\n * Note: this function is invoked only on the client, so it's safe to use DOM APIs.\n */\nfunction verifySsrContentsIntegrity() {\n  const doc = getDocument();\n  let hydrationMarker;\n  for (const node of doc.body.childNodes) {\n    var _node$textContent4;\n    if (node.nodeType === Node.COMMENT_NODE && ((_node$textContent4 = node.textContent) === null || _node$textContent4 === void 0 ? void 0 : _node$textContent4.trim()) === SSR_CONTENT_INTEGRITY_MARKER) {\n      hydrationMarker = node;\n      break;\n    }\n  }\n  if (!hydrationMarker) {\n    throw new RuntimeError(-507 /* RuntimeErrorCode.MISSING_SSR_CONTENT_INTEGRITY_MARKER */, typeof ngDevMode !== 'undefined' && ngDevMode && 'Angular hydration logic detected that HTML content of this page was modified after it ' + 'was produced during server side rendering. Make sure that there are no optimizations ' + 'that remove comment nodes from HTML enabled on your CDN. Angular hydration ' + 'relies on HTML produced by the server, including whitespaces and comment nodes.');\n  }\n}\n\n/**\n * Transforms a value (typically a string) to a boolean.\n * Intended to be used as a transform function of an input.\n *\n *  @usageNotes\n *  ```typescript\n *  @Input({ transform: booleanAttribute }) status!: boolean;\n *  ```\n * @param value Value to be transformed.\n *\n * @publicApi\n */\nfunction booleanAttribute(value) {\n  return typeof value === 'boolean' ? value : value != null && value !== 'false';\n}\n/**\n * Transforms a value (typically a string) to a number.\n * Intended to be used as a transform function of an input.\n * @param value Value to be transformed.\n * @param fallbackValue Value to use if the provided value can't be parsed as a number.\n *\n *  @usageNotes\n *  ```typescript\n *  @Input({ transform: numberAttribute }) id!: number;\n *  ```\n *\n * @publicApi\n */\nfunction numberAttribute(value, fallbackValue = NaN) {\n  // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n  // and other non-number values as NaN, where Number just uses 0) but it considers the string\n  // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n  const isNumberValue = !isNaN(parseFloat(value)) && !isNaN(Number(value));\n  return isNumberValue ? Number(value) : fallbackValue;\n}\n\n/**\n * Compiles a partial directive declaration object into a full directive definition object.\n *\n * @codeGenApi\n */\nfunction ɵɵngDeclareDirective(decl) {\n  const compiler = getCompilerFacade({\n    usage: 1 /* JitCompilerUsage.PartialDeclaration */,\n    kind: 'directive',\n    type: decl.type\n  });\n  return compiler.compileDirectiveDeclaration(angularCoreEnv, `ng:///${decl.type.name}/ɵfac.js`, decl);\n}\n/**\n * Evaluates the class metadata declaration.\n *\n * @codeGenApi\n */\nfunction ɵɵngDeclareClassMetadata(decl) {\n  var _decl$ctorParameters, _decl$propDecorators;\n  setClassMetadata(decl.type, decl.decorators, (_decl$ctorParameters = decl.ctorParameters) !== null && _decl$ctorParameters !== void 0 ? _decl$ctorParameters : null, (_decl$propDecorators = decl.propDecorators) !== null && _decl$propDecorators !== void 0 ? _decl$propDecorators : null);\n}\n/**\n * Compiles a partial component declaration object into a full component definition object.\n *\n * @codeGenApi\n */\nfunction ɵɵngDeclareComponent(decl) {\n  const compiler = getCompilerFacade({\n    usage: 1 /* JitCompilerUsage.PartialDeclaration */,\n    kind: 'component',\n    type: decl.type\n  });\n  return compiler.compileComponentDeclaration(angularCoreEnv, `ng:///${decl.type.name}/ɵcmp.js`, decl);\n}\n/**\n * Compiles a partial pipe declaration object into a full pipe definition object.\n *\n * @codeGenApi\n */\nfunction ɵɵngDeclareFactory(decl) {\n  const compiler = getCompilerFacade({\n    usage: 1 /* JitCompilerUsage.PartialDeclaration */,\n    kind: getFactoryKind(decl.target),\n    type: decl.type\n  });\n  return compiler.compileFactoryDeclaration(angularCoreEnv, `ng:///${decl.type.name}/ɵfac.js`, decl);\n}\nfunction getFactoryKind(target) {\n  switch (target) {\n    case FactoryTarget.Directive:\n      return 'directive';\n    case FactoryTarget.Component:\n      return 'component';\n    case FactoryTarget.Injectable:\n      return 'injectable';\n    case FactoryTarget.Pipe:\n      return 'pipe';\n    case FactoryTarget.NgModule:\n      return 'NgModule';\n  }\n}\n/**\n * Compiles a partial injectable declaration object into a full injectable definition object.\n *\n * @codeGenApi\n */\nfunction ɵɵngDeclareInjectable(decl) {\n  const compiler = getCompilerFacade({\n    usage: 1 /* JitCompilerUsage.PartialDeclaration */,\n    kind: 'injectable',\n    type: decl.type\n  });\n  return compiler.compileInjectableDeclaration(angularCoreEnv, `ng:///${decl.type.name}/ɵprov.js`, decl);\n}\n/**\n * Compiles a partial injector declaration object into a full injector definition object.\n *\n * @codeGenApi\n */\nfunction ɵɵngDeclareInjector(decl) {\n  const compiler = getCompilerFacade({\n    usage: 1 /* JitCompilerUsage.PartialDeclaration */,\n    kind: 'NgModule',\n    type: decl.type\n  });\n  return compiler.compileInjectorDeclaration(angularCoreEnv, `ng:///${decl.type.name}/ɵinj.js`, decl);\n}\n/**\n * Compiles a partial NgModule declaration object into a full NgModule definition object.\n *\n * @codeGenApi\n */\nfunction ɵɵngDeclareNgModule(decl) {\n  const compiler = getCompilerFacade({\n    usage: 1 /* JitCompilerUsage.PartialDeclaration */,\n    kind: 'NgModule',\n    type: decl.type\n  });\n  return compiler.compileNgModuleDeclaration(angularCoreEnv, `ng:///${decl.type.name}/ɵmod.js`, decl);\n}\n/**\n * Compiles a partial pipe declaration object into a full pipe definition object.\n *\n * @codeGenApi\n */\nfunction ɵɵngDeclarePipe(decl) {\n  const compiler = getCompilerFacade({\n    usage: 1 /* JitCompilerUsage.PartialDeclaration */,\n    kind: 'pipe',\n    type: decl.type\n  });\n  return compiler.compilePipeDeclaration(angularCoreEnv, `ng:///${decl.type.name}/ɵpipe.js`, decl);\n}\n\n// clang-format off\n// clang-format on\n\n// This file exists to allow the set of reactivity exports to be modified in g3, as these APIs are\n\n/**\n * Creates a `ComponentRef` instance based on provided component type and a set of options.\n *\n * @usageNotes\n *\n * The example below demonstrates how the `createComponent` function can be used\n * to create an instance of a ComponentRef dynamically and attach it to an ApplicationRef,\n * so that it gets included into change detection cycles.\n *\n * Note: the example uses standalone components, but the function can also be used for\n * non-standalone components (declared in an NgModule) as well.\n *\n * ```typescript\n * @Component({\n *   standalone: true,\n *   template: `Hello {{ name }}!`\n * })\n * class HelloComponent {\n *   name = 'Angular';\n * }\n *\n * @Component({\n *   standalone: true,\n *   template: `<div id=\"hello-component-host\"></div>`\n * })\n * class RootComponent {}\n *\n * // Bootstrap an application.\n * const applicationRef = await bootstrapApplication(RootComponent);\n *\n * // Locate a DOM node that would be used as a host.\n * const hostElement = document.getElementById('hello-component-host');\n *\n * // Get an `EnvironmentInjector` instance from the `ApplicationRef`.\n * const environmentInjector = applicationRef.injector;\n *\n * // We can now create a `ComponentRef` instance.\n * const componentRef = createComponent(HelloComponent, {hostElement, environmentInjector});\n *\n * // Last step is to register the newly created ref using the `ApplicationRef` instance\n * // to include the component view into change detection cycles.\n * applicationRef.attachView(componentRef.hostView);\n * componentRef.changeDetectorRef.detectChanges();\n * ```\n *\n * @param component Component class reference.\n * @param options Set of options to use:\n *  * `environmentInjector`: An `EnvironmentInjector` instance to be used for the component, see\n * additional info about it [here](/guide/standalone-components#environment-injectors).\n *  * `hostElement` (optional): A DOM node that should act as a host node for the component. If not\n * provided, Angular creates one based on the tag name used in the component selector (and falls\n * back to using `div` if selector doesn't have tag name info).\n *  * `elementInjector` (optional): An `ElementInjector` instance, see additional info about it\n * [here](/guide/hierarchical-dependency-injection#elementinjector).\n *  * `projectableNodes` (optional): A list of DOM nodes that should be projected through\n *                      [`<ng-content>`](api/core/ng-content) of the new component instance.\n * @returns ComponentRef instance that represents a given Component.\n *\n * @publicApi\n */\nfunction createComponent(component, options) {\n  ngDevMode && assertComponentDef(component);\n  const componentDef = getComponentDef(component);\n  const elementInjector = options.elementInjector || getNullInjector();\n  const factory = new ComponentFactory(componentDef);\n  return factory.create(elementInjector, options.projectableNodes, options.hostElement, options.environmentInjector);\n}\n/**\n * Creates an object that allows to retrieve component metadata.\n *\n * @usageNotes\n *\n * The example below demonstrates how to use the function and how the fields\n * of the returned object map to the component metadata.\n *\n * ```typescript\n * @Component({\n *   standalone: true,\n *   selector: 'foo-component',\n *   template: `\n *     <ng-content></ng-content>\n *     <ng-content select=\"content-selector-a\"></ng-content>\n *   `,\n * })\n * class FooComponent {\n *   @Input('inputName') inputPropName: string;\n *   @Output('outputName') outputPropName = new EventEmitter<void>();\n * }\n *\n * const mirror = reflectComponentType(FooComponent);\n * expect(mirror.type).toBe(FooComponent);\n * expect(mirror.selector).toBe('foo-component');\n * expect(mirror.isStandalone).toBe(true);\n * expect(mirror.inputs).toEqual([{propName: 'inputName', templateName: 'inputPropName'}]);\n * expect(mirror.outputs).toEqual([{propName: 'outputName', templateName: 'outputPropName'}]);\n * expect(mirror.ngContentSelectors).toEqual([\n *   '*',                 // first `<ng-content>` in a template, the selector defaults to `*`\n *   'content-selector-a' // second `<ng-content>` in a template\n * ]);\n * ```\n *\n * @param component Component class reference.\n * @returns An object that allows to retrieve component metadata.\n *\n * @publicApi\n */\nfunction reflectComponentType(component) {\n  const componentDef = getComponentDef(component);\n  if (!componentDef) return null;\n  const factory = new ComponentFactory(componentDef);\n  return {\n    get selector() {\n      return factory.selector;\n    },\n    get type() {\n      return factory.componentType;\n    },\n    get inputs() {\n      return factory.inputs;\n    },\n    get outputs() {\n      return factory.outputs;\n    },\n    get ngContentSelectors() {\n      return factory.ngContentSelectors;\n    },\n    get isStandalone() {\n      return componentDef.standalone;\n    },\n    get isSignal() {\n      return componentDef.signals;\n    }\n  };\n}\n\n/**\n * Merge multiple application configurations from left to right.\n *\n * @param configs Two or more configurations to be merged.\n * @returns A merged [ApplicationConfig](api/core/ApplicationConfig).\n *\n * @publicApi\n */\nfunction mergeApplicationConfig(...configs) {\n  return configs.reduce((prev, curr) => {\n    return Object.assign(prev, curr, {\n      providers: [...prev.providers, ...curr.providers]\n    });\n  }, {\n    providers: []\n  });\n}\n\n/**\n * @module\n * @description\n * Entry point from which you should import all public core APIs.\n */\nif (typeof ngDevMode !== 'undefined' && ngDevMode) {\n  var _global$$localize;\n  // This helper is to give a reasonable error message to people upgrading to v9 that have not yet\n  // installed `@angular/localize` in their app.\n  // tslint:disable-next-line: no-toplevel-property-access\n  (_global$$localize = _global.$localize) !== null && _global$$localize !== void 0 ? _global$$localize : _global.$localize = function () {\n    throw new Error('It looks like your application or one of its dependencies is using i18n.\\n' + 'Angular 9 introduced a global `$localize()` function that needs to be loaded.\\n' + 'Please run `ng add @angular/localize` from the Angular CLI.\\n' + '(For non-CLI projects, add `import \\'@angular/localize/init\\';` to your `polyfills.ts` file.\\n' + 'For server-side rendering applications add the import to your `main.server.ts` file.)');\n  };\n}\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/* This file is not used to build this module. It is only used during editing\n * by the TypeScript language service and during build for verification. `ngc`\n * replaces this file with production index.ts when it rewrites private symbol\n * names.\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ANIMATION_MODULE_TYPE, APP_BOOTSTRAP_LISTENER, APP_ID, APP_INITIALIZER, AfterRenderPhase, ApplicationInitStatus, ApplicationModule, ApplicationRef, Attribute, COMPILER_OPTIONS, CSP_NONCE, CUSTOM_ELEMENTS_SCHEMA, ChangeDetectionStrategy, ChangeDetectorRef, Compiler, CompilerFactory, Component, ComponentFactory$1 as ComponentFactory, ComponentFactoryResolver$1 as ComponentFactoryResolver, ComponentRef$1 as ComponentRef, ContentChild, ContentChildren, DEFAULT_CURRENCY_CODE, DebugElement, DebugEventListener, DebugNode, DefaultIterableDiffer, DestroyRef, Directive, ENVIRONMENT_INITIALIZER, ElementRef, EmbeddedViewRef, EnvironmentInjector, ErrorHandler, EventEmitter, Host, HostBinding, HostListener, INJECTOR, Inject, InjectFlags, Injectable, InjectionToken, Injector, Input, IterableDiffers, KeyValueDiffers, LOCALE_ID, MissingTranslationStrategy, ModuleWithComponentFactories, NO_ERRORS_SCHEMA, NgModule, NgModuleFactory$1 as NgModuleFactory, NgModuleRef$1 as NgModuleRef, NgProbeToken, NgZone, Optional, Output, PACKAGE_ROOT_URL, PLATFORM_ID, PLATFORM_INITIALIZER, Pipe, PlatformRef, Query, QueryList, Renderer2, RendererFactory2, RendererStyleFlags2, Sanitizer, SecurityContext, Self, SimpleChange, SkipSelf, TRANSLATIONS, TRANSLATIONS_FORMAT, TemplateRef, Testability, TestabilityRegistry, TransferState, Type, VERSION, Version, ViewChild, ViewChildren, ViewContainerRef, ViewEncapsulation$1 as ViewEncapsulation, ViewRef, afterNextRender, afterRender, asNativeElements, assertInInjectionContext, assertNotInReactiveContext, assertPlatform, booleanAttribute, computed, createComponent, createEnvironmentInjector, createNgModule, createNgModuleRef, createPlatform, createPlatformFactory, defineInjectable, destroyPlatform, effect, enableProdMode, forwardRef, getDebugNode, getModuleFactory, getNgModuleById, getPlatform, importProvidersFrom, inject, isDevMode, isSignal, isStandalone, makeEnvironmentProviders, makeStateKey, mergeApplicationConfig, numberAttribute, platformCore, provideZoneChangeDetection, reflectComponentType, resolveForwardRef, runInInjectionContext, setTestabilityGetter, signal, untracked, ALLOW_MULTIPLE_PLATFORMS as ɵALLOW_MULTIPLE_PLATFORMS, AfterRenderEventManager as ɵAfterRenderEventManager, CONTAINER_HEADER_OFFSET as ɵCONTAINER_HEADER_OFFSET, ChangeDetectionScheduler as ɵChangeDetectionScheduler, ComponentFactory$1 as ɵComponentFactory, Console as ɵConsole, DEFAULT_LOCALE_ID as ɵDEFAULT_LOCALE_ID, DEFER_BLOCK_CONFIG as ɵDEFER_BLOCK_CONFIG, DEFER_BLOCK_DEPENDENCY_INTERCEPTOR as ɵDEFER_BLOCK_DEPENDENCY_INTERCEPTOR, DeferBlockBehavior as ɵDeferBlockBehavior, DeferBlockState as ɵDeferBlockState, EffectScheduler as ɵEffectScheduler, IMAGE_CONFIG as ɵIMAGE_CONFIG, IMAGE_CONFIG_DEFAULTS as ɵIMAGE_CONFIG_DEFAULTS, INJECTOR_SCOPE as ɵINJECTOR_SCOPE, IS_HYDRATION_DOM_REUSE_ENABLED as ɵIS_HYDRATION_DOM_REUSE_ENABLED, LContext as ɵLContext, LifecycleHooksFeature as ɵLifecycleHooksFeature, LocaleDataIndex as ɵLocaleDataIndex, NG_COMP_DEF as ɵNG_COMP_DEF, NG_DIR_DEF as ɵNG_DIR_DEF, NG_ELEMENT_ID as ɵNG_ELEMENT_ID, NG_INJ_DEF as ɵNG_INJ_DEF, NG_MOD_DEF as ɵNG_MOD_DEF, NG_PIPE_DEF as ɵNG_PIPE_DEF, NG_PROV_DEF as ɵNG_PROV_DEF, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR as ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, NO_CHANGE as ɵNO_CHANGE, NgModuleFactory as ɵNgModuleFactory, NoopNgZone as ɵNoopNgZone, PendingTasks as ɵPendingTasks, ReflectionCapabilities as ɵReflectionCapabilities, ComponentFactory as ɵRender3ComponentFactory, ComponentRef as ɵRender3ComponentRef, NgModuleRef as ɵRender3NgModuleRef, RuntimeError as ɵRuntimeError, SSR_CONTENT_INTEGRITY_MARKER as ɵSSR_CONTENT_INTEGRITY_MARKER, TESTABILITY as ɵTESTABILITY, TESTABILITY_GETTER as ɵTESTABILITY_GETTER, USE_RUNTIME_DEPS_TRACKER_FOR_JIT as ɵUSE_RUNTIME_DEPS_TRACKER_FOR_JIT, ViewRef$1 as ɵViewRef, XSS_SECURITY_URL as ɵXSS_SECURITY_URL, ZoneAwareQueueingScheduler as ɵZoneAwareQueueingScheduler, _sanitizeHtml as ɵ_sanitizeHtml, _sanitizeUrl as ɵ_sanitizeUrl, allowSanitizationBypassAndThrow as ɵallowSanitizationBypassAndThrow, annotateForHydration as ɵannotateForHydration, bypassSanitizationTrustHtml as ɵbypassSanitizationTrustHtml, bypassSanitizationTrustResourceUrl as ɵbypassSanitizationTrustResourceUrl, bypassSanitizationTrustScript as ɵbypassSanitizationTrustScript, bypassSanitizationTrustStyle as ɵbypassSanitizationTrustStyle, bypassSanitizationTrustUrl as ɵbypassSanitizationTrustUrl, clearResolutionOfComponentResourcesQueue as ɵclearResolutionOfComponentResourcesQueue, compileComponent as ɵcompileComponent, compileDirective as ɵcompileDirective, compileNgModule as ɵcompileNgModule, compileNgModuleDefs as ɵcompileNgModuleDefs, compileNgModuleFactory as ɵcompileNgModuleFactory, compilePipe as ɵcompilePipe, convertToBitFlags as ɵconvertToBitFlags, createInjector as ɵcreateInjector, defaultIterableDiffers as ɵdefaultIterableDiffers, defaultKeyValueDiffers as ɵdefaultKeyValueDiffers, depsTracker as ɵdepsTracker, devModeEqual as ɵdevModeEqual, findLocaleData as ɵfindLocaleData, flushModuleScopingQueueAsMuchAsPossible as ɵflushModuleScopingQueueAsMuchAsPossible, formatRuntimeError as ɵformatRuntimeError, generateStandaloneInDeclarationsError as ɵgenerateStandaloneInDeclarationsError, getAsyncClassMetadataFn as ɵgetAsyncClassMetadataFn, getDebugNode as ɵgetDebugNode, getDeferBlocks as ɵgetDeferBlocks, getDirectives as ɵgetDirectives, getEnsureDirtyViewsAreAlwaysReachable as ɵgetEnsureDirtyViewsAreAlwaysReachable, getHostElement as ɵgetHostElement, getInjectableDef as ɵgetInjectableDef, getLContext as ɵgetLContext, getLocaleCurrencyCode as ɵgetLocaleCurrencyCode, getLocalePluralCase as ɵgetLocalePluralCase, getSanitizationBypassType as ɵgetSanitizationBypassType, ɵgetUnknownElementStrictMode, ɵgetUnknownPropertyStrictMode, _global as ɵglobal, injectChangeDetectorRef as ɵinjectChangeDetectorRef, internalAfterNextRender as ɵinternalAfterNextRender, internalCreateApplication as ɵinternalCreateApplication, isBoundToModule as ɵisBoundToModule, isComponentDefPendingResolution as ɵisComponentDefPendingResolution, isEnvironmentProviders as ɵisEnvironmentProviders, isInjectable as ɵisInjectable, isNgModule as ɵisNgModule, isPromise as ɵisPromise, isSubscribable as ɵisSubscribable, noSideEffects as ɵnoSideEffects, patchComponentDefWithScope as ɵpatchComponentDefWithScope, performanceMarkFeature as ɵperformanceMarkFeature, publishDefaultGlobalUtils$1 as ɵpublishDefaultGlobalUtils, publishGlobalUtil as ɵpublishGlobalUtil, registerLocaleData as ɵregisterLocaleData, renderDeferBlockState as ɵrenderDeferBlockState, resetCompiledComponents as ɵresetCompiledComponents, resetJitOptions as ɵresetJitOptions, resolveComponentResources as ɵresolveComponentResources, restoreComponentResolutionQueue as ɵrestoreComponentResolutionQueue, setAllowDuplicateNgModuleIdsForTest as ɵsetAllowDuplicateNgModuleIdsForTest, setAlternateWeakRefImpl as ɵsetAlternateWeakRefImpl, ɵsetClassDebugInfo, setClassMetadata as ɵsetClassMetadata, setClassMetadataAsync as ɵsetClassMetadataAsync, setCurrentInjector as ɵsetCurrentInjector, setDocument as ɵsetDocument, setEnsureDirtyViewsAreAlwaysReachable as ɵsetEnsureDirtyViewsAreAlwaysReachable, setInjectorProfilerContext as ɵsetInjectorProfilerContext, setLocaleId as ɵsetLocaleId, ɵsetUnknownElementStrictMode, ɵsetUnknownPropertyStrictMode, store as ɵstore, stringify as ɵstringify, transitiveScopesFor as ɵtransitiveScopesFor, triggerResourceLoading as ɵtriggerResourceLoading, truncateMiddle as ɵtruncateMiddle, unregisterAllLocaleData as ɵunregisterLocaleData, unwrapSafeValue as ɵunwrapSafeValue, whenStable as ɵwhenStable, withDomHydration as ɵwithDomHydration, ɵɵCopyDefinitionFeature, FactoryTarget as ɵɵFactoryTarget, ɵɵHostDirectivesFeature, ɵɵInheritDefinitionFeature, ɵɵInputTransformsFeature, ɵɵNgOnChangesFeature, ɵɵProvidersFeature, ɵɵStandaloneFeature, ɵɵadvance, ɵɵattribute, ɵɵattributeInterpolate1, ɵɵattributeInterpolate2, ɵɵattributeInterpolate3, ɵɵattributeInterpolate4, ɵɵattributeInterpolate5, ɵɵattributeInterpolate6, ɵɵattributeInterpolate7, ɵɵattributeInterpolate8, ɵɵattributeInterpolateV, ɵɵclassMap, ɵɵclassMapInterpolate1, ɵɵclassMapInterpolate2, ɵɵclassMapInterpolate3, ɵɵclassMapInterpolate4, ɵɵclassMapInterpolate5, ɵɵclassMapInterpolate6, ɵɵclassMapInterpolate7, ɵɵclassMapInterpolate8, ɵɵclassMapInterpolateV, ɵɵclassProp, ɵɵcomponentInstance, ɵɵconditional, ɵɵcontentQuery, ɵɵdefer, ɵɵdeferEnableTimerScheduling, ɵɵdeferOnHover, ɵɵdeferOnIdle, ɵɵdeferOnImmediate, ɵɵdeferOnInteraction, ɵɵdeferOnTimer, ɵɵdeferOnViewport, ɵɵdeferPrefetchOnHover, ɵɵdeferPrefetchOnIdle, ɵɵdeferPrefetchOnImmediate, ɵɵdeferPrefetchOnInteraction, ɵɵdeferPrefetchOnTimer, ɵɵdeferPrefetchOnViewport, ɵɵdeferPrefetchWhen, ɵɵdeferWhen, ɵɵdefineComponent, ɵɵdefineDirective, ɵɵdefineInjectable, ɵɵdefineInjector, ɵɵdefineNgModule, ɵɵdefinePipe, ɵɵdirectiveInject, ɵɵdisableBindings, ɵɵelement, ɵɵelementContainer, ɵɵelementContainerEnd, ɵɵelementContainerStart, ɵɵelementEnd, ɵɵelementStart, ɵɵenableBindings, ɵɵgetComponentDepsFactory, ɵɵgetCurrentView, ɵɵgetInheritedFactory, ɵɵhostProperty, ɵɵi18n, ɵɵi18nApply, ɵɵi18nAttributes, ɵɵi18nEnd, ɵɵi18nExp, ɵɵi18nPostprocess, ɵɵi18nStart, ɵɵinject, ɵɵinjectAttribute, ɵɵinvalidFactory, ɵɵinvalidFactoryDep, ɵɵlistener, ɵɵloadQuery, ɵɵnamespaceHTML, ɵɵnamespaceMathML, ɵɵnamespaceSVG, ɵɵnextContext, ɵɵngDeclareClassMetadata, ɵɵngDeclareComponent, ɵɵngDeclareDirective, ɵɵngDeclareFactory, ɵɵngDeclareInjectable, ɵɵngDeclareInjector, ɵɵngDeclareNgModule, ɵɵngDeclarePipe, ɵɵpipe, ɵɵpipeBind1, ɵɵpipeBind2, ɵɵpipeBind3, ɵɵpipeBind4, ɵɵpipeBindV, ɵɵprojection, ɵɵprojectionDef, ɵɵproperty, ɵɵpropertyInterpolate, ɵɵpropertyInterpolate1, ɵɵpropertyInterpolate2, ɵɵpropertyInterpolate3, ɵɵpropertyInterpolate4, ɵɵpropertyInterpolate5, ɵɵpropertyInterpolate6, ɵɵpropertyInterpolate7, ɵɵpropertyInterpolate8, ɵɵpropertyInterpolateV, ɵɵpureFunction0, ɵɵpureFunction1, ɵɵpureFunction2, ɵɵpureFunction3, ɵɵpureFunction4, ɵɵpureFunction5, ɵɵpureFunction6, ɵɵpureFunction7, ɵɵpureFunction8, ɵɵpureFunctionV, ɵɵqueryRefresh, ɵɵreference, registerNgModuleType as ɵɵregisterNgModuleType, ɵɵrepeater, ɵɵrepeaterCreate, ɵɵrepeaterTrackByIdentity, ɵɵrepeaterTrackByIndex, ɵɵresetView, ɵɵresolveBody, ɵɵresolveDocument, ɵɵresolveWindow, ɵɵrestoreView, ɵɵsanitizeHtml, ɵɵsanitizeResourceUrl, ɵɵsanitizeScript, ɵɵsanitizeStyle, ɵɵsanitizeUrl, ɵɵsanitizeUrlOrResourceUrl, ɵɵsetComponentScope, ɵɵsetNgModuleScope, ɵɵstyleMap, ɵɵstyleMapInterpolate1, ɵɵstyleMapInterpolate2, ɵɵstyleMapInterpolate3, ɵɵstyleMapInterpolate4, ɵɵstyleMapInterpolate5, ɵɵstyleMapInterpolate6, ɵɵstyleMapInterpolate7, ɵɵstyleMapInterpolate8, ɵɵstyleMapInterpolateV, ɵɵstyleProp, ɵɵstylePropInterpolate1, ɵɵstylePropInterpolate2, ɵɵstylePropInterpolate3, ɵɵstylePropInterpolate4, ɵɵstylePropInterpolate5, ɵɵstylePropInterpolate6, ɵɵstylePropInterpolate7, ɵɵstylePropInterpolate8, ɵɵstylePropInterpolateV, ɵɵsyntheticHostListener, ɵɵsyntheticHostProperty, ɵɵtemplate, ɵɵtemplateRefExtractor, ɵɵtext, ɵɵtextInterpolate, ɵɵtextInterpolate1, ɵɵtextInterpolate2, ɵɵtextInterpolate3, ɵɵtextInterpolate4, ɵɵtextInterpolate5, ɵɵtextInterpolate6, ɵɵtextInterpolate7, ɵɵtextInterpolate8, ɵɵtextInterpolateV, ɵɵtrustConstantHtml, ɵɵtrustConstantResourceUrl, ɵɵvalidateIframeAttribute, ɵɵviewQuery };","map":{"version":3,"names":["setActiveConsumer","setActiveConsumer$1","consumerDestroy","consumerDestroy$1","SIGNAL","SIGNAL$1","createComputed","createComputed$1","createSignal","createSignal$1","signalSetFn","signalSetFn$1","signalUpdateFn","signalUpdateFn$1","REACTIVE_NODE","REACTIVE_NODE$1","consumerBeforeComputation","consumerBeforeComputation$1","consumerAfterComputation","consumerAfterComputation$1","consumerPollProducersForChange","consumerPollProducersForChange$1","getActiveConsumer","getActiveConsumer$1","createWatch","createWatch$1","setThrowInvalidWriteToSignalError","setThrowInvalidWriteToSignalError$1","Subject","Subscription","BehaviorSubject","map","first","getClosureSafeProperty","objWithPropertyToExtract","key","Error","fillProperties","target","source","hasOwnProperty","stringify","token","Array","isArray","join","overriddenName","name","res","toString","newLineIndex","indexOf","substring","concatStringsWithSpace","before","after","truncateMiddle","str","maxLength","length","halfLimit","Math","round","__forward_ref__","forwardRef","forwardRefFn","resolveForwardRef","type","isForwardRef","fn","isEnvironmentProviders","value","ɵproviders","ERROR_DETAILS_PAGE_BASE_URL","XSS_SECURITY_URL","RuntimeError","constructor","code","message","formatRuntimeError","fullCode","abs","errorMessage","ngDevMode","addPeriodSeparator","match","separator","NG_COMP_DEF","ɵcmp","NG_DIR_DEF","ɵdir","NG_PIPE_DEF","ɵpipe","NG_MOD_DEF","ɵmod","NG_FACTORY_DEF","ɵfac","NG_ELEMENT_ID","__NG_ELEMENT_ID__","NG_ENV_ID","__NG_ENV_ID__","renderStringify","String","stringifyForError","debugStringifyTypeForError","componentDef","debugInfo","stringifyTypeFromDebugInfo","filePath","lineNumber","className","throwCyclicDependencyError","path","depPath","throwMixedMultiProviderError","throwInvalidProviderError","ngModuleType","providers","provider","providerDetail","v","ɵfromNgModule","throwProviderNotFoundError","injectorName","injectorDetails","assertNumber","actual","msg","throwError","assertNumberInRange","minInclusive","maxInclusive","assertLessThanOrEqual","assertGreaterThanOrEqual","assertString","assertFunction","assertEqual","expected","assertNotEqual","assertSame","assertNotSame","assertLessThan","assertGreaterThan","assertNotDefined","assertDefined","comparison","assertDomNode","node","Node","assertElement","Element","assertIndexInRange","arr","index","maxLen","assertOneOf","validValues","JSON","ɵɵdefineInjectable","opts","providedIn","factory","undefined","defineInjectable","ɵɵdefineInjector","options","imports","getInjectableDef","getOwnDefinition","NG_PROV_DEF","NG_INJECTABLE_DEF","isInjectable","field","getInheritedInjectableDef","def","console","warn","getInjectorDef","NG_INJ_DEF","NG_INJECTOR_DEF","ɵprov","ɵinj","ngInjectableDef","ngInjectorDef","InjectFlags","_injectImplementation","getInjectImplementation","setInjectImplementation","impl","previous","injectRootLimpMode","notFoundValue","flags","injectableDef","Optional","assertInjectImplementationNotEqual","_global","globalThis","ngDevModeResetPerfCounters","locationString","location","newCounters","namedConstructors","firstCreatePass","tNode","tView","rendererCreateTextNode","rendererSetText","rendererCreateElement","rendererAddEventListener","rendererSetAttribute","rendererRemoveAttribute","rendererSetProperty","rendererSetClassName","rendererAddClass","rendererRemoveClass","rendererSetStyle","rendererRemoveStyle","rendererDestroy","rendererDestroyNode","rendererMoveNode","rendererRemoveNode","rendererAppendChild","rendererInsertBefore","rendererCreateComment","hydratedNodes","hydratedComponents","dehydratedViewsRemoved","dehydratedViewsCleanupRuns","componentsSkippedHydration","allowNgDevModeTrue","initNgDevMode","InjectionToken","_desc","ngMetadataName","multi","_injectorProfilerContext","getInjectorProfilerContext","setInjectorProfilerContext","context","injectorProfilerCallback","setInjectorProfiler","injectorProfiler","event","emitProviderConfiguredEvent","eventProvider","isViewProvider","provide","providerRecord","emitInstanceCreatedByInjectorEvent","instance","emitInjectEvent","service","runInInjectorProfilerContext","injector","callback","prevInjectContext","_THROW_IF_NOT_FOUND","THROW_IF_NOT_FOUND","DI_DECORATOR_FLAG","NG_TEMP_TOKEN_PATH","NG_TOKEN_PATH","NEW_LINE","NO_NEW_LINE","SOURCE","_currentInjector","getCurrentInjector","setCurrentInjector","former","injectInjectorOnly","Default","get","ɵɵinject","ɵɵinvalidFactoryDep","inject","convertToBitFlags","optional","host","self","skipSelf","injectArgs","types","args","i","arg","j","meta","flag","getInjectFlag","push","attachInjectFlag","decorator","prototype","catchInjectorError","e","injectorErrorName","tokenPath","unshift","formatError","text","obj","charAt","slice","parts","replace","noSideEffects","ChangeDetectionStrategy","ViewEncapsulation$1","ViewEncapsulation","EMPTY_OBJ","EMPTY_ARRAY","Object","freeze","classIndexOf","classToSearch","startingIndex","end","foundIndex","charCodeAt","setUpAttributes","renderer","native","attrs","namespaceURI","attrName","attrVal","setAttribute","isAnimationProp","setProperty","isNameOnlyAttributeMarker","marker","mergeHostAttrs","dst","src","srcMarker","item","mergeHostAttribute","key1","key2","markerInsertPosition","dstValue","splice","NG_TEMPLATE_SELECTOR","isCssClassMatching","cssClassToMatch","isProjectionMode","toLowerCase","isImplicitAttrsSection","isInlineTemplate","hasTagAndTypeMatch","currentSelector","tagNameToCompare","isNodeMatchingSelector","selector","mode","nodeAttrs","nameOnlyMarkerIdx","getNameOnlyMarkerIndex","skipToNextSelector","current","isPositive","selectorAttrValue","attrIndexInNode","findAttrIndexInNode","nodeAttrValue","compareAgainstClassName","bindingsMode","maybeAttrName","matchTemplateAttribute","isNodeMatchingSelectorList","getProjectAsAttrValue","ngProjectAsAttrIdx","nodeAttr","attr","isSelectorInSelectorList","list","selectorListLoop","currentSelectorInList","maybeWrapInNotSelector","isNegativeMode","chunk","trim","stringifyCSSSelector","result","currentChunk","valueOrMarker","attrValue","stringifyCSSSelectorList","selectorList","extractAttrsAndClassesFromSelector","classes","ɵɵdefineComponent","componentDefinition","_componentDefinition$","baseDef","getNgDirectiveDef","decls","vars","template","consts","ngContentSelectors","onPush","changeDetection","OnPush","directiveDefs","pipeDefs","dependencies","standalone","getStandaloneInjector","signals","data","encapsulation","Emulated","styles","_","schemas","id","initFeatures","extractDefListOrFactory","getComponentId","extractDirectiveDef","getComponentDef","getDirectiveDef","nonNull","ɵɵdefineNgModule","bootstrap","declarations","exports","transitiveCompileScopes","invertObject","secondary","newLookup","minifiedKey","publicName","declaredName","ɵɵdefineDirective","directiveDefinition","ɵɵdefinePipe","pipeDef","pure","onDestroy","ngOnDestroy","getPipeDef$1","isStandalone","getNgModuleDef","throwNotFound","ngModuleDef","declaredInputs","providersResolver","hostBindings","hostVars","hostAttrs","contentQueries","inputTransforms","inputConfig","inputs","exportAs","selectors","viewQuery","features","setInput","findHostDirectiveDefs","hostDirectives","outputs","definition","_definition$features","forEach","defExtractor","dep","filter","GENERATED_COMP_IDS","Map","hash","hashSelectors","getOwnPropertyNames","char","imul","compId","has","previousCompDefType","set","HOST","TVIEW","FLAGS","PARENT","NEXT","T_HOST","HYDRATION","CLEANUP","CONTEXT","INJECTOR$1","ENVIRONMENT","RENDERER","CHILD_HEAD","CHILD_TAIL","DECLARATION_VIEW","DECLARATION_COMPONENT_VIEW","DECLARATION_LCONTAINER","PREORDER_HOOK_FLAGS","QUERIES","ID","EMBEDDED_VIEW_INJECTOR","ON_DESTROY_HOOKS","EFFECTS_TO_SCHEDULE","REACTIVE_TEMPLATE_CONSUMER","HEADER_OFFSET","TYPE","DEHYDRATED_VIEWS","NATIVE","VIEW_REFS","MOVED_VIEWS","CONTAINER_HEADER_OFFSET","LContainerFlags","isLView","isLContainer","isContentQueryHost","isComponentHost","componentOffset","isDirectiveHost","isComponentDef","isRootView","isProjectionTNode","hasI18n","lView","isDestroyed","assertTNodeForLView","assertTNodeForTView","assertTNode","tData","assertTIcu","tIcu","currentCaseLViewIndex","assertComponentType","assertNgModuleType","assertCurrentTNodeIsParent","isParent","assertHasParent","parent","assertLContainer","assertLViewOrUndefined","assertLView","assertFirstCreatePass","errMessage","assertFirstUpdatePass","firstUpdatePass","assertDirectiveDef","assertIndexInDeclRange","assertBetween","bindingStartIndex","assertIndexInExpandoRange","expandoStartIndex","lower","upper","assertProjectionSlots","projection","assertParentView","assertNoDuplicateDirectives","directives","seenDirectives","Set","add","assertNodeInjector","injectorIndex","getFactoryDef","hasFactoryDef","SimpleChange","previousValue","currentValue","firstChange","isFirstChange","ɵɵNgOnChangesFeature","NgOnChangesFeatureImpl","ngOnChanges","ngOnChangesSetInput","rememberChangeHistoryAndInvokeOnChangesHook","ngInherit","simpleChangesStore","getSimpleChangesStore","privateName","setSimpleChangesStore","previousChange","SIMPLE_CHANGES_STORE","store","profilerCallback","setProfiler","profiler","hookOrListener","SVG_NAMESPACE","MATH_ML_NAMESPACE","_ensureDirtyViewsAreAlwaysReachable","getEnsureDirtyViewsAreAlwaysReachable","setEnsureDirtyViewsAreAlwaysReachable","unwrapRNode","unwrapLView","getNativeByIndex","getNativeByTNode","getNativeByTNodeOrNull","getTNode","load","view","getComponentLViewByIndex","nodeIndex","hostView","slotValue","isCreationMode","viewAttachedToChangeDetector","viewAttachedToContainer","getConstant","resetPreOrderHookFlags","markViewForRefresh","markAncestorsForTraversal","walkUpViews","nestingLevel","currentView","requiresRefreshOrTraversal","_lView$REACTIVE_TEMPL","dirty","updateAncestorTraversalFlagsOnAttach","_lView$ENVIRONMENT$ch","changeDetectionScheduler","notify","_lView$ENVIRONMENT$ch2","HasChildViewsToRefresh","storeLViewOnDestroy","onDestroyCallback","removeLViewOnDestroy","destroyCBIdx","instructionState","lFrame","createLFrame","bindingsEnabled","skipHydrationRootTNode","_isInCheckNoChangesMode","specOnlyIsInstructionStateEmpty","getElementDepthCount","elementDepthCount","increaseElementDepthCount","decreaseElementDepthCount","getBindingsEnabled","isInSkipHydrationBlock$1","isSkipHydrationRootTNode","ɵɵenableBindings","enterSkipHydrationBlock","ɵɵdisableBindings","leaveSkipHydrationBlock","getLView","getTView","ɵɵrestoreView","viewToRestore","contextLView","ɵɵresetView","getCurrentTNode","currentTNode","getCurrentTNodePlaceholderOk","getCurrentParentTNode","setCurrentTNode","isCurrentTNodeParent","setCurrentTNodeAsNotParent","getContextLView","isInCheckNoChangesMode","setIsInCheckNoChangesMode","getBindingRoot","bindingRootIndex","getBindingIndex","bindingIndex","setBindingIndex","nextBindingIndex","incrementBindingIndex","count","isInI18nBlock","inI18n","setInI18nBlock","setBindingRootForHostBindings","currentDirectiveIndex","setCurrentDirectiveIndex","getCurrentDirectiveIndex","getCurrentDirectiveDef","getCurrentQueryIndex","currentQueryIndex","setCurrentQueryIndex","getDeclarationTNode","declTNode","enterDI","SkipSelf","parentTNode","parentLView","Host","allocLFrame","enterView","newView","newLFrame","selectedIndex","currentNamespace","firstChild","currentLFrame","childLFrame","child","leaveViewLight","oldLFrame","leaveDI","leaveView","nextContextImpl","level","getSelectedIndex","setSelectedIndex","getSelectedTNode","ɵɵnamespaceSVG","ɵɵnamespaceMathML","ɵɵnamespaceHTML","namespaceHTMLInternal","getNamespace$1","_wasLastNodeCreated","wasLastNodeCreated","lastNodeWasCreated","registerPreOrderHooks","directiveIndex","directiveDef","ngOnInit","ngDoCheck","_tView$preOrderHooks","_tView$preOrderCheckH","wrappedOnChanges","preOrderHooks","preOrderCheckHooks","_tView$preOrderHooks2","_tView$preOrderHooks3","_tView$preOrderCheckH2","registerPostOrderHooks","directiveStart","directiveEnd","lifecycleHooks","ngAfterContentInit","ngAfterContentChecked","ngAfterViewInit","ngAfterViewChecked","_tView$contentHooks","contentHooks","_tView$contentHooks2","_tView$contentCheckHo","contentCheckHooks","_tView$viewHooks","viewHooks","_tView$viewHooks2","_tView$viewCheckHooks","viewCheckHooks","_tView$destroyHooks","destroyHooks","executeCheckHooks","hooks","callHooks","executeInitAndCheckHooks","initPhase","incrementInitPhaseFlags","currentNodeIndex","startIndex","nodeIndexLimit","max","lastNodeIndexFound","hook","isInitHook","callHook","callHookInternal","directive","prevConsumer","call","indexWithintInitPhase","NO_PARENT_INJECTOR","NodeInjectorFactory","injectImplementation","resolving","canSeeViewProviders","injectImpl","isFactory","toTNodeTypeAsString","tNodeType","isTNodeShape","insertBeforeIndex","hasClassInput","hasStyleInput","assertTNodeType","expectedTypes","assertPureTNodeType","hasParentInjector","parentLocation","getParentInjectorIndex","parentInjectorIndex","getParentInjectorViewOffset","getParentInjectorView","startView","viewOffset","parentView","includeViewProviders","setIncludeViewProviders","oldValue","BLOOM_SIZE","BLOOM_MASK","BLOOM_BUCKET_BITS","nextNgElementId","NOT_FOUND","bloomAdd","bloomHash","mask","getOrCreateNodeInjectorForNode","existingInjectorIndex","getInjectorIndex","insertBloom","blueprint","parentLoc","getParentInjectorLocation","parentIndex","parentData","footer","declarationViewOffset","lViewCursor","getTNodeFromLView","diPublicInInjector","injectAttributeImpl","attrNameToInject","attrsLength","notFoundValueOrThrow","lookupTokenUsingModuleInjector","Self","moduleInjector","previousInjectImplementation","getOrCreateInjectable","embeddedInjectorValue","lookupTokenUsingEmbeddedInjector","lookupTokenUsingNodeInjector","bloomHashBitOrFactory","NodeInjector","previousTView","hostTElementNode","shouldSearchParent","bloomHasToken","searchTokensOnInjector","currentTView","canAccessViewProviders","isHostSpecialCase","injectableIdx","locateDirectiveOrProvider","getNodeInjectable","nodeProviderIndexes","providerIndexes","tInjectables","injectablesStart","directivesStart","cptViewProvidersCount","endIndex","providerTokenOrDef","dirDef","previousIncludeViewProviders","success","tokenId","createNodeInjector","injectorView","isFirstHostTNode","getNodeInjectorLView","nodeInjector","_lView","getNodeInjectorTNode","_tNode","ɵɵgetInheritedFactory","ownConstructor","ownFactory","getFactoryOf","objectPrototype","getPrototypeOf","t","currentLView","nodeInjectorValue","embeddedViewInjector","embeddedViewInjectorValue","tViewType","ɵɵinjectAttribute","ANNOTATIONS","PARAMETERS","PROP_METADATA","makeDecorator","props","parentClass","additionalProcessing","typeFn","metaCtor","makeMetadataCtor","DecoratorFactory","annotationInstance","TypeDecorator","cls","annotations","defineProperty","create","annotationCls","ctor","values","propName","makeParamDecorator","ParamDecoratorFactory","apply","ParamDecorator","annotation","unusedKey","parameters","makePropDecorator","PropDecoratorFactory","decoratorInstance","PropDecorator","Attribute","attributeName","emitDistinctChangesOnlyDefaultValue","Query","ContentChildren","isViewQuery","descendants","emitDistinctChangesOnly","ContentChild","ViewChildren","ViewChild","FactoryTarget","R3TemplateDependencyKind","getCompilerFacade","request","globalNg","ɵcompilerFacade","error","kind","usage","Type","Function","isType","arrayEquals","a","b","identityAccessor","valueA","valueB","flatten","flat","Number","POSITIVE_INFINITY","deepForEach","input","addToArray","removeFromArray","pop","newArray","size","arraySplice","array","arrayInsert","previousEnd","arrayInsert2","value1","value2","arrayIndexOfSorted","_arrayIndexOfSorted","keyValueArraySet","keyValueArray","keyValueArrayIndexOf","keyValueArrayGet","keyValueArrayDelete","shift","start","middle","ES5_DELEGATE_CTOR","ES2015_INHERITED_CLASS","ES2015_INHERITED_CLASS_WITH_CTOR","ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR","isDelegateCtor","typeStr","test","ReflectionCapabilities","reflect","_reflect","_zipTypesAndAnnotations","paramTypes","paramAnnotations","concat","_ownParameters","parentCtor","tsickleCtorParams","ctorParameters","ctorParam","convertTsickleDecoratorIntoMetadata","decorators","getOwnMetadata","getParentCtor","_ownAnnotations","typeOrFunc","ownAnnotations","parentAnnotations","_ownPropMetadata","propMetadata","propDecorators","keys","prop","parentPropMetadata","ownPropMetadata","hasLifecycleHook","lcProperty","decoratorInvocations","decoratorInvocation","decoratorType","annotationArgs","parentProto","Inject","getReflect","reflectDependencies","convertDependencies","deps","reflectDependency","attribute","param","proto","resolveComponentResources","resourceResolver","componentResolved","urlMap","cachedResourceResolve","url","promise","resp","then","unwrapResponse","componentResourceResolutionQueue","component","_component$styleUrls","_component$styleUrls2","promises","templateUrl","styleUrl","styleUrls","styleOffset","style","fullyResolved","Promise","all","componentDefResolved","clearResolutionOfComponentResourcesQueue","componentDefPendingResolution","maybeQueueResolutionOfComponentResources","metadata","componentNeedsResolution","isComponentDefPendingResolution","old","restoreComponentResolutionQueue","queue","clear","isComponentResourceResolutionQueueEmpty","response","delete","ENVIRONMENT_INITIALIZER","INJECTOR","INJECTOR_DEF_TYPES","NullInjector","makeEnvironmentProviders","importProvidersFrom","sources","internalImportProvidersFrom","checkForStandaloneCmp","providersOut","dedup","injectorTypesWithProviders","collectProviders","cmpDef","internalSource","walkProviderTree","processInjectorTypesWithProviders","typesWithProviders","visitor","ngModule","deepForEachProvider","validateProvider","container","parents","defType","injDef","defName","isDuplicate","importTypesWithProviders","imported","useFactory","useValue","defProviders","injectorType","containerType","isTypeProvider","isValueProvider","isFactoryProvider","isExistingProvider","classRef","useClass","USE_VALUE$1","useExisting","isClassProvider","INJECTOR_SCOPE","NOT_YET","CIRCULAR","NULL_INJECTOR","getNullInjector","EnvironmentInjector","R3Injector","destroyed","_destroyed","scopes","records","_ngOnDestroyHooks","_onDestroyHooks","forEachSingleProvider","processProvider","makeRecord","record","injectorDefTypes","destroy","assertNotDestroyed","onDestroyHooks","removeOnDestroy","runInContext","previousInjector","couldBeInjectableType","injectableDefInScope","injectableDefOrInjectorDefFactory","hydrate","nextInjector","resolveInjectorInitializers","initializers","initializer","tokens","providerToRecord","multiRecord","existing","hasOnDestroy","getUndecoratedInjectableFactory","paramLength","inheritedInjectableDef","providerToFactory","unwrappedProvider","hasDeps","runInInjectionContext","prevInjectorProfilerContext","prevInjector","assertInInjectionContext","debugFn","angularCoreDiEnv","compileInjectable","ngFactoryDef","compiler","getInjectableMetadata","compileFactory","typeArgumentCount","Injectable","configurable","USE_VALUE","isUseClassProvider","isUseValueProvider","isUseFactoryProvider","isUseExistingProvider","srcMeta","compilerMeta","createInjector","additionalProviders","createInjectorWithoutInjectorInstances","Injector","_options$name","_class","NULL","isModuleWithProviders","isNgModule","isPipe","isDirective","isComponent","getDependencyTypeForError","verifyStandaloneImport","depType","importingType","DOCUMENT","setDocument","document","getDocument","APP_ID","DEFAULT_APP_ID","PLATFORM_INITIALIZER","PLATFORM_ID","PACKAGE_ROOT_URL","ANIMATION_MODULE_TYPE","CSP_NONCE","_getDocument$body","body","querySelector","getAttribute","IMAGE_CONFIG_DEFAULTS","breakpoints","disableImageSizeWarning","disableImageLazyLoadWarning","IMAGE_CONFIG","ɵɵresolveWindow","element","ownerDocument","defaultView","ɵɵresolveDocument","ɵɵresolveBody","INTERPOLATION_DELIMITER","maybeUnwrapFn","isPlatformBrowser","USE_RUNTIME_DEPS_TRACKER_FOR_JIT","DepsTracker","ownerNgModule","ngModulesWithSomeUnresolvedDecls","ngModulesScopeCache","standaloneComponentsScopeCache","resolveNgModulesDecls","moduleType","decl","getComponentDependencies","rawImports","scope","getStandaloneComponentScope","compilation","isPoisoned","pipes","ngModules","getNgModuleScope","registerNgModule","scopeInfo","clearScopeCacheFor","computeNgModuleScope","exported","importedScope","addSet","exportedScope","ans","computeStandaloneComponentScope","rawImport","isOrphanComponent","cmp","sourceSet","targetSet","m","depsTracker","TEST_ONLY","modules","checkForDuplicateNgModules","assertSameOrNotExisting","incoming","registerNgModuleType","clearModulesForTest","getRegisteredNgModuleType","setAllowDuplicateNgModuleIdsForTest","allowDuplicates","CUSTOM_ELEMENTS_SCHEMA","NO_ERRORS_SCHEMA","shouldThrowErrorOnUnknownElement","ɵsetUnknownElementStrictMode","shouldThrow","ɵgetUnknownElementStrictMode","shouldThrowErrorOnUnknownProperty","ɵsetUnknownPropertyStrictMode","ɵgetUnknownPropertyStrictMode","validateElementIsKnown","tagName","hasDirectives","isUnknown","HTMLUnknownElement","customElements","matchingSchemas","isHostStandalone","isHostComponentStandalone","templateLocation","getTemplateLocationDetails","isPropertyValid","handleUnknownPropertyError","nodeType","importLocation","KNOWN_CONTROL_FLOW_DIRECTIVES","correspondingImport","reportUnknownPropertyError","getDeclarationComponentDef","declarationLView","_hostComponentDef$typ","hostComponentDef","componentClassName","schema","SKIP_HYDRATION_ATTR_NAME","SKIP_HYDRATION_ATTR_NAME_LOWER_CASE","hasSkipHydrationAttrOnTNode","mergedAttrs","hasSkipHydrationAttrOnRElement","rNode","hasAttribute","hasInSkipHydrationBlockFlag","isInSkipHydrationBlock","RendererStyleFlags2","COMMENT_DISALLOWED","COMMENT_DELIMITER","COMMENT_DELIMITER_ESCAPED","escapeCommentText","TRACKED_LVIEWS","uniqueIdCounter","getUniqueLViewId","registerLView","getLViewById","unregisterLView","LContext","lViewId","getLContext","mpValue","readPatchedData","isComponentInstance","findViaComponent","isDirectiveInstance","findViaDirective","getDirectivesAtNodeIndex","findViaNativeElement","existingCtx","createLContext","attachPatchData","rElement","parentNode","parentContext","getComponentViewByInstance","componentInstance","patchedData","MONKEY_PATCH_KEY_NAME","readPatchedLView","traverseNextElement","next","componentIndices","components","elementComponentIndex","componentView","rootComponentView","rootComponent","directiveInstance","directiveIndexStart","directiveIndexEnd","results","getComponentAtNodeIndex","discoverLocalRefs","localNames","localIndex","_icuContainerIterate","icuContainerIterate","tIcuContainerNode","ensureIcuContainerVisitorLoaded","loader","getLViewParent","getRootView","componentOrLView","getRootContext","viewOrComponent","rootView","getFirstLContainer","getNearestLContainer","getNextLContainer","viewOrContainer","applyToElementOrContainer","action","lNodeToHandle","beforeNode","lContainer","nativeAppendChild","nativeInsertBefore","nativeRemoveNode","destroyNode","applyContainer","createTextNode","createText","updateTextNode","setValue","createCommentNode","createComment","createElementNode","namespace","createElement","removeViewFromDOM","applyView","addViewToDOM","parentNativeNode","detachViewFromDOM","destroyViewTree","lViewOrLContainer","cleanUpView","firstView","insertView","indexInContainer","containerLength","declarationLContainer","trackMovedView","lQueries","declarationContainer","movedViews","insertedLContainer","insertedComponentLView","declaredComponentLView","HasTransplantedViews","detachMovedView","declarationViewIndex","insertionLContainer","detachView","removeIndex","viewToDetach","removedLView","destroyLView","executeOnDestroys","processCleanups","tCleanup","cleanup","lCleanup","targetIdx","unsubscribe","destroyHooksFn","toCall","callContext","getParentRElement","getClosestRElement","None","isMove","insertBefore","appendChild","nativeAppendOrInsertBefore","nativeRemoveChild","isHostElement","removeChild","isTemplateNode","content","nativeParentNode","nativeNextSibling","nextSibling","getInsertInFrontOfRNode","_getInsertInFrontOfRNodeWithI18n","getInsertInFrontOfRNodeWithNoI18n","_processI18nInsertBefore","setI18nHandling","getInsertInFrontOfRNodeWithI18n","processI18nInsertBefore","childRNode","childTNode","parentRNode","anchorNode","getFirstNativeNode","getBeforeNodeForView","elIcuContainerChild","rNodeOrLContainer","nextRNode","projectionNodes","getProjectionNodes","componentHost","slotIdx","viewIndexInContainer","nextViewIndex","firstTNodeOfView","nativeParent","clearElementContents","textContent","applyNodes","parentRElement","isProjection","rawSlotValue","applyProjectionRecursive","projectionNext","applyProjection","tProjectionNode","componentLView","componentNode","nodeToProjectOrRNodes","nodeToProject","projectedComponentLView","anchor","applyStyling","isClassBased","removeClass","addClass","DashCase","removeStyle","isImportant","endsWith","Important","setStyle","writeDirectStyle","newValue","writeDirectClass","removeAttribute","setupStaticAttributes","policy$1","getPolicy$1","trustedTypes","createPolicy","createHTML","s","createScript","createScriptURL","trustedHTMLFromString","html","_getPolicy$","trustedScriptFromString","script","_getPolicy$2","trustedScriptURLFromString","_getPolicy$3","newTrustedFunctionForDev","fnArgs","fnBody","bind","ɵɵvalidateIframeAttribute","iframe","srcdoc","policy","getPolicy","trustedHTMLFromStringBypass","_getPolicy","trustedScriptFromStringBypass","_getPolicy2","trustedScriptURLFromStringBypass","_getPolicy3","SafeValueImpl","changingThisBreaksApplicationSecurity","SafeHtmlImpl","getTypeName","SafeStyleImpl","SafeScriptImpl","SafeUrlImpl","SafeResourceUrlImpl","unwrapSafeValue","allowSanitizationBypassAndThrow","actualType","getSanitizationBypassType","bypassSanitizationTrustHtml","trustedHtml","bypassSanitizationTrustStyle","trustedStyle","bypassSanitizationTrustScript","trustedScript","bypassSanitizationTrustUrl","trustedUrl","bypassSanitizationTrustResourceUrl","trustedResourceUrl","getInertBodyHelper","defaultDoc","inertDocumentHelper","InertDocumentHelper","isDOMParserAvailable","DOMParserHelper","getInertBodyElement","window","DOMParser","parseFromString","inertDocument","implementation","createHTMLDocument","templateEl","innerHTML","SAFE_URL_PATTERN","_sanitizeUrl","tagSet","tags","split","merge","sets","VOID_ELEMENTS","OPTIONAL_END_TAG_BLOCK_ELEMENTS","OPTIONAL_END_TAG_INLINE_ELEMENTS","OPTIONAL_END_TAG_ELEMENTS","BLOCK_ELEMENTS","INLINE_ELEMENTS","VALID_ELEMENTS","URI_ATTRS","HTML_ATTRS","ARIA_ATTRS","VALID_ATTRS","SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS","SanitizingHtmlSerializer","sanitizedSomething","buf","sanitizeChildren","el","traverseContent","ELEMENT_NODE","startElement","TEXT_NODE","chars","nodeValue","endElement","checkClobberedElement","nodeName","elAttrs","attributes","elAttr","encodeEntities","nextNode","compareDocumentPosition","DOCUMENT_POSITION_CONTAINED_BY","outerHTML","SURROGATE_PAIR_REGEXP","NON_ALPHANUMERIC_REGEXP","hi","low","inertBodyHelper","_sanitizeHtml","unsafeHtmlInput","inertBodyElement","unsafeHtml","mXSSAttempts","parsedHtml","sanitizer","safeHtml","getTemplateContent","isTemplateElement","SecurityContext","ɵɵsanitizeHtml","getSanitizer","sanitize","HTML","ɵɵsanitizeStyle","unsafeStyle","STYLE","ɵɵsanitizeUrl","unsafeUrl","URL","ɵɵsanitizeResourceUrl","unsafeResourceUrl","RESOURCE_URL","ɵɵsanitizeScript","unsafeScript","SCRIPT","ɵɵtrustConstantHtml","raw","ɵɵtrustConstantResourceUrl","getUrlSanitizer","tag","ɵɵsanitizeUrlOrResourceUrl","validateAgainstEventProperties","startsWith","validateAgainstEventAttributes","ChangeDetectionScheduler","makeStateKey","initTransferState","transferState","TransferState","retrieveTransferredState","onSerializeCallbacks","defaultValue","remove","hasKey","isEmpty","onSerialize","toJson","_class2","doc","appId","getElementById","parse","REFERENCE_NODE_HOST","REFERENCE_NODE_BODY","NodeNavigationStep","ELEMENT_CONTAINERS","TEMPLATES","CONTAINERS","MULTIPLIER","NUM_ROOT_NODES","TEMPLATE_ID","NODES","DISCONNECTED_NODES","TRANSFER_STATE_TOKEN_ID","NGH_DATA_KEY","NGH_ATTR_NAME","SSR_CONTENT_INTEGRITY_MARKER","_retrieveHydrationInfoImpl","retrieveHydrationInfoImpl","_rNode$firstChild","nghAttrValue","componentViewNgh","rootViewNgh","remainingNgh","nghData","dehydratedView","setSegmentHead","markRNodeAsClaimedByHydration","enableRetrieveHydrationInfoImpl","retrieveHydrationInfo","getLNodeForHydration","viewRef","getTextNodeContent","_node$textContent","processTextNodeMarkersBeforeHydration","commentNodesIterator","createNodeIterator","NodeFilter","SHOW_COMMENT","acceptNode","isTextNodeMarker","FILTER_ACCEPT","FILTER_REJECT","currentNode","nodes","replaceWith","checkIfAlreadyClaimed","isRNodeClaimedForHydration","__claimed","hydrationInfo","_hydrationInfo$segmen","segmentHeads","getSegmentHead","_hydrationInfo$segmen2","_hydrationInfo$segmen3","getNgContainerSize","_data$ELEMENT_CONTAIN","_data$ELEMENT_CONTAIN2","_data$CONTAINERS","calcSerializedContainerSize","getSerializedContainerViews","_hydrationInfo$data$C","_hydrationInfo$data$C2","_getSerializedContain","views","numNodes","_view$MULTIPLIER","isDisconnectedNode$1","_hydrationInfo$discon","disconnectedNodes","nodeIds","ComponentRef$1","ComponentFactory$1","noComponentFactoryError","ERROR_COMPONENT","getComponent$1","_NullComponentFactoryResolver","resolveComponentFactory","ComponentFactoryResolver$1","_class3","injectElementRef","createElementRef","ElementRef","nativeElement","_class4","unwrapElementRef","RendererFactory2","Renderer2","_class5","injectRenderer2","nodeAtIndex","Sanitizer","_class6","NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","isSignal","computed","computation","getter","equal","signal","initialValue","signalFn","update","updateFn","asReadonly","signalAsReadonlyFn","readonlyFn","untracked","nonReactiveReadsFn","isIterable","Symbol","iterator","isListLikeIterable","isJsObject","areIterablesEqual","comparator","iterator1","iterator2","item1","item2","done","iterateListLike","o","DefaultIterableDifferFactory","supports","trackByFn","DefaultIterableDiffer","trackByIdentity","_linkedRecords","_unlinkedRecords","_previousItHead","_itHead","_itTail","_additionsHead","_additionsTail","_movesHead","_movesTail","_removalsHead","_removalsTail","_identityChangesHead","_identityChangesTail","_trackByFn","forEachItem","_next","forEachOperation","nextIt","nextRemove","addRemoveOffset","moveOffsets","currentIndex","getPreviousIndex","adjPreviousIndex","_nextRemoved","previousIndex","localMovePreviousIndex","localCurrentIndex","offset","forEachPreviousItem","_nextPrevious","forEachAddedItem","_nextAdded","forEachMovedItem","_nextMoved","forEachRemovedItem","forEachIdentityChange","_nextIdentityChange","diff","collection","check","_reset","mayBeDirty","itemTrackBy","is","trackById","_mismatch","_verifyReinsertion","_addIdentityChange","_truncate","isDirty","previousRecord","_prev","_remove","_reinsertAfter","_moveAfter","_addAfter","IterableChangeRecord_","reinsertRecord","_addToMoves","nextRecord","_addToRemovals","_unlink","prevRecord","prev","_prevRemoved","_insertAfter","_DuplicateMap","put","toIndex","_prevDup","_nextDup","_DuplicateItemRecordList","_head","_tail","atOrAfterIndex","duplicates","recordList","moveOffset","DefaultKeyValueDifferFactory","DefaultKeyValueDiffer","_records","_mapHead","_appendAfter","_previousMapHead","_changesHead","_changesTail","forEachChangedItem","_nextChanged","_forEach","_maybeAddToChanges","_getOrCreateRecordForKey","_insertBeforeOrAppend","KeyValueChangeRecord_","_addToAdditions","_addToChanges","k","defaultIterableDiffersFactory","IterableDiffers","factories","copied","extend","find","iterable","f","getTypeNameForDebugging","_class7","defaultKeyValueDiffersFactory","KeyValueDiffers","kv","_class8","devModeEqual","isListLikeIterableA","isListLikeIterableB","isAObject","isBObject","collectNativeNodes","lNode","collectNativeNodesInLContainer","nodesInSlot","lViewInAContainer","lViewFirstChildTNode","freeConsumers","getOrBorrowReactiveLViewConsumer","_lView$REACTIVE_TEMPL2","borrowReactiveLViewConsumer","_freeConsumers$pop","consumer","REACTIVE_LVIEW_CONSUMER_NODE","maybeReturnReactiveLViewConsumer","consumerIsAlwaysLive","consumerMarkedDirty","consumerOnSignalRead","ERROR_ORIGINAL_ERROR","wrappedError","originalError","getOriginalError","ErrorHandler","_console","handleError","_findOriginalError","INTERNAL_APPLICATION_ERROR_HANDLER","userErrorHandler","IS_HYDRATION_DOM_REUSE_ENABLED","PRESERVE_HOST_CONTENT_DEFAULT","PRESERVE_HOST_CONTENT","normalizeDebugBindingName","camelCaseToDashCase","CAMEL_CASE_REGEXP","normalizeDebugBindingValue","VALUE_STRING_LENGTH_LIMIT","assertStandaloneComponentType","assertComponentDef","throwMultipleComponentError","second","throwErrorIfNoChangesMode","creationMode","currValue","_hostComponentDef$typ2","formatValue","strValue","constructDetailsForInterpolation","rootIndex","expressionIndex","changedValue","prefix","chunks","getExpressionChangedErrorDetails","idx","matches","RegExp","NO_CHANGE","__brand__","ɵɵadvance","delta","selectIndexInternal","checkNoChangesMode","hooksInitPhaseCompleted","ɵɵdirectiveInject","ɵɵinvalidFactory","processHostBindingOpCodes","hostBindingOpCodes","opCode","directiveIdx","bindingRootIndx","hostBindingFn","createLView","tHostNode","environment","getOrCreateTNode","createTNodeAtIndex","createTNode","allocExpando","numSlotsToAlloc","allocIdx","executeTemplate","templateFn","rf","prevSelectedIndex","isUpdatePhase","preHookType","postHookType","executeContentQueries","createDirectivesInstances","instantiateAllDirectives","invokeDirectivesHostBindings","saveResolvedLocalsInData","viewData","localRefExtractor","getOrCreateComponentTView","incompleteFirstPass","createTView","constsOrFactory","ssrId","initialViewLength","createViewBlueprint","queries","fill","staticViewQueries","staticContentQueries","directiveRegistry","pipeRegistry","seal","locateHostElement","elementOrSelector","preserveHostContent","preserveContent","ShadowDom","rootElement","selectRootElement","applyRootElementTransform","_applyRootElementTransformImpl","applyRootElementTransformImpl","enableApplyRootElementTransformImpl","storeCleanupWithContext","cleanupFn","getOrCreateLViewCleanup","getOrCreateTViewCleanup","tParent","directiveStylingLast","propertyBindings","initialInputs","stylesWithoutHost","residualStyles","classesWithoutHost","residualClasses","classBindings","styleBindings","generatePropertyAliases","aliasMap","propertyAliases","hostDirectiveAliasMap","internalName","addPropertyAlias","initializeInputAndOutputAliases","hostDirectiveDefinitionMap","tViewData","tNodeAttrs","inputsFromAttrs","inputsStore","outputsStore","aliasData","aliasedInputs","aliasedOutputs","generateInitialInputs","mapPropName","elementPropertyInternal","nativeOnly","inputData","dataValue","setInputsForProperty","markDirtyIfOnPush","setNgReflectProperties","viewIndex","childComponentLView","setNgReflectProperty","debugValue","resolveDirectives","localRefs","exportsMap","matchResult","findDirectiveDefMatches","hostDirectiveDefs","initializeDirectives","cacheMatchingLocalNames","initTNodeFlags","preOrderHooksFound","preOrderCheckHooksFound","configureViewWithDirective","saveNameToExportMap","lifeCycleHooks","_tView$preOrderHooks4","_tView$preOrderCheckH3","registerHostBindingOpCodes","directiveVarsIdx","elementIndx","lastSelectedElementIdx","addComponentLogic","setInputsFromAttrs","elementIndex","dirIndex","invokeHostBindingsInCreationMode","registry","hostDirectiveMatches","markAsComponentHost","_def$findHostDirectiv","hostTNode","_tView$components","numberOfDirectives","directiveFactory","nodeInjectorFactory","rendererFactory","lViewFlags","addToViewTree","createRenderer","elementAttributeInternal","setElementAttribute","initialInputData","writeToDirectiveInput","inputsToStore","createLContainer","hostNative","refreshContentQueries","queryStartIdx","directiveDefIdx","executeViewQueryFn","viewQueryFn","storePropertyBindingMetadata","propertyName","interpolationParts","propBindingIdxs","bindingMetadata","loadComponentRenderer","currentDef","errorHandler","textBindingInternal","MAXIMUM_REFRESH_RERUNS","detectChangesInternal","notifyErrorHandler","afterRenderEventManager","_rendererFactory$begi","begin","detectChangesInViewWhileDirty","_rendererFactory$end","_environment$inlineEf","inlineEffectRunner","flush","detectChangesInView","retries","checkNoChangesInternal","refreshView","_lView$ENVIRONMENT$in","isInCheckNoChangesPass","currentConsumer","viewShouldHaveReactiveConsumer","markTransplantedViewsForRefresh","detectChangesInEmbeddedViews","detectChangesInChildComponents","notifyEffect","embeddedLView","detectChangesInViewIfAttached","movedLView","detectChangesInComponent","hostLView","componentHostIdx","shouldRefreshView","markViewDirty","_lView$ENVIRONMENT$ch3","ViewRef$1","rootNodes","_cdRefInjectingView","_appRef","_attachedToViewContainer","viewRefs","markForCheck","detach","reattach","detectChanges","checkNoChanges","attachToViewContainerRef","detachFromAppRef","attachToAppRef","appRef","ChangeDetectorRef","_class9","injectChangeDetectorRef","createViewRef","hostComponentView","keyValDiff","iterableDiff","defaultIterableDiffers","defaultKeyValueDiffers","DestroyRef","_class10","injectDestroyRef","NodeInjectorDestroyRef","assertNotInReactiveContext","extraContext","APP_EFFECT_SCHEDULER","EffectScheduler","_class11","ZoneAwareMicrotaskScheduler","ZoneAwareQueueingScheduler","queuedEffectCount","queues","scheduleEffect","handle","zone","creationZone","flushQueue","run","_class12","hasQueuedFlush","delegate","flushTask","queueMicrotask","EffectHandle","scheduler","effectFn","destroyRef","allowSignalWrites","watcher","onCleanup","runEffect","schedule","unregisterOnDestroy","err","_this$errorHandler","_this$unregisterOnDes","effect","_options$injector","_options$allowSignalW","manualCleanup","Zone","cdr","_cdr$_lView","_cdr$_lView$EFFECTS_T","markedFeatures","performanceMarkFeature","feature","_performance","_performance$mark","performance","mark","detail","EventEmitter_","isAsync","__isAsync","emit","subscribe","observerOrNext","complete","nextFn","errorFn","completeFn","_observer$next","_observer$error","_observer$complete","observer","_wrapInTimeout","sink","setTimeout","EventEmitter","noop","getNativeRequestAnimationFrame","isBrowser","nativeRequestAnimationFrame","nativeCancelAnimationFrame","unpatchedRequestAnimationFrame","__symbol__","unpatchedCancelAnimationFrame","AsyncStackTaggingZoneSpec","namePrefix","consoleAsyncStackTaggingImpl","_consoleAsyncStackTag","createTask","onScheduleTask","_current","task","consoleTask","scheduleTask","onInvokeTask","_currentZone","targetZone","applyThis","applyArgs","ret","invokeTask","NgZone","enableLongStackTrace","shouldCoalesceEventChangeDetection","shouldCoalesceRunChangeDetection","hasPendingMacrotasks","hasPendingMicrotasks","isStable","onUnstable","onMicrotaskEmpty","onStable","onError","assertZonePatched","_nesting","_outer","_inner","fork","lastRequestAnimationFrameId","forkInnerZoneWithAngularBehavior","isInAngularZone","assertInAngularZone","assertNotInAngularZone","runTask","scheduleEventTask","EMPTY_PAYLOAD","cancelTask","runGuarded","runOutsideAngular","checkStable","delayChangeDetectionForEvents","isCheckStableRunning","fakeTopEventTask","root","updateMicroTaskStatus","invoke","delayChangeDetectionForEventsDelegate","properties","shouldBeIgnoredByZone","onEnter","onLeave","onInvoke","onHasTask","hasTaskState","hasTask","change","_hasPendingMicrotasks","microTask","macroTask","onHandleError","NoopNgZone","_applyArgs$0$data","getNgZone","ngZoneToUse","AfterRenderPhase","NOOP_AFTER_RENDER_REF","internalAfterNextRender","_options$injector2","AfterRenderEventManager","internalCallbacks","afterRender","_options$injector3","_afterRenderEventMana","_options$phase","callbackHandler","handler","AfterRenderCallbackHandlerImpl","phase","MixedReadWrite","unregister","unregisterFn","AfterRenderCallback","register","afterNextRender","_options$injector4","_afterRenderEventMana2","_options$phase2","callbackFn","_this$errorHandler2","executingCallbacks","buckets","EarlyRead","Write","Read","deferredCallbacks","validateBegin","execute","bucket","renderDepth","_this$handler","_this$handler2","_this$handler3","_class13","renderComponent","componentTView","syncViewWithBlueprint","hostRNode","renderView","renderChildComponents","computeStaticStyling","writeToHost","styleValue","ComponentFactoryResolver","ComponentFactory","toRefArray","nonMinified","minified","templateName","getNamespace","elementName","ChainedInjector","parentInjector","refArray","transform","componentType","isBoundToModule","projectableNodes","rootSelectorOrNode","environmentInjector","_this$componentDef$de","_environmentInjector","ngJitMode","forbidOrphanRendering","realEnvironmentInjector","rootViewInjector","hostRenderer","rootFlags","rootTView","rootLView","tElementNode","rootComponentDef","rootDirectives","createRootComponentTNode","createRootComponentView","setRootNodeAttributes","projectNodes","createRootComponent","LifecycleHooksFeature","ComponentRef","_rootLView","previousInputValues","changeDetectorRef","_this$previousInputVa","cmpNameForError","applyRootComponentStyling","viewRenderer","hostFeatures","rootTNode","nodesforSlot","from","getSuperType","ɵɵInheritDefinitionFeature","superType","shouldInheritFields","inheritanceChain","superDef","writeableDef","maybeUnwrapEmpty","superHostBindings","inheritHostBindings","superViewQuery","superContentQueries","inheritViewQuery","inheritContentQueries","animation","defData","mergeHostAttrsAcrossInheritance","prevViewQuery","ctx","prevContentQueries","prevHostBindings","COPY_DIRECTIVE_FIELDS","COPY_COMPONENT_FIELDS","ɵɵCopyDefinitionFeature","defAny","ɵɵHostDirectivesFeature","rawHostDirectives","resolved","dir","bindingArrayToMap","matchedDefs","hostDirectiveConfig","hostDirectiveDef","validateHostDirective","patchDeclaredInputs","bindings","exposedInputs","remappedPublicName","validateMappings","bindingType","hostDirectiveBindings","ɵɵInputTransformsFeature","updateBinding","getBinding","bindingUpdated","oldValueToCompare","details","bindingUpdated2","exp1","exp2","different","bindingUpdated3","exp3","bindingUpdated4","exp4","ɵɵattribute","interpolationV","isBindingUpdated","interpolation1","v0","suffix","interpolation2","i0","v1","interpolation3","i1","v2","interpolation4","i2","v3","interpolation5","i3","v4","interpolation6","i4","v5","interpolation7","i5","v6","interpolation8","i6","v7","ɵɵattributeInterpolate1","interpolatedValue","ɵɵattributeInterpolate2","ɵɵattributeInterpolate3","ɵɵattributeInterpolate4","ɵɵattributeInterpolate5","ɵɵattributeInterpolate6","ɵɵattributeInterpolate7","ɵɵattributeInterpolate8","ɵɵattributeInterpolateV","interpolated","interpolationInBetween","toTStylingRange","getTStylingRangePrev","tStylingRange","getTStylingRangePrevDuplicate","setTStylingRangePrev","setTStylingRangePrevDuplicate","getTStylingRangeNext","setTStylingRangeNext","getTStylingRangeNextDuplicate","setTStylingRangeNextDuplicate","getTStylingRangeTail","__unused_const_as_closure_does_not_like_standalone_comment_blocks__","insertTStylingBinding","tStylingKeyWithStatic","isHostBinding","isClassBinding","tBindings","tmplHead","tmplTail","isKeyDuplicateOfStatic","tStylingKey","staticKeyValueArray","hasTemplateBindings","previousNode","markDuplicates","markDuplicateOfResidualStyling","residual","isPrevDir","tStylingAtIndex","isMap","cursor","foundDuplicate","tStylingValueAtCursor","tStyleRangeAtCursor","isStylingMatch","tStylingKeyCursor","parserState","textEnd","keyEnd","valueEnd","getLastParsedKey","getLastParsedValue","parseClassName","resetParserState","parseClassNameNext","consumeWhitespace","consumeClassToken","parseStyle","parseStyleNext","consumeStyleKey","consumeSeparator","consumeStyleValue","ch","malformedStyleError","fromCharCode","ch1","ch2","ch3","lastChIndex","consumeQuotedText","quoteCharCode","expecting","ɵɵproperty","setDirectiveInputsWhichShadowsStyling","property","ɵɵstyleProp","checkStylingProperty","ɵɵclassProp","ɵɵstyleMap","checkStylingMap","styleKeyValueArraySet","styleStringParser","ɵɵclassMap","classKeyValueArraySet","classStringParser","stylingFirstUpdatePass","updateStyling","normalizeSuffix","stringParser","hasStylingInputShadow","isInHostBindings","staticPrefix","updateStylingMap","toStylingKeyValueArray","isHostBindings","wrapInStaticStylingKey","stylingKey","isFirstStylingInstructionInTemplate","collectStylingFromDirectives","collectStylingFromTAttrs","isFirstStylingInstructionInHostBinding","templateStylingKey","getTemplateHeadTStylingKey","setTemplateHeadTStylingKey","collectResidual","currentDirective","desiredMarker","currentMarker","styleKeyValueArray","unwrappedValue","stringKey","includes","oldKeyValueArray","newKeyValueArray","oldIndex","newIndex","oldKey","newKey","setKey","tRange","higherPriorityValue","findStylingValue","isStylingValuePresent","isPrevDirection","rawKey","containsStatics","isStylingMap","valueAtLViewIndex","ɵɵclassMapInterpolate1","ɵɵclassMapInterpolate2","ɵɵclassMapInterpolate3","ɵɵclassMapInterpolate4","ɵɵclassMapInterpolate5","ɵɵclassMapInterpolate6","ɵɵclassMapInterpolate7","ɵɵclassMapInterpolate8","ɵɵclassMapInterpolateV","ɵɵcomponentInstance","AT_THIS_LOCATION","getFriendlyStringFromTNodeType","validateMatchingNode","isViewContainerAnchor","_hostComponentDef$typ3","expectedNode","shortRNodeDescription","header","describeExpectedDom","_node$tagName","_node$textContent2","actualNode","describeDomFromNode","getHydrationErrorFooter","getHydrationAttributeNote","validateSiblingNodeExists","validateNodeExists","nodeNotFoundError","nodeNotFoundAtPathError","describeRNode","unsupportedProjectionOfDomNodes","invalidSkipHydrationHost","stringifyTNodeAttrs","shorten","internalAttrs","stringifyRNodeAttrs","describeTNode","innerContent","typeAsString","_node$textContent3","COMMENT_NODE","spacer","previousSibling","componentInfo","stripNewlines","removeDehydratedViews","_lContainer$DEHYDRATE","removeDehydratedView","nodesRemoved","currentRNode","cleanupLContainer","cleanupLView","cleanupDehydratedViews","_views","REF_EXTRACTOR_REGEXP","compressNodeLocation","referenceNode","segment","lastIdx","decompressNodeLocation","refNodeId","refNodeName","rest","ref","parseInt","steps","step","matchAll","repeat","isFirstElementInNgContainer","_tNode$parent","getNoOffsetIndex","isDisconnectedNode","_unwrapRNode","isConnected","locateNextRNode","noOffsetIndex","locateRNodeByPath","_tNode$prev","previousTNodeParent","previousTNode","noOffsetParentIndex","previousRElement","noOffsetPrevSiblingIndex","segmentHead","numRootNodesToSkip","nodesToSkip","siblingAfter","skip","stringifyNavigationInstructions","instructions","r","FirstChild","navigateToNode","NextSibling","navigationInstructions","parentElementId","navigateBetween","finish","parentElement","navigateBetweenSiblings","parentPath","childPath","nav","calcPathBetween","to","fromNodeName","calcPathForNode","referenceNodeName","firstRNode","locateDehydratedViewsInContainer","serializedViews","dehydratedViews","serializedView","_serializedView$MULTI","_findMatchingDehydratedViewImpl","findMatchingDehydratedViewImpl","enableFindMatchingDehydratedViewImpl","findMatchingDehydratedView","LiveCollection","updateValue","swap","index1","index2","startIdx","min","endIdx","endItem","startItem","attach","move","prevIndex","newIdx","valuesMatching","liveIdx","liveValue","trackBy","reconcile","liveCollection","newCollection","_detachedItems3","detachedItems","liveKeysInTheFuture","liveStartIdx","liveEndIdx","newEndIdx","_detachedItems","_liveKeysInTheFuture","liveStartValue","at","newStartValue","isStartMatching","liveEndValue","newEndValue","isEndMatching","liveStartKey","liveEndKey","newStartKey","newEndKey","UniqueValueMultiKeyMap","initLiveItemsInTheFuture","attachPreviouslyDetached","newItem","createOrAttach","newCollectionIterator","newIterationResult","_detachedItems2","_liveKeysInTheFuture2","liveKey","prevCollection","kvMap","_vMap","prevValue","vMap","cb","createAndRenderEmbeddedLView","templateTNode","_options$injector5","_options$dehydratedVi","embeddedTView","isSignalView","viewFlags","declarationViewLQueries","createEmbeddedView","getLViewFromLContainer","adjustedIndex","shouldAddViewToDom","addLViewToLContainer","addToDOM","removeLViewFromLContainer","ViewContainerRef","_class14","injectViewContainerRef","createContainerRef","VE_ViewContainerRef","R3ViewContainerRef","_lContainer","_hostTNode","_hostLView","getViewRefs","templateRef","indexOrOptions","createEmbeddedViewImpl","insertImpl","createComponent","componentFactoryOrType","_componentFactory$com","_componentDef$id","_dehydratedView$first","isComponentFactory","ngModuleRef","componentFactory","contextInjector","_injector","componentRef","insert","prevIdx","prevLContainer","prevVCRef","adjustedIdx","_adjustIndex","getOrCreateViewRefs","viewRefsArr","detachedView","wasDetached","_locateOrCreateAnchorNode","insertAnchorNode","commentNode","parentOfHostNative","createAnchorNode","_populateDehydratedViewsInLContainer","populateDehydratedViewsInLContainer","populateDehydratedViewsInLContainerImpl","_hydrationInfo$data$C3","isNodeCreationMode","locateOrCreateAnchorNode","enableLocateOrCreateContainerRefImpl","templateFirstCreatePass","attrsIndex","localRefsIndex","tViewConsts","ɵɵtemplate","comment","_locateOrCreateContainerAnchor","createContainerAnchorImpl","locateOrCreateContainerAnchorImpl","_hydrationInfo$data$T","_hydrationInfo$data$T2","viewContainerSize","enableLocateOrCreateContainerAnchorImpl","ɵɵconditional","containerIndex","matchingTemplateIndex","getLContainer","viewInContainerIdx","getExistingTNode","RepeaterContext","$implicit","$index","$count","ɵɵrepeaterTrackByIndex","ɵɵrepeaterTrackByIdentity","RepeaterMetadata","hasEmptyBlock","ɵɵrepeaterCreate","trackByUsesComponentInstance","emptyTemplateFn","emptyDecls","emptyVars","boundTrackBy","LiveCollectionLContainerImpl","needsIndexUpdate","detachExistingView","reset","updateIndexes","getExistingLViewFromLContainer","ɵɵrepeater","metadataSlotIdx","hostTView","itemTemplateTNode","isCollectionEmpty","emptyTemplateIndex","lContainerForEmpty","emptyTemplateTNode","existingLView","DeferDependenciesLoadingState","MINIMUM_SLOT","LOADING_AFTER_SLOT","DeferBlockState","DeferBlockInternalState","NEXT_DEFER_BLOCK_STATE","DEFER_BLOCK_STATE","STATE_IS_FROZEN_UNTIL","LOADING_AFTER_CLEANUP_FN","TRIGGER_CLEANUP_FNS","PREFETCH_TRIGGER_CLEANUP_FNS","DeferBlockBehavior","storeTriggerCleanupFn","lDetails","invokeTriggerCleanupFns","cleanupFns","invokeAllTriggerCleanupFns","getDeferBlockDataIndex","deferBlockIndex","getLDeferBlockDetails","slotIndex","setLDeferBlockDetails","getTDeferBlockDetails","setTDeferBlockDetails","deferBlockConfig","getTemplateIndexForState","newState","tDetails","Complete","primaryTmplIndex","Loading","loadingTmplIndex","errorTmplIndex","Placeholder","placeholderTmplIndex","getMinimumDurationForState","currentState","_tDetails$placeholder","_tDetails$placeholder2","placeholderBlockConfig","_tDetails$loadingBloc","_tDetails$loadingBloc2","loadingBlockConfig","getLoadingBlockAfter","_tDetails$loadingBloc3","_tDetails$loadingBloc4","addDepsToRegistry","currentDeps","newDeps","currentDepSet","getPrimaryBlockTNode","assertDeferredDependenciesLoaded","loadingState","COMPLETE","isTDeferBlockDetails","eventListenerOptions","passive","capture","hoverTriggers","WeakMap","interactionTriggers","viewportTriggers","interactionEventNames","hoverEventNames","intersectionObserver","observedViewportElements","DeferEventEntry","callbacks","listener","onInteraction","trigger","entry","addEventListener","removeEventListener","onHover","onViewport","ngZone","IntersectionObserver","entries","isIntersecting","observe","_intersectionObserver","unobserve","_intersectionObserver2","disconnect","getTriggerLView","deferredHostLView","deferredTNode","walkUpTimes","_deferredContainer$CO","deferredContainer","triggerLView","renderedState","getTriggerElement","triggerIndex","registerDomTrigger","initialLView","registerFn","pollDomTrigger","Initial","onIdle","IdleScheduler","_requestIdleCallback","requestIdleCallback","_cancelIdleCallback","cancelIdleCallback","clearTimeout","idleId","deferred","requestIdleCallbackFn","cancelIdleCallbackFn","scheduleIdleCallback","_class15","onTimer","delay","scheduleTimerTrigger","TimerScheduler","timeoutId","invokeTimerAt","addToQueue","Date","now","scheduleTimer","callbackIndex","removeFromQueue","invokeAt","insertAtIndex","invokeQueuedCallbackAt","queuedCallback","lastCallbackIndex","FRAME_DURATION_MS","timeout","_class16","DEFER_BLOCK_DEPENDENCY_INTERCEPTOR","DEFER_BLOCK_CONFIG","shouldTriggerDeferBlock","config","behavior","Manual","applyDeferBlockStateWithSchedulingImpl","ɵɵdeferEnableTimerScheduling","placeholderConfigIndex","loadingConfigIndex","applyDeferBlockStateWithScheduling","ɵɵdefer","dependencyResolverFn","enableTimerScheduling","NOT_STARTED","loadingPromise","cleanupTriggersFn","ɵɵdeferWhen","rawValue","Boolean","renderPlaceholder","triggerDeferBlock","ɵɵdeferPrefetchWhen","triggerPrefetching","ɵɵdeferOnIdle","scheduleDelayedTrigger","ɵɵdeferPrefetchOnIdle","scheduleDelayedPrefetching","ɵɵdeferOnImmediate","ɵɵdeferPrefetchOnImmediate","triggerResourceLoading","ɵɵdeferOnTimer","ɵɵdeferPrefetchOnTimer","ɵɵdeferOnHover","ɵɵdeferPrefetchOnHover","ɵɵdeferOnInteraction","ɵɵdeferPrefetchOnInteraction","ɵɵdeferOnViewport","ɵɵdeferPrefetchOnViewport","scheduleFn","prefetch","renderDeferBlockState","skipTimerScheduling","_lDetails$NEXT_DEFER_","isValidStateChange","needsScheduling","applyStateFn","applyDeferBlockState","stateTmplIndex","loadingAfter","inLoadingAfterPhase","scheduleDeferBlockUpdate","duration","nextState","primaryBlockTNode","IN_PROGRESS","dependenciesFn","deferDependencyInterceptor","intercept","resolve","allSettled","failed","status","dependency","FAILED","primaryBlockTView","renderDeferStateAfterResourceLoading","elementStartFirstCreatePass","elementStart","ɵɵelementStart","_locateOrCreateElementNode","ɵɵelementEnd","elementEnd","ɵɵelement","locateOrCreateElementNodeImpl","enableLocateOrCreateElementNodeImpl","elementContainerStartFirstCreatePass","ɵɵelementContainerStart","_locateOrCreateElementContainerNode","ɵɵelementContainerEnd","ɵɵelementContainer","locateOrCreateElementContainerNode","ngContainerSize","enableLocateOrCreateElementContainerNodeImpl","ɵɵgetCurrentView","ɵɵhostProperty","ɵɵsyntheticHostProperty","ngI18nClosureMode","goog","getMsg","u","plural","val","n","floor","localeEn","LOCALE_DATA","registerLocaleData","localeId","extraData","LocaleDataIndex","LocaleId","ExtraData","findLocaleData","locale","normalizedLocale","normalizeLocale","getLocaleData","parentLocale","getLocaleCurrencyCode","CurrencyCode","getLocalePluralCase","PluralCase","ng","common","locales","unregisterAllLocaleData","pluralMapping","getPluralCase","DEFAULT_LOCALE_ID","USD_CURRENCY_CODE","ELEMENT_MARKER","ICU_MARKER","I18nCreateOpCode","LOCALE_ID$1","setLocaleId","getLocaleId","tNodeInsertBeforeIndex","i18nParent","anchorRNode","i18nChild","addTNodeAndUpdateInsertBeforeIndex","previousTNodes","newTNode","existingTNode","isI18nText","isNewTNodeCreatedBefore","getInsertBeforeIndex","setInsertBeforeIndex","getTIcu","setTIcu","setTNodeInsertBeforeIndex","createTNodePlaceholder","getCurrentICUCaseIndex","currentCase","getParentFromIcuCreateOpCode","mergedCode","getRefFromIcuCreateOpCode","getInstructionFromIcuCreateOpCode","icuCreateOpCode","parentIdx","refIdx","changeMask","changeMaskCounter","setMaskBit","hasChange","applyI18n","tI18n","updateOpCodes","bindingsStartIndex","applyUpdateOpCodes","applyCreateOpCodes","createOpCodes","insertInFrontOf","isComment","COMMENT","appendNow","APPEND_EAGERLY","SHIFT","applyMutableOpCodes","mutableOpCodes","rootIdx","rootRNode","textNodeIndex","caseIndex","anchorIdx","elementNodeIndex","commentValue","commentNodeIndex","commentRNode","elementRNode","checkBit","skipCodes","sanitizeFn","tNodeOrTagName","rText","applyIcuSwitchCase","applyIcuUpdateCase","activeCaseIndex","getCaseIndex","applyIcuSwitchCaseRemove","removeCodes","nodeOrIcuIndex","icuExpression","bindingValue","cases","resolvedCase","loadIcuContainerVisitor","_stack","_index","_removes","icuContainerIteratorStart","enterIcu","icuContainerIteratorNext","removeOpCode","tIcuIndex","i18nCreateOpCodesToString","opcodes","lines","i18nUpdateOpCodesToString","parser","OpCodeParser","consumeOpCode","consumeString","sanitizationFn","consumeFunction","hasMore","consumeNumber","statements","statement","consumeNumberOrString","opCodeText","icuCreateOpCodesToString","lastRef","consumeNumberStringOrMarker","line","i18nRemoveOpCodesToString","codes","BINDING_REGEXP","ICU_REGEXP","NESTED_ICU","ICU_BLOCK_REGEXP","MARKER","SUBTEMPLATE_REGEXP","PH_REGEXP","NGSP_UNICODE_REGEXP","replaceNgsp","attachDebugGetter","debugGetter","enumerable","i18nStartFirstCreatePass","parentTNodeIndex","subTemplateIndex","existingTNodeStack","getTranslationForTemplate","msgParts","i18nParseTextIntoPartsAndICU","part","i18nStartFirstCreatePassProcessTextNode","icuContainerTNode","createTNodeAndAddOpCode","mainBinding","icuNodeIndex","icuStart","isClosing","existingTNodes","isICU","i18nNodeIdx","tNodeIdx","hasBinding","generateBindingUpdateOpCodes","i18nAttributesFirstPass","previousElement","previousElementIndex","countBindings","destinationNode","bindingStart","maskIndex","sizeIndex","textParts","textValue","toMaskBit","opCodes","isRootTemplateMessage","removeInnerTemplateTranslation","inTemplate","tagMatched","exec","search","bindingMask","addUpdateIcuSwitch","valueArr","nestedIcus","icuIndex","parseIcuCase","addUpdateIcuUpdate","parseICUBlock","pattern","icuType","binding","pos","blocks","prevPos","braceStack","braces","lastIndex","block","caseName","unsafeCaseHtml","inertRootNode","walkIcuTree","sharedUpdateOpCodes","depth","addCreateNodeAndAppend","lowerAttrName","addCreateAttribute","addRemoveNode","isNestedIcu","nestedIcuIndex","addRemoveNestedIcu","appendToParentIdx","createAtIdx","ROOT_TEMPLATE_ID","PP_MULTI_VALUE_PLACEHOLDERS_REGEXP","PP_PLACEHOLDERS_REGEXP","PP_ICU_VARS_REGEXP","PP_ICU_PLACEHOLDERS_REGEXP","PP_ICUS_REGEXP","PP_CLOSE_TEMPLATE_REGEXP","PP_TEMPLATE_ID_REGEXP","i18nPostprocess","replacements","templateIdsStack","phs","tmpl","placeholders","placeholder","templateId","isCloseTemplateTag","currentTemplateId","_type","_idx","ɵɵi18nStart","messageIndex","sameViewParentTNode","ɵɵi18nEnd","ɵɵi18n","ɵɵi18nAttributes","ɵɵi18nExp","ɵɵi18nApply","ɵɵi18nPostprocess","isPromise","isSubscribable","ɵɵlistener","eventName","listenerFn","useCapture","eventTargetResolver","listenerInternal","ɵɵsyntheticHostListener","findExistingListener","cleanupEventName","listenerIdxInLCleanup","isTNodeDirectiveHost","processOutputs","lCleanupIndex","idxOrTargetGetter","existingListener","lastListenerFn","__ngLastListenerFn__","__ngNextListenerFn__","wrapListener","listen","propsLength","minifiedName","output","subscription","executeListenerWithErrorHandling","wrapWithPreventDefault","wrapListenerIn_markDirtyAndPreventDefault","nextListenerFn","preventDefault","ɵɵnextContext","matchingProjectionSlotIndex","projectionSlots","wildcardNgContentIndex","ngProjectAsAttrVal","ɵɵprojectionDef","numProjectionSlots","projectionHeads","tails","componentChild","ɵɵprojection","selectorIndex","ɵɵpropertyInterpolate","ɵɵpropertyInterpolate1","ɵɵpropertyInterpolate2","ɵɵpropertyInterpolate3","ɵɵpropertyInterpolate4","ɵɵpropertyInterpolate5","ɵɵpropertyInterpolate6","ɵɵpropertyInterpolate7","ɵɵpropertyInterpolate8","ɵɵpropertyInterpolateV","ɵɵreference","ɵɵstyleMapInterpolate1","ɵɵstyleMapInterpolate2","ɵɵstyleMapInterpolate3","ɵɵstyleMapInterpolate4","ɵɵstyleMapInterpolate5","ɵɵstyleMapInterpolate6","ɵɵstyleMapInterpolate7","ɵɵstyleMapInterpolate8","ɵɵstyleMapInterpolateV","ɵɵstylePropInterpolate1","valueSuffix","ɵɵstylePropInterpolate2","ɵɵstylePropInterpolate3","ɵɵstylePropInterpolate4","ɵɵstylePropInterpolate5","ɵɵstylePropInterpolate6","ɵɵstylePropInterpolate7","ɵɵstylePropInterpolate8","ɵɵstylePropInterpolateV","ɵɵtext","textNative","_locateOrCreateTextNode","locateOrCreateTextNodeImpl","enableLocateOrCreateTextNodeImpl","ɵɵtextInterpolate","ɵɵtextInterpolate1","ɵɵtextInterpolate2","ɵɵtextInterpolate3","ɵɵtextInterpolate4","ɵɵtextInterpolate5","ɵɵtextInterpolate6","ɵɵtextInterpolate7","ɵɵtextInterpolate8","ɵɵtextInterpolateV","viewProviders","resolveProvider","lInjectablesBlueprint","providerFactory","beginIndex","existingFactoryIndex","registerDestroyHooksIfSupported","existingProvidersFactoryIndex","existingViewProvidersFactoryIndex","doesProvidersFactoryExist","doesViewProvidersFactoryExist","multiFactory","multiViewProvidersFactoryResolver","multiProvidersFactoryResolver","indexInFactory","multiFactoryAdd","componentProviders","contextIndex","providerIsTypeProvider","providerIsClassProvider","classToken","existingCallbacksIndex","isComponentProvider","lData","multiResolve","componentCount","multiProviders","factoryFn","ɵɵProvidersFeature","processProvidersFn","NgModuleRef$1","NgModuleFactory$1","createNgModule","NgModuleRef","createNgModuleRef","_parent","_bootstrapComponents","destroyCbs","componentFactoryResolver","_r3Injector","NgModuleFactory","createNgModuleRefWithProviders","EnvironmentNgModuleRefAdapter","debugName","runEnvironmentInitializers","createEnvironmentInjector","adapter","StandaloneService","cachedInjectors","getOrCreateStandaloneInjector","standaloneInjector","_class17","ɵɵStandaloneFeature","ɵɵsetComponentScope","ɵɵsetNgModuleScope","convertToTypeArray","flattenValues","some","maybeUnwrapModuleWithProviders","getComponent","assertDomElement","getContext","getOwningComponent","elementOrDir","getRootComponents","getInjector","getInjectionTokens","providerTokens","isDirectiveDefHack","getDirectives","Text","getDirectiveMetadata$1","directiveOrComponentInstance","getLocalRefs","getHostElement","componentOrDirective","getRenderedText","hostElement","getListeners","lContext","listeners","firstParam","secondParam","listenerElement","useCaptureOrIndx","sort","sortListeners","getComponentLView","nodeIndx","ASYNC_COMPONENT_METADATA_FN","getAsyncClassMetadataFn","_componentClass$ASYNC","componentClass","setClassMetadataAsync","dependencyLoaderFn","metadataSetterFn","setClassMetadata","clazz","ɵɵpureFunction0","slotOffset","pureFn","thisArg","ɵɵpureFunction1","exp","pureFunction1Internal","ɵɵpureFunction2","pureFunction2Internal","ɵɵpureFunction3","pureFunction3Internal","ɵɵpureFunction4","pureFunction4Internal","ɵɵpureFunction5","exp5","ɵɵpureFunction6","exp6","ɵɵpureFunction7","exp7","ɵɵpureFunction8","exp8","ɵɵpureFunctionV","exps","pureFunctionVInternal","getPureFunctionReturnValue","returnValueIndex","lastReturnValue","bindingRoot","ɵɵpipe","pipeName","getPipeDef","_tView$destroyHooks2","pipeFactory","previousInjectorProfilerContext","pipeInstance","pipe","getMultipleMatchingPipesMessage","getPipeNotFoundErrorMessage","hostIsStandalone","componentInfoMessage","verifyMessage","ɵɵpipeBind1","isPure","ɵɵpipeBind2","ɵɵpipeBind3","ɵɵpipeBind4","ɵɵpipeBindV","symbolIterator","_results","QueryList","changes","_this$_changes","_changes","_emitDistinctChangesOnly","_changesDetected","last","reduce","init","toArray","resultsTree","newResultFlat","notifyOnChanges","setDirty","TemplateRef","_class19","injectTemplateRef","ViewEngineTemplateRef","R3TemplateRef","_declarationLView","_declarationTContainer","elementRef","_this$_declarationTCo","createTemplateRef","LQuery_","queryList","clone","LQueries_","tQueries","noOfInheritedQueries","viewLQueries","tQuery","getByIndex","parentLQuery","indexInDeclarationView","dirtyQueriesWithMatches","getTQuery","TQueryMetadata_","predicate","read","TQueries_","queriesForTemplateRef","childQueryIndex","tqueryClone","track","tquery","TQuery_","crossesNgTemplate","_appliesToNextNode","_declarationNodeIndex","isApplyingToNode","matchTNode","addMatch","declarationNodeIdx","matchTNodeWithReadOption","getIdxOfMatchingSelector","nodeMatchIdx","directiveOrProviderIdx","matchIdx","createResultByTNodeType","createResultForNode","matchingIdx","createSpecialToken","materializeViewResults","queryIndex","lQuery","tQueryMatches","matchedNodeIdx","collectQueryResults","lViewResults","embeddedLViews","ɵɵqueryRefresh","ɵɵviewQuery","createTQuery","createLQuery","ɵɵcontentQuery","saveContentQueryAndDirectiveIndex","ɵɵloadQuery","loadQueryInternal","tViewContentQueries","lastSavedDirectiveIndex","ɵɵtemplateRefExtractor","ɵɵgetComponentDepsFactory","ɵsetClassDebugInfo","angularCoreEnv","jitOptions","setJitOptions","defaultEncapsulation","preserveWhitespaces","getJitOptions","resetJitOptions","patchModuleCompilation","moduleQueue","enqueueModuleForDelayedScoping","flushingModuleQueue","flushModuleScopingQueueAsMuchAsPossible","every","isResolvedDeclaration","setScopeOnDeclaredComponents","declaration","compileNgModule","compileNgModuleDefs","allowDuplicateDeclarationsInRoot","expandModuleWithProviders","NgModule","verifySemanticsOfNgModuleDef","compileInjector","generateStandaloneInDeclarationsError","importingModule","verifiedNgModule","errors","unwrapModuleWithProvidersImports","modOrStandaloneCmpt","verifySemanticsOfNgModuleImport","verifyDeclarationsHaveDefinitions","verifyDirectivesHaveSelector","declarationType","verifyNotStandalone","combinedDeclarations","computeCombinedExports","verifyExportsAreDeclaredOrReExported","verifyDeclarationIsUnique","getAnnotation","mod","verifyCorrectBootstrapType","verifyComponentIsPartOfNgModule","lastIndexOf","suppressErrors","existingModule","typeOrWithProviders","collect","__annotations__","readAnnotation","resetCompiledComponents","transitiveScopes","transitiveScopesFor","patchComponentDefWithScope","ngSelectorScope","transitiveScopesForNgModule","declared","declaredWithDefs","exportedType","compilationDepth","compileComponent","ngComponentDef","addDirectiveFactoryDef","directiveMetadata","typeSourceSpan","createParseSourceSpan","animations","interpolation","usesInheritance","addDirectiveDefToUndecoratedParents","getStandaloneDefFunctions","hasSelectorScope","cachedDirectiveDefs","cachedPipeDefs","seen","rawDep","p","d","compileDirective","ngDirectiveDef","getDirectiveMetadata","sourceMapUrl","facade","Directive","extendsDirectlyFromObject","_metadata$hostDirecti","extractQueriesMetadata","isContentQuery","lifecycle","usesOnChanges","extractExportAs","viewQueries","objPrototype","shouldAddAbstractDirective","convertToR3QueryPredicate","splitByComma","convertToR3QueryMetadata","ann","static","isQueryAnn","queriesMeta","isInputAnnotation","piece","LIFECYCLE_HOOKS","hookName","metadataName","compilePipe","ngPipeDef","getPipeMetadata","Pipe","Component","c","Input","alias","Output","HostBinding","hostPropertyName","HostListener","Version","full","major","minor","patch","VERSION","ITS_JUST_ANGULAR","Console","log","_class20","Console_Factory","ModuleWithComponentFactories","ngModuleFactory","componentFactories","Compiler","compileModuleSync","compileModuleAsync","compileModuleAndAllComponentsSync","moduleDef","compileModuleAndAllComponentsAsync","clearCache","clearCacheFor","getModuleId","_class21","Compiler_Factory","COMPILER_OPTIONS","CompilerFactory","PendingTasks","taskId","pendingTasks","hasPendingTasks","_hasPendingTasks","_class22","PendingTasks_Factory","DIDebugData","resolverToTokenToDependencies","resolverToProviders","standaloneInjectorToComponent","frameworkDIDebugData","getFrameworkDIDebugData","setupFrameworkInjectorProfiler","injectorProfilerEvent","handleInjectorProfilerEvent","handleInjectEvent","handleInstanceCreatedByInjectorEvent","handleProviderConfiguredEvent","diResolver","getDIResolver","diResolverToInstantiatedToken","canBeHeldWeakly","instantiatedTokenToDependencies","injectedIn","getNodeInjectorContext","standaloneComponent","isStandaloneComponent","applyChanges","getDependenciesFromInjectable","unformattedDependencies","getDependenciesForTokenInInjector","resolutionPath","getInjectorResolutionPath","formattedDependency","injectorToCheck","firstInjector","lookupFromFirstInjector","_tokenDependencyMap$g","_resolverToTokenToDep","_resolverToTokenToDep2","_resolverToTokenToDep3","tokenDependencyMap","_dependency$injectedI","dependencyNode","instanceNode","getProviderImportsContainer","defTypeRef","getNodeInjectorProviders","_resolverToProviders$","getProviderImportPaths","providerImportsContainer","providerToPath","visitedContainers","walkProviderTreeToDiscoverImportPaths","prov","existingImportPath","containerDef","lastContainerAddedToPath","isNextStepInPath","moduleImport","_providerToPath$get","getEnvironmentInjectorProviders","_getFrameworkDIDebugD","providerRecordsWithoutImportPaths","isPlatformInjector","providerRecords","_providerToPath$get2","importPath","getInjectorProviders","getInjectorMetadata","_injector$source","getInjectorResolutionPathHelper","getInjectorParent","getModuleInjectorOfNodeInjector","parentTView","_chainedInjector$inje","chainedInjector","injectorParent","GLOBAL_PUBLISH_EXPANDO_KEY","_published","publishDefaultGlobalUtils$1","publishGlobalUtil","COMPILED","w","TESTABILITY","TESTABILITY_GETTER","Testability","_ngZone","testabilityGetter","_pendingCount","_isZoneStable","_didWork","_callbacks","taskTrackingZone","_testabilityGetter","setTestabilityGetter","addToWindow","_watchAngularEvents","_runCallbacksIfReady","increasePendingRequestCount","decreasePendingRequestCount","doneCb","pending","getPendingTasks","updateCb","macroTasks","creationLocation","addCallback","whenStable","getPendingRequestCount","registerApplication","unregisterApplication","findProviders","using","exactMatch","_class23","Testability_Factory","TestabilityRegistry","_applications","testability","unregisterAllApplications","getTestability","elem","getAllTestabilities","getAllRootElements","findTestabilityInTree","findInAncestors","_testabilityGetter$fi","_testabilityGetter2","_class24","TestabilityRegistry_Factory","APP_INITIALIZER","ApplicationInitStatus","_inject","initialized","donePromise","rej","reject","appInits","runInitializers","asyncInitPromises","initResult","observableAsPromise","catch","_class25","ApplicationInitStatus_Factory","APP_BOOTSTRAP_LISTENER","compileNgModuleFactory","moduleFactory","compilerOptions","_lastDefined","compilerProviders","flatMap","option","_option$providers","compilerInjector","resourceLoader","ResourceLoader","publishDefaultGlobalUtils","publishSignalConfiguration","cf","NgProbeToken","_callAndReportToErrorHandler","optionsReducer","objs","ApplicationRef","_bootstrapListeners","_runningTick","_destroyListeners","internalErrorHandler","componentTypes","componentOrFactory","warnIfDestroyed","initStatus","resolver","selectorOrNode","compRef","_loadComponent","tick","attachView","viewCount","_class26","ApplicationRef_Factory","whenStableStore","applicationRef","_whenStableStore","cachedWhenStable","whenStablePromise","toPromise","_whenStableStore2","NgZoneChangeDetectionScheduler","initialize","_onMicrotaskEmptySubscription","_this$_onMicrotaskEmp","_class27","NgZoneChangeDetectionScheduler_Factory","PROVIDED_NG_ZONE","internalProvideZoneChangeDetection","ngZoneFactory","ngZoneChangeDetectionScheduler","ZoneStablePendingTask","ngZoneApplicationErrorHandlerFactory","provideZoneChangeDetection","zoneProviders","getNgZoneOptions","_options$eventCoalesc","_options$runCoalescin","eventCoalescing","runCoalescing","_task","_class28","ZoneStablePendingTask_Factory","getGlobalLocale","LOCALE","$localize","LOCALE_ID","DEFAULT_CURRENCY_CODE","TRANSLATIONS","TRANSLATIONS_FORMAT","MissingTranslationStrategy","PLATFORM_DESTROY_LISTENERS","PlatformRef","_modules","bootstrapModuleFactory","ngZoneEventCoalescing","ngZoneRunCoalescing","moduleRef","exceptionHandler","_moduleDoBootstrap","bootstrapModule","ngDoBootstrap","module","destroyListeners","_class29","PlatformRef_Factory","_platformInjector","ALLOW_MULTIPLE_PLATFORMS","createPlatform","platform","runPlatformInitializers","createPlatformFactory","parentPlatformFactory","desc","extraProviders","getPlatform","platformProviders","createPlatformInjector","assertPlatform","requiredToken","_platformInjector$get","_platformInjector2","destroyPlatform","_getPlatform","createOrReusePlatformInjector","inits","isDevMode","enableProdMode","getModuleFactory","noModuleError","getNgModuleById","ViewRef","EmbeddedViewRef","ng_module_factory_loader_impl","DebugEventListener","asNativeElements","debugEls","DebugNode","nativeNode","DebugElement","references","copyDomProperties","collectPropertyBindings","lowercaseTNodeAttrs","_element$style","baseVal","childNodes","children","getDebugNode","query","queryAll","_queryAll","queryAllNodes","triggerEventHandler","eventObj","invokedListeners","eventListeners","unwrappedListener","NodePrototype","descriptors","getOwnPropertyDescriptors","isPrimitiveValue","elementsOnly","_queryNodeChildren","_queryNativeNodeDescendants","rootNativeNode","_addQueryMatch","nodeOrContainer","_queryNodeChildrenInContainer","head","nextLView","nextTNode","childView","debugNode","bindingIndexes","metadataParts","_nativeNodeToDebugNode","NG_DEBUG_PROPERTY","getAllDebugNodes","indexDebugNode","removeDebugNodeFromIndex","platformCore","ApplicationModule","_class30","ApplicationModule_Factory","defaultEquals","activeConsumer","inNotificationPhase","epoch","isInNotificationPhase","isReactive","version","lastCleanEpoch","producerNode","producerLastReadVersion","producerIndexOfThis","nextProducerIndex","liveConsumerNode","liveConsumerIndexOfThis","consumerAllowSignalWrites","producerMustRecompute","producerRecomputeValue","producerAccessed","assertConsumerNode","consumerIsLive","staleProducer","producerRemoveLiveConsumerAtIndex","producerAddLiveConsumer","producerIncrementEpoch","producerUpdateValueVersion","producerNotifyConsumers","consumerMarkDirty","producerUpdatesAllowed","_activeConsumer","_node$consumerMarkedD","producer","seenVersion","indexOfThis","assertProducerNode","idxProducer","_node$liveConsumerNod","_node$liveConsumerNod2","_node$producerNode","_node$producerIndexOf","_node$producerLastRea","_node$liveConsumerNod3","_node$liveConsumerInd","COMPUTED_NODE","ERRORED","UNSET","COMPUTING","defaultThrowError","throwInvalidWriteToSignalErrorFn","throwInvalidWriteToSignalError","postSignalSetFn","SIGNAL_NODE","setPostSignalSetFn","signalGetFn","signalValueChanged","updater","signalMutateFn","mutator","_postSignalSetFn","WATCH_NODE","registerOnCleanup","isWatchNodeDestroyed","destroyWatchNode","NOOP_CLEANUP_FN","hasRun","setAlternateWeakRefImpl","SCAN_DELAY","OVERSIZED_IMAGE_TOLERANCE","ImagePerformanceWarning","_this$options","_this$options2","PerformanceObserver","initPerformanceObserver","win","waitToScan","scanImages","readyState","_this$window","once","_this$observer","entryList","_lcpElement$element$s","_lcpElement$element","getEntries","lcpElement","imgSrc","lcpImageUrl","buffered","_this$options5","images","querySelectorAll","lcpElementFound","lcpElementLoadedCorrectly","image","_this$options3","_this$options4","isOversized","logOversizedImageWarning","loading","logLazyLCPWarning","computedStyle","getComputedStyle","renderedWidth","parseFloat","getPropertyValue","renderedHeight","boxSizing","objectFit","paddingTop","paddingRight","paddingBottom","paddingLeft","intrinsicWidth","naturalWidth","intrinsicHeight","naturalHeight","recommendedWidth","devicePixelRatio","recommendedHeight","oversizedWidth","oversizedHeight","_class31","ImagePerformanceWarning_Factory","internalCreateApplication","appProviders","platformInjector","allAppProviders","envInjector","onErrorSubscription","destroyListener","onPlatformDestroyListeners","imagePerformanceService","getDeferBlocks","deferBlocks","isLast","SerializedViewCollection","indexByContent","viewAsString","getAll","tViewSsrId","getSsrId","calcNumRootNodes","calcNumRootNodesInLContainer","annotateComponentLViewForHydration","annotateHostElementForHydration","annotateLContainerForHydration","componentLViewNghIndex","rootLViewNghIndex","finalIndex","annotateForHydration","serializedViewCollection","corruptedTextNodes","insertCorruptedTextNodeMarkers","serializeLContainer","lastViewAsString","childLView","numRootNodes","childTView","serializeLView","currentViewAsString","_previousView$MULTIPL","previousView","appendSerializedNodePath","ngh","_ngh$NODES","appendDisconnectedNodeIndex","_ngh$DISCONNECTED_NOD","isContentProjectedNode","projectionHeadTNode","conditionallyAnnotateNodePath","_ngh$CONTAINERS","_ngh$TEMPLATES","hostNode","targetNode","_ngh$ELEMENT_CONTAINE","_rNode$nextSibling","componentUsesShadowDomEncapsulation","_getComponentDef","textNode","isHydrationSupportEnabled","APPLICATION_IS_STABLE_TIMEOUT","enableHydrationRuntimeSupport","printHydrationStats","whenStableWithTimeout","timeoutTime","logWarningOnStableTimedout","finally","withDomHydration","isEnabled","verifySsrContentsIntegrity","time","hydrationMarker","_node$textContent4","booleanAttribute","numberAttribute","fallbackValue","NaN","isNumberValue","isNaN","ɵɵngDeclareDirective","compileDirectiveDeclaration","ɵɵngDeclareClassMetadata","_decl$ctorParameters","_decl$propDecorators","ɵɵngDeclareComponent","compileComponentDeclaration","ɵɵngDeclareFactory","getFactoryKind","compileFactoryDeclaration","ɵɵngDeclareInjectable","compileInjectableDeclaration","ɵɵngDeclareInjector","compileInjectorDeclaration","ɵɵngDeclareNgModule","compileNgModuleDeclaration","ɵɵngDeclarePipe","compilePipeDeclaration","elementInjector","reflectComponentType","mergeApplicationConfig","configs","curr","assign","_global$$localize","ɵALLOW_MULTIPLE_PLATFORMS","ɵAfterRenderEventManager","ɵCONTAINER_HEADER_OFFSET","ɵChangeDetectionScheduler","ɵComponentFactory","ɵConsole","ɵDEFAULT_LOCALE_ID","ɵDEFER_BLOCK_CONFIG","ɵDEFER_BLOCK_DEPENDENCY_INTERCEPTOR","ɵDeferBlockBehavior","ɵDeferBlockState","ɵEffectScheduler","ɵIMAGE_CONFIG","ɵIMAGE_CONFIG_DEFAULTS","ɵINJECTOR_SCOPE","ɵIS_HYDRATION_DOM_REUSE_ENABLED","ɵLContext","ɵLifecycleHooksFeature","ɵLocaleDataIndex","ɵNG_COMP_DEF","ɵNG_DIR_DEF","ɵNG_ELEMENT_ID","ɵNG_INJ_DEF","ɵNG_MOD_DEF","ɵNG_PIPE_DEF","ɵNG_PROV_DEF","ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","ɵNO_CHANGE","ɵNgModuleFactory","ɵNoopNgZone","ɵPendingTasks","ɵReflectionCapabilities","ɵRender3ComponentFactory","ɵRender3ComponentRef","ɵRender3NgModuleRef","ɵRuntimeError","ɵSSR_CONTENT_INTEGRITY_MARKER","ɵTESTABILITY","ɵTESTABILITY_GETTER","ɵUSE_RUNTIME_DEPS_TRACKER_FOR_JIT","ɵViewRef","ɵXSS_SECURITY_URL","ɵZoneAwareQueueingScheduler","ɵ_sanitizeHtml","ɵ_sanitizeUrl","ɵallowSanitizationBypassAndThrow","ɵannotateForHydration","ɵbypassSanitizationTrustHtml","ɵbypassSanitizationTrustResourceUrl","ɵbypassSanitizationTrustScript","ɵbypassSanitizationTrustStyle","ɵbypassSanitizationTrustUrl","ɵclearResolutionOfComponentResourcesQueue","ɵcompileComponent","ɵcompileDirective","ɵcompileNgModule","ɵcompileNgModuleDefs","ɵcompileNgModuleFactory","ɵcompilePipe","ɵconvertToBitFlags","ɵcreateInjector","ɵdefaultIterableDiffers","ɵdefaultKeyValueDiffers","ɵdepsTracker","ɵdevModeEqual","ɵfindLocaleData","ɵflushModuleScopingQueueAsMuchAsPossible","ɵformatRuntimeError","ɵgenerateStandaloneInDeclarationsError","ɵgetAsyncClassMetadataFn","ɵgetDebugNode","ɵgetDeferBlocks","ɵgetDirectives","ɵgetEnsureDirtyViewsAreAlwaysReachable","ɵgetHostElement","ɵgetInjectableDef","ɵgetLContext","ɵgetLocaleCurrencyCode","ɵgetLocalePluralCase","ɵgetSanitizationBypassType","ɵglobal","ɵinjectChangeDetectorRef","ɵinternalAfterNextRender","ɵinternalCreateApplication","ɵisBoundToModule","ɵisComponentDefPendingResolution","ɵisEnvironmentProviders","ɵisInjectable","ɵisNgModule","ɵisPromise","ɵisSubscribable","ɵnoSideEffects","ɵpatchComponentDefWithScope","ɵperformanceMarkFeature","ɵpublishDefaultGlobalUtils","ɵpublishGlobalUtil","ɵregisterLocaleData","ɵrenderDeferBlockState","ɵresetCompiledComponents","ɵresetJitOptions","ɵresolveComponentResources","ɵrestoreComponentResolutionQueue","ɵsetAllowDuplicateNgModuleIdsForTest","ɵsetAlternateWeakRefImpl","ɵsetClassMetadata","ɵsetClassMetadataAsync","ɵsetCurrentInjector","ɵsetDocument","ɵsetEnsureDirtyViewsAreAlwaysReachable","ɵsetInjectorProfilerContext","ɵsetLocaleId","ɵstore","ɵstringify","ɵtransitiveScopesFor","ɵtriggerResourceLoading","ɵtruncateMiddle","ɵunregisterLocaleData","ɵunwrapSafeValue","ɵwhenStable","ɵwithDomHydration","ɵɵFactoryTarget","ɵɵregisterNgModuleType"],"sources":["/Users/linibm/Desktop/LazyNotes/node_modules/@angular/core/fesm2022/core.mjs"],"sourcesContent":["/**\n * @license Angular v17.0.8\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { setActiveConsumer as setActiveConsumer$1, consumerDestroy as consumerDestroy$1, SIGNAL as SIGNAL$1, createComputed as createComputed$1, createSignal as createSignal$1, signalSetFn as signalSetFn$1, signalUpdateFn as signalUpdateFn$1, REACTIVE_NODE as REACTIVE_NODE$1, consumerBeforeComputation as consumerBeforeComputation$1, consumerAfterComputation as consumerAfterComputation$1, consumerPollProducersForChange as consumerPollProducersForChange$1, getActiveConsumer as getActiveConsumer$1, createWatch as createWatch$1, setThrowInvalidWriteToSignalError as setThrowInvalidWriteToSignalError$1 } from '@angular/core/primitives/signals';\nimport { Subject, Subscription, BehaviorSubject } from 'rxjs';\nimport { map, first } from 'rxjs/operators';\n\nfunction getClosureSafeProperty(objWithPropertyToExtract) {\n    for (let key in objWithPropertyToExtract) {\n        if (objWithPropertyToExtract[key] === getClosureSafeProperty) {\n            return key;\n        }\n    }\n    throw Error('Could not find renamed property on target object.');\n}\n/**\n * Sets properties on a target object from a source object, but only if\n * the property doesn't already exist on the target object.\n * @param target The target to set properties on\n * @param source The source of the property keys and values to set\n */\nfunction fillProperties(target, source) {\n    for (const key in source) {\n        if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {\n            target[key] = source[key];\n        }\n    }\n}\n\nfunction stringify(token) {\n    if (typeof token === 'string') {\n        return token;\n    }\n    if (Array.isArray(token)) {\n        return '[' + token.map(stringify).join(', ') + ']';\n    }\n    if (token == null) {\n        return '' + token;\n    }\n    if (token.overriddenName) {\n        return `${token.overriddenName}`;\n    }\n    if (token.name) {\n        return `${token.name}`;\n    }\n    const res = token.toString();\n    if (res == null) {\n        return '' + res;\n    }\n    const newLineIndex = res.indexOf('\\n');\n    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n/**\n * Concatenates two strings with separator, allocating new strings only when necessary.\n *\n * @param before before string.\n * @param separator separator string.\n * @param after after string.\n * @returns concatenated string.\n */\nfunction concatStringsWithSpace(before, after) {\n    return (before == null || before === '') ?\n        (after === null ? '' : after) :\n        ((after == null || after === '') ? before : before + ' ' + after);\n}\n/**\n * Ellipses the string in the middle when longer than the max length\n *\n * @param string\n * @param maxLength of the output string\n * @returns elispsed string with ... in the middle\n */\nfunction truncateMiddle(str, maxLength = 100) {\n    if (!str || maxLength < 1 || str.length <= maxLength)\n        return str;\n    if (maxLength == 1)\n        return str.substring(0, 1) + '...';\n    const halfLimit = Math.round(maxLength / 2);\n    return str.substring(0, halfLimit) + '...' + str.substring(str.length - halfLimit);\n}\n\nconst __forward_ref__ = getClosureSafeProperty({ __forward_ref__: getClosureSafeProperty });\n/**\n * Allows to refer to references which are not yet defined.\n *\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n * a query is not yet defined.\n *\n * `forwardRef` is also used to break circularities in standalone components imports.\n *\n * @usageNotes\n * ### Circular dependency example\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n *\n * ### Circular standalone reference import example\n * ```ts\n * @Component({\n *   standalone: true,\n *   imports: [ChildComponent],\n *   selector: 'app-parent',\n *   template: `<app-child [hideParent]=\"hideParent\"></app-child>`,\n * })\n * export class ParentComponent {\n *   @Input() hideParent: boolean;\n * }\n *\n *\n * @Component({\n *   standalone: true,\n *   imports: [CommonModule, forwardRef(() => ParentComponent)],\n *   selector: 'app-child',\n *   template: `<app-parent *ngIf=\"!hideParent\"></app-parent>`,\n * })\n * export class ChildComponent {\n *   @Input() hideParent: boolean;\n * }\n * ```\n *\n * @publicApi\n */\nfunction forwardRef(forwardRefFn) {\n    forwardRefFn.__forward_ref__ = forwardRef;\n    forwardRefFn.toString = function () {\n        return stringify(this());\n    };\n    return forwardRefFn;\n}\n/**\n * Lazily retrieves the reference value from a forwardRef.\n *\n * Acts as the identity function when given a non-forward-ref value.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n *\n * @see {@link forwardRef}\n * @publicApi\n */\nfunction resolveForwardRef(type) {\n    return isForwardRef(type) ? type() : type;\n}\n/** Checks whether a function is wrapped by a `forwardRef`. */\nfunction isForwardRef(fn) {\n    return typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) &&\n        fn.__forward_ref__ === forwardRef;\n}\n\nfunction isEnvironmentProviders(value) {\n    return value && !!value.ɵproviders;\n}\n\n/**\n * Base URL for the error details page.\n *\n * Keep this constant in sync across:\n *  - packages/compiler-cli/src/ngtsc/diagnostics/src/error_details_base_url.ts\n *  - packages/core/src/error_details_base_url.ts\n */\nconst ERROR_DETAILS_PAGE_BASE_URL = 'https://angular.io/errors';\n/**\n * URL for the XSS security documentation.\n */\nconst XSS_SECURITY_URL = 'https://g.co/ng/security#xss';\n\n/**\n * Class that represents a runtime error.\n * Formats and outputs the error message in a consistent way.\n *\n * Example:\n * ```\n *  throw new RuntimeError(\n *    RuntimeErrorCode.INJECTOR_ALREADY_DESTROYED,\n *    ngDevMode && 'Injector has already been destroyed.');\n * ```\n *\n * Note: the `message` argument contains a descriptive error message as a string in development\n * mode (when the `ngDevMode` is defined). In production mode (after tree-shaking pass), the\n * `message` argument becomes `false`, thus we account for it in the typings and the runtime\n * logic.\n */\nclass RuntimeError extends Error {\n    constructor(code, message) {\n        super(formatRuntimeError(code, message));\n        this.code = code;\n    }\n}\n/**\n * Called to format a runtime error.\n * See additional info on the `message` argument type in the `RuntimeError` class description.\n */\nfunction formatRuntimeError(code, message) {\n    // Error code might be a negative number, which is a special marker that instructs the logic to\n    // generate a link to the error details page on angular.io.\n    // We also prepend `0` to non-compile-time errors.\n    const fullCode = `NG0${Math.abs(code)}`;\n    let errorMessage = `${fullCode}${message ? ': ' + message : ''}`;\n    if (ngDevMode && code < 0) {\n        const addPeriodSeparator = !errorMessage.match(/[.,;!?\\n]$/);\n        const separator = addPeriodSeparator ? '.' : '';\n        errorMessage =\n            `${errorMessage}${separator} Find more at ${ERROR_DETAILS_PAGE_BASE_URL}/${fullCode}`;\n    }\n    return errorMessage;\n}\n\nconst NG_COMP_DEF = getClosureSafeProperty({ ɵcmp: getClosureSafeProperty });\nconst NG_DIR_DEF = getClosureSafeProperty({ ɵdir: getClosureSafeProperty });\nconst NG_PIPE_DEF = getClosureSafeProperty({ ɵpipe: getClosureSafeProperty });\nconst NG_MOD_DEF = getClosureSafeProperty({ ɵmod: getClosureSafeProperty });\nconst NG_FACTORY_DEF = getClosureSafeProperty({ ɵfac: getClosureSafeProperty });\n/**\n * If a directive is diPublic, bloomAdd sets a property on the type with this constant as\n * the key and the directive's unique ID as the value. This allows us to map directives to their\n * bloom filter bit for DI.\n */\n// TODO(misko): This is wrong. The NG_ELEMENT_ID should never be minified.\nconst NG_ELEMENT_ID = getClosureSafeProperty({ __NG_ELEMENT_ID__: getClosureSafeProperty });\n/**\n * The `NG_ENV_ID` field on a DI token indicates special processing in the `EnvironmentInjector`:\n * getting such tokens from the `EnvironmentInjector` will bypass the standard DI resolution\n * strategy and instead will return implementation produced by the `NG_ENV_ID` factory function.\n *\n * This particular retrieval of DI tokens is mostly done to eliminate circular dependencies and\n * improve tree-shaking.\n */\nconst NG_ENV_ID = getClosureSafeProperty({ __NG_ENV_ID__: getClosureSafeProperty });\n\n/**\n * Used for stringify render output in Ivy.\n * Important! This function is very performance-sensitive and we should\n * be extra careful not to introduce megamorphic reads in it.\n * Check `core/test/render3/perf/render_stringify` for benchmarks and alternate implementations.\n */\nfunction renderStringify(value) {\n    if (typeof value === 'string')\n        return value;\n    if (value == null)\n        return '';\n    // Use `String` so that it invokes the `toString` method of the value. Note that this\n    // appears to be faster than calling `value.toString` (see `render_stringify` benchmark).\n    return String(value);\n}\n/**\n * Used to stringify a value so that it can be displayed in an error message.\n *\n * Important! This function contains a megamorphic read and should only be\n * used for error messages.\n */\nfunction stringifyForError(value) {\n    if (typeof value === 'function')\n        return value.name || value.toString();\n    if (typeof value === 'object' && value != null && typeof value.type === 'function') {\n        return value.type.name || value.type.toString();\n    }\n    return renderStringify(value);\n}\n/**\n * Used to stringify a `Type` and including the file path and line number in which it is defined, if\n * possible, for better debugging experience.\n *\n * Important! This function contains a megamorphic read and should only be used for error messages.\n */\nfunction debugStringifyTypeForError(type) {\n    // TODO(pmvald): Do some refactoring so that we can use getComponentDef here without creating\n    // circular deps.\n    let componentDef = type[NG_COMP_DEF] || null;\n    if (componentDef !== null && componentDef.debugInfo) {\n        return stringifyTypeFromDebugInfo(componentDef.debugInfo);\n    }\n    return stringifyForError(type);\n}\n// TODO(pmvald): Do some refactoring so that we can use the type ClassDebugInfo for the param\n// debugInfo here without creating circular deps.\nfunction stringifyTypeFromDebugInfo(debugInfo) {\n    if (!debugInfo.filePath || !debugInfo.lineNumber) {\n        return debugInfo.className;\n    }\n    else {\n        return `${debugInfo.className} (at ${debugInfo.filePath}:${debugInfo.lineNumber})`;\n    }\n}\n\n/** Called when directives inject each other (creating a circular dependency) */\nfunction throwCyclicDependencyError(token, path) {\n    const depPath = path ? `. Dependency path: ${path.join(' > ')} > ${token}` : '';\n    throw new RuntimeError(-200 /* RuntimeErrorCode.CYCLIC_DI_DEPENDENCY */, `Circular dependency in DI detected for ${token}${depPath}`);\n}\nfunction throwMixedMultiProviderError() {\n    throw new Error(`Cannot mix multi providers and regular providers`);\n}\nfunction throwInvalidProviderError(ngModuleType, providers, provider) {\n    if (ngModuleType && providers) {\n        const providerDetail = providers.map(v => v == provider ? '?' + provider + '?' : '...');\n        throw new Error(`Invalid provider for the NgModule '${stringify(ngModuleType)}' - only instances of Provider and Type are allowed, got: [${providerDetail.join(', ')}]`);\n    }\n    else if (isEnvironmentProviders(provider)) {\n        if (provider.ɵfromNgModule) {\n            throw new RuntimeError(207 /* RuntimeErrorCode.PROVIDER_IN_WRONG_CONTEXT */, `Invalid providers from 'importProvidersFrom' present in a non-environment injector. 'importProvidersFrom' can't be used for component providers.`);\n        }\n        else {\n            throw new RuntimeError(207 /* RuntimeErrorCode.PROVIDER_IN_WRONG_CONTEXT */, `Invalid providers present in a non-environment injector. 'EnvironmentProviders' can't be used for component providers.`);\n        }\n    }\n    else {\n        throw new Error('Invalid provider');\n    }\n}\n/** Throws an error when a token is not found in DI. */\nfunction throwProviderNotFoundError(token, injectorName) {\n    const injectorDetails = injectorName ? ` in ${injectorName}` : '';\n    throw new RuntimeError(-201 /* RuntimeErrorCode.PROVIDER_NOT_FOUND */, ngDevMode && `No provider for ${stringifyForError(token)} found${injectorDetails}`);\n}\n\n// The functions in this file verify that the assumptions we are making\nfunction assertNumber(actual, msg) {\n    if (!(typeof actual === 'number')) {\n        throwError(msg, typeof actual, 'number', '===');\n    }\n}\nfunction assertNumberInRange(actual, minInclusive, maxInclusive) {\n    assertNumber(actual, 'Expected a number');\n    assertLessThanOrEqual(actual, maxInclusive, 'Expected number to be less than or equal to');\n    assertGreaterThanOrEqual(actual, minInclusive, 'Expected number to be greater than or equal to');\n}\nfunction assertString(actual, msg) {\n    if (!(typeof actual === 'string')) {\n        throwError(msg, actual === null ? 'null' : typeof actual, 'string', '===');\n    }\n}\nfunction assertFunction(actual, msg) {\n    if (!(typeof actual === 'function')) {\n        throwError(msg, actual === null ? 'null' : typeof actual, 'function', '===');\n    }\n}\nfunction assertEqual(actual, expected, msg) {\n    if (!(actual == expected)) {\n        throwError(msg, actual, expected, '==');\n    }\n}\nfunction assertNotEqual(actual, expected, msg) {\n    if (!(actual != expected)) {\n        throwError(msg, actual, expected, '!=');\n    }\n}\nfunction assertSame(actual, expected, msg) {\n    if (!(actual === expected)) {\n        throwError(msg, actual, expected, '===');\n    }\n}\nfunction assertNotSame(actual, expected, msg) {\n    if (!(actual !== expected)) {\n        throwError(msg, actual, expected, '!==');\n    }\n}\nfunction assertLessThan(actual, expected, msg) {\n    if (!(actual < expected)) {\n        throwError(msg, actual, expected, '<');\n    }\n}\nfunction assertLessThanOrEqual(actual, expected, msg) {\n    if (!(actual <= expected)) {\n        throwError(msg, actual, expected, '<=');\n    }\n}\nfunction assertGreaterThan(actual, expected, msg) {\n    if (!(actual > expected)) {\n        throwError(msg, actual, expected, '>');\n    }\n}\nfunction assertGreaterThanOrEqual(actual, expected, msg) {\n    if (!(actual >= expected)) {\n        throwError(msg, actual, expected, '>=');\n    }\n}\nfunction assertNotDefined(actual, msg) {\n    if (actual != null) {\n        throwError(msg, actual, null, '==');\n    }\n}\nfunction assertDefined(actual, msg) {\n    if (actual == null) {\n        throwError(msg, actual, null, '!=');\n    }\n}\nfunction throwError(msg, actual, expected, comparison) {\n    throw new Error(`ASSERTION ERROR: ${msg}` +\n        (comparison == null ? '' : ` [Expected=> ${expected} ${comparison} ${actual} <=Actual]`));\n}\nfunction assertDomNode(node) {\n    if (!(node instanceof Node)) {\n        throwError(`The provided value must be an instance of a DOM Node but got ${stringify(node)}`);\n    }\n}\nfunction assertElement(node) {\n    if (!(node instanceof Element)) {\n        throwError(`The provided value must be an element but got ${stringify(node)}`);\n    }\n}\nfunction assertIndexInRange(arr, index) {\n    assertDefined(arr, 'Array must be defined.');\n    const maxLen = arr.length;\n    if (index < 0 || index >= maxLen) {\n        throwError(`Index expected to be less than ${maxLen} but got ${index}`);\n    }\n}\nfunction assertOneOf(value, ...validValues) {\n    if (validValues.indexOf(value) !== -1)\n        return true;\n    throwError(`Expected value to be one of ${JSON.stringify(validValues)} but was ${JSON.stringify(value)}.`);\n}\n\n/**\n * Construct an injectable definition which defines how a token will be constructed by the DI\n * system, and in which injectors (if any) it will be available.\n *\n * This should be assigned to a static `ɵprov` field on a type, which will then be an\n * `InjectableType`.\n *\n * Options:\n * * `providedIn` determines which injectors will include the injectable, by either associating it\n *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be\n *   provided in the `'root'` injector, which will be the application-level injector in most apps.\n * * `factory` gives the zero argument function which will create an instance of the injectable.\n *   The factory can call [`inject`](api/core/inject) to access the `Injector` and request injection\n * of dependencies.\n *\n * @codeGenApi\n * @publicApi This instruction has been emitted by ViewEngine for some time and is deployed to npm.\n */\nfunction ɵɵdefineInjectable(opts) {\n    return {\n        token: opts.token,\n        providedIn: opts.providedIn || null,\n        factory: opts.factory,\n        value: undefined,\n    };\n}\n/**\n * @deprecated in v8, delete after v10. This API should be used only by generated code, and that\n * code should now use ɵɵdefineInjectable instead.\n * @publicApi\n */\nconst defineInjectable = ɵɵdefineInjectable;\n/**\n * Construct an `InjectorDef` which configures an injector.\n *\n * This should be assigned to a static injector def (`ɵinj`) field on a type, which will then be an\n * `InjectorType`.\n *\n * Options:\n *\n * * `providers`: an optional array of providers to add to the injector. Each provider must\n *   either have a factory or point to a type which has a `ɵprov` static property (the\n *   type must be an `InjectableType`).\n * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s\n *   whose providers will also be added to the injector. Locally provided types will override\n *   providers from imports.\n *\n * @codeGenApi\n */\nfunction ɵɵdefineInjector(options) {\n    return { providers: options.providers || [], imports: options.imports || [] };\n}\n/**\n * Read the injectable def (`ɵprov`) for `type` in a way which is immune to accidentally reading\n * inherited value.\n *\n * @param type A type which may have its own (non-inherited) `ɵprov`.\n */\nfunction getInjectableDef(type) {\n    return getOwnDefinition(type, NG_PROV_DEF) || getOwnDefinition(type, NG_INJECTABLE_DEF);\n}\nfunction isInjectable(type) {\n    return getInjectableDef(type) !== null;\n}\n/**\n * Return definition only if it is defined directly on `type` and is not inherited from a base\n * class of `type`.\n */\nfunction getOwnDefinition(type, field) {\n    return type.hasOwnProperty(field) ? type[field] : null;\n}\n/**\n * Read the injectable def (`ɵprov`) for `type` or read the `ɵprov` from one of its ancestors.\n *\n * @param type A type which may have `ɵprov`, via inheritance.\n *\n * @deprecated Will be removed in a future version of Angular, where an error will occur in the\n *     scenario if we find the `ɵprov` on an ancestor only.\n */\nfunction getInheritedInjectableDef(type) {\n    const def = type && (type[NG_PROV_DEF] || type[NG_INJECTABLE_DEF]);\n    if (def) {\n        ngDevMode &&\n            console.warn(`DEPRECATED: DI is instantiating a token \"${type.name}\" that inherits its @Injectable decorator but does not provide one itself.\\n` +\n                `This will become an error in a future version of Angular. Please add @Injectable() to the \"${type.name}\" class.`);\n        return def;\n    }\n    else {\n        return null;\n    }\n}\n/**\n * Read the injector def type in a way which is immune to accidentally reading inherited value.\n *\n * @param type type which may have an injector def (`ɵinj`)\n */\nfunction getInjectorDef(type) {\n    return type && (type.hasOwnProperty(NG_INJ_DEF) || type.hasOwnProperty(NG_INJECTOR_DEF)) ?\n        type[NG_INJ_DEF] :\n        null;\n}\nconst NG_PROV_DEF = getClosureSafeProperty({ ɵprov: getClosureSafeProperty });\nconst NG_INJ_DEF = getClosureSafeProperty({ ɵinj: getClosureSafeProperty });\n// We need to keep these around so we can read off old defs if new defs are unavailable\nconst NG_INJECTABLE_DEF = getClosureSafeProperty({ ngInjectableDef: getClosureSafeProperty });\nconst NG_INJECTOR_DEF = getClosureSafeProperty({ ngInjectorDef: getClosureSafeProperty });\n\n/**\n * Injection flags for DI.\n *\n * @publicApi\n * @deprecated use an options object for [`inject`](api/core/inject) instead.\n */\nvar InjectFlags;\n(function (InjectFlags) {\n    // TODO(alxhub): make this 'const' (and remove `InternalInjectFlags` enum) when ngc no longer\n    // writes exports of it into ngfactory files.\n    /** Check self and check parent injector if needed */\n    InjectFlags[InjectFlags[\"Default\"] = 0] = \"Default\";\n    /**\n     * Specifies that an injector should retrieve a dependency from any injector until reaching the\n     * host element of the current component. (Only used with Element Injector)\n     */\n    InjectFlags[InjectFlags[\"Host\"] = 1] = \"Host\";\n    /** Don't ascend to ancestors of the node requesting injection. */\n    InjectFlags[InjectFlags[\"Self\"] = 2] = \"Self\";\n    /** Skip the node that is requesting injection. */\n    InjectFlags[InjectFlags[\"SkipSelf\"] = 4] = \"SkipSelf\";\n    /** Inject `defaultValue` instead if token not found. */\n    InjectFlags[InjectFlags[\"Optional\"] = 8] = \"Optional\";\n})(InjectFlags || (InjectFlags = {}));\n\n/**\n * Current implementation of inject.\n *\n * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed\n * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this\n * way for two reasons:\n *  1. `Injector` should not depend on ivy logic.\n *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.\n */\nlet _injectImplementation;\nfunction getInjectImplementation() {\n    return _injectImplementation;\n}\n/**\n * Sets the current inject implementation.\n */\nfunction setInjectImplementation(impl) {\n    const previous = _injectImplementation;\n    _injectImplementation = impl;\n    return previous;\n}\n/**\n * Injects `root` tokens in limp mode.\n *\n * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to\n * `\"root\"`. This is known as the limp mode injection. In such case the value is stored in the\n * injectable definition.\n */\nfunction injectRootLimpMode(token, notFoundValue, flags) {\n    const injectableDef = getInjectableDef(token);\n    if (injectableDef && injectableDef.providedIn == 'root') {\n        return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() :\n            injectableDef.value;\n    }\n    if (flags & InjectFlags.Optional)\n        return null;\n    if (notFoundValue !== undefined)\n        return notFoundValue;\n    throwProviderNotFoundError(stringify(token), 'Injector');\n}\n/**\n * Assert that `_injectImplementation` is not `fn`.\n *\n * This is useful, to prevent infinite recursion.\n *\n * @param fn Function which it should not equal to\n */\nfunction assertInjectImplementationNotEqual(fn) {\n    ngDevMode &&\n        assertNotEqual(_injectImplementation, fn, 'Calling ɵɵinject would cause infinite recursion');\n}\n\nconst _global = globalThis;\n\nfunction ngDevModeResetPerfCounters() {\n    const locationString = typeof location !== 'undefined' ? location.toString() : '';\n    const newCounters = {\n        namedConstructors: locationString.indexOf('ngDevMode=namedConstructors') != -1,\n        firstCreatePass: 0,\n        tNode: 0,\n        tView: 0,\n        rendererCreateTextNode: 0,\n        rendererSetText: 0,\n        rendererCreateElement: 0,\n        rendererAddEventListener: 0,\n        rendererSetAttribute: 0,\n        rendererRemoveAttribute: 0,\n        rendererSetProperty: 0,\n        rendererSetClassName: 0,\n        rendererAddClass: 0,\n        rendererRemoveClass: 0,\n        rendererSetStyle: 0,\n        rendererRemoveStyle: 0,\n        rendererDestroy: 0,\n        rendererDestroyNode: 0,\n        rendererMoveNode: 0,\n        rendererRemoveNode: 0,\n        rendererAppendChild: 0,\n        rendererInsertBefore: 0,\n        rendererCreateComment: 0,\n        hydratedNodes: 0,\n        hydratedComponents: 0,\n        dehydratedViewsRemoved: 0,\n        dehydratedViewsCleanupRuns: 0,\n        componentsSkippedHydration: 0,\n    };\n    // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n    const allowNgDevModeTrue = locationString.indexOf('ngDevMode=false') === -1;\n    _global['ngDevMode'] = allowNgDevModeTrue && newCounters;\n    return newCounters;\n}\n/**\n * This function checks to see if the `ngDevMode` has been set. If yes,\n * then we honor it, otherwise we default to dev mode with additional checks.\n *\n * The idea is that unless we are doing production build where we explicitly\n * set `ngDevMode == false` we should be helping the developer by providing\n * as much early warning and errors as possible.\n *\n * `ɵɵdefineComponent` is guaranteed to have been called before any component template functions\n * (and thus Ivy instructions), so a single initialization there is sufficient to ensure ngDevMode\n * is defined for the entire instruction set.\n *\n * When checking `ngDevMode` on toplevel, always init it before referencing it\n * (e.g. `((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode())`), otherwise you can\n *  get a `ReferenceError` like in https://github.com/angular/angular/issues/31595.\n *\n * Details on possible values for `ngDevMode` can be found on its docstring.\n *\n * NOTE:\n * - changes to the `ngDevMode` name must be synced with `compiler-cli/src/tooling.ts`.\n */\nfunction initNgDevMode() {\n    // The below checks are to ensure that calling `initNgDevMode` multiple times does not\n    // reset the counters.\n    // If the `ngDevMode` is not an object, then it means we have not created the perf counters\n    // yet.\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (typeof ngDevMode !== 'object') {\n            ngDevModeResetPerfCounters();\n        }\n        return typeof ngDevMode !== 'undefined' && !!ngDevMode;\n    }\n    return false;\n}\n\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parameterized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides an additional level of type safety.\n *\n * <div class=\"alert is-helpful\">\n *\n * **Important Note**: Ensure that you use the same instance of the `InjectionToken` in both the\n * provider and the injection call. Creating a new instance of `InjectionToken` in different places,\n * even with the same description, will be treated as different tokens by Angular's DI system,\n * leading to a `NullInjectorError`.\n *\n * </div>\n *\n * <code-example format=\"typescript\" language=\"typescript\" path=\"injection-token/src/main.ts\"\n * region=\"InjectionToken\"></code-example>\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the [`inject`](api/core/inject) function.\n * As you can see in the Tree-shakable InjectionToken example below.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `@NgModule` (note:\n * this option is now deprecated). As mentioned above, `'root'` is the default value for\n * `providedIn`.\n *\n * The `providedIn: NgModule` and `providedIn: 'any'` options are deprecated.\n *\n * @usageNotes\n * ### Basic Examples\n *\n * ### Plain InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * ### Tree-shakable InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n * @publicApi\n */\nclass InjectionToken {\n    /**\n     * @param _desc   Description for the token,\n     *                used only for debugging purposes,\n     *                it should but does not need to be unique\n     * @param options Options for the token's usage, as described above\n     */\n    constructor(_desc, options) {\n        this._desc = _desc;\n        /** @internal */\n        this.ngMetadataName = 'InjectionToken';\n        this.ɵprov = undefined;\n        if (typeof options == 'number') {\n            (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                assertLessThan(options, 0, 'Only negative numbers are supported here');\n            // This is a special hack to assign __NG_ELEMENT_ID__ to this instance.\n            // See `InjectorMarkers`\n            this.__NG_ELEMENT_ID__ = options;\n        }\n        else if (options !== undefined) {\n            this.ɵprov = ɵɵdefineInjectable({\n                token: this,\n                providedIn: options.providedIn || 'root',\n                factory: options.factory,\n            });\n        }\n    }\n    /**\n     * @internal\n     */\n    get multi() {\n        return this;\n    }\n    toString() {\n        return `InjectionToken ${this._desc}`;\n    }\n}\n\nlet _injectorProfilerContext;\nfunction getInjectorProfilerContext() {\n    !ngDevMode && throwError('getInjectorProfilerContext should never be called in production mode');\n    return _injectorProfilerContext;\n}\nfunction setInjectorProfilerContext(context) {\n    !ngDevMode && throwError('setInjectorProfilerContext should never be called in production mode');\n    const previous = _injectorProfilerContext;\n    _injectorProfilerContext = context;\n    return previous;\n}\nlet injectorProfilerCallback = null;\n/**\n * Sets the callback function which will be invoked during certain DI events within the\n * runtime (for example: injecting services, creating injectable instances, configuring providers)\n *\n * Warning: this function is *INTERNAL* and should not be relied upon in application's code.\n * The contract of the function might be changed in any release and/or the function can be removed\n * completely.\n *\n * @param profiler function provided by the caller or null value to disable profiling.\n */\nconst setInjectorProfiler = (injectorProfiler) => {\n    !ngDevMode && throwError('setInjectorProfiler should never be called in production mode');\n    injectorProfilerCallback = injectorProfiler;\n};\n/**\n * Injector profiler function which emits on DI events executed by the runtime.\n *\n * @param event InjectorProfilerEvent corresponding to the DI event being emitted\n */\nfunction injectorProfiler(event) {\n    !ngDevMode && throwError('Injector profiler should never be called in production mode');\n    if (injectorProfilerCallback != null /* both `null` and `undefined` */) {\n        injectorProfilerCallback(event);\n    }\n}\n/**\n * Emits an InjectorProfilerEventType.ProviderConfigured to the injector profiler. The data in the\n * emitted event includes the raw provider, as well as the token that provider is providing.\n *\n * @param eventProvider A provider object\n */\nfunction emitProviderConfiguredEvent(eventProvider, isViewProvider = false) {\n    !ngDevMode && throwError('Injector profiler should never be called in production mode');\n    let token;\n    // if the provider is a TypeProvider (typeof provider is function) then the token is the\n    // provider itself\n    if (typeof eventProvider === 'function') {\n        token = eventProvider;\n    }\n    // if the provider is an injection token, then the token is the injection token.\n    else if (eventProvider instanceof InjectionToken) {\n        token = eventProvider;\n    }\n    // in all other cases we can access the token via the `provide` property of the provider\n    else {\n        token = resolveForwardRef(eventProvider.provide);\n    }\n    let provider = eventProvider;\n    // Injection tokens may define their own default provider which gets attached to the token itself\n    // as `ɵprov`. In this case, we want to emit the provider that is attached to the token, not the\n    // token itself.\n    if (eventProvider instanceof InjectionToken) {\n        provider = eventProvider.ɵprov || eventProvider;\n    }\n    injectorProfiler({\n        type: 2 /* InjectorProfilerEventType.ProviderConfigured */,\n        context: getInjectorProfilerContext(),\n        providerRecord: { token, provider, isViewProvider }\n    });\n}\n/**\n * Emits an event to the injector profiler with the instance that was created. Note that\n * the injector associated with this emission can be accessed by using getDebugInjectContext()\n *\n * @param instance an object created by an injector\n */\nfunction emitInstanceCreatedByInjectorEvent(instance) {\n    !ngDevMode && throwError('Injector profiler should never be called in production mode');\n    injectorProfiler({\n        type: 1 /* InjectorProfilerEventType.InstanceCreatedByInjector */,\n        context: getInjectorProfilerContext(),\n        instance: { value: instance }\n    });\n}\n/**\n * @param token DI token associated with injected service\n * @param value the instance of the injected service (i.e the result of `inject(token)`)\n * @param flags the flags that the token was injected with\n */\nfunction emitInjectEvent(token, value, flags) {\n    !ngDevMode && throwError('Injector profiler should never be called in production mode');\n    injectorProfiler({\n        type: 0 /* InjectorProfilerEventType.Inject */,\n        context: getInjectorProfilerContext(),\n        service: { token, value, flags }\n    });\n}\nfunction runInInjectorProfilerContext(injector, token, callback) {\n    !ngDevMode &&\n        throwError('runInInjectorProfilerContext should never be called in production mode');\n    const prevInjectContext = setInjectorProfilerContext({ injector, token });\n    try {\n        callback();\n    }\n    finally {\n        setInjectorProfilerContext(prevInjectContext);\n    }\n}\n\nconst _THROW_IF_NOT_FOUND = {};\nconst THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n/*\n * Name of a property (that we patch onto DI decorator), which is used as an annotation of which\n * InjectFlag this decorator represents. This allows to avoid direct references to the DI decorators\n * in the code, thus making them tree-shakable.\n */\nconst DI_DECORATOR_FLAG = '__NG_DI_FLAG__';\nconst NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\nconst NG_TOKEN_PATH = 'ngTokenPath';\nconst NEW_LINE = /\\n/gm;\nconst NO_NEW_LINE = 'ɵ';\nconst SOURCE = '__source';\n/**\n * Current injector value used by `inject`.\n * - `undefined`: it is an error to call `inject`\n * - `null`: `inject` can be called but there is no injector (limp-mode).\n * - Injector instance: Use the injector for resolution.\n */\nlet _currentInjector = undefined;\nfunction getCurrentInjector() {\n    return _currentInjector;\n}\nfunction setCurrentInjector(injector) {\n    const former = _currentInjector;\n    _currentInjector = injector;\n    return former;\n}\nfunction injectInjectorOnly(token, flags = InjectFlags.Default) {\n    if (_currentInjector === undefined) {\n        throw new RuntimeError(-203 /* RuntimeErrorCode.MISSING_INJECTION_CONTEXT */, ngDevMode &&\n            `inject() must be called from an injection context such as a constructor, a factory function, a field initializer, or a function used with \\`runInInjectionContext\\`.`);\n    }\n    else if (_currentInjector === null) {\n        return injectRootLimpMode(token, undefined, flags);\n    }\n    else {\n        const value = _currentInjector.get(token, flags & InjectFlags.Optional ? null : undefined, flags);\n        ngDevMode && emitInjectEvent(token, value, flags);\n        return value;\n    }\n}\nfunction ɵɵinject(token, flags = InjectFlags.Default) {\n    return (getInjectImplementation() || injectInjectorOnly)(resolveForwardRef(token), flags);\n}\n/**\n * Throws an error indicating that a factory function could not be generated by the compiler for a\n * particular class.\n *\n * The name of the class is not mentioned here, but will be in the generated factory function name\n * and thus in the stack trace.\n *\n * @codeGenApi\n */\nfunction ɵɵinvalidFactoryDep(index) {\n    throw new RuntimeError(202 /* RuntimeErrorCode.INVALID_FACTORY_DEPENDENCY */, ngDevMode &&\n        `This constructor is not compatible with Angular Dependency Injection because its dependency at index ${index} of the parameter list is invalid.\nThis can happen if the dependency type is a primitive like a string or if an ancestor of this class is missing an Angular decorator.\n\nPlease check that 1) the type for the parameter at index ${index} is correct and 2) the correct Angular decorators are defined for this class and its ancestors.`);\n}\n/**\n * Injects a token from the currently active injector.\n * `inject` is only supported in an [injection context](/guide/dependency-injection-context). It can\n * be used during:\n * - Construction (via the `constructor`) of a class being instantiated by the DI system, such\n * as an `@Injectable` or `@Component`.\n * - In the initializer for fields of such classes.\n * - In the factory function specified for `useFactory` of a `Provider` or an `@Injectable`.\n * - In the `factory` function specified for an `InjectionToken`.\n * - In a stackframe of a function call in a DI context\n *\n * @param token A token that represents a dependency that should be injected.\n * @param flags Optional flags that control how injection is executed.\n * The flags correspond to injection strategies that can be specified with\n * parameter decorators `@Host`, `@Self`, `@SkipSelf`, and `@Optional`.\n * @returns the injected value if operation is successful, `null` otherwise.\n * @throws if called outside of a supported context.\n *\n * @usageNotes\n * In practice the `inject()` calls are allowed in a constructor, a constructor parameter and a\n * field initializer:\n *\n * ```typescript\n * @Injectable({providedIn: 'root'})\n * export class Car {\n *   radio: Radio|undefined;\n *   // OK: field initializer\n *   spareTyre = inject(Tyre);\n *\n *   constructor() {\n *     // OK: constructor body\n *     this.radio = inject(Radio);\n *   }\n * }\n * ```\n *\n * It is also legal to call `inject` from a provider's factory:\n *\n * ```typescript\n * providers: [\n *   {provide: Car, useFactory: () => {\n *     // OK: a class factory\n *     const engine = inject(Engine);\n *     return new Car(engine);\n *   }}\n * ]\n * ```\n *\n * Calls to the `inject()` function outside of the class creation context will result in error. Most\n * notably, calls to `inject()` are disallowed after a class instance was created, in methods\n * (including lifecycle hooks):\n *\n * ```typescript\n * @Component({ ... })\n * export class CarComponent {\n *   ngOnInit() {\n *     // ERROR: too late, the component instance was already created\n *     const engine = inject(Engine);\n *     engine.start();\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nfunction inject(token, flags = InjectFlags.Default) {\n    return ɵɵinject(token, convertToBitFlags(flags));\n}\n// Converts object-based DI flags (`InjectOptions`) to bit flags (`InjectFlags`).\nfunction convertToBitFlags(flags) {\n    if (typeof flags === 'undefined' || typeof flags === 'number') {\n        return flags;\n    }\n    // While TypeScript doesn't accept it without a cast, bitwise OR with false-y values in\n    // JavaScript is a no-op. We can use that for a very codesize-efficient conversion from\n    // `InjectOptions` to `InjectFlags`.\n    return (0 /* InternalInjectFlags.Default */ | // comment to force a line break in the formatter\n        (flags.optional && 8 /* InternalInjectFlags.Optional */) |\n        (flags.host && 1 /* InternalInjectFlags.Host */) |\n        (flags.self && 2 /* InternalInjectFlags.Self */) |\n        (flags.skipSelf && 4 /* InternalInjectFlags.SkipSelf */));\n}\nfunction injectArgs(types) {\n    const args = [];\n    for (let i = 0; i < types.length; i++) {\n        const arg = resolveForwardRef(types[i]);\n        if (Array.isArray(arg)) {\n            if (arg.length === 0) {\n                throw new RuntimeError(900 /* RuntimeErrorCode.INVALID_DIFFER_INPUT */, ngDevMode && 'Arguments array must have arguments.');\n            }\n            let type = undefined;\n            let flags = InjectFlags.Default;\n            for (let j = 0; j < arg.length; j++) {\n                const meta = arg[j];\n                const flag = getInjectFlag(meta);\n                if (typeof flag === 'number') {\n                    // Special case when we handle @Inject decorator.\n                    if (flag === -1 /* DecoratorFlags.Inject */) {\n                        type = meta.token;\n                    }\n                    else {\n                        flags |= flag;\n                    }\n                }\n                else {\n                    type = meta;\n                }\n            }\n            args.push(ɵɵinject(type, flags));\n        }\n        else {\n            args.push(ɵɵinject(arg));\n        }\n    }\n    return args;\n}\n/**\n * Attaches a given InjectFlag to a given decorator using monkey-patching.\n * Since DI decorators can be used in providers `deps` array (when provider is configured using\n * `useFactory`) without initialization (e.g. `Host`) and as an instance (e.g. `new Host()`), we\n * attach the flag to make it available both as a static property and as a field on decorator\n * instance.\n *\n * @param decorator Provided DI decorator.\n * @param flag InjectFlag that should be applied.\n */\nfunction attachInjectFlag(decorator, flag) {\n    decorator[DI_DECORATOR_FLAG] = flag;\n    decorator.prototype[DI_DECORATOR_FLAG] = flag;\n    return decorator;\n}\n/**\n * Reads monkey-patched property that contains InjectFlag attached to a decorator.\n *\n * @param token Token that may contain monkey-patched DI flags property.\n */\nfunction getInjectFlag(token) {\n    return token[DI_DECORATOR_FLAG];\n}\nfunction catchInjectorError(e, token, injectorErrorName, source) {\n    const tokenPath = e[NG_TEMP_TOKEN_PATH];\n    if (token[SOURCE]) {\n        tokenPath.unshift(token[SOURCE]);\n    }\n    e.message = formatError('\\n' + e.message, tokenPath, injectorErrorName, source);\n    e[NG_TOKEN_PATH] = tokenPath;\n    e[NG_TEMP_TOKEN_PATH] = null;\n    throw e;\n}\nfunction formatError(text, obj, injectorErrorName, source = null) {\n    text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.slice(2) : text;\n    let context = stringify(obj);\n    if (Array.isArray(obj)) {\n        context = obj.map(stringify).join(' -> ');\n    }\n    else if (typeof obj === 'object') {\n        let parts = [];\n        for (let key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                let value = obj[key];\n                parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\n            }\n        }\n        context = `{${parts.join(', ')}}`;\n    }\n    return `${injectorErrorName}${source ? '(' + source + ')' : ''}[${context}]: ${text.replace(NEW_LINE, '\\n  ')}`;\n}\n\n/**\n * Convince closure compiler that the wrapped function has no side-effects.\n *\n * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to\n * allow us to execute a function but have closure compiler mark the call as no-side-effects.\n * It is important that the return value for the `noSideEffects` function be assigned\n * to something which is retained otherwise the call to `noSideEffects` will be removed by closure\n * compiler.\n */\nfunction noSideEffects(fn) {\n    return { toString: fn }.toString();\n}\n\n/**\n * The strategy that the default change detector uses to detect changes.\n * When set, takes effect the next time change detection is triggered.\n *\n * @see {@link ChangeDetectorRef#usage-notes Change detection usage}\n *\n * @publicApi\n */\nvar ChangeDetectionStrategy;\n(function (ChangeDetectionStrategy) {\n    /**\n     * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated\n     * until reactivated by setting the strategy to `Default` (`CheckAlways`).\n     * Change detection can still be explicitly invoked.\n     * This strategy applies to all child directives and cannot be overridden.\n     */\n    ChangeDetectionStrategy[ChangeDetectionStrategy[\"OnPush\"] = 0] = \"OnPush\";\n    /**\n     * Use the default `CheckAlways` strategy, in which change detection is automatic until\n     * explicitly deactivated.\n     */\n    ChangeDetectionStrategy[ChangeDetectionStrategy[\"Default\"] = 1] = \"Default\";\n})(ChangeDetectionStrategy || (ChangeDetectionStrategy = {}));\n\n/**\n * Defines the CSS styles encapsulation policies for the {@link Component} decorator's\n * `encapsulation` option.\n *\n * See {@link Component#encapsulation encapsulation}.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/ts/metadata/encapsulation.ts region='longform'}\n *\n * @publicApi\n */\nvar ViewEncapsulation$1;\n(function (ViewEncapsulation) {\n    // TODO: consider making `ViewEncapsulation` a `const enum` instead. See\n    // https://github.com/angular/angular/issues/44119 for additional information.\n    /**\n     * Emulates a native Shadow DOM encapsulation behavior by adding a specific attribute to the\n     * component's host element and applying the same attribute to all the CSS selectors provided\n     * via {@link Component#styles styles} or {@link Component#styleUrls styleUrls}.\n     *\n     * This is the default option.\n     */\n    ViewEncapsulation[ViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\";\n    // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.\n    /**\n     * Doesn't provide any sort of CSS style encapsulation, meaning that all the styles provided\n     * via {@link Component#styles styles} or {@link Component#styleUrls styleUrls} are applicable\n     * to any HTML element of the application regardless of their host Component.\n     */\n    ViewEncapsulation[ViewEncapsulation[\"None\"] = 2] = \"None\";\n    /**\n     * Uses the browser's native Shadow DOM API to encapsulate CSS styles, meaning that it creates\n     * a ShadowRoot for the component's host element which is then used to encapsulate\n     * all the Component's styling.\n     */\n    ViewEncapsulation[ViewEncapsulation[\"ShadowDom\"] = 3] = \"ShadowDom\";\n})(ViewEncapsulation$1 || (ViewEncapsulation$1 = {}));\n\n/**\n * This file contains reuseable \"empty\" symbols that can be used as default return values\n * in different parts of the rendering code. Because the same symbols are returned, this\n * allows for identity checks against these values to be consistently used by the framework\n * code.\n */\nconst EMPTY_OBJ = {};\nconst EMPTY_ARRAY = [];\n// freezing the values prevents any code from accidentally inserting new values in\nif ((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode()) {\n    // These property accesses can be ignored because ngDevMode will be set to false\n    // when optimizing code and the whole if statement will be dropped.\n    // tslint:disable-next-line:no-toplevel-property-access\n    Object.freeze(EMPTY_OBJ);\n    // tslint:disable-next-line:no-toplevel-property-access\n    Object.freeze(EMPTY_ARRAY);\n}\n\n/**\n * Returns an index of `classToSearch` in `className` taking token boundaries into account.\n *\n * `classIndexOf('AB A', 'A', 0)` will be 3 (not 0 since `AB!==A`)\n *\n * @param className A string containing classes (whitespace separated)\n * @param classToSearch A class name to locate\n * @param startingIndex Starting location of search\n * @returns an index of the located class (or -1 if not found)\n */\nfunction classIndexOf(className, classToSearch, startingIndex) {\n    ngDevMode && assertNotEqual(classToSearch, '', 'can not look for \"\" string.');\n    let end = className.length;\n    while (true) {\n        const foundIndex = className.indexOf(classToSearch, startingIndex);\n        if (foundIndex === -1)\n            return foundIndex;\n        if (foundIndex === 0 || className.charCodeAt(foundIndex - 1) <= 32 /* CharCode.SPACE */) {\n            // Ensure that it has leading whitespace\n            const length = classToSearch.length;\n            if (foundIndex + length === end ||\n                className.charCodeAt(foundIndex + length) <= 32 /* CharCode.SPACE */) {\n                // Ensure that it has trailing whitespace\n                return foundIndex;\n            }\n        }\n        // False positive, keep searching from where we left off.\n        startingIndex = foundIndex + 1;\n    }\n}\n\n/**\n * Assigns all attribute values to the provided element via the inferred renderer.\n *\n * This function accepts two forms of attribute entries:\n *\n * default: (key, value):\n *  attrs = [key1, value1, key2, value2]\n *\n * namespaced: (NAMESPACE_MARKER, uri, name, value)\n *  attrs = [NAMESPACE_MARKER, uri, name, value, NAMESPACE_MARKER, uri, name, value]\n *\n * The `attrs` array can contain a mix of both the default and namespaced entries.\n * The \"default\" values are set without a marker, but if the function comes across\n * a marker value then it will attempt to set a namespaced value. If the marker is\n * not of a namespaced value then the function will quit and return the index value\n * where it stopped during the iteration of the attrs array.\n *\n * See [AttributeMarker] to understand what the namespace marker value is.\n *\n * Note that this instruction does not support assigning style and class values to\n * an element. See `elementStart` and `elementHostAttrs` to learn how styling values\n * are applied to an element.\n * @param renderer The renderer to be used\n * @param native The element that the attributes will be assigned to\n * @param attrs The attribute array of values that will be assigned to the element\n * @returns the index value that was last accessed in the attributes array\n */\nfunction setUpAttributes(renderer, native, attrs) {\n    let i = 0;\n    while (i < attrs.length) {\n        const value = attrs[i];\n        if (typeof value === 'number') {\n            // only namespaces are supported. Other value types (such as style/class\n            // entries) are not supported in this function.\n            if (value !== 0 /* AttributeMarker.NamespaceURI */) {\n                break;\n            }\n            // we just landed on the marker value ... therefore\n            // we should skip to the next entry\n            i++;\n            const namespaceURI = attrs[i++];\n            const attrName = attrs[i++];\n            const attrVal = attrs[i++];\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            renderer.setAttribute(native, attrName, attrVal, namespaceURI);\n        }\n        else {\n            // attrName is string;\n            const attrName = value;\n            const attrVal = attrs[++i];\n            // Standard attributes\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            if (isAnimationProp(attrName)) {\n                renderer.setProperty(native, attrName, attrVal);\n            }\n            else {\n                renderer.setAttribute(native, attrName, attrVal);\n            }\n            i++;\n        }\n    }\n    // another piece of code may iterate over the same attributes array. Therefore\n    // it may be helpful to return the exact spot where the attributes array exited\n    // whether by running into an unsupported marker or if all the static values were\n    // iterated over.\n    return i;\n}\n/**\n * Test whether the given value is a marker that indicates that the following\n * attribute values in a `TAttributes` array are only the names of attributes,\n * and not name-value pairs.\n * @param marker The attribute marker to test.\n * @returns true if the marker is a \"name-only\" marker (e.g. `Bindings`, `Template` or `I18n`).\n */\nfunction isNameOnlyAttributeMarker(marker) {\n    return marker === 3 /* AttributeMarker.Bindings */ || marker === 4 /* AttributeMarker.Template */ ||\n        marker === 6 /* AttributeMarker.I18n */;\n}\nfunction isAnimationProp(name) {\n    // Perf note: accessing charCodeAt to check for the first character of a string is faster as\n    // compared to accessing a character at index 0 (ex. name[0]). The main reason for this is that\n    // charCodeAt doesn't allocate memory to return a substring.\n    return name.charCodeAt(0) === 64 /* CharCode.AT_SIGN */;\n}\n/**\n * Merges `src` `TAttributes` into `dst` `TAttributes` removing any duplicates in the process.\n *\n * This merge function keeps the order of attrs same.\n *\n * @param dst Location of where the merged `TAttributes` should end up.\n * @param src `TAttributes` which should be appended to `dst`\n */\nfunction mergeHostAttrs(dst, src) {\n    if (src === null || src.length === 0) {\n        // do nothing\n    }\n    else if (dst === null || dst.length === 0) {\n        // We have source, but dst is empty, just make a copy.\n        dst = src.slice();\n    }\n    else {\n        let srcMarker = -1 /* AttributeMarker.ImplicitAttributes */;\n        for (let i = 0; i < src.length; i++) {\n            const item = src[i];\n            if (typeof item === 'number') {\n                srcMarker = item;\n            }\n            else {\n                if (srcMarker === 0 /* AttributeMarker.NamespaceURI */) {\n                    // Case where we need to consume `key1`, `key2`, `value` items.\n                }\n                else if (srcMarker === -1 /* AttributeMarker.ImplicitAttributes */ ||\n                    srcMarker === 2 /* AttributeMarker.Styles */) {\n                    // Case where we have to consume `key1` and `value` only.\n                    mergeHostAttribute(dst, srcMarker, item, null, src[++i]);\n                }\n                else {\n                    // Case where we have to consume `key1` only.\n                    mergeHostAttribute(dst, srcMarker, item, null, null);\n                }\n            }\n        }\n    }\n    return dst;\n}\n/**\n * Append `key`/`value` to existing `TAttributes` taking region marker and duplicates into account.\n *\n * @param dst `TAttributes` to append to.\n * @param marker Region where the `key`/`value` should be added.\n * @param key1 Key to add to `TAttributes`\n * @param key2 Key to add to `TAttributes` (in case of `AttributeMarker.NamespaceURI`)\n * @param value Value to add or to overwrite to `TAttributes` Only used if `marker` is not Class.\n */\nfunction mergeHostAttribute(dst, marker, key1, key2, value) {\n    let i = 0;\n    // Assume that new markers will be inserted at the end.\n    let markerInsertPosition = dst.length;\n    // scan until correct type.\n    if (marker === -1 /* AttributeMarker.ImplicitAttributes */) {\n        markerInsertPosition = -1;\n    }\n    else {\n        while (i < dst.length) {\n            const dstValue = dst[i++];\n            if (typeof dstValue === 'number') {\n                if (dstValue === marker) {\n                    markerInsertPosition = -1;\n                    break;\n                }\n                else if (dstValue > marker) {\n                    // We need to save this as we want the markers to be inserted in specific order.\n                    markerInsertPosition = i - 1;\n                    break;\n                }\n            }\n        }\n    }\n    // search until you find place of insertion\n    while (i < dst.length) {\n        const item = dst[i];\n        if (typeof item === 'number') {\n            // since `i` started as the index after the marker, we did not find it if we are at the next\n            // marker\n            break;\n        }\n        else if (item === key1) {\n            // We already have same token\n            if (key2 === null) {\n                if (value !== null) {\n                    dst[i + 1] = value;\n                }\n                return;\n            }\n            else if (key2 === dst[i + 1]) {\n                dst[i + 2] = value;\n                return;\n            }\n        }\n        // Increment counter.\n        i++;\n        if (key2 !== null)\n            i++;\n        if (value !== null)\n            i++;\n    }\n    // insert at location.\n    if (markerInsertPosition !== -1) {\n        dst.splice(markerInsertPosition, 0, marker);\n        i = markerInsertPosition + 1;\n    }\n    dst.splice(i++, 0, key1);\n    if (key2 !== null) {\n        dst.splice(i++, 0, key2);\n    }\n    if (value !== null) {\n        dst.splice(i++, 0, value);\n    }\n}\n\nconst NG_TEMPLATE_SELECTOR = 'ng-template';\n/**\n * Search the `TAttributes` to see if it contains `cssClassToMatch` (case insensitive)\n *\n * @param attrs `TAttributes` to search through.\n * @param cssClassToMatch class to match (lowercase)\n * @param isProjectionMode Whether or not class matching should look into the attribute `class` in\n *    addition to the `AttributeMarker.Classes`.\n */\nfunction isCssClassMatching(attrs, cssClassToMatch, isProjectionMode) {\n    // TODO(misko): The fact that this function needs to know about `isProjectionMode` seems suspect.\n    // It is strange to me that sometimes the class information comes in form of `class` attribute\n    // and sometimes in form of `AttributeMarker.Classes`. Some investigation is needed to determine\n    // if that is the right behavior.\n    ngDevMode &&\n        assertEqual(cssClassToMatch, cssClassToMatch.toLowerCase(), 'Class name expected to be lowercase.');\n    let i = 0;\n    // Indicates whether we are processing value from the implicit\n    // attribute section (i.e. before the first marker in the array).\n    let isImplicitAttrsSection = true;\n    while (i < attrs.length) {\n        let item = attrs[i++];\n        if (typeof item === 'string' && isImplicitAttrsSection) {\n            const value = attrs[i++];\n            if (isProjectionMode && item === 'class') {\n                // We found a `class` attribute in the implicit attribute section,\n                // check if it matches the value of the `cssClassToMatch` argument.\n                if (classIndexOf(value.toLowerCase(), cssClassToMatch, 0) !== -1) {\n                    return true;\n                }\n            }\n        }\n        else if (item === 1 /* AttributeMarker.Classes */) {\n            // We found the classes section. Start searching for the class.\n            while (i < attrs.length && typeof (item = attrs[i++]) == 'string') {\n                // while we have strings\n                if (item.toLowerCase() === cssClassToMatch)\n                    return true;\n            }\n            return false;\n        }\n        else if (typeof item === 'number') {\n            // We've came across a first marker, which indicates\n            // that the implicit attribute section is over.\n            isImplicitAttrsSection = false;\n        }\n    }\n    return false;\n}\n/**\n * Checks whether the `tNode` represents an inline template (e.g. `*ngFor`).\n *\n * @param tNode current TNode\n */\nfunction isInlineTemplate(tNode) {\n    return tNode.type === 4 /* TNodeType.Container */ && tNode.value !== NG_TEMPLATE_SELECTOR;\n}\n/**\n * Function that checks whether a given tNode matches tag-based selector and has a valid type.\n *\n * Matching can be performed in 2 modes: projection mode (when we project nodes) and regular\n * directive matching mode:\n * - in the \"directive matching\" mode we do _not_ take TContainer's tagName into account if it is\n * different from NG_TEMPLATE_SELECTOR (value different from NG_TEMPLATE_SELECTOR indicates that a\n * tag name was extracted from * syntax so we would match the same directive twice);\n * - in the \"projection\" mode, we use a tag name potentially extracted from the * syntax processing\n * (applicable to TNodeType.Container only).\n */\nfunction hasTagAndTypeMatch(tNode, currentSelector, isProjectionMode) {\n    const tagNameToCompare = tNode.type === 4 /* TNodeType.Container */ && !isProjectionMode ? NG_TEMPLATE_SELECTOR : tNode.value;\n    return currentSelector === tagNameToCompare;\n}\n/**\n * A utility function to match an Ivy node static data against a simple CSS selector\n *\n * @param node static data of the node to match\n * @param selector The selector to try matching against the node.\n * @param isProjectionMode if `true` we are matching for content projection, otherwise we are doing\n * directive matching.\n * @returns true if node matches the selector.\n */\nfunction isNodeMatchingSelector(tNode, selector, isProjectionMode) {\n    ngDevMode && assertDefined(selector[0], 'Selector should have a tag name');\n    let mode = 4 /* SelectorFlags.ELEMENT */;\n    const nodeAttrs = tNode.attrs || [];\n    // Find the index of first attribute that has no value, only a name.\n    const nameOnlyMarkerIdx = getNameOnlyMarkerIndex(nodeAttrs);\n    // When processing \":not\" selectors, we skip to the next \":not\" if the\n    // current one doesn't match\n    let skipToNextSelector = false;\n    for (let i = 0; i < selector.length; i++) {\n        const current = selector[i];\n        if (typeof current === 'number') {\n            // If we finish processing a :not selector and it hasn't failed, return false\n            if (!skipToNextSelector && !isPositive(mode) && !isPositive(current)) {\n                return false;\n            }\n            // If we are skipping to the next :not() and this mode flag is positive,\n            // it's a part of the current :not() selector, and we should keep skipping\n            if (skipToNextSelector && isPositive(current))\n                continue;\n            skipToNextSelector = false;\n            mode = current | (mode & 1 /* SelectorFlags.NOT */);\n            continue;\n        }\n        if (skipToNextSelector)\n            continue;\n        if (mode & 4 /* SelectorFlags.ELEMENT */) {\n            mode = 2 /* SelectorFlags.ATTRIBUTE */ | mode & 1 /* SelectorFlags.NOT */;\n            if (current !== '' && !hasTagAndTypeMatch(tNode, current, isProjectionMode) ||\n                current === '' && selector.length === 1) {\n                if (isPositive(mode))\n                    return false;\n                skipToNextSelector = true;\n            }\n        }\n        else {\n            const selectorAttrValue = mode & 8 /* SelectorFlags.CLASS */ ? current : selector[++i];\n            // special case for matching against classes when a tNode has been instantiated with\n            // class and style values as separate attribute values (e.g. ['title', CLASS, 'foo'])\n            if ((mode & 8 /* SelectorFlags.CLASS */) && tNode.attrs !== null) {\n                if (!isCssClassMatching(tNode.attrs, selectorAttrValue, isProjectionMode)) {\n                    if (isPositive(mode))\n                        return false;\n                    skipToNextSelector = true;\n                }\n                continue;\n            }\n            const attrName = (mode & 8 /* SelectorFlags.CLASS */) ? 'class' : current;\n            const attrIndexInNode = findAttrIndexInNode(attrName, nodeAttrs, isInlineTemplate(tNode), isProjectionMode);\n            if (attrIndexInNode === -1) {\n                if (isPositive(mode))\n                    return false;\n                skipToNextSelector = true;\n                continue;\n            }\n            if (selectorAttrValue !== '') {\n                let nodeAttrValue;\n                if (attrIndexInNode > nameOnlyMarkerIdx) {\n                    nodeAttrValue = '';\n                }\n                else {\n                    ngDevMode &&\n                        assertNotEqual(nodeAttrs[attrIndexInNode], 0 /* AttributeMarker.NamespaceURI */, 'We do not match directives on namespaced attributes');\n                    // we lowercase the attribute value to be able to match\n                    // selectors without case-sensitivity\n                    // (selectors are already in lowercase when generated)\n                    nodeAttrValue = nodeAttrs[attrIndexInNode + 1].toLowerCase();\n                }\n                const compareAgainstClassName = mode & 8 /* SelectorFlags.CLASS */ ? nodeAttrValue : null;\n                if (compareAgainstClassName &&\n                    classIndexOf(compareAgainstClassName, selectorAttrValue, 0) !== -1 ||\n                    mode & 2 /* SelectorFlags.ATTRIBUTE */ && selectorAttrValue !== nodeAttrValue) {\n                    if (isPositive(mode))\n                        return false;\n                    skipToNextSelector = true;\n                }\n            }\n        }\n    }\n    return isPositive(mode) || skipToNextSelector;\n}\nfunction isPositive(mode) {\n    return (mode & 1 /* SelectorFlags.NOT */) === 0;\n}\n/**\n * Examines the attribute's definition array for a node to find the index of the\n * attribute that matches the given `name`.\n *\n * NOTE: This will not match namespaced attributes.\n *\n * Attribute matching depends upon `isInlineTemplate` and `isProjectionMode`.\n * The following table summarizes which types of attributes we attempt to match:\n *\n * ===========================================================================================================\n * Modes                   | Normal Attributes | Bindings Attributes | Template Attributes | I18n\n * Attributes\n * ===========================================================================================================\n * Inline + Projection     | YES               | YES                 | NO                  | YES\n * -----------------------------------------------------------------------------------------------------------\n * Inline + Directive      | NO                | NO                  | YES                 | NO\n * -----------------------------------------------------------------------------------------------------------\n * Non-inline + Projection | YES               | YES                 | NO                  | YES\n * -----------------------------------------------------------------------------------------------------------\n * Non-inline + Directive  | YES               | YES                 | NO                  | YES\n * ===========================================================================================================\n *\n * @param name the name of the attribute to find\n * @param attrs the attribute array to examine\n * @param isInlineTemplate true if the node being matched is an inline template (e.g. `*ngFor`)\n * rather than a manually expanded template node (e.g `<ng-template>`).\n * @param isProjectionMode true if we are matching against content projection otherwise we are\n * matching against directives.\n */\nfunction findAttrIndexInNode(name, attrs, isInlineTemplate, isProjectionMode) {\n    if (attrs === null)\n        return -1;\n    let i = 0;\n    if (isProjectionMode || !isInlineTemplate) {\n        let bindingsMode = false;\n        while (i < attrs.length) {\n            const maybeAttrName = attrs[i];\n            if (maybeAttrName === name) {\n                return i;\n            }\n            else if (maybeAttrName === 3 /* AttributeMarker.Bindings */ || maybeAttrName === 6 /* AttributeMarker.I18n */) {\n                bindingsMode = true;\n            }\n            else if (maybeAttrName === 1 /* AttributeMarker.Classes */ || maybeAttrName === 2 /* AttributeMarker.Styles */) {\n                let value = attrs[++i];\n                // We should skip classes here because we have a separate mechanism for\n                // matching classes in projection mode.\n                while (typeof value === 'string') {\n                    value = attrs[++i];\n                }\n                continue;\n            }\n            else if (maybeAttrName === 4 /* AttributeMarker.Template */) {\n                // We do not care about Template attributes in this scenario.\n                break;\n            }\n            else if (maybeAttrName === 0 /* AttributeMarker.NamespaceURI */) {\n                // Skip the whole namespaced attribute and value. This is by design.\n                i += 4;\n                continue;\n            }\n            // In binding mode there are only names, rather than name-value pairs.\n            i += bindingsMode ? 1 : 2;\n        }\n        // We did not match the attribute\n        return -1;\n    }\n    else {\n        return matchTemplateAttribute(attrs, name);\n    }\n}\nfunction isNodeMatchingSelectorList(tNode, selector, isProjectionMode = false) {\n    for (let i = 0; i < selector.length; i++) {\n        if (isNodeMatchingSelector(tNode, selector[i], isProjectionMode)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction getProjectAsAttrValue(tNode) {\n    const nodeAttrs = tNode.attrs;\n    if (nodeAttrs != null) {\n        const ngProjectAsAttrIdx = nodeAttrs.indexOf(5 /* AttributeMarker.ProjectAs */);\n        // only check for ngProjectAs in attribute names, don't accidentally match attribute's value\n        // (attribute names are stored at even indexes)\n        if ((ngProjectAsAttrIdx & 1) === 0) {\n            return nodeAttrs[ngProjectAsAttrIdx + 1];\n        }\n    }\n    return null;\n}\nfunction getNameOnlyMarkerIndex(nodeAttrs) {\n    for (let i = 0; i < nodeAttrs.length; i++) {\n        const nodeAttr = nodeAttrs[i];\n        if (isNameOnlyAttributeMarker(nodeAttr)) {\n            return i;\n        }\n    }\n    return nodeAttrs.length;\n}\nfunction matchTemplateAttribute(attrs, name) {\n    let i = attrs.indexOf(4 /* AttributeMarker.Template */);\n    if (i > -1) {\n        i++;\n        while (i < attrs.length) {\n            const attr = attrs[i];\n            // Return in case we checked all template attrs and are switching to the next section in the\n            // attrs array (that starts with a number that represents an attribute marker).\n            if (typeof attr === 'number')\n                return -1;\n            if (attr === name)\n                return i;\n            i++;\n        }\n    }\n    return -1;\n}\n/**\n * Checks whether a selector is inside a CssSelectorList\n * @param selector Selector to be checked.\n * @param list List in which to look for the selector.\n */\nfunction isSelectorInSelectorList(selector, list) {\n    selectorListLoop: for (let i = 0; i < list.length; i++) {\n        const currentSelectorInList = list[i];\n        if (selector.length !== currentSelectorInList.length) {\n            continue;\n        }\n        for (let j = 0; j < selector.length; j++) {\n            if (selector[j] !== currentSelectorInList[j]) {\n                continue selectorListLoop;\n            }\n        }\n        return true;\n    }\n    return false;\n}\nfunction maybeWrapInNotSelector(isNegativeMode, chunk) {\n    return isNegativeMode ? ':not(' + chunk.trim() + ')' : chunk;\n}\nfunction stringifyCSSSelector(selector) {\n    let result = selector[0];\n    let i = 1;\n    let mode = 2 /* SelectorFlags.ATTRIBUTE */;\n    let currentChunk = '';\n    let isNegativeMode = false;\n    while (i < selector.length) {\n        let valueOrMarker = selector[i];\n        if (typeof valueOrMarker === 'string') {\n            if (mode & 2 /* SelectorFlags.ATTRIBUTE */) {\n                const attrValue = selector[++i];\n                currentChunk +=\n                    '[' + valueOrMarker + (attrValue.length > 0 ? '=\"' + attrValue + '\"' : '') + ']';\n            }\n            else if (mode & 8 /* SelectorFlags.CLASS */) {\n                currentChunk += '.' + valueOrMarker;\n            }\n            else if (mode & 4 /* SelectorFlags.ELEMENT */) {\n                currentChunk += ' ' + valueOrMarker;\n            }\n        }\n        else {\n            //\n            // Append current chunk to the final result in case we come across SelectorFlag, which\n            // indicates that the previous section of a selector is over. We need to accumulate content\n            // between flags to make sure we wrap the chunk later in :not() selector if needed, e.g.\n            // ```\n            //  ['', Flags.CLASS, '.classA', Flags.CLASS | Flags.NOT, '.classB', '.classC']\n            // ```\n            // should be transformed to `.classA :not(.classB .classC)`.\n            //\n            // Note: for negative selector part, we accumulate content between flags until we find the\n            // next negative flag. This is needed to support a case where `:not()` rule contains more than\n            // one chunk, e.g. the following selector:\n            // ```\n            //  ['', Flags.ELEMENT | Flags.NOT, 'p', Flags.CLASS, 'foo', Flags.CLASS | Flags.NOT, 'bar']\n            // ```\n            // should be stringified to `:not(p.foo) :not(.bar)`\n            //\n            if (currentChunk !== '' && !isPositive(valueOrMarker)) {\n                result += maybeWrapInNotSelector(isNegativeMode, currentChunk);\n                currentChunk = '';\n            }\n            mode = valueOrMarker;\n            // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative\n            // mode is maintained for remaining chunks of a selector.\n            isNegativeMode = isNegativeMode || !isPositive(mode);\n        }\n        i++;\n    }\n    if (currentChunk !== '') {\n        result += maybeWrapInNotSelector(isNegativeMode, currentChunk);\n    }\n    return result;\n}\n/**\n * Generates string representation of CSS selector in parsed form.\n *\n * ComponentDef and DirectiveDef are generated with the selector in parsed form to avoid doing\n * additional parsing at runtime (for example, for directive matching). However in some cases (for\n * example, while bootstrapping a component), a string version of the selector is required to query\n * for the host element on the page. This function takes the parsed form of a selector and returns\n * its string representation.\n *\n * @param selectorList selector in parsed form\n * @returns string representation of a given selector\n */\nfunction stringifyCSSSelectorList(selectorList) {\n    return selectorList.map(stringifyCSSSelector).join(',');\n}\n/**\n * Extracts attributes and classes information from a given CSS selector.\n *\n * This function is used while creating a component dynamically. In this case, the host element\n * (that is created dynamically) should contain attributes and classes specified in component's CSS\n * selector.\n *\n * @param selector CSS selector in parsed form (in a form of array)\n * @returns object with `attrs` and `classes` fields that contain extracted information\n */\nfunction extractAttrsAndClassesFromSelector(selector) {\n    const attrs = [];\n    const classes = [];\n    let i = 1;\n    let mode = 2 /* SelectorFlags.ATTRIBUTE */;\n    while (i < selector.length) {\n        let valueOrMarker = selector[i];\n        if (typeof valueOrMarker === 'string') {\n            if (mode === 2 /* SelectorFlags.ATTRIBUTE */) {\n                if (valueOrMarker !== '') {\n                    attrs.push(valueOrMarker, selector[++i]);\n                }\n            }\n            else if (mode === 8 /* SelectorFlags.CLASS */) {\n                classes.push(valueOrMarker);\n            }\n        }\n        else {\n            // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative\n            // mode is maintained for remaining chunks of a selector. Since attributes and classes are\n            // extracted only for \"positive\" part of the selector, we can stop here.\n            if (!isPositive(mode))\n                break;\n            mode = valueOrMarker;\n        }\n        i++;\n    }\n    return { attrs, classes };\n}\n\n/**\n * Create a component definition object.\n *\n *\n * # Example\n * ```\n * class MyComponent {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ɵcmp = defineComponent({\n *     ...\n *   });\n * }\n * ```\n * @codeGenApi\n */\nfunction ɵɵdefineComponent(componentDefinition) {\n    return noSideEffects(() => {\n        // Initialize ngDevMode. This must be the first statement in ɵɵdefineComponent.\n        // See the `initNgDevMode` docstring for more information.\n        (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();\n        const baseDef = getNgDirectiveDef(componentDefinition);\n        const def = {\n            ...baseDef,\n            decls: componentDefinition.decls,\n            vars: componentDefinition.vars,\n            template: componentDefinition.template,\n            consts: componentDefinition.consts || null,\n            ngContentSelectors: componentDefinition.ngContentSelectors,\n            onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,\n            directiveDefs: null,\n            pipeDefs: null,\n            dependencies: baseDef.standalone && componentDefinition.dependencies || null,\n            getStandaloneInjector: null,\n            signals: componentDefinition.signals ?? false,\n            data: componentDefinition.data || {},\n            encapsulation: componentDefinition.encapsulation || ViewEncapsulation$1.Emulated,\n            styles: componentDefinition.styles || EMPTY_ARRAY,\n            _: null,\n            schemas: componentDefinition.schemas || null,\n            tView: null,\n            id: '',\n        };\n        initFeatures(def);\n        const dependencies = componentDefinition.dependencies;\n        def.directiveDefs = extractDefListOrFactory(dependencies, /* pipeDef */ false);\n        def.pipeDefs = extractDefListOrFactory(dependencies, /* pipeDef */ true);\n        def.id = getComponentId(def);\n        return def;\n    });\n}\nfunction extractDirectiveDef(type) {\n    return getComponentDef(type) || getDirectiveDef(type);\n}\nfunction nonNull(value) {\n    return value !== null;\n}\n/**\n * @codeGenApi\n */\nfunction ɵɵdefineNgModule(def) {\n    return noSideEffects(() => {\n        const res = {\n            type: def.type,\n            bootstrap: def.bootstrap || EMPTY_ARRAY,\n            declarations: def.declarations || EMPTY_ARRAY,\n            imports: def.imports || EMPTY_ARRAY,\n            exports: def.exports || EMPTY_ARRAY,\n            transitiveCompileScopes: null,\n            schemas: def.schemas || null,\n            id: def.id || null,\n        };\n        return res;\n    });\n}\n/**\n * Inverts an inputs or outputs lookup such that the keys, which were the\n * minified keys, are part of the values, and the values are parsed so that\n * the publicName of the property is the new key\n *\n * e.g. for\n *\n * ```\n * class Comp {\n *   @Input()\n *   propName1: string;\n *\n *   @Input('publicName2')\n *   declaredPropName2: number;\n * }\n * ```\n *\n * will be serialized as\n *\n * ```\n * {\n *   propName1: 'propName1',\n *   declaredPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * which is than translated by the minifier as:\n *\n * ```\n * {\n *   minifiedPropName1: 'propName1',\n *   minifiedPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * becomes: (public name => minifiedName)\n *\n * ```\n * {\n *  'propName1': 'minifiedPropName1',\n *  'publicName2': 'minifiedPropName2',\n * }\n * ```\n *\n * Optionally the function can take `secondary` which will result in: (public name => declared name)\n *\n * ```\n * {\n *  'propName1': 'propName1',\n *  'publicName2': 'declaredPropName2',\n * }\n * ```\n *\n\n */\nfunction invertObject(obj, secondary) {\n    if (obj == null)\n        return EMPTY_OBJ;\n    const newLookup = {};\n    for (const minifiedKey in obj) {\n        if (obj.hasOwnProperty(minifiedKey)) {\n            let publicName = obj[minifiedKey];\n            let declaredName = publicName;\n            if (Array.isArray(publicName)) {\n                declaredName = publicName[1];\n                publicName = publicName[0];\n            }\n            newLookup[publicName] = minifiedKey;\n            if (secondary) {\n                (secondary[publicName] = declaredName);\n            }\n        }\n    }\n    return newLookup;\n}\n/**\n * Create a directive definition object.\n *\n * # Example\n * ```ts\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ɵdir = ɵɵdefineDirective({\n *     ...\n *   });\n * }\n * ```\n *\n * @codeGenApi\n */\nfunction ɵɵdefineDirective(directiveDefinition) {\n    return noSideEffects(() => {\n        const def = getNgDirectiveDef(directiveDefinition);\n        initFeatures(def);\n        return def;\n    });\n}\n/**\n * Create a pipe definition object.\n *\n * # Example\n * ```\n * class MyPipe implements PipeTransform {\n *   // Generated by Angular Template Compiler\n *   static ɵpipe = definePipe({\n *     ...\n *   });\n * }\n * ```\n * @param pipeDef Pipe definition generated by the compiler\n *\n * @codeGenApi\n */\nfunction ɵɵdefinePipe(pipeDef) {\n    return {\n        type: pipeDef.type,\n        name: pipeDef.name,\n        factory: null,\n        pure: pipeDef.pure !== false,\n        standalone: pipeDef.standalone === true,\n        onDestroy: pipeDef.type.prototype.ngOnDestroy || null\n    };\n}\n/**\n * The following getter methods retrieve the definition from the type. Currently the retrieval\n * honors inheritance, but in the future we may change the rule to require that definitions are\n * explicit. This would require some sort of migration strategy.\n */\nfunction getComponentDef(type) {\n    return type[NG_COMP_DEF] || null;\n}\nfunction getDirectiveDef(type) {\n    return type[NG_DIR_DEF] || null;\n}\nfunction getPipeDef$1(type) {\n    return type[NG_PIPE_DEF] || null;\n}\n/**\n * Checks whether a given Component, Directive or Pipe is marked as standalone.\n * This will return false if passed anything other than a Component, Directive, or Pipe class\n * See [this guide](/guide/standalone-components) for additional information:\n *\n * @param type A reference to a Component, Directive or Pipe.\n * @publicApi\n */\nfunction isStandalone(type) {\n    const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef$1(type);\n    return def !== null ? def.standalone : false;\n}\nfunction getNgModuleDef(type, throwNotFound) {\n    const ngModuleDef = type[NG_MOD_DEF] || null;\n    if (!ngModuleDef && throwNotFound === true) {\n        throw new Error(`Type ${stringify(type)} does not have 'ɵmod' property.`);\n    }\n    return ngModuleDef;\n}\nfunction getNgDirectiveDef(directiveDefinition) {\n    const declaredInputs = {};\n    return {\n        type: directiveDefinition.type,\n        providersResolver: null,\n        factory: null,\n        hostBindings: directiveDefinition.hostBindings || null,\n        hostVars: directiveDefinition.hostVars || 0,\n        hostAttrs: directiveDefinition.hostAttrs || null,\n        contentQueries: directiveDefinition.contentQueries || null,\n        declaredInputs,\n        inputTransforms: null,\n        inputConfig: directiveDefinition.inputs || EMPTY_OBJ,\n        exportAs: directiveDefinition.exportAs || null,\n        standalone: directiveDefinition.standalone === true,\n        signals: directiveDefinition.signals === true,\n        selectors: directiveDefinition.selectors || EMPTY_ARRAY,\n        viewQuery: directiveDefinition.viewQuery || null,\n        features: directiveDefinition.features || null,\n        setInput: null,\n        findHostDirectiveDefs: null,\n        hostDirectives: null,\n        inputs: invertObject(directiveDefinition.inputs, declaredInputs),\n        outputs: invertObject(directiveDefinition.outputs),\n        debugInfo: null,\n    };\n}\nfunction initFeatures(definition) {\n    definition.features?.forEach((fn) => fn(definition));\n}\nfunction extractDefListOrFactory(dependencies, pipeDef) {\n    if (!dependencies) {\n        return null;\n    }\n    const defExtractor = pipeDef ? getPipeDef$1 : extractDirectiveDef;\n    return () => (typeof dependencies === 'function' ? dependencies() : dependencies)\n        .map(dep => defExtractor(dep))\n        .filter(nonNull);\n}\n/**\n * A map that contains the generated component IDs and type.\n */\nconst GENERATED_COMP_IDS = new Map();\n/**\n * A method can returns a component ID from the component definition using a variant of DJB2 hash\n * algorithm.\n */\nfunction getComponentId(componentDef) {\n    let hash = 0;\n    // We cannot rely solely on the component selector as the same selector can be used in different\n    // modules.\n    //\n    // `componentDef.style` is not used, due to it causing inconsistencies. Ex: when server\n    // component styles has no sourcemaps and browsers do.\n    //\n    // Example:\n    // https://github.com/angular/components/blob/d9f82c8f95309e77a6d82fd574c65871e91354c2/src/material/core/option/option.ts#L248\n    // https://github.com/angular/components/blob/285f46dc2b4c5b127d356cb7c4714b221f03ce50/src/material/legacy-core/option/option.ts#L32\n    const hashSelectors = [\n        componentDef.selectors,\n        componentDef.ngContentSelectors,\n        componentDef.hostVars,\n        componentDef.hostAttrs,\n        componentDef.consts,\n        componentDef.vars,\n        componentDef.decls,\n        componentDef.encapsulation,\n        componentDef.standalone,\n        componentDef.signals,\n        componentDef.exportAs,\n        JSON.stringify(componentDef.inputs),\n        JSON.stringify(componentDef.outputs),\n        // We cannot use 'componentDef.type.name' as the name of the symbol will change and will not\n        // match in the server and browser bundles.\n        Object.getOwnPropertyNames(componentDef.type.prototype),\n        !!componentDef.contentQueries,\n        !!componentDef.viewQuery,\n    ].join('|');\n    for (const char of hashSelectors) {\n        hash = Math.imul(31, hash) + char.charCodeAt(0) << 0;\n    }\n    // Force positive number hash.\n    // 2147483647 = equivalent of Integer.MAX_VALUE.\n    hash += 2147483647 + 1;\n    const compId = 'c' + hash;\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (GENERATED_COMP_IDS.has(compId)) {\n            const previousCompDefType = GENERATED_COMP_IDS.get(compId);\n            if (previousCompDefType !== componentDef.type) {\n                console.warn(formatRuntimeError(-912 /* RuntimeErrorCode.COMPONENT_ID_COLLISION */, `Component ID generation collision detected. Components '${previousCompDefType.name}' and '${componentDef.type.name}' with selector '${stringifyCSSSelectorList(componentDef\n                    .selectors)}' generated the same component ID. To fix this, you can change the selector of one of those components or add an extra host attribute to force a different ID.`));\n            }\n        }\n        else {\n            GENERATED_COMP_IDS.set(compId, componentDef.type);\n        }\n    }\n    return compId;\n}\n\n// Below are constants for LView indices to help us look up LView members\n// without having to remember the specific indices.\n// Uglify will inline these when minifying so there shouldn't be a cost.\nconst HOST = 0;\nconst TVIEW = 1;\n// Shared with LContainer\nconst FLAGS = 2;\nconst PARENT = 3;\nconst NEXT = 4;\nconst T_HOST = 5;\n// End shared with LContainer\nconst HYDRATION = 6;\nconst CLEANUP = 7;\nconst CONTEXT = 8;\nconst INJECTOR$1 = 9;\nconst ENVIRONMENT = 10;\nconst RENDERER = 11;\nconst CHILD_HEAD = 12;\nconst CHILD_TAIL = 13;\n// FIXME(misko): Investigate if the three declarations aren't all same thing.\nconst DECLARATION_VIEW = 14;\nconst DECLARATION_COMPONENT_VIEW = 15;\nconst DECLARATION_LCONTAINER = 16;\nconst PREORDER_HOOK_FLAGS = 17;\nconst QUERIES = 18;\nconst ID = 19;\nconst EMBEDDED_VIEW_INJECTOR = 20;\nconst ON_DESTROY_HOOKS = 21;\nconst EFFECTS_TO_SCHEDULE = 22;\nconst REACTIVE_TEMPLATE_CONSUMER = 23;\n/**\n * Size of LView's header. Necessary to adjust for it when setting slots.\n *\n * IMPORTANT: `HEADER_OFFSET` should only be referred to the in the `ɵɵ*` instructions to translate\n * instruction index into `LView` index. All other indexes should be in the `LView` index space and\n * there should be no need to refer to `HEADER_OFFSET` anywhere else.\n */\nconst HEADER_OFFSET = 25;\n\n/**\n * Special location which allows easy identification of type. If we have an array which was\n * retrieved from the `LView` and that array has `true` at `TYPE` location, we know it is\n * `LContainer`.\n */\nconst TYPE = 1;\n/**\n * Below are constants for LContainer indices to help us look up LContainer members\n * without having to remember the specific indices.\n * Uglify will inline these when minifying so there shouldn't be a cost.\n */\n// FLAGS, PARENT, NEXT, and T_HOST are indices 2, 3, 4, and 5\n// As we already have these constants in LView, we don't need to re-create them.\nconst DEHYDRATED_VIEWS = 6;\nconst NATIVE = 7;\nconst VIEW_REFS = 8;\nconst MOVED_VIEWS = 9;\n/**\n * Size of LContainer's header. Represents the index after which all views in the\n * container will be inserted. We need to keep a record of current views so we know\n * which views are already in the DOM (and don't need to be re-added) and so we can\n * remove views from the DOM when they are no longer required.\n */\nconst CONTAINER_HEADER_OFFSET = 10;\n/** Flags associated with an LContainer (saved in LContainer[FLAGS]) */\nvar LContainerFlags;\n(function (LContainerFlags) {\n    LContainerFlags[LContainerFlags[\"None\"] = 0] = \"None\";\n    /**\n     * Flag to signify that this `LContainer` may have transplanted views which need to be change\n     * detected. (see: `LView[DECLARATION_COMPONENT_VIEW])`.\n     *\n     * This flag, once set, is never unset for the `LContainer`.\n     */\n    LContainerFlags[LContainerFlags[\"HasTransplantedViews\"] = 2] = \"HasTransplantedViews\";\n    /**\n     * Indicates that this LContainer has a view underneath it that needs to be refreshed during\n     * change detection.\n     */\n    LContainerFlags[LContainerFlags[\"HasChildViewsToRefresh\"] = 4] = \"HasChildViewsToRefresh\";\n})(LContainerFlags || (LContainerFlags = {}));\n\n/**\n * True if `value` is `LView`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nfunction isLView(value) {\n    return Array.isArray(value) && typeof value[TYPE] === 'object';\n}\n/**\n * True if `value` is `LContainer`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nfunction isLContainer(value) {\n    return Array.isArray(value) && value[TYPE] === true;\n}\nfunction isContentQueryHost(tNode) {\n    return (tNode.flags & 4 /* TNodeFlags.hasContentQuery */) !== 0;\n}\nfunction isComponentHost(tNode) {\n    return tNode.componentOffset > -1;\n}\nfunction isDirectiveHost(tNode) {\n    return (tNode.flags & 1 /* TNodeFlags.isDirectiveHost */) === 1 /* TNodeFlags.isDirectiveHost */;\n}\nfunction isComponentDef(def) {\n    return !!def.template;\n}\nfunction isRootView(target) {\n    return (target[FLAGS] & 512 /* LViewFlags.IsRoot */) !== 0;\n}\nfunction isProjectionTNode(tNode) {\n    return (tNode.type & 16 /* TNodeType.Projection */) === 16 /* TNodeType.Projection */;\n}\nfunction hasI18n(lView) {\n    return (lView[FLAGS] & 32 /* LViewFlags.HasI18n */) === 32 /* LViewFlags.HasI18n */;\n}\nfunction isDestroyed(lView) {\n    return (lView[FLAGS] & 256 /* LViewFlags.Destroyed */) === 256 /* LViewFlags.Destroyed */;\n}\n\n// [Assert functions do not constraint type when they are guarded by a truthy\n// expression.](https://github.com/microsoft/TypeScript/issues/37295)\nfunction assertTNodeForLView(tNode, lView) {\n    assertTNodeForTView(tNode, lView[TVIEW]);\n}\nfunction assertTNodeForTView(tNode, tView) {\n    assertTNode(tNode);\n    const tData = tView.data;\n    for (let i = HEADER_OFFSET; i < tData.length; i++) {\n        if (tData[i] === tNode) {\n            return;\n        }\n    }\n    throwError('This TNode does not belong to this TView.');\n}\nfunction assertTNode(tNode) {\n    assertDefined(tNode, 'TNode must be defined');\n    if (!(tNode && typeof tNode === 'object' && tNode.hasOwnProperty('directiveStylingLast'))) {\n        throwError('Not of type TNode, got: ' + tNode);\n    }\n}\nfunction assertTIcu(tIcu) {\n    assertDefined(tIcu, 'Expected TIcu to be defined');\n    if (!(typeof tIcu.currentCaseLViewIndex === 'number')) {\n        throwError('Object is not of TIcu type.');\n    }\n}\nfunction assertComponentType(actual, msg = 'Type passed in is not ComponentType, it does not have \\'ɵcmp\\' property.') {\n    if (!getComponentDef(actual)) {\n        throwError(msg);\n    }\n}\nfunction assertNgModuleType(actual, msg = 'Type passed in is not NgModuleType, it does not have \\'ɵmod\\' property.') {\n    if (!getNgModuleDef(actual)) {\n        throwError(msg);\n    }\n}\nfunction assertCurrentTNodeIsParent(isParent) {\n    assertEqual(isParent, true, 'currentTNode should be a parent');\n}\nfunction assertHasParent(tNode) {\n    assertDefined(tNode, 'currentTNode should exist!');\n    assertDefined(tNode.parent, 'currentTNode should have a parent');\n}\nfunction assertLContainer(value) {\n    assertDefined(value, 'LContainer must be defined');\n    assertEqual(isLContainer(value), true, 'Expecting LContainer');\n}\nfunction assertLViewOrUndefined(value) {\n    value && assertEqual(isLView(value), true, 'Expecting LView or undefined or null');\n}\nfunction assertLView(value) {\n    assertDefined(value, 'LView must be defined');\n    assertEqual(isLView(value), true, 'Expecting LView');\n}\nfunction assertFirstCreatePass(tView, errMessage) {\n    assertEqual(tView.firstCreatePass, true, errMessage || 'Should only be called in first create pass.');\n}\nfunction assertFirstUpdatePass(tView, errMessage) {\n    assertEqual(tView.firstUpdatePass, true, errMessage || 'Should only be called in first update pass.');\n}\n/**\n * This is a basic sanity check that an object is probably a directive def. DirectiveDef is\n * an interface, so we can't do a direct instanceof check.\n */\nfunction assertDirectiveDef(obj) {\n    if (obj.type === undefined || obj.selectors == undefined || obj.inputs === undefined) {\n        throwError(`Expected a DirectiveDef/ComponentDef and this object does not seem to have the expected shape.`);\n    }\n}\nfunction assertIndexInDeclRange(tView, index) {\n    assertBetween(HEADER_OFFSET, tView.bindingStartIndex, index);\n}\nfunction assertIndexInExpandoRange(lView, index) {\n    const tView = lView[1];\n    assertBetween(tView.expandoStartIndex, lView.length, index);\n}\nfunction assertBetween(lower, upper, index) {\n    if (!(lower <= index && index < upper)) {\n        throwError(`Index out of range (expecting ${lower} <= ${index} < ${upper})`);\n    }\n}\nfunction assertProjectionSlots(lView, errMessage) {\n    assertDefined(lView[DECLARATION_COMPONENT_VIEW], 'Component views should exist.');\n    assertDefined(lView[DECLARATION_COMPONENT_VIEW][T_HOST].projection, errMessage ||\n        'Components with projection nodes (<ng-content>) must have projection slots defined.');\n}\nfunction assertParentView(lView, errMessage) {\n    assertDefined(lView, errMessage || 'Component views should always have a parent view (component\\'s host view)');\n}\nfunction assertNoDuplicateDirectives(directives) {\n    // The array needs at least two elements in order to have duplicates.\n    if (directives.length < 2) {\n        return;\n    }\n    const seenDirectives = new Set();\n    for (const current of directives) {\n        if (seenDirectives.has(current)) {\n            throw new RuntimeError(309 /* RuntimeErrorCode.DUPLICATE_DIRECTIVE */, `Directive ${current.type.name} matches multiple times on the same element. ` +\n                `Directives can only match an element once.`);\n        }\n        seenDirectives.add(current);\n    }\n}\n/**\n * This is a basic sanity check that the `injectorIndex` seems to point to what looks like a\n * NodeInjector data structure.\n *\n * @param lView `LView` which should be checked.\n * @param injectorIndex index into the `LView` where the `NodeInjector` is expected.\n */\nfunction assertNodeInjector(lView, injectorIndex) {\n    assertIndexInExpandoRange(lView, injectorIndex);\n    assertIndexInExpandoRange(lView, injectorIndex + 8 /* NodeInjectorOffset.PARENT */);\n    assertNumber(lView[injectorIndex + 0], 'injectorIndex should point to a bloom filter');\n    assertNumber(lView[injectorIndex + 1], 'injectorIndex should point to a bloom filter');\n    assertNumber(lView[injectorIndex + 2], 'injectorIndex should point to a bloom filter');\n    assertNumber(lView[injectorIndex + 3], 'injectorIndex should point to a bloom filter');\n    assertNumber(lView[injectorIndex + 4], 'injectorIndex should point to a bloom filter');\n    assertNumber(lView[injectorIndex + 5], 'injectorIndex should point to a bloom filter');\n    assertNumber(lView[injectorIndex + 6], 'injectorIndex should point to a bloom filter');\n    assertNumber(lView[injectorIndex + 7], 'injectorIndex should point to a bloom filter');\n    assertNumber(lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */], 'injectorIndex should point to parent injector');\n}\n\nfunction getFactoryDef(type, throwNotFound) {\n    const hasFactoryDef = type.hasOwnProperty(NG_FACTORY_DEF);\n    if (!hasFactoryDef && throwNotFound === true && ngDevMode) {\n        throw new Error(`Type ${stringify(type)} does not have 'ɵfac' property.`);\n    }\n    return hasFactoryDef ? type[NG_FACTORY_DEF] : null;\n}\n\n/**\n * Represents a basic change from a previous to a new value for a single\n * property on a directive instance. Passed as a value in a\n * {@link SimpleChanges} object to the `ngOnChanges` hook.\n *\n * @see {@link OnChanges}\n *\n * @publicApi\n */\nclass SimpleChange {\n    constructor(previousValue, currentValue, firstChange) {\n        this.previousValue = previousValue;\n        this.currentValue = currentValue;\n        this.firstChange = firstChange;\n    }\n    /**\n     * Check whether the new value is the first value assigned.\n     */\n    isFirstChange() {\n        return this.firstChange;\n    }\n}\n\n/**\n * The NgOnChangesFeature decorates a component with support for the ngOnChanges\n * lifecycle hook, so it should be included in any component that implements\n * that hook.\n *\n * If the component or directive uses inheritance, the NgOnChangesFeature MUST\n * be included as a feature AFTER {@link InheritDefinitionFeature}, otherwise\n * inherited properties will not be propagated to the ngOnChanges lifecycle\n * hook.\n *\n * Example usage:\n *\n * ```\n * static ɵcmp = defineComponent({\n *   ...\n *   inputs: {name: 'publicName'},\n *   features: [NgOnChangesFeature]\n * });\n * ```\n *\n * @codeGenApi\n */\nfunction ɵɵNgOnChangesFeature() {\n    return NgOnChangesFeatureImpl;\n}\nfunction NgOnChangesFeatureImpl(definition) {\n    if (definition.type.prototype.ngOnChanges) {\n        definition.setInput = ngOnChangesSetInput;\n    }\n    return rememberChangeHistoryAndInvokeOnChangesHook;\n}\n// This option ensures that the ngOnChanges lifecycle hook will be inherited\n// from superclasses (in InheritDefinitionFeature).\n/** @nocollapse */\n// tslint:disable-next-line:no-toplevel-property-access\nɵɵNgOnChangesFeature.ngInherit = true;\n/**\n * This is a synthetic lifecycle hook which gets inserted into `TView.preOrderHooks` to simulate\n * `ngOnChanges`.\n *\n * The hook reads the `NgSimpleChangesStore` data from the component instance and if changes are\n * found it invokes `ngOnChanges` on the component instance.\n *\n * @param this Component instance. Because this function gets inserted into `TView.preOrderHooks`,\n *     it is guaranteed to be called with component instance.\n */\nfunction rememberChangeHistoryAndInvokeOnChangesHook() {\n    const simpleChangesStore = getSimpleChangesStore(this);\n    const current = simpleChangesStore?.current;\n    if (current) {\n        const previous = simpleChangesStore.previous;\n        if (previous === EMPTY_OBJ) {\n            simpleChangesStore.previous = current;\n        }\n        else {\n            // New changes are copied to the previous store, so that we don't lose history for inputs\n            // which were not changed this time\n            for (let key in current) {\n                previous[key] = current[key];\n            }\n        }\n        simpleChangesStore.current = null;\n        this.ngOnChanges(current);\n    }\n}\nfunction ngOnChangesSetInput(instance, value, publicName, privateName) {\n    const declaredName = this.declaredInputs[publicName];\n    ngDevMode && assertString(declaredName, 'Name of input in ngOnChanges has to be a string');\n    const simpleChangesStore = getSimpleChangesStore(instance) ||\n        setSimpleChangesStore(instance, { previous: EMPTY_OBJ, current: null });\n    const current = simpleChangesStore.current || (simpleChangesStore.current = {});\n    const previous = simpleChangesStore.previous;\n    const previousChange = previous[declaredName];\n    current[declaredName] = new SimpleChange(previousChange && previousChange.currentValue, value, previous === EMPTY_OBJ);\n    instance[privateName] = value;\n}\nconst SIMPLE_CHANGES_STORE = '__ngSimpleChanges__';\nfunction getSimpleChangesStore(instance) {\n    return instance[SIMPLE_CHANGES_STORE] || null;\n}\nfunction setSimpleChangesStore(instance, store) {\n    return instance[SIMPLE_CHANGES_STORE] = store;\n}\n\nlet profilerCallback = null;\n/**\n * Sets the callback function which will be invoked before and after performing certain actions at\n * runtime (for example, before and after running change detection).\n *\n * Warning: this function is *INTERNAL* and should not be relied upon in application's code.\n * The contract of the function might be changed in any release and/or the function can be removed\n * completely.\n *\n * @param profiler function provided by the caller or null value to disable profiling.\n */\nconst setProfiler = (profiler) => {\n    profilerCallback = profiler;\n};\n/**\n * Profiler function which wraps user code executed by the runtime.\n *\n * @param event ProfilerEvent corresponding to the execution context\n * @param instance component instance\n * @param hookOrListener lifecycle hook function or output listener. The value depends on the\n *  execution context\n * @returns\n */\nconst profiler = function (event, instance, hookOrListener) {\n    if (profilerCallback != null /* both `null` and `undefined` */) {\n        profilerCallback(event, instance, hookOrListener);\n    }\n};\n\nconst SVG_NAMESPACE = 'svg';\nconst MATH_ML_NAMESPACE = 'math';\n\n// TODO(atscott): flip default internally ASAP and externally for v18 (#52928)\nlet _ensureDirtyViewsAreAlwaysReachable = false;\nfunction getEnsureDirtyViewsAreAlwaysReachable() {\n    return _ensureDirtyViewsAreAlwaysReachable;\n}\nfunction setEnsureDirtyViewsAreAlwaysReachable(v) {\n    _ensureDirtyViewsAreAlwaysReachable = v;\n}\n\n/**\n * For efficiency reasons we often put several different data types (`RNode`, `LView`, `LContainer`)\n * in same location in `LView`. This is because we don't want to pre-allocate space for it\n * because the storage is sparse. This file contains utilities for dealing with such data types.\n *\n * How do we know what is stored at a given location in `LView`.\n * - `Array.isArray(value) === false` => `RNode` (The normal storage value)\n * - `Array.isArray(value) === true` => then the `value[0]` represents the wrapped value.\n *   - `typeof value[TYPE] === 'object'` => `LView`\n *      - This happens when we have a component at a given location\n *   - `typeof value[TYPE] === true` => `LContainer`\n *      - This happens when we have `LContainer` binding at a given location.\n *\n *\n * NOTE: it is assumed that `Array.isArray` and `typeof` operations are very efficient.\n */\n/**\n * Returns `RNode`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nfunction unwrapRNode(value) {\n    while (Array.isArray(value)) {\n        value = value[HOST];\n    }\n    return value;\n}\n/**\n * Returns `LView` or `null` if not found.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nfunction unwrapLView(value) {\n    while (Array.isArray(value)) {\n        // This check is same as `isLView()` but we don't call at as we don't want to call\n        // `Array.isArray()` twice and give JITer more work for inlining.\n        if (typeof value[TYPE] === 'object')\n            return value;\n        value = value[HOST];\n    }\n    return null;\n}\n/**\n * Retrieves an element value from the provided `viewData`, by unwrapping\n * from any containers, component views, or style contexts.\n */\nfunction getNativeByIndex(index, lView) {\n    ngDevMode && assertIndexInRange(lView, index);\n    ngDevMode && assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Expected to be past HEADER_OFFSET');\n    return unwrapRNode(lView[index]);\n}\n/**\n * Retrieve an `RNode` for a given `TNode` and `LView`.\n *\n * This function guarantees in dev mode to retrieve a non-null `RNode`.\n *\n * @param tNode\n * @param lView\n */\nfunction getNativeByTNode(tNode, lView) {\n    ngDevMode && assertTNodeForLView(tNode, lView);\n    ngDevMode && assertIndexInRange(lView, tNode.index);\n    const node = unwrapRNode(lView[tNode.index]);\n    return node;\n}\n/**\n * Retrieve an `RNode` or `null` for a given `TNode` and `LView`.\n *\n * Some `TNode`s don't have associated `RNode`s. For example `Projection`\n *\n * @param tNode\n * @param lView\n */\nfunction getNativeByTNodeOrNull(tNode, lView) {\n    const index = tNode === null ? -1 : tNode.index;\n    if (index !== -1) {\n        ngDevMode && assertTNodeForLView(tNode, lView);\n        const node = unwrapRNode(lView[index]);\n        return node;\n    }\n    return null;\n}\n// fixme(misko): The return Type should be `TNode|null`\nfunction getTNode(tView, index) {\n    ngDevMode && assertGreaterThan(index, -1, 'wrong index for TNode');\n    ngDevMode && assertLessThan(index, tView.data.length, 'wrong index for TNode');\n    const tNode = tView.data[index];\n    ngDevMode && tNode !== null && assertTNode(tNode);\n    return tNode;\n}\n/** Retrieves a value from any `LView` or `TData`. */\nfunction load(view, index) {\n    ngDevMode && assertIndexInRange(view, index);\n    return view[index];\n}\nfunction getComponentLViewByIndex(nodeIndex, hostView) {\n    // Could be an LView or an LContainer. If LContainer, unwrap to find LView.\n    ngDevMode && assertIndexInRange(hostView, nodeIndex);\n    const slotValue = hostView[nodeIndex];\n    const lView = isLView(slotValue) ? slotValue : slotValue[HOST];\n    return lView;\n}\n/** Checks whether a given view is in creation mode */\nfunction isCreationMode(view) {\n    return (view[FLAGS] & 4 /* LViewFlags.CreationMode */) === 4 /* LViewFlags.CreationMode */;\n}\n/**\n * Returns a boolean for whether the view is attached to the change detection tree.\n *\n * Note: This determines whether a view should be checked, not whether it's inserted\n * into a container. For that, you'll want `viewAttachedToContainer` below.\n */\nfunction viewAttachedToChangeDetector(view) {\n    return (view[FLAGS] & 128 /* LViewFlags.Attached */) === 128 /* LViewFlags.Attached */;\n}\n/** Returns a boolean for whether the view is attached to a container. */\nfunction viewAttachedToContainer(view) {\n    return isLContainer(view[PARENT]);\n}\nfunction getConstant(consts, index) {\n    if (index === null || index === undefined)\n        return null;\n    ngDevMode && assertIndexInRange(consts, index);\n    return consts[index];\n}\n/**\n * Resets the pre-order hook flags of the view.\n * @param lView the LView on which the flags are reset\n */\nfunction resetPreOrderHookFlags(lView) {\n    lView[PREORDER_HOOK_FLAGS] = 0;\n}\n/**\n * Adds the `RefreshView` flag from the lView and updates HAS_CHILD_VIEWS_TO_REFRESH flag of\n * parents.\n */\nfunction markViewForRefresh(lView) {\n    if (lView[FLAGS] & 1024 /* LViewFlags.RefreshView */) {\n        return;\n    }\n    lView[FLAGS] |= 1024 /* LViewFlags.RefreshView */;\n    if (viewAttachedToChangeDetector(lView)) {\n        markAncestorsForTraversal(lView);\n    }\n}\n/**\n * Walks up the LView hierarchy.\n * @param nestingLevel Number of times to walk up in hierarchy.\n * @param currentView View from which to start the lookup.\n */\nfunction walkUpViews(nestingLevel, currentView) {\n    while (nestingLevel > 0) {\n        ngDevMode &&\n            assertDefined(currentView[DECLARATION_VIEW], 'Declaration view should be defined if nesting level is greater than 0.');\n        currentView = currentView[DECLARATION_VIEW];\n        nestingLevel--;\n    }\n    return currentView;\n}\nfunction requiresRefreshOrTraversal(lView) {\n    return lView[FLAGS] & (1024 /* LViewFlags.RefreshView */ | 8192 /* LViewFlags.HasChildViewsToRefresh */) ||\n        lView[REACTIVE_TEMPLATE_CONSUMER]?.dirty;\n}\n/**\n * Updates the `HasChildViewsToRefresh` flag on the parents of the `LView` as well as the\n * parents above.\n */\nfunction updateAncestorTraversalFlagsOnAttach(lView) {\n    // TODO(atscott): Simplify if...else cases once getEnsureDirtyViewsAreAlwaysReachable is always\n    // `true`. When we attach a view that's marked `Dirty`, we should ensure that it is reached during\n    // the next CD traversal so we add the `RefreshView` flag and mark ancestors accordingly.\n    if (requiresRefreshOrTraversal(lView)) {\n        markAncestorsForTraversal(lView);\n    }\n    else if (lView[FLAGS] & 64 /* LViewFlags.Dirty */) {\n        if (getEnsureDirtyViewsAreAlwaysReachable()) {\n            lView[FLAGS] |= 1024 /* LViewFlags.RefreshView */;\n            markAncestorsForTraversal(lView);\n        }\n        else {\n            lView[ENVIRONMENT].changeDetectionScheduler?.notify();\n        }\n    }\n}\n/**\n * Ensures views above the given `lView` are traversed during change detection even when they are\n * not dirty.\n *\n * This is done by setting the `HAS_CHILD_VIEWS_TO_REFRESH` flag up to the root, stopping when the\n * flag is already `true` or the `lView` is detached.\n */\nfunction markAncestorsForTraversal(lView) {\n    lView[ENVIRONMENT].changeDetectionScheduler?.notify();\n    let parent = lView[PARENT];\n    while (parent !== null) {\n        // We stop adding markers to the ancestors once we reach one that already has the marker. This\n        // is to avoid needlessly traversing all the way to the root when the marker already exists.\n        if ((isLContainer(parent) && (parent[FLAGS] & LContainerFlags.HasChildViewsToRefresh) ||\n            (isLView(parent) && parent[FLAGS] & 8192 /* LViewFlags.HasChildViewsToRefresh */))) {\n            break;\n        }\n        if (isLContainer(parent)) {\n            parent[FLAGS] |= LContainerFlags.HasChildViewsToRefresh;\n        }\n        else {\n            parent[FLAGS] |= 8192 /* LViewFlags.HasChildViewsToRefresh */;\n            if (!viewAttachedToChangeDetector(parent)) {\n                break;\n            }\n        }\n        parent = parent[PARENT];\n    }\n}\n/**\n * Stores a LView-specific destroy callback.\n */\nfunction storeLViewOnDestroy(lView, onDestroyCallback) {\n    if ((lView[FLAGS] & 256 /* LViewFlags.Destroyed */) === 256 /* LViewFlags.Destroyed */) {\n        throw new RuntimeError(911 /* RuntimeErrorCode.VIEW_ALREADY_DESTROYED */, ngDevMode && 'View has already been destroyed.');\n    }\n    if (lView[ON_DESTROY_HOOKS] === null) {\n        lView[ON_DESTROY_HOOKS] = [];\n    }\n    lView[ON_DESTROY_HOOKS].push(onDestroyCallback);\n}\n/**\n * Removes previously registered LView-specific destroy callback.\n */\nfunction removeLViewOnDestroy(lView, onDestroyCallback) {\n    if (lView[ON_DESTROY_HOOKS] === null)\n        return;\n    const destroyCBIdx = lView[ON_DESTROY_HOOKS].indexOf(onDestroyCallback);\n    if (destroyCBIdx !== -1) {\n        lView[ON_DESTROY_HOOKS].splice(destroyCBIdx, 1);\n    }\n}\n\nconst instructionState = {\n    lFrame: createLFrame(null),\n    bindingsEnabled: true,\n    skipHydrationRootTNode: null,\n};\n/**\n * In this mode, any changes in bindings will throw an ExpressionChangedAfterChecked error.\n *\n * Necessary to support ChangeDetectorRef.checkNoChanges().\n *\n * The `checkNoChanges` function is invoked only in ngDevMode=true and verifies that no unintended\n * changes exist in the change detector or its children.\n */\nlet _isInCheckNoChangesMode = false;\n/**\n * Returns true if the instruction state stack is empty.\n *\n * Intended to be called from tests only (tree shaken otherwise).\n */\nfunction specOnlyIsInstructionStateEmpty() {\n    return instructionState.lFrame.parent === null;\n}\nfunction getElementDepthCount() {\n    return instructionState.lFrame.elementDepthCount;\n}\nfunction increaseElementDepthCount() {\n    instructionState.lFrame.elementDepthCount++;\n}\nfunction decreaseElementDepthCount() {\n    instructionState.lFrame.elementDepthCount--;\n}\nfunction getBindingsEnabled() {\n    return instructionState.bindingsEnabled;\n}\n/**\n * Returns true if currently inside a skip hydration block.\n * @returns boolean\n */\nfunction isInSkipHydrationBlock$1() {\n    return instructionState.skipHydrationRootTNode !== null;\n}\n/**\n * Returns true if this is the root TNode of the skip hydration block.\n * @param tNode the current TNode\n * @returns boolean\n */\nfunction isSkipHydrationRootTNode(tNode) {\n    return instructionState.skipHydrationRootTNode === tNode;\n}\n/**\n * Enables directive matching on elements.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- ɵɵdisableBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- ɵɵenableBindings() -->\n * </div>\n * ```\n *\n * @codeGenApi\n */\nfunction ɵɵenableBindings() {\n    instructionState.bindingsEnabled = true;\n}\n/**\n * Sets a flag to specify that the TNode is in a skip hydration block.\n * @param tNode the current TNode\n */\nfunction enterSkipHydrationBlock(tNode) {\n    instructionState.skipHydrationRootTNode = tNode;\n}\n/**\n * Disables directive matching on element.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- ɵɵdisableBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- ɵɵenableBindings() -->\n * </div>\n * ```\n *\n * @codeGenApi\n */\nfunction ɵɵdisableBindings() {\n    instructionState.bindingsEnabled = false;\n}\n/**\n * Clears the root skip hydration node when leaving a skip hydration block.\n */\nfunction leaveSkipHydrationBlock() {\n    instructionState.skipHydrationRootTNode = null;\n}\n/**\n * Return the current `LView`.\n */\nfunction getLView() {\n    return instructionState.lFrame.lView;\n}\n/**\n * Return the current `TView`.\n */\nfunction getTView() {\n    return instructionState.lFrame.tView;\n}\n/**\n * Restores `contextViewData` to the given OpaqueViewState instance.\n *\n * Used in conjunction with the getCurrentView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @param viewToRestore The OpaqueViewState instance to restore.\n * @returns Context of the restored OpaqueViewState instance.\n *\n * @codeGenApi\n */\nfunction ɵɵrestoreView(viewToRestore) {\n    instructionState.lFrame.contextLView = viewToRestore;\n    return viewToRestore[CONTEXT];\n}\n/**\n * Clears the view set in `ɵɵrestoreView` from memory. Returns the passed in\n * value so that it can be used as a return value of an instruction.\n *\n * @codeGenApi\n */\nfunction ɵɵresetView(value) {\n    instructionState.lFrame.contextLView = null;\n    return value;\n}\nfunction getCurrentTNode() {\n    let currentTNode = getCurrentTNodePlaceholderOk();\n    while (currentTNode !== null && currentTNode.type === 64 /* TNodeType.Placeholder */) {\n        currentTNode = currentTNode.parent;\n    }\n    return currentTNode;\n}\nfunction getCurrentTNodePlaceholderOk() {\n    return instructionState.lFrame.currentTNode;\n}\nfunction getCurrentParentTNode() {\n    const lFrame = instructionState.lFrame;\n    const currentTNode = lFrame.currentTNode;\n    return lFrame.isParent ? currentTNode : currentTNode.parent;\n}\nfunction setCurrentTNode(tNode, isParent) {\n    ngDevMode && tNode && assertTNodeForTView(tNode, instructionState.lFrame.tView);\n    const lFrame = instructionState.lFrame;\n    lFrame.currentTNode = tNode;\n    lFrame.isParent = isParent;\n}\nfunction isCurrentTNodeParent() {\n    return instructionState.lFrame.isParent;\n}\nfunction setCurrentTNodeAsNotParent() {\n    instructionState.lFrame.isParent = false;\n}\nfunction getContextLView() {\n    const contextLView = instructionState.lFrame.contextLView;\n    ngDevMode && assertDefined(contextLView, 'contextLView must be defined.');\n    return contextLView;\n}\nfunction isInCheckNoChangesMode() {\n    !ngDevMode && throwError('Must never be called in production mode');\n    return _isInCheckNoChangesMode;\n}\nfunction setIsInCheckNoChangesMode(mode) {\n    !ngDevMode && throwError('Must never be called in production mode');\n    _isInCheckNoChangesMode = mode;\n}\n// top level variables should not be exported for performance reasons (PERF_NOTES.md)\nfunction getBindingRoot() {\n    const lFrame = instructionState.lFrame;\n    let index = lFrame.bindingRootIndex;\n    if (index === -1) {\n        index = lFrame.bindingRootIndex = lFrame.tView.bindingStartIndex;\n    }\n    return index;\n}\nfunction getBindingIndex() {\n    return instructionState.lFrame.bindingIndex;\n}\nfunction setBindingIndex(value) {\n    return instructionState.lFrame.bindingIndex = value;\n}\nfunction nextBindingIndex() {\n    return instructionState.lFrame.bindingIndex++;\n}\nfunction incrementBindingIndex(count) {\n    const lFrame = instructionState.lFrame;\n    const index = lFrame.bindingIndex;\n    lFrame.bindingIndex = lFrame.bindingIndex + count;\n    return index;\n}\nfunction isInI18nBlock() {\n    return instructionState.lFrame.inI18n;\n}\nfunction setInI18nBlock(isInI18nBlock) {\n    instructionState.lFrame.inI18n = isInI18nBlock;\n}\n/**\n * Set a new binding root index so that host template functions can execute.\n *\n * Bindings inside the host template are 0 index. But because we don't know ahead of time\n * how many host bindings we have we can't pre-compute them. For this reason they are all\n * 0 index and we just shift the root so that they match next available location in the LView.\n *\n * @param bindingRootIndex Root index for `hostBindings`\n * @param currentDirectiveIndex `TData[currentDirectiveIndex]` will point to the current directive\n *        whose `hostBindings` are being processed.\n */\nfunction setBindingRootForHostBindings(bindingRootIndex, currentDirectiveIndex) {\n    const lFrame = instructionState.lFrame;\n    lFrame.bindingIndex = lFrame.bindingRootIndex = bindingRootIndex;\n    setCurrentDirectiveIndex(currentDirectiveIndex);\n}\n/**\n * When host binding is executing this points to the directive index.\n * `TView.data[getCurrentDirectiveIndex()]` is `DirectiveDef`\n * `LView[getCurrentDirectiveIndex()]` is directive instance.\n */\nfunction getCurrentDirectiveIndex() {\n    return instructionState.lFrame.currentDirectiveIndex;\n}\n/**\n * Sets an index of a directive whose `hostBindings` are being processed.\n *\n * @param currentDirectiveIndex `TData` index where current directive instance can be found.\n */\nfunction setCurrentDirectiveIndex(currentDirectiveIndex) {\n    instructionState.lFrame.currentDirectiveIndex = currentDirectiveIndex;\n}\n/**\n * Retrieve the current `DirectiveDef` which is active when `hostBindings` instruction is being\n * executed.\n *\n * @param tData Current `TData` where the `DirectiveDef` will be looked up at.\n */\nfunction getCurrentDirectiveDef(tData) {\n    const currentDirectiveIndex = instructionState.lFrame.currentDirectiveIndex;\n    return currentDirectiveIndex === -1 ? null : tData[currentDirectiveIndex];\n}\nfunction getCurrentQueryIndex() {\n    return instructionState.lFrame.currentQueryIndex;\n}\nfunction setCurrentQueryIndex(value) {\n    instructionState.lFrame.currentQueryIndex = value;\n}\n/**\n * Returns a `TNode` of the location where the current `LView` is declared at.\n *\n * @param lView an `LView` that we want to find parent `TNode` for.\n */\nfunction getDeclarationTNode(lView) {\n    const tView = lView[TVIEW];\n    // Return the declaration parent for embedded views\n    if (tView.type === 2 /* TViewType.Embedded */) {\n        ngDevMode && assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');\n        return tView.declTNode;\n    }\n    // Components don't have `TView.declTNode` because each instance of component could be\n    // inserted in different location, hence `TView.declTNode` is meaningless.\n    // Falling back to `T_HOST` in case we cross component boundary.\n    if (tView.type === 1 /* TViewType.Component */) {\n        return lView[T_HOST];\n    }\n    // Remaining TNode type is `TViewType.Root` which doesn't have a parent TNode.\n    return null;\n}\n/**\n * This is a light weight version of the `enterView` which is needed by the DI system.\n *\n * @param lView `LView` location of the DI context.\n * @param tNode `TNode` for DI context\n * @param flags DI context flags. if `SkipSelf` flag is set than we walk up the declaration\n *     tree from `tNode`  until we find parent declared `TElementNode`.\n * @returns `true` if we have successfully entered DI associated with `tNode` (or with declared\n *     `TNode` if `flags` has  `SkipSelf`). Failing to enter DI implies that no associated\n *     `NodeInjector` can be found and we should instead use `ModuleInjector`.\n *     - If `true` than this call must be fallowed by `leaveDI`\n *     - If `false` than this call failed and we should NOT call `leaveDI`\n */\nfunction enterDI(lView, tNode, flags) {\n    ngDevMode && assertLViewOrUndefined(lView);\n    if (flags & InjectFlags.SkipSelf) {\n        ngDevMode && assertTNodeForTView(tNode, lView[TVIEW]);\n        let parentTNode = tNode;\n        let parentLView = lView;\n        while (true) {\n            ngDevMode && assertDefined(parentTNode, 'Parent TNode should be defined');\n            parentTNode = parentTNode.parent;\n            if (parentTNode === null && !(flags & InjectFlags.Host)) {\n                parentTNode = getDeclarationTNode(parentLView);\n                if (parentTNode === null)\n                    break;\n                // In this case, a parent exists and is definitely an element. So it will definitely\n                // have an existing lView as the declaration view, which is why we can assume it's defined.\n                ngDevMode && assertDefined(parentLView, 'Parent LView should be defined');\n                parentLView = parentLView[DECLARATION_VIEW];\n                // In Ivy there are Comment nodes that correspond to ngIf and NgFor embedded directives\n                // We want to skip those and look only at Elements and ElementContainers to ensure\n                // we're looking at true parent nodes, and not content or other types.\n                if (parentTNode.type & (2 /* TNodeType.Element */ | 8 /* TNodeType.ElementContainer */)) {\n                    break;\n                }\n            }\n            else {\n                break;\n            }\n        }\n        if (parentTNode === null) {\n            // If we failed to find a parent TNode this means that we should use module injector.\n            return false;\n        }\n        else {\n            tNode = parentTNode;\n            lView = parentLView;\n        }\n    }\n    ngDevMode && assertTNodeForLView(tNode, lView);\n    const lFrame = instructionState.lFrame = allocLFrame();\n    lFrame.currentTNode = tNode;\n    lFrame.lView = lView;\n    return true;\n}\n/**\n * Swap the current lView with a new lView.\n *\n * For performance reasons we store the lView in the top level of the module.\n * This way we minimize the number of properties to read. Whenever a new view\n * is entered we have to store the lView for later, and when the view is\n * exited the state has to be restored\n *\n * @param newView New lView to become active\n * @returns the previously active lView;\n */\nfunction enterView(newView) {\n    ngDevMode && assertNotEqual(newView[0], newView[1], '????');\n    ngDevMode && assertLViewOrUndefined(newView);\n    const newLFrame = allocLFrame();\n    if (ngDevMode) {\n        assertEqual(newLFrame.isParent, true, 'Expected clean LFrame');\n        assertEqual(newLFrame.lView, null, 'Expected clean LFrame');\n        assertEqual(newLFrame.tView, null, 'Expected clean LFrame');\n        assertEqual(newLFrame.selectedIndex, -1, 'Expected clean LFrame');\n        assertEqual(newLFrame.elementDepthCount, 0, 'Expected clean LFrame');\n        assertEqual(newLFrame.currentDirectiveIndex, -1, 'Expected clean LFrame');\n        assertEqual(newLFrame.currentNamespace, null, 'Expected clean LFrame');\n        assertEqual(newLFrame.bindingRootIndex, -1, 'Expected clean LFrame');\n        assertEqual(newLFrame.currentQueryIndex, 0, 'Expected clean LFrame');\n    }\n    const tView = newView[TVIEW];\n    instructionState.lFrame = newLFrame;\n    ngDevMode && tView.firstChild && assertTNodeForTView(tView.firstChild, tView);\n    newLFrame.currentTNode = tView.firstChild;\n    newLFrame.lView = newView;\n    newLFrame.tView = tView;\n    newLFrame.contextLView = newView;\n    newLFrame.bindingIndex = tView.bindingStartIndex;\n    newLFrame.inI18n = false;\n}\n/**\n * Allocates next free LFrame. This function tries to reuse the `LFrame`s to lower memory pressure.\n */\nfunction allocLFrame() {\n    const currentLFrame = instructionState.lFrame;\n    const childLFrame = currentLFrame === null ? null : currentLFrame.child;\n    const newLFrame = childLFrame === null ? createLFrame(currentLFrame) : childLFrame;\n    return newLFrame;\n}\nfunction createLFrame(parent) {\n    const lFrame = {\n        currentTNode: null,\n        isParent: true,\n        lView: null,\n        tView: null,\n        selectedIndex: -1,\n        contextLView: null,\n        elementDepthCount: 0,\n        currentNamespace: null,\n        currentDirectiveIndex: -1,\n        bindingRootIndex: -1,\n        bindingIndex: -1,\n        currentQueryIndex: 0,\n        parent: parent,\n        child: null,\n        inI18n: false,\n    };\n    parent !== null && (parent.child = lFrame); // link the new LFrame for reuse.\n    return lFrame;\n}\n/**\n * A lightweight version of leave which is used with DI.\n *\n * This function only resets `currentTNode` and `LView` as those are the only properties\n * used with DI (`enterDI()`).\n *\n * NOTE: This function is reexported as `leaveDI`. However `leaveDI` has return type of `void` where\n * as `leaveViewLight` has `LFrame`. This is so that `leaveViewLight` can be used in `leaveView`.\n */\nfunction leaveViewLight() {\n    const oldLFrame = instructionState.lFrame;\n    instructionState.lFrame = oldLFrame.parent;\n    oldLFrame.currentTNode = null;\n    oldLFrame.lView = null;\n    return oldLFrame;\n}\n/**\n * This is a lightweight version of the `leaveView` which is needed by the DI system.\n *\n * NOTE: this function is an alias so that we can change the type of the function to have `void`\n * return type.\n */\nconst leaveDI = leaveViewLight;\n/**\n * Leave the current `LView`\n *\n * This pops the `LFrame` with the associated `LView` from the stack.\n *\n * IMPORTANT: We must zero out the `LFrame` values here otherwise they will be retained. This is\n * because for performance reasons we don't release `LFrame` but rather keep it for next use.\n */\nfunction leaveView() {\n    const oldLFrame = leaveViewLight();\n    oldLFrame.isParent = true;\n    oldLFrame.tView = null;\n    oldLFrame.selectedIndex = -1;\n    oldLFrame.contextLView = null;\n    oldLFrame.elementDepthCount = 0;\n    oldLFrame.currentDirectiveIndex = -1;\n    oldLFrame.currentNamespace = null;\n    oldLFrame.bindingRootIndex = -1;\n    oldLFrame.bindingIndex = -1;\n    oldLFrame.currentQueryIndex = 0;\n}\nfunction nextContextImpl(level) {\n    const contextLView = instructionState.lFrame.contextLView =\n        walkUpViews(level, instructionState.lFrame.contextLView);\n    return contextLView[CONTEXT];\n}\n/**\n * Gets the currently selected element index.\n *\n * Used with {@link property} instruction (and more in the future) to identify the index in the\n * current `LView` to act on.\n */\nfunction getSelectedIndex() {\n    return instructionState.lFrame.selectedIndex;\n}\n/**\n * Sets the most recent index passed to {@link select}\n *\n * Used with {@link property} instruction (and more in the future) to identify the index in the\n * current `LView` to act on.\n *\n * (Note that if an \"exit function\" was set earlier (via `setElementExitFn()`) then that will be\n * run if and when the provided `index` value is different from the current selected index value.)\n */\nfunction setSelectedIndex(index) {\n    ngDevMode && index !== -1 &&\n        assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Index must be past HEADER_OFFSET (or -1).');\n    ngDevMode &&\n        assertLessThan(index, instructionState.lFrame.lView.length, 'Can\\'t set index passed end of LView');\n    instructionState.lFrame.selectedIndex = index;\n}\n/**\n * Gets the `tNode` that represents currently selected element.\n */\nfunction getSelectedTNode() {\n    const lFrame = instructionState.lFrame;\n    return getTNode(lFrame.tView, lFrame.selectedIndex);\n}\n/**\n * Sets the namespace used to create elements to `'http://www.w3.org/2000/svg'` in global state.\n *\n * @codeGenApi\n */\nfunction ɵɵnamespaceSVG() {\n    instructionState.lFrame.currentNamespace = SVG_NAMESPACE;\n}\n/**\n * Sets the namespace used to create elements to `'http://www.w3.org/1998/MathML/'` in global state.\n *\n * @codeGenApi\n */\nfunction ɵɵnamespaceMathML() {\n    instructionState.lFrame.currentNamespace = MATH_ML_NAMESPACE;\n}\n/**\n * Sets the namespace used to create elements to `null`, which forces element creation to use\n * `createElement` rather than `createElementNS`.\n *\n * @codeGenApi\n */\nfunction ɵɵnamespaceHTML() {\n    namespaceHTMLInternal();\n}\n/**\n * Sets the namespace used to create elements to `null`, which forces element creation to use\n * `createElement` rather than `createElementNS`.\n */\nfunction namespaceHTMLInternal() {\n    instructionState.lFrame.currentNamespace = null;\n}\nfunction getNamespace$1() {\n    return instructionState.lFrame.currentNamespace;\n}\nlet _wasLastNodeCreated = true;\n/**\n * Retrieves a global flag that indicates whether the most recent DOM node\n * was created or hydrated.\n */\nfunction wasLastNodeCreated() {\n    return _wasLastNodeCreated;\n}\n/**\n * Sets a global flag to indicate whether the most recent DOM node\n * was created or hydrated.\n */\nfunction lastNodeWasCreated(flag) {\n    _wasLastNodeCreated = flag;\n}\n\n/**\n * Adds all directive lifecycle hooks from the given `DirectiveDef` to the given `TView`.\n *\n * Must be run *only* on the first template pass.\n *\n * Sets up the pre-order hooks on the provided `tView`,\n * see {@link HookData} for details about the data structure.\n *\n * @param directiveIndex The index of the directive in LView\n * @param directiveDef The definition containing the hooks to setup in tView\n * @param tView The current TView\n */\nfunction registerPreOrderHooks(directiveIndex, directiveDef, tView) {\n    ngDevMode && assertFirstCreatePass(tView);\n    const { ngOnChanges, ngOnInit, ngDoCheck } = directiveDef.type.prototype;\n    if (ngOnChanges) {\n        const wrappedOnChanges = NgOnChangesFeatureImpl(directiveDef);\n        (tView.preOrderHooks ??= []).push(directiveIndex, wrappedOnChanges);\n        (tView.preOrderCheckHooks ??= []).push(directiveIndex, wrappedOnChanges);\n    }\n    if (ngOnInit) {\n        (tView.preOrderHooks ??= []).push(0 - directiveIndex, ngOnInit);\n    }\n    if (ngDoCheck) {\n        (tView.preOrderHooks ??= []).push(directiveIndex, ngDoCheck);\n        (tView.preOrderCheckHooks ??= []).push(directiveIndex, ngDoCheck);\n    }\n}\n/**\n *\n * Loops through the directives on the provided `tNode` and queues hooks to be\n * run that are not initialization hooks.\n *\n * Should be executed during `elementEnd()` and similar to\n * preserve hook execution order. Content, view, and destroy hooks for projected\n * components and directives must be called *before* their hosts.\n *\n * Sets up the content, view, and destroy hooks on the provided `tView`,\n * see {@link HookData} for details about the data structure.\n *\n * NOTE: This does not set up `onChanges`, `onInit` or `doCheck`, those are set up\n * separately at `elementStart`.\n *\n * @param tView The current TView\n * @param tNode The TNode whose directives are to be searched for hooks to queue\n */\nfunction registerPostOrderHooks(tView, tNode) {\n    ngDevMode && assertFirstCreatePass(tView);\n    // It's necessary to loop through the directives at elementEnd() (rather than processing in\n    // directiveCreate) so we can preserve the current hook order. Content, view, and destroy\n    // hooks for projected components and directives must be called *before* their hosts.\n    for (let i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {\n        const directiveDef = tView.data[i];\n        ngDevMode && assertDefined(directiveDef, 'Expecting DirectiveDef');\n        const lifecycleHooks = directiveDef.type.prototype;\n        const { ngAfterContentInit, ngAfterContentChecked, ngAfterViewInit, ngAfterViewChecked, ngOnDestroy } = lifecycleHooks;\n        if (ngAfterContentInit) {\n            (tView.contentHooks ??= []).push(-i, ngAfterContentInit);\n        }\n        if (ngAfterContentChecked) {\n            (tView.contentHooks ??= []).push(i, ngAfterContentChecked);\n            (tView.contentCheckHooks ??= []).push(i, ngAfterContentChecked);\n        }\n        if (ngAfterViewInit) {\n            (tView.viewHooks ??= []).push(-i, ngAfterViewInit);\n        }\n        if (ngAfterViewChecked) {\n            (tView.viewHooks ??= []).push(i, ngAfterViewChecked);\n            (tView.viewCheckHooks ??= []).push(i, ngAfterViewChecked);\n        }\n        if (ngOnDestroy != null) {\n            (tView.destroyHooks ??= []).push(i, ngOnDestroy);\n        }\n    }\n}\n/**\n * Executing hooks requires complex logic as we need to deal with 2 constraints.\n *\n * 1. Init hooks (ngOnInit, ngAfterContentInit, ngAfterViewInit) must all be executed once and only\n * once, across many change detection cycles. This must be true even if some hooks throw, or if\n * some recursively trigger a change detection cycle.\n * To solve that, it is required to track the state of the execution of these init hooks.\n * This is done by storing and maintaining flags in the view: the {@link InitPhaseState},\n * and the index within that phase. They can be seen as a cursor in the following structure:\n * [[onInit1, onInit2], [afterContentInit1], [afterViewInit1, afterViewInit2, afterViewInit3]]\n * They are stored as flags in LView[FLAGS].\n *\n * 2. Pre-order hooks can be executed in batches, because of the select instruction.\n * To be able to pause and resume their execution, we also need some state about the hook's array\n * that is being processed:\n * - the index of the next hook to be executed\n * - the number of init hooks already found in the processed part of the  array\n * They are stored as flags in LView[PREORDER_HOOK_FLAGS].\n */\n/**\n * Executes pre-order check hooks ( OnChanges, DoChanges) given a view where all the init hooks were\n * executed once. This is a light version of executeInitAndCheckPreOrderHooks where we can skip read\n * / write of the init-hooks related flags.\n * @param lView The LView where hooks are defined\n * @param hooks Hooks to be run\n * @param nodeIndex 3 cases depending on the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nfunction executeCheckHooks(lView, hooks, nodeIndex) {\n    callHooks(lView, hooks, 3 /* InitPhaseState.InitPhaseCompleted */, nodeIndex);\n}\n/**\n * Executes post-order init and check hooks (one of AfterContentInit, AfterContentChecked,\n * AfterViewInit, AfterViewChecked) given a view where there are pending init hooks to be executed.\n * @param lView The LView where hooks are defined\n * @param hooks Hooks to be run\n * @param initPhase A phase for which hooks should be run\n * @param nodeIndex 3 cases depending on the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nfunction executeInitAndCheckHooks(lView, hooks, initPhase, nodeIndex) {\n    ngDevMode &&\n        assertNotEqual(initPhase, 3 /* InitPhaseState.InitPhaseCompleted */, 'Init pre-order hooks should not be called more than once');\n    if ((lView[FLAGS] & 3 /* LViewFlags.InitPhaseStateMask */) === initPhase) {\n        callHooks(lView, hooks, initPhase, nodeIndex);\n    }\n}\nfunction incrementInitPhaseFlags(lView, initPhase) {\n    ngDevMode &&\n        assertNotEqual(initPhase, 3 /* InitPhaseState.InitPhaseCompleted */, 'Init hooks phase should not be incremented after all init hooks have been run.');\n    let flags = lView[FLAGS];\n    if ((flags & 3 /* LViewFlags.InitPhaseStateMask */) === initPhase) {\n        flags &= 16383 /* LViewFlags.IndexWithinInitPhaseReset */;\n        flags += 1 /* LViewFlags.InitPhaseStateIncrementer */;\n        lView[FLAGS] = flags;\n    }\n}\n/**\n * Calls lifecycle hooks with their contexts, skipping init hooks if it's not\n * the first LView pass\n *\n * @param currentView The current view\n * @param arr The array in which the hooks are found\n * @param initPhaseState the current state of the init phase\n * @param currentNodeIndex 3 cases depending on the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nfunction callHooks(currentView, arr, initPhase, currentNodeIndex) {\n    ngDevMode &&\n        assertEqual(isInCheckNoChangesMode(), false, 'Hooks should never be run when in check no changes mode.');\n    const startIndex = currentNodeIndex !== undefined ?\n        (currentView[PREORDER_HOOK_FLAGS] & 65535 /* PreOrderHookFlags.IndexOfTheNextPreOrderHookMaskMask */) :\n        0;\n    const nodeIndexLimit = currentNodeIndex != null ? currentNodeIndex : -1;\n    const max = arr.length - 1; // Stop the loop at length - 1, because we look for the hook at i + 1\n    let lastNodeIndexFound = 0;\n    for (let i = startIndex; i < max; i++) {\n        const hook = arr[i + 1];\n        if (typeof hook === 'number') {\n            lastNodeIndexFound = arr[i];\n            if (currentNodeIndex != null && lastNodeIndexFound >= currentNodeIndex) {\n                break;\n            }\n        }\n        else {\n            const isInitHook = arr[i] < 0;\n            if (isInitHook) {\n                currentView[PREORDER_HOOK_FLAGS] += 65536 /* PreOrderHookFlags.NumberOfInitHooksCalledIncrementer */;\n            }\n            if (lastNodeIndexFound < nodeIndexLimit || nodeIndexLimit == -1) {\n                callHook(currentView, initPhase, arr, i);\n                currentView[PREORDER_HOOK_FLAGS] =\n                    (currentView[PREORDER_HOOK_FLAGS] & 4294901760 /* PreOrderHookFlags.NumberOfInitHooksCalledMask */) + i +\n                        2;\n            }\n            i++;\n        }\n    }\n}\n/**\n * Executes a single lifecycle hook, making sure that:\n * - it is called in the non-reactive context;\n * - profiling data are registered.\n */\nfunction callHookInternal(directive, hook) {\n    profiler(4 /* ProfilerEvent.LifecycleHookStart */, directive, hook);\n    const prevConsumer = setActiveConsumer$1(null);\n    try {\n        hook.call(directive);\n    }\n    finally {\n        setActiveConsumer$1(prevConsumer);\n        profiler(5 /* ProfilerEvent.LifecycleHookEnd */, directive, hook);\n    }\n}\n/**\n * Execute one hook against the current `LView`.\n *\n * @param currentView The current view\n * @param initPhaseState the current state of the init phase\n * @param arr The array in which the hooks are found\n * @param i The current index within the hook data array\n */\nfunction callHook(currentView, initPhase, arr, i) {\n    const isInitHook = arr[i] < 0;\n    const hook = arr[i + 1];\n    const directiveIndex = isInitHook ? -arr[i] : arr[i];\n    const directive = currentView[directiveIndex];\n    if (isInitHook) {\n        const indexWithintInitPhase = currentView[FLAGS] >> 14 /* LViewFlags.IndexWithinInitPhaseShift */;\n        // The init phase state must be always checked here as it may have been recursively updated.\n        if (indexWithintInitPhase <\n            (currentView[PREORDER_HOOK_FLAGS] >> 16 /* PreOrderHookFlags.NumberOfInitHooksCalledShift */) &&\n            (currentView[FLAGS] & 3 /* LViewFlags.InitPhaseStateMask */) === initPhase) {\n            currentView[FLAGS] += 16384 /* LViewFlags.IndexWithinInitPhaseIncrementer */;\n            callHookInternal(directive, hook);\n        }\n    }\n    else {\n        callHookInternal(directive, hook);\n    }\n}\n\nconst NO_PARENT_INJECTOR = -1;\n/**\n * Each injector is saved in 9 contiguous slots in `LView` and 9 contiguous slots in\n * `TView.data`. This allows us to store information about the current node's tokens (which\n * can be shared in `TView`) as well as the tokens of its ancestor nodes (which cannot be\n * shared, so they live in `LView`).\n *\n * Each of these slots (aside from the last slot) contains a bloom filter. This bloom filter\n * determines whether a directive is available on the associated node or not. This prevents us\n * from searching the directives array at this level unless it's probable the directive is in it.\n *\n * See: https://en.wikipedia.org/wiki/Bloom_filter for more about bloom filters.\n *\n * Because all injectors have been flattened into `LView` and `TViewData`, they cannot typed\n * using interfaces as they were previously. The start index of each `LInjector` and `TInjector`\n * will differ based on where it is flattened into the main array, so it's not possible to know\n * the indices ahead of time and save their types here. The interfaces are still included here\n * for documentation purposes.\n *\n * export interface LInjector extends Array<any> {\n *\n *    // Cumulative bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Cumulative bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Cumulative bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Cumulative bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Cumulative bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Cumulative bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Cumulative bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Cumulative bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // We need to store a reference to the injector's parent so DI can keep looking up\n *    // the injector tree until it finds the dependency it's looking for.\n *    [PARENT_INJECTOR]: number;\n * }\n *\n * export interface TInjector extends Array<any> {\n *\n *    // Shared node bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Shared node bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Shared node bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Shared node bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Shared node bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Shared node bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Shared node bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Shared node bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // Necessary to find directive indices for a particular node.\n *    [TNODE]: TElementNode|TElementContainerNode|TContainerNode;\n *  }\n */\n/**\n * Factory for creating instances of injectors in the NodeInjector.\n *\n * This factory is complicated by the fact that it can resolve `multi` factories as well.\n *\n * NOTE: Some of the fields are optional which means that this class has two hidden classes.\n * - One without `multi` support (most common)\n * - One with `multi` values, (rare).\n *\n * Since VMs can cache up to 4 inline hidden classes this is OK.\n *\n * - Single factory: Only `resolving` and `factory` is defined.\n * - `providers` factory: `componentProviders` is a number and `index = -1`.\n * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.\n */\nclass NodeInjectorFactory {\n    constructor(\n    /**\n     * Factory to invoke in order to create a new instance.\n     */\n    factory, \n    /**\n     * Set to `true` if the token is declared in `viewProviders` (or if it is component).\n     */\n    isViewProvider, injectImplementation) {\n        this.factory = factory;\n        /**\n         * Marker set to true during factory invocation to see if we get into recursive loop.\n         * Recursive loop causes an error to be displayed.\n         */\n        this.resolving = false;\n        ngDevMode && assertDefined(factory, 'Factory not specified');\n        ngDevMode && assertEqual(typeof factory, 'function', 'Expected factory function.');\n        this.canSeeViewProviders = isViewProvider;\n        this.injectImpl = injectImplementation;\n    }\n}\nfunction isFactory(obj) {\n    return obj instanceof NodeInjectorFactory;\n}\n\n/**\n * Converts `TNodeType` into human readable text.\n * Make sure this matches with `TNodeType`\n */\nfunction toTNodeTypeAsString(tNodeType) {\n    let text = '';\n    (tNodeType & 1 /* TNodeType.Text */) && (text += '|Text');\n    (tNodeType & 2 /* TNodeType.Element */) && (text += '|Element');\n    (tNodeType & 4 /* TNodeType.Container */) && (text += '|Container');\n    (tNodeType & 8 /* TNodeType.ElementContainer */) && (text += '|ElementContainer');\n    (tNodeType & 16 /* TNodeType.Projection */) && (text += '|Projection');\n    (tNodeType & 32 /* TNodeType.Icu */) && (text += '|IcuContainer');\n    (tNodeType & 64 /* TNodeType.Placeholder */) && (text += '|Placeholder');\n    return text.length > 0 ? text.substring(1) : text;\n}\n/**\n * Helper function to detect if a given value matches a `TNode` shape.\n *\n * The logic uses the `insertBeforeIndex` and its possible values as\n * a way to differentiate a TNode shape from other types of objects\n * within the `TView.data`. This is not a perfect check, but it can\n * be a reasonable differentiator, since we control the shapes of objects\n * within `TView.data`.\n */\nfunction isTNodeShape(value) {\n    return value != null && typeof value === 'object' &&\n        (value.insertBeforeIndex === null ||\n            typeof value.insertBeforeIndex === 'number' ||\n            Array.isArray(value.insertBeforeIndex));\n}\n/**\n * Returns `true` if the `TNode` has a directive which has `@Input()` for `class` binding.\n *\n * ```\n * <div my-dir [class]=\"exp\"></div>\n * ```\n * and\n * ```\n * @Directive({\n * })\n * class MyDirective {\n *   @Input()\n *   class: string;\n * }\n * ```\n *\n * In the above case it is necessary to write the reconciled styling information into the\n * directive's input.\n *\n * @param tNode\n */\nfunction hasClassInput(tNode) {\n    return (tNode.flags & 8 /* TNodeFlags.hasClassInput */) !== 0;\n}\n/**\n * Returns `true` if the `TNode` has a directive which has `@Input()` for `style` binding.\n *\n * ```\n * <div my-dir [style]=\"exp\"></div>\n * ```\n * and\n * ```\n * @Directive({\n * })\n * class MyDirective {\n *   @Input()\n *   class: string;\n * }\n * ```\n *\n * In the above case it is necessary to write the reconciled styling information into the\n * directive's input.\n *\n * @param tNode\n */\nfunction hasStyleInput(tNode) {\n    return (tNode.flags & 16 /* TNodeFlags.hasStyleInput */) !== 0;\n}\n\nfunction assertTNodeType(tNode, expectedTypes, message) {\n    assertDefined(tNode, 'should be called with a TNode');\n    if ((tNode.type & expectedTypes) === 0) {\n        throwError(message ||\n            `Expected [${toTNodeTypeAsString(expectedTypes)}] but got ${toTNodeTypeAsString(tNode.type)}.`);\n    }\n}\nfunction assertPureTNodeType(type) {\n    if (!(type === 2 /* TNodeType.Element */ || //\n        type === 1 /* TNodeType.Text */ || //\n        type === 4 /* TNodeType.Container */ || //\n        type === 8 /* TNodeType.ElementContainer */ || //\n        type === 32 /* TNodeType.Icu */ || //\n        type === 16 /* TNodeType.Projection */ || //\n        type === 64 /* TNodeType.Placeholder */)) {\n        throwError(`Expected TNodeType to have only a single type selected, but got ${toTNodeTypeAsString(type)}.`);\n    }\n}\n\n/// Parent Injector Utils ///////////////////////////////////////////////////////////////\nfunction hasParentInjector(parentLocation) {\n    return parentLocation !== NO_PARENT_INJECTOR;\n}\nfunction getParentInjectorIndex(parentLocation) {\n    ngDevMode && assertNumber(parentLocation, 'Number expected');\n    ngDevMode && assertNotEqual(parentLocation, -1, 'Not a valid state.');\n    const parentInjectorIndex = parentLocation & 32767 /* RelativeInjectorLocationFlags.InjectorIndexMask */;\n    ngDevMode &&\n        assertGreaterThan(parentInjectorIndex, HEADER_OFFSET, 'Parent injector must be pointing past HEADER_OFFSET.');\n    return parentLocation & 32767 /* RelativeInjectorLocationFlags.InjectorIndexMask */;\n}\nfunction getParentInjectorViewOffset(parentLocation) {\n    return parentLocation >> 16 /* RelativeInjectorLocationFlags.ViewOffsetShift */;\n}\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the view is found that contains the parent\n * injector.\n *\n * @param location The location of the parent injector, which contains the view offset\n * @param startView The LView instance from which to start walking up the view tree\n * @returns The LView instance that contains the parent injector\n */\nfunction getParentInjectorView(location, startView) {\n    let viewOffset = getParentInjectorViewOffset(location);\n    let parentView = startView;\n    // For most cases, the parent injector can be found on the host node (e.g. for component\n    // or container), but we must keep the loop here to support the rarer case of deeply nested\n    // <ng-template> tags or inline views, where the parent injector might live many views\n    // above the child injector.\n    while (viewOffset > 0) {\n        parentView = parentView[DECLARATION_VIEW];\n        viewOffset--;\n    }\n    return parentView;\n}\n\n/**\n * Defines if the call to `inject` should include `viewProviders` in its resolution.\n *\n * This is set to true when we try to instantiate a component. This value is reset in\n * `getNodeInjectable` to a value which matches the declaration location of the token about to be\n * instantiated. This is done so that if we are injecting a token which was declared outside of\n * `viewProviders` we don't accidentally pull `viewProviders` in.\n *\n * Example:\n *\n * ```\n * @Injectable()\n * class MyService {\n *   constructor(public value: String) {}\n * }\n *\n * @Component({\n *   providers: [\n *     MyService,\n *     {provide: String, value: 'providers' }\n *   ]\n *   viewProviders: [\n *     {provide: String, value: 'viewProviders'}\n *   ]\n * })\n * class MyComponent {\n *   constructor(myService: MyService, value: String) {\n *     // We expect that Component can see into `viewProviders`.\n *     expect(value).toEqual('viewProviders');\n *     // `MyService` was not declared in `viewProviders` hence it can't see it.\n *     expect(myService.value).toEqual('providers');\n *   }\n * }\n *\n * ```\n */\nlet includeViewProviders = true;\nfunction setIncludeViewProviders(v) {\n    const oldValue = includeViewProviders;\n    includeViewProviders = v;\n    return oldValue;\n}\n/**\n * The number of slots in each bloom filter (used by DI). The larger this number, the fewer\n * directives that will share slots, and thus, the fewer false positives when checking for\n * the existence of a directive.\n */\nconst BLOOM_SIZE = 256;\nconst BLOOM_MASK = BLOOM_SIZE - 1;\n/**\n * The number of bits that is represented by a single bloom bucket. JS bit operations are 32 bits,\n * so each bucket represents 32 distinct tokens which accounts for log2(32) = 5 bits of a bloom hash\n * number.\n */\nconst BLOOM_BUCKET_BITS = 5;\n/** Counter used to generate unique IDs for directives. */\nlet nextNgElementId = 0;\n/** Value used when something wasn't found by an injector. */\nconst NOT_FOUND = {};\n/**\n * Registers this directive as present in its node's injector by flipping the directive's\n * corresponding bit in the injector's bloom filter.\n *\n * @param injectorIndex The index of the node injector where this token should be registered\n * @param tView The TView for the injector's bloom filters\n * @param type The directive token to register\n */\nfunction bloomAdd(injectorIndex, tView, type) {\n    ngDevMode && assertEqual(tView.firstCreatePass, true, 'expected firstCreatePass to be true');\n    let id;\n    if (typeof type === 'string') {\n        id = type.charCodeAt(0) || 0;\n    }\n    else if (type.hasOwnProperty(NG_ELEMENT_ID)) {\n        id = type[NG_ELEMENT_ID];\n    }\n    // Set a unique ID on the directive type, so if something tries to inject the directive,\n    // we can easily retrieve the ID and hash it into the bloom bit that should be checked.\n    if (id == null) {\n        id = type[NG_ELEMENT_ID] = nextNgElementId++;\n    }\n    // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),\n    // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.\n    const bloomHash = id & BLOOM_MASK;\n    // Create a mask that targets the specific bit associated with the directive.\n    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n    // to bit positions 0 - 31 in a 32 bit integer.\n    const mask = 1 << bloomHash;\n    // Each bloom bucket in `tData` represents `BLOOM_BUCKET_BITS` number of bits of `bloomHash`.\n    // Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset that the mask\n    // should be written to.\n    tView.data[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)] |= mask;\n}\n/**\n * Creates (or gets an existing) injector for a given element or container.\n *\n * @param tNode for which an injector should be retrieved / created.\n * @param lView View where the node is stored\n * @returns Node injector\n */\nfunction getOrCreateNodeInjectorForNode(tNode, lView) {\n    const existingInjectorIndex = getInjectorIndex(tNode, lView);\n    if (existingInjectorIndex !== -1) {\n        return existingInjectorIndex;\n    }\n    const tView = lView[TVIEW];\n    if (tView.firstCreatePass) {\n        tNode.injectorIndex = lView.length;\n        insertBloom(tView.data, tNode); // foundation for node bloom\n        insertBloom(lView, null); // foundation for cumulative bloom\n        insertBloom(tView.blueprint, null);\n    }\n    const parentLoc = getParentInjectorLocation(tNode, lView);\n    const injectorIndex = tNode.injectorIndex;\n    // If a parent injector can't be found, its location is set to -1.\n    // In that case, we don't need to set up a cumulative bloom\n    if (hasParentInjector(parentLoc)) {\n        const parentIndex = getParentInjectorIndex(parentLoc);\n        const parentLView = getParentInjectorView(parentLoc, lView);\n        const parentData = parentLView[TVIEW].data;\n        // Creates a cumulative bloom filter that merges the parent's bloom filter\n        // and its own cumulative bloom (which contains tokens for all ancestors)\n        for (let i = 0; i < 8 /* NodeInjectorOffset.BLOOM_SIZE */; i++) {\n            lView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];\n        }\n    }\n    lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */] = parentLoc;\n    return injectorIndex;\n}\nfunction insertBloom(arr, footer) {\n    arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);\n}\nfunction getInjectorIndex(tNode, lView) {\n    if (tNode.injectorIndex === -1 ||\n        // If the injector index is the same as its parent's injector index, then the index has been\n        // copied down from the parent node. No injector has been created yet on this node.\n        (tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex) ||\n        // After the first template pass, the injector index might exist but the parent values\n        // might not have been calculated yet for this instance\n        lView[tNode.injectorIndex + 8 /* NodeInjectorOffset.PARENT */] === null) {\n        return -1;\n    }\n    else {\n        ngDevMode && assertIndexInRange(lView, tNode.injectorIndex);\n        return tNode.injectorIndex;\n    }\n}\n/**\n * Finds the index of the parent injector, with a view offset if applicable. Used to set the\n * parent injector initially.\n *\n * @returns Returns a number that is the combination of the number of LViews that we have to go up\n * to find the LView containing the parent inject AND the index of the injector within that LView.\n */\nfunction getParentInjectorLocation(tNode, lView) {\n    if (tNode.parent && tNode.parent.injectorIndex !== -1) {\n        // If we have a parent `TNode` and there is an injector associated with it we are done, because\n        // the parent injector is within the current `LView`.\n        return tNode.parent.injectorIndex; // ViewOffset is 0\n    }\n    // When parent injector location is computed it may be outside of the current view. (ie it could\n    // be pointing to a declared parent location). This variable stores number of declaration parents\n    // we need to walk up in order to find the parent injector location.\n    let declarationViewOffset = 0;\n    let parentTNode = null;\n    let lViewCursor = lView;\n    // The parent injector is not in the current `LView`. We will have to walk the declared parent\n    // `LView` hierarchy and look for it. If we walk of the top, that means that there is no parent\n    // `NodeInjector`.\n    while (lViewCursor !== null) {\n        parentTNode = getTNodeFromLView(lViewCursor);\n        if (parentTNode === null) {\n            // If we have no parent, than we are done.\n            return NO_PARENT_INJECTOR;\n        }\n        ngDevMode && parentTNode && assertTNodeForLView(parentTNode, lViewCursor[DECLARATION_VIEW]);\n        // Every iteration of the loop requires that we go to the declared parent.\n        declarationViewOffset++;\n        lViewCursor = lViewCursor[DECLARATION_VIEW];\n        if (parentTNode.injectorIndex !== -1) {\n            // We found a NodeInjector which points to something.\n            return (parentTNode.injectorIndex |\n                (declarationViewOffset << 16 /* RelativeInjectorLocationFlags.ViewOffsetShift */));\n        }\n    }\n    return NO_PARENT_INJECTOR;\n}\n/**\n * Makes a type or an injection token public to the DI system by adding it to an\n * injector's bloom filter.\n *\n * @param di The node injector in which a directive will be added\n * @param token The type or the injection token to be made public\n */\nfunction diPublicInInjector(injectorIndex, tView, token) {\n    bloomAdd(injectorIndex, tView, token);\n}\n/**\n * Inject static attribute value into directive constructor.\n *\n * This method is used with `factory` functions which are generated as part of\n * `defineDirective` or `defineComponent`. The method retrieves the static value\n * of an attribute. (Dynamic attributes are not supported since they are not resolved\n *  at the time of injection and can change over time.)\n *\n * # Example\n * Given:\n * ```\n * @Component(...)\n * class MyComponent {\n *   constructor(@Attribute('title') title: string) { ... }\n * }\n * ```\n * When instantiated with\n * ```\n * <my-component title=\"Hello\"></my-component>\n * ```\n *\n * Then factory method generated is:\n * ```\n * MyComponent.ɵcmp = defineComponent({\n *   factory: () => new MyComponent(injectAttribute('title'))\n *   ...\n * })\n * ```\n *\n * @publicApi\n */\nfunction injectAttributeImpl(tNode, attrNameToInject) {\n    ngDevMode && assertTNodeType(tNode, 12 /* TNodeType.AnyContainer */ | 3 /* TNodeType.AnyRNode */);\n    ngDevMode && assertDefined(tNode, 'expecting tNode');\n    if (attrNameToInject === 'class') {\n        return tNode.classes;\n    }\n    if (attrNameToInject === 'style') {\n        return tNode.styles;\n    }\n    const attrs = tNode.attrs;\n    if (attrs) {\n        const attrsLength = attrs.length;\n        let i = 0;\n        while (i < attrsLength) {\n            const value = attrs[i];\n            // If we hit a `Bindings` or `Template` marker then we are done.\n            if (isNameOnlyAttributeMarker(value))\n                break;\n            // Skip namespaced attributes\n            if (value === 0 /* AttributeMarker.NamespaceURI */) {\n                // we skip the next two values\n                // as namespaced attributes looks like\n                // [..., AttributeMarker.NamespaceURI, 'http://someuri.com/test', 'test:exist',\n                // 'existValue', ...]\n                i = i + 2;\n            }\n            else if (typeof value === 'number') {\n                // Skip to the first value of the marked attribute.\n                i++;\n                while (i < attrsLength && typeof attrs[i] === 'string') {\n                    i++;\n                }\n            }\n            else if (value === attrNameToInject) {\n                return attrs[i + 1];\n            }\n            else {\n                i = i + 2;\n            }\n        }\n    }\n    return null;\n}\nfunction notFoundValueOrThrow(notFoundValue, token, flags) {\n    if ((flags & InjectFlags.Optional) || notFoundValue !== undefined) {\n        return notFoundValue;\n    }\n    else {\n        throwProviderNotFoundError(token, 'NodeInjector');\n    }\n}\n/**\n * Returns the value associated to the given token from the ModuleInjector or throws exception\n *\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector or throws an exception\n */\nfunction lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue) {\n    if ((flags & InjectFlags.Optional) && notFoundValue === undefined) {\n        // This must be set or the NullInjector will throw for optional deps\n        notFoundValue = null;\n    }\n    if ((flags & (InjectFlags.Self | InjectFlags.Host)) === 0) {\n        const moduleInjector = lView[INJECTOR$1];\n        // switch to `injectInjectorOnly` implementation for module injector, since module injector\n        // should not have access to Component/Directive DI scope (that may happen through\n        // `directiveInject` implementation)\n        const previousInjectImplementation = setInjectImplementation(undefined);\n        try {\n            if (moduleInjector) {\n                return moduleInjector.get(token, notFoundValue, flags & InjectFlags.Optional);\n            }\n            else {\n                return injectRootLimpMode(token, notFoundValue, flags & InjectFlags.Optional);\n            }\n        }\n        finally {\n            setInjectImplementation(previousInjectImplementation);\n        }\n    }\n    return notFoundValueOrThrow(notFoundValue, token, flags);\n}\n/**\n * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.\n *\n * Look for the injector providing the token by walking up the node injector tree and then\n * the module injector tree.\n *\n * This function patches `token` with `__NG_ELEMENT_ID__` which contains the id for the bloom\n * filter. `-1` is reserved for injecting `Injector` (implemented by `NodeInjector`)\n *\n * @param tNode The Node where the search for the injector should start\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nfunction getOrCreateInjectable(tNode, lView, token, flags = InjectFlags.Default, notFoundValue) {\n    if (tNode !== null) {\n        // If the view or any of its ancestors have an embedded\n        // view injector, we have to look it up there first.\n        if (lView[FLAGS] & 2048 /* LViewFlags.HasEmbeddedViewInjector */ &&\n            // The token must be present on the current node injector when the `Self`\n            // flag is set, so the lookup on embedded view injector(s) can be skipped.\n            !(flags & InjectFlags.Self)) {\n            const embeddedInjectorValue = lookupTokenUsingEmbeddedInjector(tNode, lView, token, flags, NOT_FOUND);\n            if (embeddedInjectorValue !== NOT_FOUND) {\n                return embeddedInjectorValue;\n            }\n        }\n        // Otherwise try the node injector.\n        const value = lookupTokenUsingNodeInjector(tNode, lView, token, flags, NOT_FOUND);\n        if (value !== NOT_FOUND) {\n            return value;\n        }\n    }\n    // Finally, fall back to the module injector.\n    return lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);\n}\n/**\n * Returns the value associated to the given token from the node injector.\n *\n * @param tNode The Node where the search for the injector should start\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nfunction lookupTokenUsingNodeInjector(tNode, lView, token, flags, notFoundValue) {\n    const bloomHash = bloomHashBitOrFactory(token);\n    // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef\n    // so just call the factory function to create it.\n    if (typeof bloomHash === 'function') {\n        if (!enterDI(lView, tNode, flags)) {\n            // Failed to enter DI, try module injector instead. If a token is injected with the @Host\n            // flag, the module injector is not searched for that token in Ivy.\n            return (flags & InjectFlags.Host) ?\n                notFoundValueOrThrow(notFoundValue, token, flags) :\n                lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);\n        }\n        try {\n            let value;\n            if (ngDevMode) {\n                runInInjectorProfilerContext(new NodeInjector(getCurrentTNode(), getLView()), token, () => {\n                    value = bloomHash(flags);\n                    if (value != null) {\n                        emitInstanceCreatedByInjectorEvent(value);\n                    }\n                });\n            }\n            else {\n                value = bloomHash(flags);\n            }\n            if (value == null && !(flags & InjectFlags.Optional)) {\n                throwProviderNotFoundError(token);\n            }\n            else {\n                return value;\n            }\n        }\n        finally {\n            leaveDI();\n        }\n    }\n    else if (typeof bloomHash === 'number') {\n        // A reference to the previous injector TView that was found while climbing the element\n        // injector tree. This is used to know if viewProviders can be accessed on the current\n        // injector.\n        let previousTView = null;\n        let injectorIndex = getInjectorIndex(tNode, lView);\n        let parentLocation = NO_PARENT_INJECTOR;\n        let hostTElementNode = flags & InjectFlags.Host ? lView[DECLARATION_COMPONENT_VIEW][T_HOST] : null;\n        // If we should skip this injector, or if there is no injector on this node, start by\n        // searching the parent injector.\n        if (injectorIndex === -1 || flags & InjectFlags.SkipSelf) {\n            parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) :\n                lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */];\n            if (parentLocation === NO_PARENT_INJECTOR || !shouldSearchParent(flags, false)) {\n                injectorIndex = -1;\n            }\n            else {\n                previousTView = lView[TVIEW];\n                injectorIndex = getParentInjectorIndex(parentLocation);\n                lView = getParentInjectorView(parentLocation, lView);\n            }\n        }\n        // Traverse up the injector tree until we find a potential match or until we know there\n        // *isn't* a match.\n        while (injectorIndex !== -1) {\n            ngDevMode && assertNodeInjector(lView, injectorIndex);\n            // Check the current injector. If it matches, see if it contains token.\n            const tView = lView[TVIEW];\n            ngDevMode &&\n                assertTNodeForLView(tView.data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */], lView);\n            if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {\n                // At this point, we have an injector which *may* contain the token, so we step through\n                // the providers and directives associated with the injector's corresponding node to get\n                // the instance.\n                const instance = searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode);\n                if (instance !== NOT_FOUND) {\n                    return instance;\n                }\n            }\n            parentLocation = lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */];\n            if (parentLocation !== NO_PARENT_INJECTOR &&\n                shouldSearchParent(flags, lView[TVIEW].data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */] === hostTElementNode) &&\n                bloomHasToken(bloomHash, injectorIndex, lView)) {\n                // The def wasn't found anywhere on this node, so it was a false positive.\n                // Traverse up the tree and continue searching.\n                previousTView = tView;\n                injectorIndex = getParentInjectorIndex(parentLocation);\n                lView = getParentInjectorView(parentLocation, lView);\n            }\n            else {\n                // If we should not search parent OR If the ancestor bloom filter value does not have the\n                // bit corresponding to the directive we can give up on traversing up to find the specific\n                // injector.\n                injectorIndex = -1;\n            }\n        }\n    }\n    return notFoundValue;\n}\nfunction searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode) {\n    const currentTView = lView[TVIEW];\n    const tNode = currentTView.data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */];\n    // First, we need to determine if view providers can be accessed by the starting element.\n    // There are two possibilities\n    const canAccessViewProviders = previousTView == null ?\n        // 1) This is the first invocation `previousTView == null` which means that we are at the\n        // `TNode` of where injector is starting to look. In such a case the only time we are allowed\n        // to look into the ViewProviders is if:\n        // - we are on a component\n        // - AND the injector set `includeViewProviders` to true (implying that the token can see\n        // ViewProviders because it is the Component or a Service which itself was declared in\n        // ViewProviders)\n        (isComponentHost(tNode) && includeViewProviders) :\n        // 2) `previousTView != null` which means that we are now walking across the parent nodes.\n        // In such a case we are only allowed to look into the ViewProviders if:\n        // - We just crossed from child View to Parent View `previousTView != currentTView`\n        // - AND the parent TNode is an Element.\n        // This means that we just came from the Component's View and therefore are allowed to see\n        // into the ViewProviders.\n        (previousTView != currentTView && ((tNode.type & 3 /* TNodeType.AnyRNode */) !== 0));\n    // This special case happens when there is a @host on the inject and when we are searching\n    // on the host element node.\n    const isHostSpecialCase = (flags & InjectFlags.Host) && hostTElementNode === tNode;\n    const injectableIdx = locateDirectiveOrProvider(tNode, currentTView, token, canAccessViewProviders, isHostSpecialCase);\n    if (injectableIdx !== null) {\n        return getNodeInjectable(lView, currentTView, injectableIdx, tNode);\n    }\n    else {\n        return NOT_FOUND;\n    }\n}\n/**\n * Searches for the given token among the node's directives and providers.\n *\n * @param tNode TNode on which directives are present.\n * @param tView The tView we are currently processing\n * @param token Provider token or type of a directive to look for.\n * @param canAccessViewProviders Whether view providers should be considered.\n * @param isHostSpecialCase Whether the host special case applies.\n * @returns Index of a found directive or provider, or null when none found.\n */\nfunction locateDirectiveOrProvider(tNode, tView, token, canAccessViewProviders, isHostSpecialCase) {\n    const nodeProviderIndexes = tNode.providerIndexes;\n    const tInjectables = tView.data;\n    const injectablesStart = nodeProviderIndexes & 1048575 /* TNodeProviderIndexes.ProvidersStartIndexMask */;\n    const directivesStart = tNode.directiveStart;\n    const directiveEnd = tNode.directiveEnd;\n    const cptViewProvidersCount = nodeProviderIndexes >> 20 /* TNodeProviderIndexes.CptViewProvidersCountShift */;\n    const startingIndex = canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount;\n    // When the host special case applies, only the viewProviders and the component are visible\n    const endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;\n    for (let i = startingIndex; i < endIndex; i++) {\n        const providerTokenOrDef = tInjectables[i];\n        if (i < directivesStart && token === providerTokenOrDef ||\n            i >= directivesStart && providerTokenOrDef.type === token) {\n            return i;\n        }\n    }\n    if (isHostSpecialCase) {\n        const dirDef = tInjectables[directivesStart];\n        if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {\n            return directivesStart;\n        }\n    }\n    return null;\n}\n/**\n * Retrieve or instantiate the injectable from the `LView` at particular `index`.\n *\n * This function checks to see if the value has already been instantiated and if so returns the\n * cached `injectable`. Otherwise if it detects that the value is still a factory it\n * instantiates the `injectable` and caches the value.\n */\nfunction getNodeInjectable(lView, tView, index, tNode) {\n    let value = lView[index];\n    const tData = tView.data;\n    if (isFactory(value)) {\n        const factory = value;\n        if (factory.resolving) {\n            throwCyclicDependencyError(stringifyForError(tData[index]));\n        }\n        const previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);\n        factory.resolving = true;\n        let prevInjectContext;\n        if (ngDevMode) {\n            // tData indexes mirror the concrete instances in its corresponding LView.\n            // lView[index] here is either the injectable instace itself or a factory,\n            // therefore tData[index] is the constructor of that injectable or a\n            // definition object that contains the constructor in a `.type` field.\n            const token = tData[index].type || tData[index];\n            const injector = new NodeInjector(tNode, lView);\n            prevInjectContext = setInjectorProfilerContext({ injector, token });\n        }\n        const previousInjectImplementation = factory.injectImpl ? setInjectImplementation(factory.injectImpl) : null;\n        const success = enterDI(lView, tNode, InjectFlags.Default);\n        ngDevMode &&\n            assertEqual(success, true, 'Because flags do not contain \\`SkipSelf\\' we expect this to always succeed.');\n        try {\n            value = lView[index] = factory.factory(undefined, tData, lView, tNode);\n            ngDevMode && emitInstanceCreatedByInjectorEvent(value);\n            // This code path is hit for both directives and providers.\n            // For perf reasons, we want to avoid searching for hooks on providers.\n            // It does no harm to try (the hooks just won't exist), but the extra\n            // checks are unnecessary and this is a hot path. So we check to see\n            // if the index of the dependency is in the directive range for this\n            // tNode. If it's not, we know it's a provider and skip hook registration.\n            if (tView.firstCreatePass && index >= tNode.directiveStart) {\n                ngDevMode && assertDirectiveDef(tData[index]);\n                registerPreOrderHooks(index, tData[index], tView);\n            }\n        }\n        finally {\n            ngDevMode && setInjectorProfilerContext(prevInjectContext);\n            previousInjectImplementation !== null &&\n                setInjectImplementation(previousInjectImplementation);\n            setIncludeViewProviders(previousIncludeViewProviders);\n            factory.resolving = false;\n            leaveDI();\n        }\n    }\n    return value;\n}\n/**\n * Returns the bit in an injector's bloom filter that should be used to determine whether or not\n * the directive might be provided by the injector.\n *\n * When a directive is public, it is added to the bloom filter and given a unique ID that can be\n * retrieved on the Type. When the directive isn't public or the token is not a directive `null`\n * is returned as the node injector can not possibly provide that token.\n *\n * @param token the injection token\n * @returns the matching bit to check in the bloom filter or `null` if the token is not known.\n *   When the returned value is negative then it represents special values such as `Injector`.\n */\nfunction bloomHashBitOrFactory(token) {\n    ngDevMode && assertDefined(token, 'token must be defined');\n    if (typeof token === 'string') {\n        return token.charCodeAt(0) || 0;\n    }\n    const tokenId = \n    // First check with `hasOwnProperty` so we don't get an inherited ID.\n    token.hasOwnProperty(NG_ELEMENT_ID) ? token[NG_ELEMENT_ID] : undefined;\n    // Negative token IDs are used for special objects such as `Injector`\n    if (typeof tokenId === 'number') {\n        if (tokenId >= 0) {\n            return tokenId & BLOOM_MASK;\n        }\n        else {\n            ngDevMode &&\n                assertEqual(tokenId, -1 /* InjectorMarkers.Injector */, 'Expecting to get Special Injector Id');\n            return createNodeInjector;\n        }\n    }\n    else {\n        return tokenId;\n    }\n}\nfunction bloomHasToken(bloomHash, injectorIndex, injectorView) {\n    // Create a mask that targets the specific bit associated with the directive we're looking for.\n    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n    // to bit positions 0 - 31 in a 32 bit integer.\n    const mask = 1 << bloomHash;\n    // Each bloom bucket in `injectorView` represents `BLOOM_BUCKET_BITS` number of bits of\n    // `bloomHash`. Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset\n    // that should be used.\n    const value = injectorView[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)];\n    // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,\n    // this injector is a potential match.\n    return !!(value & mask);\n}\n/** Returns true if flags prevent parent injector from being searched for tokens */\nfunction shouldSearchParent(flags, isFirstHostTNode) {\n    return !(flags & InjectFlags.Self) && !(flags & InjectFlags.Host && isFirstHostTNode);\n}\nfunction getNodeInjectorLView(nodeInjector) {\n    return nodeInjector._lView;\n}\nfunction getNodeInjectorTNode(nodeInjector) {\n    return nodeInjector._tNode;\n}\nclass NodeInjector {\n    constructor(_tNode, _lView) {\n        this._tNode = _tNode;\n        this._lView = _lView;\n    }\n    get(token, notFoundValue, flags) {\n        return getOrCreateInjectable(this._tNode, this._lView, token, convertToBitFlags(flags), notFoundValue);\n    }\n}\n/** Creates a `NodeInjector` for the current node. */\nfunction createNodeInjector() {\n    return new NodeInjector(getCurrentTNode(), getLView());\n}\n/**\n * @codeGenApi\n */\nfunction ɵɵgetInheritedFactory(type) {\n    return noSideEffects(() => {\n        const ownConstructor = type.prototype.constructor;\n        const ownFactory = ownConstructor[NG_FACTORY_DEF] || getFactoryOf(ownConstructor);\n        const objectPrototype = Object.prototype;\n        let parent = Object.getPrototypeOf(type.prototype).constructor;\n        // Go up the prototype until we hit `Object`.\n        while (parent && parent !== objectPrototype) {\n            const factory = parent[NG_FACTORY_DEF] || getFactoryOf(parent);\n            // If we hit something that has a factory and the factory isn't the same as the type,\n            // we've found the inherited factory. Note the check that the factory isn't the type's\n            // own factory is redundant in most cases, but if the user has custom decorators on the\n            // class, this lookup will start one level down in the prototype chain, causing us to\n            // find the own factory first and potentially triggering an infinite loop downstream.\n            if (factory && factory !== ownFactory) {\n                return factory;\n            }\n            parent = Object.getPrototypeOf(parent);\n        }\n        // There is no factory defined. Either this was improper usage of inheritance\n        // (no Angular decorator on the superclass) or there is no constructor at all\n        // in the inheritance chain. Since the two cases cannot be distinguished, the\n        // latter has to be assumed.\n        return (t) => new t();\n    });\n}\nfunction getFactoryOf(type) {\n    if (isForwardRef(type)) {\n        return () => {\n            const factory = getFactoryOf(resolveForwardRef(type));\n            return factory && factory();\n        };\n    }\n    return getFactoryDef(type);\n}\n/**\n * Returns a value from the closest embedded or node injector.\n *\n * @param tNode The Node where the search for the injector should start\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nfunction lookupTokenUsingEmbeddedInjector(tNode, lView, token, flags, notFoundValue) {\n    let currentTNode = tNode;\n    let currentLView = lView;\n    // When an LView with an embedded view injector is inserted, it'll likely be interlaced with\n    // nodes who may have injectors (e.g. node injector -> embedded view injector -> node injector).\n    // Since the bloom filters for the node injectors have already been constructed and we don't\n    // have a way of extracting the records from an injector, the only way to maintain the correct\n    // hierarchy when resolving the value is to walk it node-by-node while attempting to resolve\n    // the token at each level.\n    while (currentTNode !== null && currentLView !== null &&\n        (currentLView[FLAGS] & 2048 /* LViewFlags.HasEmbeddedViewInjector */) &&\n        !(currentLView[FLAGS] & 512 /* LViewFlags.IsRoot */)) {\n        ngDevMode && assertTNodeForLView(currentTNode, currentLView);\n        // Note that this lookup on the node injector is using the `Self` flag, because\n        // we don't want the node injector to look at any parent injectors since we\n        // may hit the embedded view injector first.\n        const nodeInjectorValue = lookupTokenUsingNodeInjector(currentTNode, currentLView, token, flags | InjectFlags.Self, NOT_FOUND);\n        if (nodeInjectorValue !== NOT_FOUND) {\n            return nodeInjectorValue;\n        }\n        // Has an explicit type due to a TS bug: https://github.com/microsoft/TypeScript/issues/33191\n        let parentTNode = currentTNode.parent;\n        // `TNode.parent` includes the parent within the current view only. If it doesn't exist,\n        // it means that we've hit the view boundary and we need to go up to the next view.\n        if (!parentTNode) {\n            // Before we go to the next LView, check if the token exists on the current embedded injector.\n            const embeddedViewInjector = currentLView[EMBEDDED_VIEW_INJECTOR];\n            if (embeddedViewInjector) {\n                const embeddedViewInjectorValue = embeddedViewInjector.get(token, NOT_FOUND, flags);\n                if (embeddedViewInjectorValue !== NOT_FOUND) {\n                    return embeddedViewInjectorValue;\n                }\n            }\n            // Otherwise keep going up the tree.\n            parentTNode = getTNodeFromLView(currentLView);\n            currentLView = currentLView[DECLARATION_VIEW];\n        }\n        currentTNode = parentTNode;\n    }\n    return notFoundValue;\n}\n/** Gets the TNode associated with an LView inside of the declaration view. */\nfunction getTNodeFromLView(lView) {\n    const tView = lView[TVIEW];\n    const tViewType = tView.type;\n    // The parent pointer differs based on `TView.type`.\n    if (tViewType === 2 /* TViewType.Embedded */) {\n        ngDevMode && assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');\n        return tView.declTNode;\n    }\n    else if (tViewType === 1 /* TViewType.Component */) {\n        // Components don't have `TView.declTNode` because each instance of component could be\n        // inserted in different location, hence `TView.declTNode` is meaningless.\n        return lView[T_HOST];\n    }\n    return null;\n}\n\n/**\n * Facade for the attribute injection from DI.\n *\n * @codeGenApi\n */\nfunction ɵɵinjectAttribute(attrNameToInject) {\n    return injectAttributeImpl(getCurrentTNode(), attrNameToInject);\n}\n\nconst ANNOTATIONS = '__annotations__';\nconst PARAMETERS = '__parameters__';\nconst PROP_METADATA = '__prop__metadata__';\n/**\n * @suppress {globalThis}\n */\nfunction makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {\n    return noSideEffects(() => {\n        const metaCtor = makeMetadataCtor(props);\n        function DecoratorFactory(...args) {\n            if (this instanceof DecoratorFactory) {\n                metaCtor.call(this, ...args);\n                return this;\n            }\n            const annotationInstance = new DecoratorFactory(...args);\n            return function TypeDecorator(cls) {\n                if (typeFn)\n                    typeFn(cls, ...args);\n                // Use of Object.defineProperty is important since it creates non-enumerable property which\n                // prevents the property is copied during subclassing.\n                const annotations = cls.hasOwnProperty(ANNOTATIONS) ?\n                    cls[ANNOTATIONS] :\n                    Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];\n                annotations.push(annotationInstance);\n                if (additionalProcessing)\n                    additionalProcessing(cls);\n                return cls;\n            };\n        }\n        if (parentClass) {\n            DecoratorFactory.prototype = Object.create(parentClass.prototype);\n        }\n        DecoratorFactory.prototype.ngMetadataName = name;\n        DecoratorFactory.annotationCls = DecoratorFactory;\n        return DecoratorFactory;\n    });\n}\nfunction makeMetadataCtor(props) {\n    return function ctor(...args) {\n        if (props) {\n            const values = props(...args);\n            for (const propName in values) {\n                this[propName] = values[propName];\n            }\n        }\n    };\n}\nfunction makeParamDecorator(name, props, parentClass) {\n    return noSideEffects(() => {\n        const metaCtor = makeMetadataCtor(props);\n        function ParamDecoratorFactory(...args) {\n            if (this instanceof ParamDecoratorFactory) {\n                metaCtor.apply(this, args);\n                return this;\n            }\n            const annotationInstance = new ParamDecoratorFactory(...args);\n            ParamDecorator.annotation = annotationInstance;\n            return ParamDecorator;\n            function ParamDecorator(cls, unusedKey, index) {\n                // Use of Object.defineProperty is important since it creates non-enumerable property which\n                // prevents the property is copied during subclassing.\n                const parameters = cls.hasOwnProperty(PARAMETERS) ?\n                    cls[PARAMETERS] :\n                    Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];\n                // there might be gaps if some in between parameters do not have annotations.\n                // we pad with nulls.\n                while (parameters.length <= index) {\n                    parameters.push(null);\n                }\n                (parameters[index] = parameters[index] || []).push(annotationInstance);\n                return cls;\n            }\n        }\n        if (parentClass) {\n            ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n        }\n        ParamDecoratorFactory.prototype.ngMetadataName = name;\n        ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;\n        return ParamDecoratorFactory;\n    });\n}\nfunction makePropDecorator(name, props, parentClass, additionalProcessing) {\n    return noSideEffects(() => {\n        const metaCtor = makeMetadataCtor(props);\n        function PropDecoratorFactory(...args) {\n            if (this instanceof PropDecoratorFactory) {\n                metaCtor.apply(this, args);\n                return this;\n            }\n            const decoratorInstance = new PropDecoratorFactory(...args);\n            function PropDecorator(target, name) {\n                // target is undefined with standard decorators. This case is not supported and will throw\n                // if this decorator is used in JIT mode with standard decorators.\n                if (target === undefined) {\n                    throw new Error('Standard Angular field decorators are not supported in JIT mode.');\n                }\n                const constructor = target.constructor;\n                // Use of Object.defineProperty is important because it creates a non-enumerable property\n                // which prevents the property from being copied during subclassing.\n                const meta = constructor.hasOwnProperty(PROP_METADATA) ?\n                    constructor[PROP_METADATA] :\n                    Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];\n                meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n                meta[name].unshift(decoratorInstance);\n                if (additionalProcessing)\n                    additionalProcessing(target, name, ...args);\n            }\n            return PropDecorator;\n        }\n        if (parentClass) {\n            PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n        }\n        PropDecoratorFactory.prototype.ngMetadataName = name;\n        PropDecoratorFactory.annotationCls = PropDecoratorFactory;\n        return PropDecoratorFactory;\n    });\n}\n\n/**\n * Attribute decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Attribute = makeParamDecorator('Attribute', (attributeName) => ({ attributeName, __NG_ELEMENT_ID__: () => ɵɵinjectAttribute(attributeName) }));\n\n// Stores the default value of `emitDistinctChangesOnly` when the `emitDistinctChangesOnly` is not\n// explicitly set.\nconst emitDistinctChangesOnlyDefaultValue = true;\n/**\n * Base class for query metadata.\n *\n * @see {@link ContentChildren}\n * @see {@link ContentChild}\n * @see {@link ViewChildren}\n * @see {@link ViewChild}\n *\n * @publicApi\n */\nclass Query {\n}\n/**\n * ContentChildren decorator and metadata.\n *\n *\n * @Annotation\n * @publicApi\n */\nconst ContentChildren = makePropDecorator('ContentChildren', (selector, data = {}) => ({\n    selector,\n    first: false,\n    isViewQuery: false,\n    descendants: false,\n    emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue,\n    ...data\n}), Query);\n/**\n * ContentChild decorator and metadata.\n *\n *\n * @Annotation\n *\n * @publicApi\n */\nconst ContentChild = makePropDecorator('ContentChild', (selector, data = {}) => ({ selector, first: true, isViewQuery: false, descendants: true, ...data }), Query);\n/**\n * ViewChildren decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst ViewChildren = makePropDecorator('ViewChildren', (selector, data = {}) => ({\n    selector,\n    first: false,\n    isViewQuery: true,\n    descendants: true,\n    emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue,\n    ...data\n}), Query);\n/**\n * ViewChild decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst ViewChild = makePropDecorator('ViewChild', (selector, data) => ({ selector, first: true, isViewQuery: true, descendants: true, ...data }), Query);\n\nvar FactoryTarget;\n(function (FactoryTarget) {\n    FactoryTarget[FactoryTarget[\"Directive\"] = 0] = \"Directive\";\n    FactoryTarget[FactoryTarget[\"Component\"] = 1] = \"Component\";\n    FactoryTarget[FactoryTarget[\"Injectable\"] = 2] = \"Injectable\";\n    FactoryTarget[FactoryTarget[\"Pipe\"] = 3] = \"Pipe\";\n    FactoryTarget[FactoryTarget[\"NgModule\"] = 4] = \"NgModule\";\n})(FactoryTarget || (FactoryTarget = {}));\nvar R3TemplateDependencyKind;\n(function (R3TemplateDependencyKind) {\n    R3TemplateDependencyKind[R3TemplateDependencyKind[\"Directive\"] = 0] = \"Directive\";\n    R3TemplateDependencyKind[R3TemplateDependencyKind[\"Pipe\"] = 1] = \"Pipe\";\n    R3TemplateDependencyKind[R3TemplateDependencyKind[\"NgModule\"] = 2] = \"NgModule\";\n})(R3TemplateDependencyKind || (R3TemplateDependencyKind = {}));\nvar ViewEncapsulation;\n(function (ViewEncapsulation) {\n    ViewEncapsulation[ViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\";\n    // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.\n    ViewEncapsulation[ViewEncapsulation[\"None\"] = 2] = \"None\";\n    ViewEncapsulation[ViewEncapsulation[\"ShadowDom\"] = 3] = \"ShadowDom\";\n})(ViewEncapsulation || (ViewEncapsulation = {}));\n\nfunction getCompilerFacade(request) {\n    const globalNg = _global['ng'];\n    if (globalNg && globalNg.ɵcompilerFacade) {\n        return globalNg.ɵcompilerFacade;\n    }\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        // Log the type as an error so that a developer can easily navigate to the type from the\n        // console.\n        console.error(`JIT compilation failed for ${request.kind}`, request.type);\n        let message = `The ${request.kind} '${request\n            .type.name}' needs to be compiled using the JIT compiler, but '@angular/compiler' is not available.\\n\\n`;\n        if (request.usage === 1 /* JitCompilerUsage.PartialDeclaration */) {\n            message += `The ${request.kind} is part of a library that has been partially compiled.\\n`;\n            message +=\n                `However, the Angular Linker has not processed the library such that JIT compilation is used as fallback.\\n`;\n            message += '\\n';\n            message +=\n                `Ideally, the library is processed using the Angular Linker to become fully AOT compiled.\\n`;\n        }\n        else {\n            message +=\n                `JIT compilation is discouraged for production use-cases! Consider using AOT mode instead.\\n`;\n        }\n        message +=\n            `Alternatively, the JIT compiler should be loaded by bootstrapping using '@angular/platform-browser-dynamic' or '@angular/platform-server',\\n`;\n        message +=\n            `or manually provide the compiler with 'import \"@angular/compiler\";' before bootstrapping.`;\n        throw new Error(message);\n    }\n    else {\n        throw new Error('JIT compiler unavailable');\n    }\n}\n\n/**\n * @description\n *\n * Represents a type that a Component or other object is instances of.\n *\n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is represented by\n * the `MyCustomComponent` constructor function.\n *\n * @publicApi\n */\nconst Type = Function;\nfunction isType(v) {\n    return typeof v === 'function';\n}\n\n/**\n * Determines if the contents of two arrays is identical\n *\n * @param a first array\n * @param b second array\n * @param identityAccessor Optional function for extracting stable object identity from a value in\n *     the array.\n */\nfunction arrayEquals(a, b, identityAccessor) {\n    if (a.length !== b.length)\n        return false;\n    for (let i = 0; i < a.length; i++) {\n        let valueA = a[i];\n        let valueB = b[i];\n        if (identityAccessor) {\n            valueA = identityAccessor(valueA);\n            valueB = identityAccessor(valueB);\n        }\n        if (valueB !== valueA) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Flattens an array.\n */\nfunction flatten(list) {\n    return list.flat(Number.POSITIVE_INFINITY);\n}\nfunction deepForEach(input, fn) {\n    input.forEach(value => Array.isArray(value) ? deepForEach(value, fn) : fn(value));\n}\nfunction addToArray(arr, index, value) {\n    // perf: array.push is faster than array.splice!\n    if (index >= arr.length) {\n        arr.push(value);\n    }\n    else {\n        arr.splice(index, 0, value);\n    }\n}\nfunction removeFromArray(arr, index) {\n    // perf: array.pop is faster than array.splice!\n    if (index >= arr.length - 1) {\n        return arr.pop();\n    }\n    else {\n        return arr.splice(index, 1)[0];\n    }\n}\nfunction newArray(size, value) {\n    const list = [];\n    for (let i = 0; i < size; i++) {\n        list.push(value);\n    }\n    return list;\n}\n/**\n * Remove item from array (Same as `Array.splice()` but faster.)\n *\n * `Array.splice()` is not as fast because it has to allocate an array for the elements which were\n * removed. This causes memory pressure and slows down code when most of the time we don't\n * care about the deleted items array.\n *\n * https://jsperf.com/fast-array-splice (About 20x faster)\n *\n * @param array Array to splice\n * @param index Index of element in array to remove.\n * @param count Number of items to remove.\n */\nfunction arraySplice(array, index, count) {\n    const length = array.length - count;\n    while (index < length) {\n        array[index] = array[index + count];\n        index++;\n    }\n    while (count--) {\n        array.pop(); // shrink the array\n    }\n}\n/**\n * Same as `Array.splice(index, 0, value)` but faster.\n *\n * `Array.splice()` is not fast because it has to allocate an array for the elements which were\n * removed. This causes memory pressure and slows down code when most of the time we don't\n * care about the deleted items array.\n *\n * @param array Array to splice.\n * @param index Index in array where the `value` should be added.\n * @param value Value to add to array.\n */\nfunction arrayInsert(array, index, value) {\n    ngDevMode && assertLessThanOrEqual(index, array.length, 'Can\\'t insert past array end.');\n    let end = array.length;\n    while (end > index) {\n        const previousEnd = end - 1;\n        array[end] = array[previousEnd];\n        end = previousEnd;\n    }\n    array[index] = value;\n}\n/**\n * Same as `Array.splice2(index, 0, value1, value2)` but faster.\n *\n * `Array.splice()` is not fast because it has to allocate an array for the elements which were\n * removed. This causes memory pressure and slows down code when most of the time we don't\n * care about the deleted items array.\n *\n * @param array Array to splice.\n * @param index Index in array where the `value` should be added.\n * @param value1 Value to add to array.\n * @param value2 Value to add to array.\n */\nfunction arrayInsert2(array, index, value1, value2) {\n    ngDevMode && assertLessThanOrEqual(index, array.length, 'Can\\'t insert past array end.');\n    let end = array.length;\n    if (end == index) {\n        // inserting at the end.\n        array.push(value1, value2);\n    }\n    else if (end === 1) {\n        // corner case when we have less items in array than we have items to insert.\n        array.push(value2, array[0]);\n        array[0] = value1;\n    }\n    else {\n        end--;\n        array.push(array[end - 1], array[end]);\n        while (end > index) {\n            const previousEnd = end - 2;\n            array[end] = array[previousEnd];\n            end--;\n        }\n        array[index] = value1;\n        array[index + 1] = value2;\n    }\n}\n/**\n * Get an index of an `value` in a sorted `array`.\n *\n * NOTE:\n * - This uses binary search algorithm for fast removals.\n *\n * @param array A sorted array to binary search.\n * @param value The value to look for.\n * @returns index of the value.\n *   - positive index if value found.\n *   - negative index if value not found. (`~index` to get the value where it should have been\n *     located)\n */\nfunction arrayIndexOfSorted(array, value) {\n    return _arrayIndexOfSorted(array, value, 0);\n}\n/**\n * Set a `value` for a `key`.\n *\n * @param keyValueArray to modify.\n * @param key The key to locate or create.\n * @param value The value to set for a `key`.\n * @returns index (always even) of where the value vas set.\n */\nfunction keyValueArraySet(keyValueArray, key, value) {\n    let index = keyValueArrayIndexOf(keyValueArray, key);\n    if (index >= 0) {\n        // if we found it set it.\n        keyValueArray[index | 1] = value;\n    }\n    else {\n        index = ~index;\n        arrayInsert2(keyValueArray, index, key, value);\n    }\n    return index;\n}\n/**\n * Retrieve a `value` for a `key` (on `undefined` if not found.)\n *\n * @param keyValueArray to search.\n * @param key The key to locate.\n * @return The `value` stored at the `key` location or `undefined if not found.\n */\nfunction keyValueArrayGet(keyValueArray, key) {\n    const index = keyValueArrayIndexOf(keyValueArray, key);\n    if (index >= 0) {\n        // if we found it retrieve it.\n        return keyValueArray[index | 1];\n    }\n    return undefined;\n}\n/**\n * Retrieve a `key` index value in the array or `-1` if not found.\n *\n * @param keyValueArray to search.\n * @param key The key to locate.\n * @returns index of where the key is (or should have been.)\n *   - positive (even) index if key found.\n *   - negative index if key not found. (`~index` (even) to get the index where it should have\n *     been inserted.)\n */\nfunction keyValueArrayIndexOf(keyValueArray, key) {\n    return _arrayIndexOfSorted(keyValueArray, key, 1);\n}\n/**\n * Delete a `key` (and `value`) from the `KeyValueArray`.\n *\n * @param keyValueArray to modify.\n * @param key The key to locate or delete (if exist).\n * @returns index of where the key was (or should have been.)\n *   - positive (even) index if key found and deleted.\n *   - negative index if key not found. (`~index` (even) to get the index where it should have\n *     been.)\n */\nfunction keyValueArrayDelete(keyValueArray, key) {\n    const index = keyValueArrayIndexOf(keyValueArray, key);\n    if (index >= 0) {\n        // if we found it remove it.\n        arraySplice(keyValueArray, index, 2);\n    }\n    return index;\n}\n/**\n * INTERNAL: Get an index of an `value` in a sorted `array` by grouping search by `shift`.\n *\n * NOTE:\n * - This uses binary search algorithm for fast removals.\n *\n * @param array A sorted array to binary search.\n * @param value The value to look for.\n * @param shift grouping shift.\n *   - `0` means look at every location\n *   - `1` means only look at every other (even) location (the odd locations are to be ignored as\n *         they are values.)\n * @returns index of the value.\n *   - positive index if value found.\n *   - negative index if value not found. (`~index` to get the value where it should have been\n * inserted)\n */\nfunction _arrayIndexOfSorted(array, value, shift) {\n    ngDevMode && assertEqual(Array.isArray(array), true, 'Expecting an array');\n    let start = 0;\n    let end = array.length >> shift;\n    while (end !== start) {\n        const middle = start + ((end - start) >> 1); // find the middle.\n        const current = array[middle << shift];\n        if (value === current) {\n            return (middle << shift);\n        }\n        else if (current > value) {\n            end = middle;\n        }\n        else {\n            start = middle + 1; // We already searched middle so make it non-inclusive by adding 1\n        }\n    }\n    return ~(end << shift);\n}\n\n/*\n * #########################\n * Attention: These Regular expressions have to hold even if the code is minified!\n * ##########################\n */\n/**\n * Regular expression that detects pass-through constructors for ES5 output. This Regex\n * intends to capture the common delegation pattern emitted by TypeScript and Babel. Also\n * it intends to capture the pattern where existing constructors have been downleveled from\n * ES2015 to ES5 using TypeScript w/ downlevel iteration. e.g.\n *\n * ```\n *   function MyClass() {\n *     var _this = _super.apply(this, arguments) || this;\n * ```\n *\n * downleveled to ES5 with `downlevelIteration` for TypeScript < 4.2:\n * ```\n *   function MyClass() {\n *     var _this = _super.apply(this, __spread(arguments)) || this;\n * ```\n *\n * or downleveled to ES5 with `downlevelIteration` for TypeScript >= 4.2:\n * ```\n *   function MyClass() {\n *     var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;\n * ```\n *\n * More details can be found in: https://github.com/angular/angular/issues/38453.\n */\nconst ES5_DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{[\\s\\S]+\\.apply\\(this,\\s*(arguments|(?:[^()]+\\(\\[\\],)?[^()]+\\(arguments\\).*)\\)/;\n/** Regular expression that detects ES2015 classes which extend from other classes. */\nconst ES2015_INHERITED_CLASS = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{/;\n/**\n * Regular expression that detects ES2015 classes which extend from other classes and\n * have an explicit constructor defined.\n */\nconst ES2015_INHERITED_CLASS_WITH_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(/;\n/**\n * Regular expression that detects ES2015 classes which extend from other classes\n * and inherit a constructor.\n */\nconst ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(\\)\\s*{[^}]*super\\(\\.\\.\\.arguments\\)/;\n/**\n * Determine whether a stringified type is a class which delegates its constructor\n * to its parent.\n *\n * This is not trivial since compiled code can actually contain a constructor function\n * even if the original source code did not. For instance, when the child class contains\n * an initialized instance property.\n */\nfunction isDelegateCtor(typeStr) {\n    return ES5_DELEGATE_CTOR.test(typeStr) ||\n        ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR.test(typeStr) ||\n        (ES2015_INHERITED_CLASS.test(typeStr) && !ES2015_INHERITED_CLASS_WITH_CTOR.test(typeStr));\n}\nclass ReflectionCapabilities {\n    constructor(reflect) {\n        this._reflect = reflect || _global['Reflect'];\n    }\n    factory(t) {\n        return (...args) => new t(...args);\n    }\n    /** @internal */\n    _zipTypesAndAnnotations(paramTypes, paramAnnotations) {\n        let result;\n        if (typeof paramTypes === 'undefined') {\n            result = newArray(paramAnnotations.length);\n        }\n        else {\n            result = newArray(paramTypes.length);\n        }\n        for (let i = 0; i < result.length; i++) {\n            // TS outputs Object for parameters without types, while Traceur omits\n            // the annotations. For now we preserve the Traceur behavior to aid\n            // migration, but this can be revisited.\n            if (typeof paramTypes === 'undefined') {\n                result[i] = [];\n            }\n            else if (paramTypes[i] && paramTypes[i] != Object) {\n                result[i] = [paramTypes[i]];\n            }\n            else {\n                result[i] = [];\n            }\n            if (paramAnnotations && paramAnnotations[i] != null) {\n                result[i] = result[i].concat(paramAnnotations[i]);\n            }\n        }\n        return result;\n    }\n    _ownParameters(type, parentCtor) {\n        const typeStr = type.toString();\n        // If we have no decorators, we only have function.length as metadata.\n        // In that case, to detect whether a child class declared an own constructor or not,\n        // we need to look inside of that constructor to check whether it is\n        // just calling the parent.\n        // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\n        // that sets 'design:paramtypes' to []\n        // if a class inherits from another class but has no ctor declared itself.\n        if (isDelegateCtor(typeStr)) {\n            return null;\n        }\n        // Prefer the direct API.\n        if (type.parameters && type.parameters !== parentCtor.parameters) {\n            return type.parameters;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        const tsickleCtorParams = type.ctorParameters;\n        if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\n            // Newer tsickle uses a function closure\n            // Retain the non-function case for compatibility with older tsickle\n            const ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\n            const paramTypes = ctorParameters.map((ctorParam) => ctorParam && ctorParam.type);\n            const paramAnnotations = ctorParameters.map((ctorParam) => ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators));\n            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n        }\n        // API for metadata created by invoking the decorators.\n        const paramAnnotations = type.hasOwnProperty(PARAMETERS) && type[PARAMETERS];\n        const paramTypes = this._reflect && this._reflect.getOwnMetadata &&\n            this._reflect.getOwnMetadata('design:paramtypes', type);\n        if (paramTypes || paramAnnotations) {\n            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n        }\n        // If a class has no decorators, at least create metadata\n        // based on function.length.\n        // Note: We know that this is a real constructor as we checked\n        // the content of the constructor above.\n        return newArray(type.length);\n    }\n    parameters(type) {\n        // Note: only report metadata if we have at least one class decorator\n        // to stay in sync with the static reflector.\n        if (!isType(type)) {\n            return [];\n        }\n        const parentCtor = getParentCtor(type);\n        let parameters = this._ownParameters(type, parentCtor);\n        if (!parameters && parentCtor !== Object) {\n            parameters = this.parameters(parentCtor);\n        }\n        return parameters || [];\n    }\n    _ownAnnotations(typeOrFunc, parentCtor) {\n        // Prefer the direct API.\n        if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {\n            let annotations = typeOrFunc.annotations;\n            if (typeof annotations === 'function' && annotations.annotations) {\n                annotations = annotations.annotations;\n            }\n            return annotations;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        if (typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators) {\n            return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);\n        }\n        // API for metadata created by invoking the decorators.\n        if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {\n            return typeOrFunc[ANNOTATIONS];\n        }\n        return null;\n    }\n    annotations(typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return [];\n        }\n        const parentCtor = getParentCtor(typeOrFunc);\n        const ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\n        const parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\n        return parentAnnotations.concat(ownAnnotations);\n    }\n    _ownPropMetadata(typeOrFunc, parentCtor) {\n        // Prefer the direct API.\n        if (typeOrFunc.propMetadata &&\n            typeOrFunc.propMetadata !== parentCtor.propMetadata) {\n            let propMetadata = typeOrFunc.propMetadata;\n            if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\n                propMetadata = propMetadata.propMetadata;\n            }\n            return propMetadata;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        if (typeOrFunc.propDecorators &&\n            typeOrFunc.propDecorators !== parentCtor.propDecorators) {\n            const propDecorators = typeOrFunc.propDecorators;\n            const propMetadata = {};\n            Object.keys(propDecorators).forEach(prop => {\n                propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);\n            });\n            return propMetadata;\n        }\n        // API for metadata created by invoking the decorators.\n        if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {\n            return typeOrFunc[PROP_METADATA];\n        }\n        return null;\n    }\n    propMetadata(typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return {};\n        }\n        const parentCtor = getParentCtor(typeOrFunc);\n        const propMetadata = {};\n        if (parentCtor !== Object) {\n            const parentPropMetadata = this.propMetadata(parentCtor);\n            Object.keys(parentPropMetadata).forEach((propName) => {\n                propMetadata[propName] = parentPropMetadata[propName];\n            });\n        }\n        const ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\n        if (ownPropMetadata) {\n            Object.keys(ownPropMetadata).forEach((propName) => {\n                const decorators = [];\n                if (propMetadata.hasOwnProperty(propName)) {\n                    decorators.push(...propMetadata[propName]);\n                }\n                decorators.push(...ownPropMetadata[propName]);\n                propMetadata[propName] = decorators;\n            });\n        }\n        return propMetadata;\n    }\n    ownPropMetadata(typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return {};\n        }\n        return this._ownPropMetadata(typeOrFunc, getParentCtor(typeOrFunc)) || {};\n    }\n    hasLifecycleHook(type, lcProperty) {\n        return type instanceof Type && lcProperty in type.prototype;\n    }\n}\nfunction convertTsickleDecoratorIntoMetadata(decoratorInvocations) {\n    if (!decoratorInvocations) {\n        return [];\n    }\n    return decoratorInvocations.map(decoratorInvocation => {\n        const decoratorType = decoratorInvocation.type;\n        const annotationCls = decoratorType.annotationCls;\n        const annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n        return new annotationCls(...annotationArgs);\n    });\n}\nfunction getParentCtor(ctor) {\n    const parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;\n    const parentCtor = parentProto ? parentProto.constructor : null;\n    // Note: We always use `Object` as the null value\n    // to simplify checking later on.\n    return parentCtor || Object;\n}\n\n/**\n * Inject decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Inject = attachInjectFlag(\n// Disable tslint because `DecoratorFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nmakeParamDecorator('Inject', (token) => ({ token })), -1 /* DecoratorFlags.Inject */);\n/**\n * Optional decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Optional = \n// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nattachInjectFlag(makeParamDecorator('Optional'), 8 /* InternalInjectFlags.Optional */);\n/**\n * Self decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Self = \n// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nattachInjectFlag(makeParamDecorator('Self'), 2 /* InternalInjectFlags.Self */);\n/**\n * `SkipSelf` decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst SkipSelf = \n// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nattachInjectFlag(makeParamDecorator('SkipSelf'), 4 /* InternalInjectFlags.SkipSelf */);\n/**\n * Host decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Host = \n// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nattachInjectFlag(makeParamDecorator('Host'), 1 /* InternalInjectFlags.Host */);\n\nlet _reflect = null;\nfunction getReflect() {\n    return (_reflect = _reflect || new ReflectionCapabilities());\n}\nfunction reflectDependencies(type) {\n    return convertDependencies(getReflect().parameters(type));\n}\nfunction convertDependencies(deps) {\n    return deps.map(dep => reflectDependency(dep));\n}\nfunction reflectDependency(dep) {\n    const meta = {\n        token: null,\n        attribute: null,\n        host: false,\n        optional: false,\n        self: false,\n        skipSelf: false,\n    };\n    if (Array.isArray(dep) && dep.length > 0) {\n        for (let j = 0; j < dep.length; j++) {\n            const param = dep[j];\n            if (param === undefined) {\n                // param may be undefined if type of dep is not set by ngtsc\n                continue;\n            }\n            const proto = Object.getPrototypeOf(param);\n            if (param instanceof Optional || proto.ngMetadataName === 'Optional') {\n                meta.optional = true;\n            }\n            else if (param instanceof SkipSelf || proto.ngMetadataName === 'SkipSelf') {\n                meta.skipSelf = true;\n            }\n            else if (param instanceof Self || proto.ngMetadataName === 'Self') {\n                meta.self = true;\n            }\n            else if (param instanceof Host || proto.ngMetadataName === 'Host') {\n                meta.host = true;\n            }\n            else if (param instanceof Inject) {\n                meta.token = param.token;\n            }\n            else if (param instanceof Attribute) {\n                if (param.attributeName === undefined) {\n                    throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && `Attribute name must be defined.`);\n                }\n                meta.attribute = param.attributeName;\n            }\n            else {\n                meta.token = param;\n            }\n        }\n    }\n    else if (dep === undefined || (Array.isArray(dep) && dep.length === 0)) {\n        meta.token = null;\n    }\n    else {\n        meta.token = dep;\n    }\n    return meta;\n}\n\n/**\n * Used to resolve resource URLs on `@Component` when used with JIT compilation.\n *\n * Example:\n * ```\n * @Component({\n *   selector: 'my-comp',\n *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n * })\n * class MyComponent{\n * }\n *\n * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process\n * // and `MyComponent`'s `@Component.templateUrl` needs to be resolved asynchronously.\n *\n * // Calling `resolveComponentResources()` will resolve `@Component.templateUrl` into\n * // `@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.\n *\n * // Use browser's `fetch()` function as the default resource resolution strategy.\n * resolveComponentResources(fetch).then(() => {\n *   // After resolution all URLs have been converted into `template` strings.\n *   renderComponent(MyComponent);\n * });\n *\n * ```\n *\n * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n * to call this method outside JIT mode.\n *\n * @param resourceResolver a function which is responsible for returning a `Promise` to the\n * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.\n */\nfunction resolveComponentResources(resourceResolver) {\n    // Store all promises which are fetching the resources.\n    const componentResolved = [];\n    // Cache so that we don't fetch the same resource more than once.\n    const urlMap = new Map();\n    function cachedResourceResolve(url) {\n        let promise = urlMap.get(url);\n        if (!promise) {\n            const resp = resourceResolver(url);\n            urlMap.set(url, promise = resp.then(unwrapResponse));\n        }\n        return promise;\n    }\n    componentResourceResolutionQueue.forEach((component, type) => {\n        const promises = [];\n        if (component.templateUrl) {\n            promises.push(cachedResourceResolve(component.templateUrl).then((template) => {\n                component.template = template;\n            }));\n        }\n        const styles = typeof component.styles === 'string' ? [component.styles] : (component.styles || []);\n        component.styles = styles;\n        if (component.styleUrl && component.styleUrls?.length) {\n            throw new Error('@Component cannot define both `styleUrl` and `styleUrls`. ' +\n                'Use `styleUrl` if the component has one stylesheet, or `styleUrls` if it has multiple');\n        }\n        else if (component.styleUrls?.length) {\n            const styleOffset = component.styles.length;\n            const styleUrls = component.styleUrls;\n            component.styleUrls.forEach((styleUrl, index) => {\n                styles.push(''); // pre-allocate array.\n                promises.push(cachedResourceResolve(styleUrl).then((style) => {\n                    styles[styleOffset + index] = style;\n                    styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n                    if (styleUrls.length == 0) {\n                        component.styleUrls = undefined;\n                    }\n                }));\n            });\n        }\n        else if (component.styleUrl) {\n            promises.push(cachedResourceResolve(component.styleUrl).then((style) => {\n                styles.push(style);\n                component.styleUrl = undefined;\n            }));\n        }\n        const fullyResolved = Promise.all(promises).then(() => componentDefResolved(type));\n        componentResolved.push(fullyResolved);\n    });\n    clearResolutionOfComponentResourcesQueue();\n    return Promise.all(componentResolved).then(() => undefined);\n}\nlet componentResourceResolutionQueue = new Map();\n// Track when existing ɵcmp for a Type is waiting on resources.\nconst componentDefPendingResolution = new Set();\nfunction maybeQueueResolutionOfComponentResources(type, metadata) {\n    if (componentNeedsResolution(metadata)) {\n        componentResourceResolutionQueue.set(type, metadata);\n        componentDefPendingResolution.add(type);\n    }\n}\nfunction isComponentDefPendingResolution(type) {\n    return componentDefPendingResolution.has(type);\n}\nfunction componentNeedsResolution(component) {\n    return !!((component.templateUrl && !component.hasOwnProperty('template')) ||\n        (component.styleUrls && component.styleUrls.length) || component.styleUrl);\n}\nfunction clearResolutionOfComponentResourcesQueue() {\n    const old = componentResourceResolutionQueue;\n    componentResourceResolutionQueue = new Map();\n    return old;\n}\nfunction restoreComponentResolutionQueue(queue) {\n    componentDefPendingResolution.clear();\n    queue.forEach((_, type) => componentDefPendingResolution.add(type));\n    componentResourceResolutionQueue = queue;\n}\nfunction isComponentResourceResolutionQueueEmpty() {\n    return componentResourceResolutionQueue.size === 0;\n}\nfunction unwrapResponse(response) {\n    return typeof response == 'string' ? response : response.text();\n}\nfunction componentDefResolved(type) {\n    componentDefPendingResolution.delete(type);\n}\n\n/**\n * A multi-provider token for initialization functions that will run upon construction of an\n * environment injector.\n *\n * @publicApi\n */\nconst ENVIRONMENT_INITIALIZER = new InjectionToken('ENVIRONMENT_INITIALIZER');\n\n/**\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n *\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n * project.\n *\n * @publicApi\n */\nconst INJECTOR = new InjectionToken('INJECTOR', \n// Disable tslint because this is const enum which gets inlined not top level prop access.\n// tslint:disable-next-line: no-toplevel-property-access\n-1 /* InjectorMarkers.Injector */);\n\nconst INJECTOR_DEF_TYPES = new InjectionToken('INJECTOR_DEF_TYPES');\n\nclass NullInjector {\n    get(token, notFoundValue = THROW_IF_NOT_FOUND) {\n        if (notFoundValue === THROW_IF_NOT_FOUND) {\n            const error = new Error(`NullInjectorError: No provider for ${stringify(token)}!`);\n            error.name = 'NullInjectorError';\n            throw error;\n        }\n        return notFoundValue;\n    }\n}\n\n/**\n * Wrap an array of `Provider`s into `EnvironmentProviders`, preventing them from being accidentally\n * referenced in `@Component` in a component injector.\n */\nfunction makeEnvironmentProviders(providers) {\n    return {\n        ɵproviders: providers,\n    };\n}\n/**\n * Collects providers from all NgModules and standalone components, including transitively imported\n * ones.\n *\n * Providers extracted via `importProvidersFrom` are only usable in an application injector or\n * another environment injector (such as a route injector). They should not be used in component\n * providers.\n *\n * More information about standalone components can be found in [this\n * guide](guide/standalone-components).\n *\n * @usageNotes\n * The results of the `importProvidersFrom` call can be used in the `bootstrapApplication` call:\n *\n * ```typescript\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     importProvidersFrom(NgModuleOne, NgModuleTwo)\n *   ]\n * });\n * ```\n *\n * You can also use the `importProvidersFrom` results in the `providers` field of a route, when a\n * standalone component is used:\n *\n * ```typescript\n * export const ROUTES: Route[] = [\n *   {\n *     path: 'foo',\n *     providers: [\n *       importProvidersFrom(NgModuleOne, NgModuleTwo)\n *     ],\n *     component: YourStandaloneComponent\n *   }\n * ];\n * ```\n *\n * @returns Collected providers from the specified list of types.\n * @publicApi\n */\nfunction importProvidersFrom(...sources) {\n    return {\n        ɵproviders: internalImportProvidersFrom(true, sources),\n        ɵfromNgModule: true,\n    };\n}\nfunction internalImportProvidersFrom(checkForStandaloneCmp, ...sources) {\n    const providersOut = [];\n    const dedup = new Set(); // already seen types\n    let injectorTypesWithProviders;\n    const collectProviders = (provider) => {\n        providersOut.push(provider);\n    };\n    deepForEach(sources, source => {\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && checkForStandaloneCmp) {\n            const cmpDef = getComponentDef(source);\n            if (cmpDef?.standalone) {\n                throw new RuntimeError(800 /* RuntimeErrorCode.IMPORT_PROVIDERS_FROM_STANDALONE */, `Importing providers supports NgModule or ModuleWithProviders but got a standalone component \"${stringifyForError(source)}\"`);\n            }\n        }\n        // Narrow `source` to access the internal type analogue for `ModuleWithProviders`.\n        const internalSource = source;\n        if (walkProviderTree(internalSource, collectProviders, [], dedup)) {\n            injectorTypesWithProviders ||= [];\n            injectorTypesWithProviders.push(internalSource);\n        }\n    });\n    // Collect all providers from `ModuleWithProviders` types.\n    if (injectorTypesWithProviders !== undefined) {\n        processInjectorTypesWithProviders(injectorTypesWithProviders, collectProviders);\n    }\n    return providersOut;\n}\n/**\n * Collects all providers from the list of `ModuleWithProviders` and appends them to the provided\n * array.\n */\nfunction processInjectorTypesWithProviders(typesWithProviders, visitor) {\n    for (let i = 0; i < typesWithProviders.length; i++) {\n        const { ngModule, providers } = typesWithProviders[i];\n        deepForEachProvider(providers, provider => {\n            ngDevMode && validateProvider(provider, providers || EMPTY_ARRAY, ngModule);\n            visitor(provider, ngModule);\n        });\n    }\n}\n/**\n * The logic visits an `InjectorType`, an `InjectorTypeWithProviders`, or a standalone\n * `ComponentType`, and all of its transitive providers and collects providers.\n *\n * If an `InjectorTypeWithProviders` that declares providers besides the type is specified,\n * the function will return \"true\" to indicate that the providers of the type definition need\n * to be processed. This allows us to process providers of injector types after all imports of\n * an injector definition are processed. (following View Engine semantics: see FW-1349)\n */\nfunction walkProviderTree(container, visitor, parents, dedup) {\n    container = resolveForwardRef(container);\n    if (!container)\n        return false;\n    // The actual type which had the definition. Usually `container`, but may be an unwrapped type\n    // from `InjectorTypeWithProviders`.\n    let defType = null;\n    let injDef = getInjectorDef(container);\n    const cmpDef = !injDef && getComponentDef(container);\n    if (!injDef && !cmpDef) {\n        // `container` is not an injector type or a component type. It might be:\n        //  * An `InjectorTypeWithProviders` that wraps an injector type.\n        //  * A standalone directive or pipe that got pulled in from a standalone component's\n        //    dependencies.\n        // Try to unwrap it as an `InjectorTypeWithProviders` first.\n        const ngModule = container.ngModule;\n        injDef = getInjectorDef(ngModule);\n        if (injDef) {\n            defType = ngModule;\n        }\n        else {\n            // Not a component or injector type, so ignore it.\n            return false;\n        }\n    }\n    else if (cmpDef && !cmpDef.standalone) {\n        return false;\n    }\n    else {\n        defType = container;\n    }\n    // Check for circular dependencies.\n    if (ngDevMode && parents.indexOf(defType) !== -1) {\n        const defName = stringify(defType);\n        const path = parents.map(stringify);\n        throwCyclicDependencyError(defName, path);\n    }\n    // Check for multiple imports of the same module\n    const isDuplicate = dedup.has(defType);\n    if (cmpDef) {\n        if (isDuplicate) {\n            // This component definition has already been processed.\n            return false;\n        }\n        dedup.add(defType);\n        if (cmpDef.dependencies) {\n            const deps = typeof cmpDef.dependencies === 'function' ? cmpDef.dependencies() : cmpDef.dependencies;\n            for (const dep of deps) {\n                walkProviderTree(dep, visitor, parents, dedup);\n            }\n        }\n    }\n    else if (injDef) {\n        // First, include providers from any imports.\n        if (injDef.imports != null && !isDuplicate) {\n            // Before processing defType's imports, add it to the set of parents. This way, if it ends\n            // up deeply importing itself, this can be detected.\n            ngDevMode && parents.push(defType);\n            // Add it to the set of dedups. This way we can detect multiple imports of the same module\n            dedup.add(defType);\n            let importTypesWithProviders;\n            try {\n                deepForEach(injDef.imports, imported => {\n                    if (walkProviderTree(imported, visitor, parents, dedup)) {\n                        importTypesWithProviders ||= [];\n                        // If the processed import is an injector type with providers, we store it in the\n                        // list of import types with providers, so that we can process those afterwards.\n                        importTypesWithProviders.push(imported);\n                    }\n                });\n            }\n            finally {\n                // Remove it from the parents set when finished.\n                ngDevMode && parents.pop();\n            }\n            // Imports which are declared with providers (TypeWithProviders) need to be processed\n            // after all imported modules are processed. This is similar to how View Engine\n            // processes/merges module imports in the metadata resolver. See: FW-1349.\n            if (importTypesWithProviders !== undefined) {\n                processInjectorTypesWithProviders(importTypesWithProviders, visitor);\n            }\n        }\n        if (!isDuplicate) {\n            // Track the InjectorType and add a provider for it.\n            // It's important that this is done after the def's imports.\n            const factory = getFactoryDef(defType) || (() => new defType());\n            // Append extra providers to make more info available for consumers (to retrieve an injector\n            // type), as well as internally (to calculate an injection scope correctly and eagerly\n            // instantiate a `defType` when an injector is created).\n            // Provider to create `defType` using its factory.\n            visitor({ provide: defType, useFactory: factory, deps: EMPTY_ARRAY }, defType);\n            // Make this `defType` available to an internal logic that calculates injector scope.\n            visitor({ provide: INJECTOR_DEF_TYPES, useValue: defType, multi: true }, defType);\n            // Provider to eagerly instantiate `defType` via `INJECTOR_INITIALIZER`.\n            visitor({ provide: ENVIRONMENT_INITIALIZER, useValue: () => ɵɵinject(defType), multi: true }, defType);\n        }\n        // Next, include providers listed on the definition itself.\n        const defProviders = injDef.providers;\n        if (defProviders != null && !isDuplicate) {\n            const injectorType = container;\n            deepForEachProvider(defProviders, provider => {\n                ngDevMode && validateProvider(provider, defProviders, injectorType);\n                visitor(provider, injectorType);\n            });\n        }\n    }\n    else {\n        // Should not happen, but just in case.\n        return false;\n    }\n    return (defType !== container &&\n        container.providers !== undefined);\n}\nfunction validateProvider(provider, providers, containerType) {\n    if (isTypeProvider(provider) || isValueProvider(provider) || isFactoryProvider(provider) ||\n        isExistingProvider(provider)) {\n        return;\n    }\n    // Here we expect the provider to be a `useClass` provider (by elimination).\n    const classRef = resolveForwardRef(provider && (provider.useClass || provider.provide));\n    if (!classRef) {\n        throwInvalidProviderError(containerType, providers, provider);\n    }\n}\nfunction deepForEachProvider(providers, fn) {\n    for (let provider of providers) {\n        if (isEnvironmentProviders(provider)) {\n            provider = provider.ɵproviders;\n        }\n        if (Array.isArray(provider)) {\n            deepForEachProvider(provider, fn);\n        }\n        else {\n            fn(provider);\n        }\n    }\n}\nconst USE_VALUE$1 = getClosureSafeProperty({ provide: String, useValue: getClosureSafeProperty });\nfunction isValueProvider(value) {\n    return value !== null && typeof value == 'object' && USE_VALUE$1 in value;\n}\nfunction isExistingProvider(value) {\n    return !!(value && value.useExisting);\n}\nfunction isFactoryProvider(value) {\n    return !!(value && value.useFactory);\n}\nfunction isTypeProvider(value) {\n    return typeof value === 'function';\n}\nfunction isClassProvider(value) {\n    return !!value.useClass;\n}\n\n/**\n * An internal token whose presence in an injector indicates that the injector should treat itself\n * as a root scoped injector when processing requests for unknown tokens which may indicate\n * they are provided in the root scope.\n */\nconst INJECTOR_SCOPE = new InjectionToken('Set Injector scope.');\n\n/**\n * Marker which indicates that a value has not yet been created from the factory function.\n */\nconst NOT_YET = {};\n/**\n * Marker which indicates that the factory function for a token is in the process of being called.\n *\n * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates\n * injection of a dependency has recursively attempted to inject the original token, and there is\n * a circular dependency among the providers.\n */\nconst CIRCULAR = {};\n/**\n * A lazily initialized NullInjector.\n */\nlet NULL_INJECTOR = undefined;\nfunction getNullInjector() {\n    if (NULL_INJECTOR === undefined) {\n        NULL_INJECTOR = new NullInjector();\n    }\n    return NULL_INJECTOR;\n}\n/**\n * An `Injector` that's part of the environment injector hierarchy, which exists outside of the\n * component tree.\n */\nclass EnvironmentInjector {\n}\nclass R3Injector extends EnvironmentInjector {\n    /**\n     * Flag indicating that this injector was previously destroyed.\n     */\n    get destroyed() {\n        return this._destroyed;\n    }\n    constructor(providers, parent, source, scopes) {\n        super();\n        this.parent = parent;\n        this.source = source;\n        this.scopes = scopes;\n        /**\n         * Map of tokens to records which contain the instances of those tokens.\n         * - `null` value implies that we don't have the record. Used by tree-shakable injectors\n         * to prevent further searches.\n         */\n        this.records = new Map();\n        /**\n         * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\n         */\n        this._ngOnDestroyHooks = new Set();\n        this._onDestroyHooks = [];\n        this._destroyed = false;\n        // Start off by creating Records for every provider.\n        forEachSingleProvider(providers, provider => this.processProvider(provider));\n        // Make sure the INJECTOR token provides this injector.\n        this.records.set(INJECTOR, makeRecord(undefined, this));\n        // And `EnvironmentInjector` if the current injector is supposed to be env-scoped.\n        if (scopes.has('environment')) {\n            this.records.set(EnvironmentInjector, makeRecord(undefined, this));\n        }\n        // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide\n        // any injectable scoped to APP_ROOT_SCOPE.\n        const record = this.records.get(INJECTOR_SCOPE);\n        if (record != null && typeof record.value === 'string') {\n            this.scopes.add(record.value);\n        }\n        this.injectorDefTypes = new Set(this.get(INJECTOR_DEF_TYPES, EMPTY_ARRAY, InjectFlags.Self));\n    }\n    /**\n     * Destroy the injector and release references to every instance or provider associated with it.\n     *\n     * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n     * hook was found.\n     */\n    destroy() {\n        this.assertNotDestroyed();\n        // Set destroyed = true first, in case lifecycle hooks re-enter destroy().\n        this._destroyed = true;\n        try {\n            // Call all the lifecycle hooks.\n            for (const service of this._ngOnDestroyHooks) {\n                service.ngOnDestroy();\n            }\n            const onDestroyHooks = this._onDestroyHooks;\n            // Reset the _onDestroyHooks array before iterating over it to prevent hooks that unregister\n            // themselves from mutating the array during iteration.\n            this._onDestroyHooks = [];\n            for (const hook of onDestroyHooks) {\n                hook();\n            }\n        }\n        finally {\n            // Release all references.\n            this.records.clear();\n            this._ngOnDestroyHooks.clear();\n            this.injectorDefTypes.clear();\n        }\n    }\n    onDestroy(callback) {\n        this.assertNotDestroyed();\n        this._onDestroyHooks.push(callback);\n        return () => this.removeOnDestroy(callback);\n    }\n    runInContext(fn) {\n        this.assertNotDestroyed();\n        const previousInjector = setCurrentInjector(this);\n        const previousInjectImplementation = setInjectImplementation(undefined);\n        let prevInjectContext;\n        if (ngDevMode) {\n            prevInjectContext = setInjectorProfilerContext({ injector: this, token: null });\n        }\n        try {\n            return fn();\n        }\n        finally {\n            setCurrentInjector(previousInjector);\n            setInjectImplementation(previousInjectImplementation);\n            ngDevMode && setInjectorProfilerContext(prevInjectContext);\n        }\n    }\n    get(token, notFoundValue = THROW_IF_NOT_FOUND, flags = InjectFlags.Default) {\n        this.assertNotDestroyed();\n        if (token.hasOwnProperty(NG_ENV_ID)) {\n            return token[NG_ENV_ID](this);\n        }\n        flags = convertToBitFlags(flags);\n        // Set the injection context.\n        let prevInjectContext;\n        if (ngDevMode) {\n            prevInjectContext = setInjectorProfilerContext({ injector: this, token: token });\n        }\n        const previousInjector = setCurrentInjector(this);\n        const previousInjectImplementation = setInjectImplementation(undefined);\n        try {\n            // Check for the SkipSelf flag.\n            if (!(flags & InjectFlags.SkipSelf)) {\n                // SkipSelf isn't set, check if the record belongs to this injector.\n                let record = this.records.get(token);\n                if (record === undefined) {\n                    // No record, but maybe the token is scoped to this injector. Look for an injectable\n                    // def with a scope matching this injector.\n                    const def = couldBeInjectableType(token) && getInjectableDef(token);\n                    if (def && this.injectableDefInScope(def)) {\n                        // Found an injectable def and it's scoped to this injector. Pretend as if it was here\n                        // all along.\n                        if (ngDevMode) {\n                            runInInjectorProfilerContext(this, token, () => {\n                                emitProviderConfiguredEvent(token);\n                            });\n                        }\n                        record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);\n                    }\n                    else {\n                        record = null;\n                    }\n                    this.records.set(token, record);\n                }\n                // If a record was found, get the instance for it and return it.\n                if (record != null /* NOT null || undefined */) {\n                    return this.hydrate(token, record);\n                }\n            }\n            // Select the next injector based on the Self flag - if self is set, the next injector is\n            // the NullInjector, otherwise it's the parent.\n            const nextInjector = !(flags & InjectFlags.Self) ? this.parent : getNullInjector();\n            // Set the notFoundValue based on the Optional flag - if optional is set and notFoundValue\n            // is undefined, the value is null, otherwise it's the notFoundValue.\n            notFoundValue = (flags & InjectFlags.Optional) && notFoundValue === THROW_IF_NOT_FOUND ?\n                null :\n                notFoundValue;\n            return nextInjector.get(token, notFoundValue);\n        }\n        catch (e) {\n            if (e.name === 'NullInjectorError') {\n                const path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n                path.unshift(stringify(token));\n                if (previousInjector) {\n                    // We still have a parent injector, keep throwing\n                    throw e;\n                }\n                else {\n                    // Format & throw the final error message when we don't have any previous injector\n                    return catchInjectorError(e, token, 'R3InjectorError', this.source);\n                }\n            }\n            else {\n                throw e;\n            }\n        }\n        finally {\n            // Lastly, restore the previous injection context.\n            setInjectImplementation(previousInjectImplementation);\n            setCurrentInjector(previousInjector);\n            ngDevMode && setInjectorProfilerContext(prevInjectContext);\n        }\n    }\n    /** @internal */\n    resolveInjectorInitializers() {\n        const previousInjector = setCurrentInjector(this);\n        const previousInjectImplementation = setInjectImplementation(undefined);\n        let prevInjectContext;\n        if (ngDevMode) {\n            prevInjectContext = setInjectorProfilerContext({ injector: this, token: null });\n        }\n        try {\n            const initializers = this.get(ENVIRONMENT_INITIALIZER, EMPTY_ARRAY, InjectFlags.Self);\n            if (ngDevMode && !Array.isArray(initializers)) {\n                throw new RuntimeError(-209 /* RuntimeErrorCode.INVALID_MULTI_PROVIDER */, 'Unexpected type of the `ENVIRONMENT_INITIALIZER` token value ' +\n                    `(expected an array, but got ${typeof initializers}). ` +\n                    'Please check that the `ENVIRONMENT_INITIALIZER` token is configured as a ' +\n                    '`multi: true` provider.');\n            }\n            for (const initializer of initializers) {\n                initializer();\n            }\n        }\n        finally {\n            setCurrentInjector(previousInjector);\n            setInjectImplementation(previousInjectImplementation);\n            ngDevMode && setInjectorProfilerContext(prevInjectContext);\n        }\n    }\n    toString() {\n        const tokens = [];\n        const records = this.records;\n        for (const token of records.keys()) {\n            tokens.push(stringify(token));\n        }\n        return `R3Injector[${tokens.join(', ')}]`;\n    }\n    assertNotDestroyed() {\n        if (this._destroyed) {\n            throw new RuntimeError(205 /* RuntimeErrorCode.INJECTOR_ALREADY_DESTROYED */, ngDevMode && 'Injector has already been destroyed.');\n        }\n    }\n    /**\n     * Process a `SingleProvider` and add it.\n     */\n    processProvider(provider) {\n        // Determine the token from the provider. Either it's its own token, or has a {provide: ...}\n        // property.\n        provider = resolveForwardRef(provider);\n        let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider && provider.provide);\n        // Construct a `Record` for the provider.\n        const record = providerToRecord(provider);\n        if (ngDevMode) {\n            runInInjectorProfilerContext(this, token, () => {\n                // Emit InjectorProfilerEventType.Create if provider is a value provider because\n                // these are the only providers that do not go through the value hydration logic\n                // where this event would normally be emitted from.\n                if (isValueProvider(provider)) {\n                    emitInstanceCreatedByInjectorEvent(provider.useValue);\n                }\n                emitProviderConfiguredEvent(provider);\n            });\n        }\n        if (!isTypeProvider(provider) && provider.multi === true) {\n            // If the provider indicates that it's a multi-provider, process it specially.\n            // First check whether it's been defined already.\n            let multiRecord = this.records.get(token);\n            if (multiRecord) {\n                // It has. Throw a nice error if\n                if (ngDevMode && multiRecord.multi === undefined) {\n                    throwMixedMultiProviderError();\n                }\n            }\n            else {\n                multiRecord = makeRecord(undefined, NOT_YET, true);\n                multiRecord.factory = () => injectArgs(multiRecord.multi);\n                this.records.set(token, multiRecord);\n            }\n            token = provider;\n            multiRecord.multi.push(provider);\n        }\n        else {\n            const existing = this.records.get(token);\n            if (ngDevMode && existing && existing.multi !== undefined) {\n                throwMixedMultiProviderError();\n            }\n        }\n        this.records.set(token, record);\n    }\n    hydrate(token, record) {\n        if (ngDevMode && record.value === CIRCULAR) {\n            throwCyclicDependencyError(stringify(token));\n        }\n        else if (record.value === NOT_YET) {\n            record.value = CIRCULAR;\n            if (ngDevMode) {\n                runInInjectorProfilerContext(this, token, () => {\n                    record.value = record.factory();\n                    emitInstanceCreatedByInjectorEvent(record.value);\n                });\n            }\n            else {\n                record.value = record.factory();\n            }\n        }\n        if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {\n            this._ngOnDestroyHooks.add(record.value);\n        }\n        return record.value;\n    }\n    injectableDefInScope(def) {\n        if (!def.providedIn) {\n            return false;\n        }\n        const providedIn = resolveForwardRef(def.providedIn);\n        if (typeof providedIn === 'string') {\n            return providedIn === 'any' || (this.scopes.has(providedIn));\n        }\n        else {\n            return this.injectorDefTypes.has(providedIn);\n        }\n    }\n    removeOnDestroy(callback) {\n        const destroyCBIdx = this._onDestroyHooks.indexOf(callback);\n        if (destroyCBIdx !== -1) {\n            this._onDestroyHooks.splice(destroyCBIdx, 1);\n        }\n    }\n}\nfunction injectableDefOrInjectorDefFactory(token) {\n    // Most tokens will have an injectable def directly on them, which specifies a factory directly.\n    const injectableDef = getInjectableDef(token);\n    const factory = injectableDef !== null ? injectableDef.factory : getFactoryDef(token);\n    if (factory !== null) {\n        return factory;\n    }\n    // InjectionTokens should have an injectable def (ɵprov) and thus should be handled above.\n    // If it's missing that, it's an error.\n    if (token instanceof InjectionToken) {\n        throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && `Token ${stringify(token)} is missing a ɵprov definition.`);\n    }\n    // Undecorated types can sometimes be created if they have no constructor arguments.\n    if (token instanceof Function) {\n        return getUndecoratedInjectableFactory(token);\n    }\n    // There was no way to resolve a factory for this token.\n    throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && 'unreachable');\n}\nfunction getUndecoratedInjectableFactory(token) {\n    // If the token has parameters then it has dependencies that we cannot resolve implicitly.\n    const paramLength = token.length;\n    if (paramLength > 0) {\n        const args = newArray(paramLength, '?');\n        throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && `Can't resolve all parameters for ${stringify(token)}: (${args.join(', ')}).`);\n    }\n    // The constructor function appears to have no parameters.\n    // This might be because it inherits from a super-class. In which case, use an injectable\n    // def from an ancestor if there is one.\n    // Otherwise this really is a simple class with no dependencies, so return a factory that\n    // just instantiates the zero-arg constructor.\n    const inheritedInjectableDef = getInheritedInjectableDef(token);\n    if (inheritedInjectableDef !== null) {\n        return () => inheritedInjectableDef.factory(token);\n    }\n    else {\n        return () => new token();\n    }\n}\nfunction providerToRecord(provider) {\n    if (isValueProvider(provider)) {\n        return makeRecord(undefined, provider.useValue);\n    }\n    else {\n        const factory = providerToFactory(provider);\n        return makeRecord(factory, NOT_YET);\n    }\n}\n/**\n * Converts a `SingleProvider` into a factory function.\n *\n * @param provider provider to convert to factory\n */\nfunction providerToFactory(provider, ngModuleType, providers) {\n    let factory = undefined;\n    if (ngDevMode && isEnvironmentProviders(provider)) {\n        throwInvalidProviderError(undefined, providers, provider);\n    }\n    if (isTypeProvider(provider)) {\n        const unwrappedProvider = resolveForwardRef(provider);\n        return getFactoryDef(unwrappedProvider) || injectableDefOrInjectorDefFactory(unwrappedProvider);\n    }\n    else {\n        if (isValueProvider(provider)) {\n            factory = () => resolveForwardRef(provider.useValue);\n        }\n        else if (isFactoryProvider(provider)) {\n            factory = () => provider.useFactory(...injectArgs(provider.deps || []));\n        }\n        else if (isExistingProvider(provider)) {\n            factory = () => ɵɵinject(resolveForwardRef(provider.useExisting));\n        }\n        else {\n            const classRef = resolveForwardRef(provider &&\n                (provider.useClass || provider.provide));\n            if (ngDevMode && !classRef) {\n                throwInvalidProviderError(ngModuleType, providers, provider);\n            }\n            if (hasDeps(provider)) {\n                factory = () => new (classRef)(...injectArgs(provider.deps));\n            }\n            else {\n                return getFactoryDef(classRef) || injectableDefOrInjectorDefFactory(classRef);\n            }\n        }\n    }\n    return factory;\n}\nfunction makeRecord(factory, value, multi = false) {\n    return {\n        factory: factory,\n        value: value,\n        multi: multi ? [] : undefined,\n    };\n}\nfunction hasDeps(value) {\n    return !!value.deps;\n}\nfunction hasOnDestroy(value) {\n    return value !== null && typeof value === 'object' &&\n        typeof value.ngOnDestroy === 'function';\n}\nfunction couldBeInjectableType(value) {\n    return (typeof value === 'function') ||\n        (typeof value === 'object' && value instanceof InjectionToken);\n}\nfunction forEachSingleProvider(providers, fn) {\n    for (const provider of providers) {\n        if (Array.isArray(provider)) {\n            forEachSingleProvider(provider, fn);\n        }\n        else if (provider && isEnvironmentProviders(provider)) {\n            forEachSingleProvider(provider.ɵproviders, fn);\n        }\n        else {\n            fn(provider);\n        }\n    }\n}\n\n/**\n * Runs the given function in the [context](guide/dependency-injection-context) of the given\n * `Injector`.\n *\n * Within the function's stack frame, [`inject`](api/core/inject) can be used to inject dependencies\n * from the given `Injector`. Note that `inject` is only usable synchronously, and cannot be used in\n * any asynchronous callbacks or after any `await` points.\n *\n * @param injector the injector which will satisfy calls to [`inject`](api/core/inject) while `fn`\n *     is executing\n * @param fn the closure to be run in the context of `injector`\n * @returns the return value of the function, if any\n * @publicApi\n */\nfunction runInInjectionContext(injector, fn) {\n    if (injector instanceof R3Injector) {\n        injector.assertNotDestroyed();\n    }\n    let prevInjectorProfilerContext;\n    if (ngDevMode) {\n        prevInjectorProfilerContext = setInjectorProfilerContext({ injector, token: null });\n    }\n    const prevInjector = setCurrentInjector(injector);\n    const previousInjectImplementation = setInjectImplementation(undefined);\n    try {\n        return fn();\n    }\n    finally {\n        setCurrentInjector(prevInjector);\n        ngDevMode && setInjectorProfilerContext(prevInjectorProfilerContext);\n        setInjectImplementation(previousInjectImplementation);\n    }\n}\n/**\n * Asserts that the current stack frame is within an [injection\n * context](guide/dependency-injection-context) and has access to `inject`.\n *\n * @param debugFn a reference to the function making the assertion (used for the error message).\n *\n * @publicApi\n */\nfunction assertInInjectionContext(debugFn) {\n    // Taking a `Function` instead of a string name here prevents the unminified name of the function\n    // from being retained in the bundle regardless of minification.\n    if (!getInjectImplementation() && !getCurrentInjector()) {\n        throw new RuntimeError(-203 /* RuntimeErrorCode.MISSING_INJECTION_CONTEXT */, ngDevMode &&\n            (debugFn.name +\n                '() can only be used within an injection context such as a constructor, a factory function, a field initializer, or a function used with `runInInjectionContext`'));\n    }\n}\n\n/**\n * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.\n *\n * This should be kept up to date with the public exports of @angular/core.\n */\nconst angularCoreDiEnv = {\n    'ɵɵdefineInjectable': ɵɵdefineInjectable,\n    'ɵɵdefineInjector': ɵɵdefineInjector,\n    'ɵɵinject': ɵɵinject,\n    'ɵɵinvalidFactoryDep': ɵɵinvalidFactoryDep,\n    'resolveForwardRef': resolveForwardRef,\n};\n\n/**\n * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting\n * injectable def (`ɵprov`) onto the injectable type.\n */\nfunction compileInjectable(type, meta) {\n    let ngInjectableDef = null;\n    let ngFactoryDef = null;\n    // if NG_PROV_DEF is already defined on this class then don't overwrite it\n    if (!type.hasOwnProperty(NG_PROV_DEF)) {\n        Object.defineProperty(type, NG_PROV_DEF, {\n            get: () => {\n                if (ngInjectableDef === null) {\n                    const compiler = getCompilerFacade({ usage: 0 /* JitCompilerUsage.Decorator */, kind: 'injectable', type });\n                    ngInjectableDef = compiler.compileInjectable(angularCoreDiEnv, `ng:///${type.name}/ɵprov.js`, getInjectableMetadata(type, meta));\n                }\n                return ngInjectableDef;\n            },\n        });\n    }\n    // if NG_FACTORY_DEF is already defined on this class then don't overwrite it\n    if (!type.hasOwnProperty(NG_FACTORY_DEF)) {\n        Object.defineProperty(type, NG_FACTORY_DEF, {\n            get: () => {\n                if (ngFactoryDef === null) {\n                    const compiler = getCompilerFacade({ usage: 0 /* JitCompilerUsage.Decorator */, kind: 'injectable', type });\n                    ngFactoryDef = compiler.compileFactory(angularCoreDiEnv, `ng:///${type.name}/ɵfac.js`, {\n                        name: type.name,\n                        type,\n                        typeArgumentCount: 0,\n                        deps: reflectDependencies(type),\n                        target: compiler.FactoryTarget.Injectable\n                    });\n                }\n                return ngFactoryDef;\n            },\n            // Leave this configurable so that the factories from directives or pipes can take precedence.\n            configurable: true\n        });\n    }\n}\nconst USE_VALUE = getClosureSafeProperty({ provide: String, useValue: getClosureSafeProperty });\nfunction isUseClassProvider(meta) {\n    return meta.useClass !== undefined;\n}\nfunction isUseValueProvider(meta) {\n    return USE_VALUE in meta;\n}\nfunction isUseFactoryProvider(meta) {\n    return meta.useFactory !== undefined;\n}\nfunction isUseExistingProvider(meta) {\n    return meta.useExisting !== undefined;\n}\nfunction getInjectableMetadata(type, srcMeta) {\n    // Allow the compilation of a class with a `@Injectable()` decorator without parameters\n    const meta = srcMeta || { providedIn: null };\n    const compilerMeta = {\n        name: type.name,\n        type: type,\n        typeArgumentCount: 0,\n        providedIn: meta.providedIn,\n    };\n    if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== undefined) {\n        compilerMeta.deps = convertDependencies(meta.deps);\n    }\n    // Check to see if the user explicitly provided a `useXxxx` property.\n    if (isUseClassProvider(meta)) {\n        compilerMeta.useClass = meta.useClass;\n    }\n    else if (isUseValueProvider(meta)) {\n        compilerMeta.useValue = meta.useValue;\n    }\n    else if (isUseFactoryProvider(meta)) {\n        compilerMeta.useFactory = meta.useFactory;\n    }\n    else if (isUseExistingProvider(meta)) {\n        compilerMeta.useExisting = meta.useExisting;\n    }\n    return compilerMeta;\n}\n\n/**\n * Injectable decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Injectable = makeDecorator('Injectable', undefined, undefined, undefined, (type, meta) => compileInjectable(type, meta));\n\n/**\n * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.\n */\nfunction createInjector(defType, parent = null, additionalProviders = null, name) {\n    const injector = createInjectorWithoutInjectorInstances(defType, parent, additionalProviders, name);\n    injector.resolveInjectorInitializers();\n    return injector;\n}\n/**\n * Creates a new injector without eagerly resolving its injector types. Can be used in places\n * where resolving the injector types immediately can lead to an infinite loop. The injector types\n * should be resolved at a later point by calling `_resolveInjectorDefTypes`.\n */\nfunction createInjectorWithoutInjectorInstances(defType, parent = null, additionalProviders = null, name, scopes = new Set()) {\n    const providers = [\n        additionalProviders || EMPTY_ARRAY,\n        importProvidersFrom(defType),\n    ];\n    name = name || (typeof defType === 'object' ? undefined : stringify(defType));\n    return new R3Injector(providers, parent || getNullInjector(), name || null, scopes);\n}\n\n/**\n * Concrete injectors implement this interface. Injectors are configured\n * with [providers](guide/glossary#provider) that associate\n * dependencies of various types with [injection tokens](guide/glossary#di-token).\n *\n * @see [\"DI Providers\"](guide/dependency-injection-providers).\n * @see {@link StaticProvider}\n *\n * @usageNotes\n *\n *  The following example creates a service injector instance.\n *\n * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n *\n * ### Usage example\n *\n * {@example core/di/ts/injector_spec.ts region='Injector'}\n *\n * `Injector` returns itself when given `Injector` as a token:\n *\n * {@example core/di/ts/injector_spec.ts region='injectInjector'}\n *\n * @publicApi\n */\nclass Injector {\n    static { this.THROW_IF_NOT_FOUND = THROW_IF_NOT_FOUND; }\n    static { this.NULL = ( /* @__PURE__ */new NullInjector()); }\n    static create(options, parent) {\n        if (Array.isArray(options)) {\n            return createInjector({ name: '' }, parent, options, '');\n        }\n        else {\n            const name = options.name ?? '';\n            return createInjector({ name }, options.parent, options.providers, name);\n        }\n    }\n    /** @nocollapse */\n    static { this.ɵprov = ɵɵdefineInjectable({\n        token: Injector,\n        providedIn: 'any',\n        factory: () => ɵɵinject(INJECTOR),\n    }); }\n    /**\n     * @internal\n     * @nocollapse\n     */\n    static { this.__NG_ELEMENT_ID__ = -1 /* InjectorMarkers.Injector */; }\n}\n\n/**\n * @module\n * @description\n * The `di` module provides dependency injection container services.\n */\n\n/**\n * This file should not be necessary because node resolution should just default to `./di/index`!\n *\n * However it does not seem to work and it breaks:\n *  - //packages/animations/browser/test:test_web_chromium-local\n *  - //packages/compiler-cli/test:extract_i18n\n *  - //packages/compiler-cli/test:ngc\n *  - //packages/compiler-cli/test:perform_watch\n *  - //packages/compiler-cli/test/diagnostics:check_types\n *  - //packages/compiler-cli/test/transformers:test\n *  - //packages/compiler/test:test\n *  - //tools/public_api_guard:core_api\n *\n * Remove this file once the above is solved or wait until `ngc` is deleted and then it should be\n * safe to delete this file.\n */\n\nfunction isModuleWithProviders(value) {\n    return value.ngModule !== undefined;\n}\nfunction isNgModule(value) {\n    return !!getNgModuleDef(value);\n}\nfunction isPipe(value) {\n    return !!getPipeDef$1(value);\n}\nfunction isDirective(value) {\n    return !!getDirectiveDef(value);\n}\nfunction isComponent(value) {\n    return !!getComponentDef(value);\n}\nfunction getDependencyTypeForError(type) {\n    if (getComponentDef(type))\n        return 'component';\n    if (getDirectiveDef(type))\n        return 'directive';\n    if (getPipeDef$1(type))\n        return 'pipe';\n    return 'type';\n}\nfunction verifyStandaloneImport(depType, importingType) {\n    if (isForwardRef(depType)) {\n        depType = resolveForwardRef(depType);\n        if (!depType) {\n            throw new Error(`Expected forwardRef function, imported from \"${stringifyForError(importingType)}\", to return a standalone entity or NgModule but got \"${stringifyForError(depType) || depType}\".`);\n        }\n    }\n    if (getNgModuleDef(depType) == null) {\n        const def = getComponentDef(depType) || getDirectiveDef(depType) || getPipeDef$1(depType);\n        if (def != null) {\n            // if a component, directive or pipe is imported make sure that it is standalone\n            if (!def.standalone) {\n                throw new Error(`The \"${stringifyForError(depType)}\" ${getDependencyTypeForError(depType)}, imported from \"${stringifyForError(importingType)}\", is not standalone. Did you forget to add the standalone: true flag?`);\n            }\n        }\n        else {\n            // it can be either a module with provider or an unknown (not annotated) type\n            if (isModuleWithProviders(depType)) {\n                throw new Error(`A module with providers was imported from \"${stringifyForError(importingType)}\". Modules with providers are not supported in standalone components imports.`);\n            }\n            else {\n                throw new Error(`The \"${stringifyForError(depType)}\" type, imported from \"${stringifyForError(importingType)}\", must be a standalone component / directive / pipe or an NgModule. Did you forget to add the required @Component / @Directive / @Pipe or @NgModule annotation?`);\n            }\n        }\n    }\n}\n\n/**\n * Most of the use of `document` in Angular is from within the DI system so it is possible to simply\n * inject the `DOCUMENT` token and are done.\n *\n * Ivy is special because it does not rely upon the DI and must get hold of the document some other\n * way.\n *\n * The solution is to define `getDocument()` and `setDocument()` top-level functions for ivy.\n * Wherever ivy needs the global document, it calls `getDocument()` instead.\n *\n * When running ivy outside of a browser environment, it is necessary to call `setDocument()` to\n * tell ivy what the global `document` is.\n *\n * Angular does this for us in each of the standard platforms (`Browser` and `Server`)\n * by calling `setDocument()` when providing the `DOCUMENT` token.\n */\nlet DOCUMENT = undefined;\n/**\n * Tell ivy what the `document` is for this platform.\n *\n * It is only necessary to call this if the current platform is not a browser.\n *\n * @param document The object representing the global `document` in this environment.\n */\nfunction setDocument(document) {\n    DOCUMENT = document;\n}\n/**\n * Access the object that represents the `document` for this platform.\n *\n * Ivy calls this whenever it needs to access the `document` object.\n * For example to create the renderer or to do sanitization.\n */\nfunction getDocument() {\n    if (DOCUMENT !== undefined) {\n        return DOCUMENT;\n    }\n    else if (typeof document !== 'undefined') {\n        return document;\n    }\n    throw new RuntimeError(210 /* RuntimeErrorCode.MISSING_DOCUMENT */, (typeof ngDevMode === 'undefined' || ngDevMode) &&\n        `The document object is not available in this context. Make sure the DOCUMENT injection token is provided.`);\n    // No \"document\" can be found. This should only happen if we are running ivy outside Angular and\n    // the current platform is not a browser. Since this is not a supported scenario at the moment\n    // this should not happen in Angular apps.\n    // Once we support running ivy outside of Angular we will need to publish `setDocument()` as a\n    // public API.\n}\n\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") representing a string ID, used\n * primarily for prefixing application attributes and CSS styles when\n * {@link ViewEncapsulation#Emulated} is being used.\n *\n * The token is needed in cases when multiple applications are bootstrapped on a page\n * (for example, using `bootstrapApplication` calls). In this case, ensure that those applications\n * have different `APP_ID` value setup. For example:\n *\n * ```\n * bootstrapApplication(ComponentA, {\n *   providers: [\n *     { provide: APP_ID, useValue: 'app-a' },\n *     // ... other providers ...\n *   ]\n * });\n *\n * bootstrapApplication(ComponentB, {\n *   providers: [\n *     { provide: APP_ID, useValue: 'app-b' },\n *     // ... other providers ...\n *   ]\n * });\n * ```\n *\n * By default, when there is only one application bootstrapped, you don't need to provide the\n * `APP_ID` token (the `ng` will be used as an app ID).\n *\n * @publicApi\n */\nconst APP_ID = new InjectionToken('AppId', {\n    providedIn: 'root',\n    factory: () => DEFAULT_APP_ID,\n});\n/** Default value of the `APP_ID` token. */\nconst DEFAULT_APP_ID = 'ng';\n/**\n * A function that is executed when a platform is initialized.\n * @publicApi\n */\nconst PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');\n/**\n * A token that indicates an opaque platform ID.\n * @publicApi\n */\nconst PLATFORM_ID = new InjectionToken('Platform ID', {\n    providedIn: 'platform',\n    factory: () => 'unknown', // set a default platform name, when none set explicitly\n});\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") that indicates the root directory of\n * the application\n * @publicApi\n * @deprecated\n */\nconst PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');\n// We keep this token here, rather than the animations package, so that modules that only care\n// about which animations module is loaded (e.g. the CDK) can retrieve it without having to\n// include extra dependencies. See #44970 for more context.\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") that indicates which animations\n * module has been loaded.\n * @publicApi\n */\nconst ANIMATION_MODULE_TYPE = new InjectionToken('AnimationModuleType');\n// TODO(crisbeto): link to CSP guide here.\n/**\n * Token used to configure the [Content Security Policy](https://web.dev/strict-csp/) nonce that\n * Angular will apply when inserting inline styles. If not provided, Angular will look up its value\n * from the `ngCspNonce` attribute of the application root node.\n *\n * @publicApi\n */\nconst CSP_NONCE = new InjectionToken('CSP nonce', {\n    providedIn: 'root',\n    factory: () => {\n        // Ideally we wouldn't have to use `querySelector` here since we know that the nonce will be on\n        // the root node, but because the token value is used in renderers, it has to be available\n        // *very* early in the bootstrapping process. This should be a fairly shallow search, because\n        // the app won't have been added to the DOM yet. Some approaches that were considered:\n        // 1. Find the root node through `ApplicationRef.components[i].location` - normally this would\n        // be enough for our purposes, but the token is injected very early so the `components` array\n        // isn't populated yet.\n        // 2. Find the root `LView` through the current `LView` - renderers are a prerequisite to\n        // creating the `LView`. This means that no `LView` will have been entered when this factory is\n        // invoked for the root component.\n        // 3. Have the token factory return `() => string` which is invoked when a nonce is requested -\n        // the slightly later execution does allow us to get an `LView` reference, but the fact that\n        // it is a function means that it could be executed at *any* time (including immediately) which\n        // may lead to weird bugs.\n        // 4. Have the `ComponentFactory` read the attribute and provide it to the injector under the\n        // hood - has the same problem as #1 and #2 in that the renderer is used to query for the root\n        // node and the nonce value needs to be available when the renderer is created.\n        return getDocument().body?.querySelector('[ngCspNonce]')?.getAttribute('ngCspNonce') || null;\n    },\n});\nconst IMAGE_CONFIG_DEFAULTS = {\n    breakpoints: [16, 32, 48, 64, 96, 128, 256, 384, 640, 750, 828, 1080, 1200, 1920, 2048, 3840],\n    disableImageSizeWarning: false,\n    disableImageLazyLoadWarning: false,\n};\n/**\n * Injection token that configures the image optimized image functionality.\n * See {@link ImageConfig} for additional information about parameters that\n * can be used.\n *\n * @see {@link NgOptimizedImage}\n * @see {@link ImageConfig}\n * @publicApi\n */\nconst IMAGE_CONFIG = new InjectionToken('ImageConfig', { providedIn: 'root', factory: () => IMAGE_CONFIG_DEFAULTS });\n\n/**\n *\n * @codeGenApi\n */\nfunction ɵɵresolveWindow(element) {\n    return element.ownerDocument.defaultView;\n}\n/**\n *\n * @codeGenApi\n */\nfunction ɵɵresolveDocument(element) {\n    return element.ownerDocument;\n}\n/**\n *\n * @codeGenApi\n */\nfunction ɵɵresolveBody(element) {\n    return element.ownerDocument.body;\n}\n/**\n * The special delimiter we use to separate property names, prefixes, and suffixes\n * in property binding metadata. See storeBindingMetadata().\n *\n * We intentionally use the Unicode \"REPLACEMENT CHARACTER\" (U+FFFD) as a delimiter\n * because it is a very uncommon character that is unlikely to be part of a user's\n * property names or interpolation strings. If it is in fact used in a property\n * binding, DebugElement.properties will not return the correct value for that\n * binding. However, there should be no runtime effect for real applications.\n *\n * This character is typically rendered as a question mark inside of a diamond.\n * See https://en.wikipedia.org/wiki/Specials_(Unicode_block)\n *\n */\nconst INTERPOLATION_DELIMITER = `�`;\n/**\n * Unwrap a value which might be behind a closure (for forward declaration reasons).\n */\nfunction maybeUnwrapFn(value) {\n    if (value instanceof Function) {\n        return value();\n    }\n    else {\n        return value;\n    }\n}\n/**\n * Detects whether the code is invoked in a browser.\n * Later on, this check should be replaced with a tree-shakable\n * flag (e.g. `!isServer`).\n */\nfunction isPlatformBrowser(injector) {\n    return (injector ?? inject(Injector)).get(PLATFORM_ID) === 'browser';\n}\n\n/**\n * Indicates whether to use the runtime dependency tracker for scope calculation in JIT compilation.\n * The value \"false\" means the old code path based on patching scope info into the types will be\n * used.\n *\n * @deprecated For migration purposes only, to be removed soon.\n */\nconst USE_RUNTIME_DEPS_TRACKER_FOR_JIT = true;\n/**\n * An implementation of DepsTrackerApi which will be used for JIT and local compilation.\n */\nclass DepsTracker {\n    constructor() {\n        this.ownerNgModule = new Map();\n        this.ngModulesWithSomeUnresolvedDecls = new Set();\n        this.ngModulesScopeCache = new Map();\n        this.standaloneComponentsScopeCache = new Map();\n    }\n    /**\n     * Attempts to resolve ng module's forward ref declarations as much as possible and add them to\n     * the `ownerNgModule` map. This method normally should be called after the initial parsing when\n     * all the forward refs are resolved (e.g., when trying to render a component)\n     */\n    resolveNgModulesDecls() {\n        if (this.ngModulesWithSomeUnresolvedDecls.size === 0) {\n            return;\n        }\n        for (const moduleType of this.ngModulesWithSomeUnresolvedDecls) {\n            const def = getNgModuleDef(moduleType);\n            if (def?.declarations) {\n                for (const decl of maybeUnwrapFn(def.declarations)) {\n                    if (isComponent(decl)) {\n                        this.ownerNgModule.set(decl, moduleType);\n                    }\n                }\n            }\n        }\n        this.ngModulesWithSomeUnresolvedDecls.clear();\n    }\n    /** @override */\n    getComponentDependencies(type, rawImports) {\n        this.resolveNgModulesDecls();\n        const def = getComponentDef(type);\n        if (def === null) {\n            throw new Error(`Attempting to get component dependencies for a type that is not a component: ${type}`);\n        }\n        if (def.standalone) {\n            const scope = this.getStandaloneComponentScope(type, rawImports);\n            if (scope.compilation.isPoisoned) {\n                return { dependencies: [] };\n            }\n            return {\n                dependencies: [\n                    ...scope.compilation.directives,\n                    ...scope.compilation.pipes,\n                    ...scope.compilation.ngModules,\n                ]\n            };\n        }\n        else {\n            if (!this.ownerNgModule.has(type)) {\n                // This component is orphan! No need to handle the error since the component rendering\n                // pipeline (e.g., view_container_ref) will check for this error based on configs.\n                return { dependencies: [] };\n            }\n            const scope = this.getNgModuleScope(this.ownerNgModule.get(type));\n            if (scope.compilation.isPoisoned) {\n                return { dependencies: [] };\n            }\n            return {\n                dependencies: [\n                    ...scope.compilation.directives,\n                    ...scope.compilation.pipes,\n                ],\n            };\n        }\n    }\n    /**\n     * @override\n     * This implementation does not make use of param scopeInfo since it assumes the scope info is\n     * already added to the type itself through methods like {@link ɵɵsetNgModuleScope}\n     */\n    registerNgModule(type, scopeInfo) {\n        if (!isNgModule(type)) {\n            throw new Error(`Attempting to register a Type which is not NgModule as NgModule: ${type}`);\n        }\n        // Lazily process the NgModules later when needed.\n        this.ngModulesWithSomeUnresolvedDecls.add(type);\n    }\n    /** @override */\n    clearScopeCacheFor(type) {\n        this.ngModulesScopeCache.delete(type);\n        this.standaloneComponentsScopeCache.delete(type);\n    }\n    /** @override */\n    getNgModuleScope(type) {\n        if (this.ngModulesScopeCache.has(type)) {\n            return this.ngModulesScopeCache.get(type);\n        }\n        const scope = this.computeNgModuleScope(type);\n        this.ngModulesScopeCache.set(type, scope);\n        return scope;\n    }\n    /** Compute NgModule scope afresh. */\n    computeNgModuleScope(type) {\n        const def = getNgModuleDef(type, true);\n        const scope = {\n            exported: { directives: new Set(), pipes: new Set() },\n            compilation: { directives: new Set(), pipes: new Set() },\n        };\n        // Analyzing imports\n        for (const imported of maybeUnwrapFn(def.imports)) {\n            if (isNgModule(imported)) {\n                const importedScope = this.getNgModuleScope(imported);\n                // When this module imports another, the imported module's exported directives and pipes\n                // are added to the compilation scope of this module.\n                addSet(importedScope.exported.directives, scope.compilation.directives);\n                addSet(importedScope.exported.pipes, scope.compilation.pipes);\n            }\n            else if (isStandalone(imported)) {\n                if (isDirective(imported) || isComponent(imported)) {\n                    scope.compilation.directives.add(imported);\n                }\n                else if (isPipe(imported)) {\n                    scope.compilation.pipes.add(imported);\n                }\n                else {\n                    // The standalone thing is neither a component nor a directive nor a pipe ... (what?)\n                    throw new RuntimeError(1000 /* RuntimeErrorCode.RUNTIME_DEPS_INVALID_IMPORTED_TYPE */, 'The standalone imported type is neither a component nor a directive nor a pipe');\n                }\n            }\n            else {\n                // The import is neither a module nor a module-with-providers nor a standalone thing. This\n                // is going to be an error. So we short circuit.\n                scope.compilation.isPoisoned = true;\n                break;\n            }\n        }\n        // Analyzing declarations\n        if (!scope.compilation.isPoisoned) {\n            for (const decl of maybeUnwrapFn(def.declarations)) {\n                // Cannot declare another NgModule or a standalone thing\n                if (isNgModule(decl) || isStandalone(decl)) {\n                    scope.compilation.isPoisoned = true;\n                    break;\n                }\n                if (isPipe(decl)) {\n                    scope.compilation.pipes.add(decl);\n                }\n                else {\n                    // decl is either a directive or a component. The component may not yet have the ɵcmp due\n                    // to async compilation.\n                    scope.compilation.directives.add(decl);\n                }\n            }\n        }\n        // Analyzing exports\n        for (const exported of maybeUnwrapFn(def.exports)) {\n            if (isNgModule(exported)) {\n                // When this module exports another, the exported module's exported directives and pipes\n                // are added to both the compilation and exported scopes of this module.\n                const exportedScope = this.getNgModuleScope(exported);\n                // Based on the current logic there is no way to have poisoned exported scope. So no need to\n                // check for it.\n                addSet(exportedScope.exported.directives, scope.exported.directives);\n                addSet(exportedScope.exported.pipes, scope.exported.pipes);\n                // Some test toolings which run in JIT mode depend on this behavior that the exported scope\n                // should also be present in the compilation scope, even though AoT does not support this\n                // and it is also in odds with NgModule metadata definitions. Without this some tests in\n                // Google will fail.\n                addSet(exportedScope.exported.directives, scope.compilation.directives);\n                addSet(exportedScope.exported.pipes, scope.compilation.pipes);\n            }\n            else if (isPipe(exported)) {\n                scope.exported.pipes.add(exported);\n            }\n            else {\n                scope.exported.directives.add(exported);\n            }\n        }\n        return scope;\n    }\n    /** @override */\n    getStandaloneComponentScope(type, rawImports) {\n        if (this.standaloneComponentsScopeCache.has(type)) {\n            return this.standaloneComponentsScopeCache.get(type);\n        }\n        const ans = this.computeStandaloneComponentScope(type, rawImports);\n        this.standaloneComponentsScopeCache.set(type, ans);\n        return ans;\n    }\n    computeStandaloneComponentScope(type, rawImports) {\n        const ans = {\n            compilation: {\n                // Standalone components are always able to self-reference.\n                directives: new Set([type]),\n                pipes: new Set(),\n                ngModules: new Set(),\n            },\n        };\n        for (const rawImport of flatten(rawImports ?? [])) {\n            const imported = resolveForwardRef(rawImport);\n            try {\n                verifyStandaloneImport(imported, type);\n            }\n            catch (e) {\n                // Short-circuit if an import is not valid\n                ans.compilation.isPoisoned = true;\n                return ans;\n            }\n            if (isNgModule(imported)) {\n                ans.compilation.ngModules.add(imported);\n                const importedScope = this.getNgModuleScope(imported);\n                // Short-circuit if an imported NgModule has corrupted exported scope.\n                if (importedScope.exported.isPoisoned) {\n                    ans.compilation.isPoisoned = true;\n                    return ans;\n                }\n                addSet(importedScope.exported.directives, ans.compilation.directives);\n                addSet(importedScope.exported.pipes, ans.compilation.pipes);\n            }\n            else if (isPipe(imported)) {\n                ans.compilation.pipes.add(imported);\n            }\n            else if (isDirective(imported) || isComponent(imported)) {\n                ans.compilation.directives.add(imported);\n            }\n            else {\n                // The imported thing is not module/pipe/directive/component, so we error and short-circuit\n                // here\n                ans.compilation.isPoisoned = true;\n                return ans;\n            }\n        }\n        return ans;\n    }\n    /** @override */\n    isOrphanComponent(cmp) {\n        const def = getComponentDef(cmp);\n        if (!def || def.standalone) {\n            return false;\n        }\n        this.resolveNgModulesDecls();\n        return !this.ownerNgModule.has(cmp);\n    }\n}\nfunction addSet(sourceSet, targetSet) {\n    for (const m of sourceSet) {\n        targetSet.add(m);\n    }\n}\n/** The deps tracker to be used in the current Angular app in dev mode. */\nconst depsTracker = new DepsTracker();\nconst TEST_ONLY = { DepsTracker };\n\n/**\n * Map of module-id to the corresponding NgModule.\n */\nconst modules = new Map();\n/**\n * Whether to check for duplicate NgModule registrations.\n *\n * This can be disabled for testing.\n */\nlet checkForDuplicateNgModules = true;\nfunction assertSameOrNotExisting(id, type, incoming) {\n    if (type && type !== incoming && checkForDuplicateNgModules) {\n        throw new Error(`Duplicate module registered for ${id} - ${stringify(type)} vs ${stringify(type.name)}`);\n    }\n}\n/**\n * Adds the given NgModule type to Angular's NgModule registry.\n *\n * This is generated as a side-effect of NgModule compilation. Note that the `id` is passed in\n * explicitly and not read from the NgModule definition. This is for two reasons: it avoids a\n * megamorphic read, and in JIT there's a chicken-and-egg problem where the NgModule may not be\n * fully resolved when it's registered.\n *\n * @codeGenApi\n */\nfunction registerNgModuleType(ngModuleType, id) {\n    const existing = modules.get(id) || null;\n    assertSameOrNotExisting(id, existing, ngModuleType);\n    modules.set(id, ngModuleType);\n}\nfunction clearModulesForTest() {\n    modules.clear();\n}\nfunction getRegisteredNgModuleType(id) {\n    return modules.get(id);\n}\n/**\n * Control whether the NgModule registration system enforces that each NgModule type registered has\n * a unique id.\n *\n * This is useful for testing as the NgModule registry cannot be properly reset between tests with\n * Angular's current API.\n */\nfunction setAllowDuplicateNgModuleIdsForTest(allowDuplicates) {\n    checkForDuplicateNgModules = !allowDuplicates;\n}\n\n/**\n * Defines a schema that allows an NgModule to contain the following:\n * - Non-Angular elements named with dash case (`-`).\n * - Element properties named with dash case (`-`).\n * Dash case is the naming convention for custom elements.\n *\n * @publicApi\n */\nconst CUSTOM_ELEMENTS_SCHEMA = {\n    name: 'custom-elements'\n};\n/**\n * Defines a schema that allows any property on any element.\n *\n * This schema allows you to ignore the errors related to any unknown elements or properties in a\n * template. The usage of this schema is generally discouraged because it prevents useful validation\n * and may hide real errors in your template. Consider using the `CUSTOM_ELEMENTS_SCHEMA` instead.\n *\n * @publicApi\n */\nconst NO_ERRORS_SCHEMA = {\n    name: 'no-errors-schema'\n};\n\nlet shouldThrowErrorOnUnknownElement = false;\n/**\n * Sets a strict mode for JIT-compiled components to throw an error on unknown elements,\n * instead of just logging the error.\n * (for AOT-compiled ones this check happens at build time).\n */\nfunction ɵsetUnknownElementStrictMode(shouldThrow) {\n    shouldThrowErrorOnUnknownElement = shouldThrow;\n}\n/**\n * Gets the current value of the strict mode.\n */\nfunction ɵgetUnknownElementStrictMode() {\n    return shouldThrowErrorOnUnknownElement;\n}\nlet shouldThrowErrorOnUnknownProperty = false;\n/**\n * Sets a strict mode for JIT-compiled components to throw an error on unknown properties,\n * instead of just logging the error.\n * (for AOT-compiled ones this check happens at build time).\n */\nfunction ɵsetUnknownPropertyStrictMode(shouldThrow) {\n    shouldThrowErrorOnUnknownProperty = shouldThrow;\n}\n/**\n * Gets the current value of the strict mode.\n */\nfunction ɵgetUnknownPropertyStrictMode() {\n    return shouldThrowErrorOnUnknownProperty;\n}\n/**\n * Validates that the element is known at runtime and produces\n * an error if it's not the case.\n * This check is relevant for JIT-compiled components (for AOT-compiled\n * ones this check happens at build time).\n *\n * The element is considered known if either:\n * - it's a known HTML element\n * - it's a known custom element\n * - the element matches any directive\n * - the element is allowed by one of the schemas\n *\n * @param element Element to validate\n * @param lView An `LView` that represents a current component that is being rendered\n * @param tagName Name of the tag to check\n * @param schemas Array of schemas\n * @param hasDirectives Boolean indicating that the element matches any directive\n */\nfunction validateElementIsKnown(element, lView, tagName, schemas, hasDirectives) {\n    // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT\n    // mode where this check happens at compile time. In JIT mode, `schemas` is always present and\n    // defined as an array (as an empty array in case `schemas` field is not defined) and we should\n    // execute the check below.\n    if (schemas === null)\n        return;\n    // If the element matches any directive, it's considered as valid.\n    if (!hasDirectives && tagName !== null) {\n        // The element is unknown if it's an instance of HTMLUnknownElement, or it isn't registered\n        // as a custom element. Note that unknown elements with a dash in their name won't be instances\n        // of HTMLUnknownElement in browsers that support web components.\n        const isUnknown = \n        // Note that we can't check for `typeof HTMLUnknownElement === 'function'` because\n        // Domino doesn't expose HTMLUnknownElement globally.\n        (typeof HTMLUnknownElement !== 'undefined' && HTMLUnknownElement &&\n            element instanceof HTMLUnknownElement) ||\n            (typeof customElements !== 'undefined' && tagName.indexOf('-') > -1 &&\n                !customElements.get(tagName));\n        if (isUnknown && !matchingSchemas(schemas, tagName)) {\n            const isHostStandalone = isHostComponentStandalone(lView);\n            const templateLocation = getTemplateLocationDetails(lView);\n            const schemas = `'${isHostStandalone ? '@Component' : '@NgModule'}.schemas'`;\n            let message = `'${tagName}' is not a known element${templateLocation}:\\n`;\n            message += `1. If '${tagName}' is an Angular component, then verify that it is ${isHostStandalone ? 'included in the \\'@Component.imports\\' of this component' :\n                'a part of an @NgModule where this component is declared'}.\\n`;\n            if (tagName && tagName.indexOf('-') > -1) {\n                message +=\n                    `2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the ${schemas} of this component to suppress this message.`;\n            }\n            else {\n                message +=\n                    `2. To allow any element add 'NO_ERRORS_SCHEMA' to the ${schemas} of this component.`;\n            }\n            if (shouldThrowErrorOnUnknownElement) {\n                throw new RuntimeError(304 /* RuntimeErrorCode.UNKNOWN_ELEMENT */, message);\n            }\n            else {\n                console.error(formatRuntimeError(304 /* RuntimeErrorCode.UNKNOWN_ELEMENT */, message));\n            }\n        }\n    }\n}\n/**\n * Validates that the property of the element is known at runtime and returns\n * false if it's not the case.\n * This check is relevant for JIT-compiled components (for AOT-compiled\n * ones this check happens at build time).\n *\n * The property is considered known if either:\n * - it's a known property of the element\n * - the element is allowed by one of the schemas\n * - the property is used for animations\n *\n * @param element Element to validate\n * @param propName Name of the property to check\n * @param tagName Name of the tag hosting the property\n * @param schemas Array of schemas\n */\nfunction isPropertyValid(element, propName, tagName, schemas) {\n    // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT\n    // mode where this check happens at compile time. In JIT mode, `schemas` is always present and\n    // defined as an array (as an empty array in case `schemas` field is not defined) and we should\n    // execute the check below.\n    if (schemas === null)\n        return true;\n    // The property is considered valid if the element matches the schema, it exists on the element,\n    // or it is synthetic.\n    if (matchingSchemas(schemas, tagName) || propName in element || isAnimationProp(propName)) {\n        return true;\n    }\n    // Note: `typeof Node` returns 'function' in most browsers, but is undefined with domino.\n    return typeof Node === 'undefined' || Node === null || !(element instanceof Node);\n}\n/**\n * Logs or throws an error that a property is not supported on an element.\n *\n * @param propName Name of the invalid property\n * @param tagName Name of the tag hosting the property\n * @param nodeType Type of the node hosting the property\n * @param lView An `LView` that represents a current component\n */\nfunction handleUnknownPropertyError(propName, tagName, nodeType, lView) {\n    // Special-case a situation when a structural directive is applied to\n    // an `<ng-template>` element, for example: `<ng-template *ngIf=\"true\">`.\n    // In this case the compiler generates the `ɵɵtemplate` instruction with\n    // the `null` as the tagName. The directive matching logic at runtime relies\n    // on this effect (see `isInlineTemplate`), thus using the 'ng-template' as\n    // a default value of the `tNode.value` is not feasible at this moment.\n    if (!tagName && nodeType === 4 /* TNodeType.Container */) {\n        tagName = 'ng-template';\n    }\n    const isHostStandalone = isHostComponentStandalone(lView);\n    const templateLocation = getTemplateLocationDetails(lView);\n    let message = `Can't bind to '${propName}' since it isn't a known property of '${tagName}'${templateLocation}.`;\n    const schemas = `'${isHostStandalone ? '@Component' : '@NgModule'}.schemas'`;\n    const importLocation = isHostStandalone ?\n        'included in the \\'@Component.imports\\' of this component' :\n        'a part of an @NgModule where this component is declared';\n    if (KNOWN_CONTROL_FLOW_DIRECTIVES.has(propName)) {\n        // Most likely this is a control flow directive (such as `*ngIf`) used in\n        // a template, but the directive or the `CommonModule` is not imported.\n        const correspondingImport = KNOWN_CONTROL_FLOW_DIRECTIVES.get(propName);\n        message += `\\nIf the '${propName}' is an Angular control flow directive, ` +\n            `please make sure that either the '${correspondingImport}' directive or the 'CommonModule' is ${importLocation}.`;\n    }\n    else {\n        // May be an Angular component, which is not imported/declared?\n        message += `\\n1. If '${tagName}' is an Angular component and it has the ` +\n            `'${propName}' input, then verify that it is ${importLocation}.`;\n        // May be a Web Component?\n        if (tagName && tagName.indexOf('-') > -1) {\n            message += `\\n2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' ` +\n                `to the ${schemas} of this component to suppress this message.`;\n            message += `\\n3. To allow any property add 'NO_ERRORS_SCHEMA' to ` +\n                `the ${schemas} of this component.`;\n        }\n        else {\n            // If it's expected, the error can be suppressed by the `NO_ERRORS_SCHEMA` schema.\n            message += `\\n2. To allow any property add 'NO_ERRORS_SCHEMA' to ` +\n                `the ${schemas} of this component.`;\n        }\n    }\n    reportUnknownPropertyError(message);\n}\nfunction reportUnknownPropertyError(message) {\n    if (shouldThrowErrorOnUnknownProperty) {\n        throw new RuntimeError(303 /* RuntimeErrorCode.UNKNOWN_BINDING */, message);\n    }\n    else {\n        console.error(formatRuntimeError(303 /* RuntimeErrorCode.UNKNOWN_BINDING */, message));\n    }\n}\n/**\n * WARNING: this is a **dev-mode only** function (thus should always be guarded by the `ngDevMode`)\n * and must **not** be used in production bundles. The function makes megamorphic reads, which might\n * be too slow for production mode and also it relies on the constructor function being available.\n *\n * Gets a reference to the host component def (where a current component is declared).\n *\n * @param lView An `LView` that represents a current component that is being rendered.\n */\nfunction getDeclarationComponentDef(lView) {\n    !ngDevMode && throwError('Must never be called in production mode');\n    const declarationLView = lView[DECLARATION_COMPONENT_VIEW];\n    const context = declarationLView[CONTEXT];\n    // Unable to obtain a context.\n    if (!context)\n        return null;\n    return context.constructor ? getComponentDef(context.constructor) : null;\n}\n/**\n * WARNING: this is a **dev-mode only** function (thus should always be guarded by the `ngDevMode`)\n * and must **not** be used in production bundles. The function makes megamorphic reads, which might\n * be too slow for production mode.\n *\n * Checks if the current component is declared inside of a standalone component template.\n *\n * @param lView An `LView` that represents a current component that is being rendered.\n */\nfunction isHostComponentStandalone(lView) {\n    !ngDevMode && throwError('Must never be called in production mode');\n    const componentDef = getDeclarationComponentDef(lView);\n    // Treat host component as non-standalone if we can't obtain the def.\n    return !!componentDef?.standalone;\n}\n/**\n * WARNING: this is a **dev-mode only** function (thus should always be guarded by the `ngDevMode`)\n * and must **not** be used in production bundles. The function makes megamorphic reads, which might\n * be too slow for production mode.\n *\n * Constructs a string describing the location of the host component template. The function is used\n * in dev mode to produce error messages.\n *\n * @param lView An `LView` that represents a current component that is being rendered.\n */\nfunction getTemplateLocationDetails(lView) {\n    !ngDevMode && throwError('Must never be called in production mode');\n    const hostComponentDef = getDeclarationComponentDef(lView);\n    const componentClassName = hostComponentDef?.type?.name;\n    return componentClassName ? ` (used in the '${componentClassName}' component template)` : '';\n}\n/**\n * The set of known control flow directives and their corresponding imports.\n * We use this set to produce a more precises error message with a note\n * that the `CommonModule` should also be included.\n */\nconst KNOWN_CONTROL_FLOW_DIRECTIVES = new Map([\n    ['ngIf', 'NgIf'], ['ngFor', 'NgFor'], ['ngSwitchCase', 'NgSwitchCase'],\n    ['ngSwitchDefault', 'NgSwitchDefault']\n]);\n/**\n * Returns true if the tag name is allowed by specified schemas.\n * @param schemas Array of schemas\n * @param tagName Name of the tag\n */\nfunction matchingSchemas(schemas, tagName) {\n    if (schemas !== null) {\n        for (let i = 0; i < schemas.length; i++) {\n            const schema = schemas[i];\n            if (schema === NO_ERRORS_SCHEMA ||\n                schema === CUSTOM_ELEMENTS_SCHEMA && tagName && tagName.indexOf('-') > -1) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * The name of an attribute that can be added to the hydration boundary node\n * (component host node) to disable hydration for the content within that boundary.\n */\nconst SKIP_HYDRATION_ATTR_NAME = 'ngSkipHydration';\n/** Lowercase name of the `ngSkipHydration` attribute used for case-insensitive comparisons. */\nconst SKIP_HYDRATION_ATTR_NAME_LOWER_CASE = 'ngskiphydration';\n/**\n * Helper function to check if a given TNode has the 'ngSkipHydration' attribute.\n */\nfunction hasSkipHydrationAttrOnTNode(tNode) {\n    const attrs = tNode.mergedAttrs;\n    if (attrs === null)\n        return false;\n    // only ever look at the attribute name and skip the values\n    for (let i = 0; i < attrs.length; i += 2) {\n        const value = attrs[i];\n        // This is a marker, which means that the static attributes section is over,\n        // so we can exit early.\n        if (typeof value === 'number')\n            return false;\n        if (typeof value === 'string' && value.toLowerCase() === SKIP_HYDRATION_ATTR_NAME_LOWER_CASE) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Helper function to check if a given RElement has the 'ngSkipHydration' attribute.\n */\nfunction hasSkipHydrationAttrOnRElement(rNode) {\n    return rNode.hasAttribute(SKIP_HYDRATION_ATTR_NAME);\n}\n/**\n * Checks whether a TNode has a flag to indicate that it's a part of\n * a skip hydration block.\n */\nfunction hasInSkipHydrationBlockFlag(tNode) {\n    return (tNode.flags & 128 /* TNodeFlags.inSkipHydrationBlock */) === 128 /* TNodeFlags.inSkipHydrationBlock */;\n}\n/**\n * Helper function that determines if a given node is within a skip hydration block\n * by navigating up the TNode tree to see if any parent nodes have skip hydration\n * attribute.\n */\nfunction isInSkipHydrationBlock(tNode) {\n    if (hasInSkipHydrationBlockFlag(tNode)) {\n        return true;\n    }\n    let currentTNode = tNode.parent;\n    while (currentTNode) {\n        if (hasInSkipHydrationBlockFlag(tNode) || hasSkipHydrationAttrOnTNode(currentTNode)) {\n            return true;\n        }\n        currentTNode = currentTNode.parent;\n    }\n    return false;\n}\n\n/**\n * Flags for renderer-specific style modifiers.\n * @publicApi\n */\nvar RendererStyleFlags2;\n(function (RendererStyleFlags2) {\n    // TODO(misko): This needs to be refactored into a separate file so that it can be imported from\n    // `node_manipulation.ts` Currently doing the import cause resolution order to change and fails\n    // the tests. The work around is to have hard coded value in `node_manipulation.ts` for now.\n    /**\n     * Marks a style as important.\n     */\n    RendererStyleFlags2[RendererStyleFlags2[\"Important\"] = 1] = \"Important\";\n    /**\n     * Marks a style as using dash case naming (this-is-dash-case).\n     */\n    RendererStyleFlags2[RendererStyleFlags2[\"DashCase\"] = 2] = \"DashCase\";\n})(RendererStyleFlags2 || (RendererStyleFlags2 = {}));\n\n/**\n * Disallowed strings in the comment.\n *\n * see: https://html.spec.whatwg.org/multipage/syntax.html#comments\n */\nconst COMMENT_DISALLOWED = /^>|^->|<!--|-->|--!>|<!-$/g;\n/**\n * Delimiter in the disallowed strings which needs to be wrapped with zero with character.\n */\nconst COMMENT_DELIMITER = /(<|>)/g;\nconst COMMENT_DELIMITER_ESCAPED = '\\u200B$1\\u200B';\n/**\n * Escape the content of comment strings so that it can be safely inserted into a comment node.\n *\n * The issue is that HTML does not specify any way to escape comment end text inside the comment.\n * Consider: `<!-- The way you close a comment is with \">\", and \"->\" at the beginning or by \"-->\" or\n * \"--!>\" at the end. -->`. Above the `\"-->\"` is meant to be text not an end to the comment. This\n * can be created programmatically through DOM APIs. (`<!--` are also disallowed.)\n *\n * see: https://html.spec.whatwg.org/multipage/syntax.html#comments\n *\n * ```\n * div.innerHTML = div.innerHTML\n * ```\n *\n * One would expect that the above code would be safe to do, but it turns out that because comment\n * text is not escaped, the comment may contain text which will prematurely close the comment\n * opening up the application for XSS attack. (In SSR we programmatically create comment nodes which\n * may contain such text and expect them to be safe.)\n *\n * This function escapes the comment text by looking for comment delimiters (`<` and `>`) and\n * surrounding them with `_>_` where the `_` is a zero width space `\\u200B`. The result is that if a\n * comment contains any of the comment start/end delimiters (such as `<!--`, `-->` or `--!>`) the\n * text it will render normally but it will not cause the HTML parser to close/open the comment.\n *\n * @param value text to make safe for comment node by escaping the comment open/close character\n *     sequence.\n */\nfunction escapeCommentText(value) {\n    return value.replace(COMMENT_DISALLOWED, (text) => text.replace(COMMENT_DELIMITER, COMMENT_DELIMITER_ESCAPED));\n}\n\n// Keeps track of the currently-active LViews.\nconst TRACKED_LVIEWS = new Map();\n// Used for generating unique IDs for LViews.\nlet uniqueIdCounter = 0;\n/** Gets a unique ID that can be assigned to an LView. */\nfunction getUniqueLViewId() {\n    return uniqueIdCounter++;\n}\n/** Starts tracking an LView. */\nfunction registerLView(lView) {\n    ngDevMode && assertNumber(lView[ID], 'LView must have an ID in order to be registered');\n    TRACKED_LVIEWS.set(lView[ID], lView);\n}\n/** Gets an LView by its unique ID. */\nfunction getLViewById(id) {\n    ngDevMode && assertNumber(id, 'ID used for LView lookup must be a number');\n    return TRACKED_LVIEWS.get(id) || null;\n}\n/** Stops tracking an LView. */\nfunction unregisterLView(lView) {\n    ngDevMode && assertNumber(lView[ID], 'Cannot stop tracking an LView that does not have an ID');\n    TRACKED_LVIEWS.delete(lView[ID]);\n}\n\n/**\n * The internal view context which is specific to a given DOM element, directive or\n * component instance. Each value in here (besides the LView and element node details)\n * can be present, null or undefined. If undefined then it implies the value has not been\n * looked up yet, otherwise, if null, then a lookup was executed and nothing was found.\n *\n * Each value will get filled when the respective value is examined within the getContext\n * function. The component, element and each directive instance will share the same instance\n * of the context.\n */\nclass LContext {\n    /** Component's parent view data. */\n    get lView() {\n        return getLViewById(this.lViewId);\n    }\n    constructor(\n    /**\n     * ID of the component's parent view data.\n     */\n    lViewId, \n    /**\n     * The index instance of the node.\n     */\n    nodeIndex, \n    /**\n     * The instance of the DOM node that is attached to the lNode.\n     */\n    native) {\n        this.lViewId = lViewId;\n        this.nodeIndex = nodeIndex;\n        this.native = native;\n    }\n}\n\n/**\n * Returns the matching `LContext` data for a given DOM node, directive or component instance.\n *\n * This function will examine the provided DOM element, component, or directive instance\\'s\n * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched\n * value will be that of the newly created `LContext`.\n *\n * If the monkey-patched value is the `LView` instance then the context value for that\n * target will be created and the monkey-patch reference will be updated. Therefore when this\n * function is called it may mutate the provided element\\'s, component\\'s or any of the associated\n * directive\\'s monkey-patch values.\n *\n * If the monkey-patch value is not detected then the code will walk up the DOM until an element\n * is found which contains a monkey-patch reference. When that occurs then the provided element\n * will be updated with a new context (which is then returned). If the monkey-patch value is not\n * detected for a component/directive instance then it will throw an error (all components and\n * directives should be automatically monkey-patched by ivy).\n *\n * @param target Component, Directive or DOM Node.\n */\nfunction getLContext(target) {\n    let mpValue = readPatchedData(target);\n    if (mpValue) {\n        // only when it's an array is it considered an LView instance\n        // ... otherwise it's an already constructed LContext instance\n        if (isLView(mpValue)) {\n            const lView = mpValue;\n            let nodeIndex;\n            let component = undefined;\n            let directives = undefined;\n            if (isComponentInstance(target)) {\n                nodeIndex = findViaComponent(lView, target);\n                if (nodeIndex == -1) {\n                    throw new Error('The provided component was not found in the application');\n                }\n                component = target;\n            }\n            else if (isDirectiveInstance(target)) {\n                nodeIndex = findViaDirective(lView, target);\n                if (nodeIndex == -1) {\n                    throw new Error('The provided directive was not found in the application');\n                }\n                directives = getDirectivesAtNodeIndex(nodeIndex, lView);\n            }\n            else {\n                nodeIndex = findViaNativeElement(lView, target);\n                if (nodeIndex == -1) {\n                    return null;\n                }\n            }\n            // the goal is not to fill the entire context full of data because the lookups\n            // are expensive. Instead, only the target data (the element, component, container, ICU\n            // expression or directive details) are filled into the context. If called multiple times\n            // with different target values then the missing target data will be filled in.\n            const native = unwrapRNode(lView[nodeIndex]);\n            const existingCtx = readPatchedData(native);\n            const context = (existingCtx && !Array.isArray(existingCtx)) ?\n                existingCtx :\n                createLContext(lView, nodeIndex, native);\n            // only when the component has been discovered then update the monkey-patch\n            if (component && context.component === undefined) {\n                context.component = component;\n                attachPatchData(context.component, context);\n            }\n            // only when the directives have been discovered then update the monkey-patch\n            if (directives && context.directives === undefined) {\n                context.directives = directives;\n                for (let i = 0; i < directives.length; i++) {\n                    attachPatchData(directives[i], context);\n                }\n            }\n            attachPatchData(context.native, context);\n            mpValue = context;\n        }\n    }\n    else {\n        const rElement = target;\n        ngDevMode && assertDomNode(rElement);\n        // if the context is not found then we need to traverse upwards up the DOM\n        // to find the nearest element that has already been monkey patched with data\n        let parent = rElement;\n        while (parent = parent.parentNode) {\n            const parentContext = readPatchedData(parent);\n            if (parentContext) {\n                const lView = Array.isArray(parentContext) ? parentContext : parentContext.lView;\n                // the edge of the app was also reached here through another means\n                // (maybe because the DOM was changed manually).\n                if (!lView) {\n                    return null;\n                }\n                const index = findViaNativeElement(lView, rElement);\n                if (index >= 0) {\n                    const native = unwrapRNode(lView[index]);\n                    const context = createLContext(lView, index, native);\n                    attachPatchData(native, context);\n                    mpValue = context;\n                    break;\n                }\n            }\n        }\n    }\n    return mpValue || null;\n}\n/**\n * Creates an empty instance of a `LContext` context\n */\nfunction createLContext(lView, nodeIndex, native) {\n    return new LContext(lView[ID], nodeIndex, native);\n}\n/**\n * Takes a component instance and returns the view for that component.\n *\n * @param componentInstance\n * @returns The component's view\n */\nfunction getComponentViewByInstance(componentInstance) {\n    let patchedData = readPatchedData(componentInstance);\n    let lView;\n    if (isLView(patchedData)) {\n        const contextLView = patchedData;\n        const nodeIndex = findViaComponent(contextLView, componentInstance);\n        lView = getComponentLViewByIndex(nodeIndex, contextLView);\n        const context = createLContext(contextLView, nodeIndex, lView[HOST]);\n        context.component = componentInstance;\n        attachPatchData(componentInstance, context);\n        attachPatchData(context.native, context);\n    }\n    else {\n        const context = patchedData;\n        const contextLView = context.lView;\n        ngDevMode && assertLView(contextLView);\n        lView = getComponentLViewByIndex(context.nodeIndex, contextLView);\n    }\n    return lView;\n}\n/**\n * This property will be monkey-patched on elements, components and directives.\n */\nconst MONKEY_PATCH_KEY_NAME = '__ngContext__';\n/**\n * Assigns the given data to the given target (which could be a component,\n * directive or DOM node instance) using monkey-patching.\n */\nfunction attachPatchData(target, data) {\n    ngDevMode && assertDefined(target, 'Target expected');\n    // Only attach the ID of the view in order to avoid memory leaks (see #41047). We only do this\n    // for `LView`, because we have control over when an `LView` is created and destroyed, whereas\n    // we can't know when to remove an `LContext`.\n    if (isLView(data)) {\n        target[MONKEY_PATCH_KEY_NAME] = data[ID];\n        registerLView(data);\n    }\n    else {\n        target[MONKEY_PATCH_KEY_NAME] = data;\n    }\n}\n/**\n * Returns the monkey-patch value data present on the target (which could be\n * a component, directive or a DOM node).\n */\nfunction readPatchedData(target) {\n    ngDevMode && assertDefined(target, 'Target expected');\n    const data = target[MONKEY_PATCH_KEY_NAME];\n    return (typeof data === 'number') ? getLViewById(data) : data || null;\n}\nfunction readPatchedLView(target) {\n    const value = readPatchedData(target);\n    if (value) {\n        return (isLView(value) ? value : value.lView);\n    }\n    return null;\n}\nfunction isComponentInstance(instance) {\n    return instance && instance.constructor && instance.constructor.ɵcmp;\n}\nfunction isDirectiveInstance(instance) {\n    return instance && instance.constructor && instance.constructor.ɵdir;\n}\n/**\n * Locates the element within the given LView and returns the matching index\n */\nfunction findViaNativeElement(lView, target) {\n    const tView = lView[TVIEW];\n    for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {\n        if (unwrapRNode(lView[i]) === target) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Locates the next tNode (child, sibling or parent).\n */\nfunction traverseNextElement(tNode) {\n    if (tNode.child) {\n        return tNode.child;\n    }\n    else if (tNode.next) {\n        return tNode.next;\n    }\n    else {\n        // Let's take the following template: <div><span>text</span></div><component/>\n        // After checking the text node, we need to find the next parent that has a \"next\" TNode,\n        // in this case the parent `div`, so that we can find the component.\n        while (tNode.parent && !tNode.parent.next) {\n            tNode = tNode.parent;\n        }\n        return tNode.parent && tNode.parent.next;\n    }\n}\n/**\n * Locates the component within the given LView and returns the matching index\n */\nfunction findViaComponent(lView, componentInstance) {\n    const componentIndices = lView[TVIEW].components;\n    if (componentIndices) {\n        for (let i = 0; i < componentIndices.length; i++) {\n            const elementComponentIndex = componentIndices[i];\n            const componentView = getComponentLViewByIndex(elementComponentIndex, lView);\n            if (componentView[CONTEXT] === componentInstance) {\n                return elementComponentIndex;\n            }\n        }\n    }\n    else {\n        const rootComponentView = getComponentLViewByIndex(HEADER_OFFSET, lView);\n        const rootComponent = rootComponentView[CONTEXT];\n        if (rootComponent === componentInstance) {\n            // we are dealing with the root element here therefore we know that the\n            // element is the very first element after the HEADER data in the lView\n            return HEADER_OFFSET;\n        }\n    }\n    return -1;\n}\n/**\n * Locates the directive within the given LView and returns the matching index\n */\nfunction findViaDirective(lView, directiveInstance) {\n    // if a directive is monkey patched then it will (by default)\n    // have a reference to the LView of the current view. The\n    // element bound to the directive being search lives somewhere\n    // in the view data. We loop through the nodes and check their\n    // list of directives for the instance.\n    let tNode = lView[TVIEW].firstChild;\n    while (tNode) {\n        const directiveIndexStart = tNode.directiveStart;\n        const directiveIndexEnd = tNode.directiveEnd;\n        for (let i = directiveIndexStart; i < directiveIndexEnd; i++) {\n            if (lView[i] === directiveInstance) {\n                return tNode.index;\n            }\n        }\n        tNode = traverseNextElement(tNode);\n    }\n    return -1;\n}\n/**\n * Returns a list of directives applied to a node at a specific index. The list includes\n * directives matched by selector and any host directives, but it excludes components.\n * Use `getComponentAtNodeIndex` to find the component applied to a node.\n *\n * @param nodeIndex The node index\n * @param lView The target view data\n */\nfunction getDirectivesAtNodeIndex(nodeIndex, lView) {\n    const tNode = lView[TVIEW].data[nodeIndex];\n    if (tNode.directiveStart === 0)\n        return EMPTY_ARRAY;\n    const results = [];\n    for (let i = tNode.directiveStart; i < tNode.directiveEnd; i++) {\n        const directiveInstance = lView[i];\n        if (!isComponentInstance(directiveInstance)) {\n            results.push(directiveInstance);\n        }\n    }\n    return results;\n}\nfunction getComponentAtNodeIndex(nodeIndex, lView) {\n    const tNode = lView[TVIEW].data[nodeIndex];\n    const { directiveStart, componentOffset } = tNode;\n    return componentOffset > -1 ? lView[directiveStart + componentOffset] : null;\n}\n/**\n * Returns a map of local references (local reference name => element or directive instance) that\n * exist on a given element.\n */\nfunction discoverLocalRefs(lView, nodeIndex) {\n    const tNode = lView[TVIEW].data[nodeIndex];\n    if (tNode && tNode.localNames) {\n        const result = {};\n        let localIndex = tNode.index + 1;\n        for (let i = 0; i < tNode.localNames.length; i += 2) {\n            result[tNode.localNames[i]] = lView[localIndex];\n            localIndex++;\n        }\n        return result;\n    }\n    return null;\n}\n\nlet _icuContainerIterate;\n/**\n * Iterator which provides ability to visit all of the `TIcuContainerNode` root `RNode`s.\n */\nfunction icuContainerIterate(tIcuContainerNode, lView) {\n    return _icuContainerIterate(tIcuContainerNode, lView);\n}\n/**\n * Ensures that `IcuContainerVisitor`'s implementation is present.\n *\n * This function is invoked when i18n instruction comes across an ICU. The purpose is to allow the\n * bundler to tree shake ICU logic and only load it if ICU instruction is executed.\n */\nfunction ensureIcuContainerVisitorLoaded(loader) {\n    if (_icuContainerIterate === undefined) {\n        // Do not inline this function. We want to keep `ensureIcuContainerVisitorLoaded` light, so it\n        // can be inlined into call-site.\n        _icuContainerIterate = loader();\n    }\n}\n\n/**\n * Gets the parent LView of the passed LView, if the PARENT is an LContainer, will get the parent of\n * that LContainer, which is an LView\n * @param lView the lView whose parent to get\n */\nfunction getLViewParent(lView) {\n    ngDevMode && assertLView(lView);\n    const parent = lView[PARENT];\n    return isLContainer(parent) ? parent[PARENT] : parent;\n}\n/**\n * Retrieve the root view from any component or `LView` by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param componentOrLView any component or `LView`\n */\nfunction getRootView(componentOrLView) {\n    ngDevMode && assertDefined(componentOrLView, 'component');\n    let lView = isLView(componentOrLView) ? componentOrLView : readPatchedLView(componentOrLView);\n    while (lView && !(lView[FLAGS] & 512 /* LViewFlags.IsRoot */)) {\n        lView = getLViewParent(lView);\n    }\n    ngDevMode && assertLView(lView);\n    return lView;\n}\n/**\n * Returns the context information associated with the application where the target is situated. It\n * does this by walking the parent views until it gets to the root view, then getting the context\n * off of that.\n *\n * @param viewOrComponent the `LView` or component to get the root context for.\n */\nfunction getRootContext(viewOrComponent) {\n    const rootView = getRootView(viewOrComponent);\n    ngDevMode &&\n        assertDefined(rootView[CONTEXT], 'Root view has no context. Perhaps it is disconnected?');\n    return rootView[CONTEXT];\n}\n/**\n * Gets the first `LContainer` in the LView or `null` if none exists.\n */\nfunction getFirstLContainer(lView) {\n    return getNearestLContainer(lView[CHILD_HEAD]);\n}\n/**\n * Gets the next `LContainer` that is a sibling of the given container.\n */\nfunction getNextLContainer(container) {\n    return getNearestLContainer(container[NEXT]);\n}\nfunction getNearestLContainer(viewOrContainer) {\n    while (viewOrContainer !== null && !isLContainer(viewOrContainer)) {\n        viewOrContainer = viewOrContainer[NEXT];\n    }\n    return viewOrContainer;\n}\n\n/**\n * NOTE: for performance reasons, the possible actions are inlined within the function instead of\n * being passed as an argument.\n */\nfunction applyToElementOrContainer(action, renderer, parent, lNodeToHandle, beforeNode) {\n    // If this slot was allocated for a text node dynamically created by i18n, the text node itself\n    // won't be created until i18nApply() in the update block, so this node should be skipped.\n    // For more info, see \"ICU expressions should work inside an ngTemplateOutlet inside an ngFor\"\n    // in `i18n_spec.ts`.\n    if (lNodeToHandle != null) {\n        let lContainer;\n        let isComponent = false;\n        // We are expecting an RNode, but in the case of a component or LContainer the `RNode` is\n        // wrapped in an array which needs to be unwrapped. We need to know if it is a component and if\n        // it has LContainer so that we can process all of those cases appropriately.\n        if (isLContainer(lNodeToHandle)) {\n            lContainer = lNodeToHandle;\n        }\n        else if (isLView(lNodeToHandle)) {\n            isComponent = true;\n            ngDevMode && assertDefined(lNodeToHandle[HOST], 'HOST must be defined for a component LView');\n            lNodeToHandle = lNodeToHandle[HOST];\n        }\n        const rNode = unwrapRNode(lNodeToHandle);\n        if (action === 0 /* WalkTNodeTreeAction.Create */ && parent !== null) {\n            if (beforeNode == null) {\n                nativeAppendChild(renderer, parent, rNode);\n            }\n            else {\n                nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);\n            }\n        }\n        else if (action === 1 /* WalkTNodeTreeAction.Insert */ && parent !== null) {\n            nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);\n        }\n        else if (action === 2 /* WalkTNodeTreeAction.Detach */) {\n            nativeRemoveNode(renderer, rNode, isComponent);\n        }\n        else if (action === 3 /* WalkTNodeTreeAction.Destroy */) {\n            ngDevMode && ngDevMode.rendererDestroyNode++;\n            renderer.destroyNode(rNode);\n        }\n        if (lContainer != null) {\n            applyContainer(renderer, action, lContainer, parent, beforeNode);\n        }\n    }\n}\nfunction createTextNode(renderer, value) {\n    ngDevMode && ngDevMode.rendererCreateTextNode++;\n    ngDevMode && ngDevMode.rendererSetText++;\n    return renderer.createText(value);\n}\nfunction updateTextNode(renderer, rNode, value) {\n    ngDevMode && ngDevMode.rendererSetText++;\n    renderer.setValue(rNode, value);\n}\nfunction createCommentNode(renderer, value) {\n    ngDevMode && ngDevMode.rendererCreateComment++;\n    return renderer.createComment(escapeCommentText(value));\n}\n/**\n * Creates a native element from a tag name, using a renderer.\n * @param renderer A renderer to use\n * @param name the tag name\n * @param namespace Optional namespace for element.\n * @returns the element created\n */\nfunction createElementNode(renderer, name, namespace) {\n    ngDevMode && ngDevMode.rendererCreateElement++;\n    return renderer.createElement(name, namespace);\n}\n/**\n * Removes all DOM elements associated with a view.\n *\n * Because some root nodes of the view may be containers, we sometimes need\n * to propagate deeply into the nested containers to remove all elements in the\n * views beneath it.\n *\n * @param tView The `TView' of the `LView` from which elements should be added or removed\n * @param lView The view from which elements should be added or removed\n */\nfunction removeViewFromDOM(tView, lView) {\n    const renderer = lView[RENDERER];\n    applyView(tView, lView, renderer, 2 /* WalkTNodeTreeAction.Detach */, null, null);\n    lView[HOST] = null;\n    lView[T_HOST] = null;\n}\n/**\n * Adds all DOM elements associated with a view.\n *\n * Because some root nodes of the view may be containers, we sometimes need\n * to propagate deeply into the nested containers to add all elements in the\n * views beneath it.\n *\n * @param tView The `TView' of the `LView` from which elements should be added or removed\n * @param parentTNode The `TNode` where the `LView` should be attached to.\n * @param renderer Current renderer to use for DOM manipulations.\n * @param lView The view from which elements should be added or removed\n * @param parentNativeNode The parent `RElement` where it should be inserted into.\n * @param beforeNode The node before which elements should be added, if insert mode\n */\nfunction addViewToDOM(tView, parentTNode, renderer, lView, parentNativeNode, beforeNode) {\n    lView[HOST] = parentNativeNode;\n    lView[T_HOST] = parentTNode;\n    applyView(tView, lView, renderer, 1 /* WalkTNodeTreeAction.Insert */, parentNativeNode, beforeNode);\n}\n/**\n * Detach a `LView` from the DOM by detaching its nodes.\n *\n * @param tView The `TView' of the `LView` to be detached\n * @param lView the `LView` to be detached.\n */\nfunction detachViewFromDOM(tView, lView) {\n    applyView(tView, lView, lView[RENDERER], 2 /* WalkTNodeTreeAction.Detach */, null, null);\n}\n/**\n * Traverses down and up the tree of views and containers to remove listeners and\n * call onDestroy callbacks.\n *\n * Notes:\n *  - Because it's used for onDestroy calls, it needs to be bottom-up.\n *  - Must process containers instead of their views to avoid splicing\n *  when views are destroyed and re-added.\n *  - Using a while loop because it's faster than recursion\n *  - Destroy only called on movement to sibling or movement to parent (laterally or up)\n *\n *  @param rootView The view to destroy\n */\nfunction destroyViewTree(rootView) {\n    // If the view has no children, we can clean it up and return early.\n    let lViewOrLContainer = rootView[CHILD_HEAD];\n    if (!lViewOrLContainer) {\n        return cleanUpView(rootView[TVIEW], rootView);\n    }\n    while (lViewOrLContainer) {\n        let next = null;\n        if (isLView(lViewOrLContainer)) {\n            // If LView, traverse down to child.\n            next = lViewOrLContainer[CHILD_HEAD];\n        }\n        else {\n            ngDevMode && assertLContainer(lViewOrLContainer);\n            // If container, traverse down to its first LView.\n            const firstView = lViewOrLContainer[CONTAINER_HEADER_OFFSET];\n            if (firstView)\n                next = firstView;\n        }\n        if (!next) {\n            // Only clean up view when moving to the side or up, as destroy hooks\n            // should be called in order from the bottom up.\n            while (lViewOrLContainer && !lViewOrLContainer[NEXT] && lViewOrLContainer !== rootView) {\n                if (isLView(lViewOrLContainer)) {\n                    cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);\n                }\n                lViewOrLContainer = lViewOrLContainer[PARENT];\n            }\n            if (lViewOrLContainer === null)\n                lViewOrLContainer = rootView;\n            if (isLView(lViewOrLContainer)) {\n                cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);\n            }\n            next = lViewOrLContainer && lViewOrLContainer[NEXT];\n        }\n        lViewOrLContainer = next;\n    }\n}\n/**\n * Inserts a view into a container.\n *\n * This adds the view to the container's array of active views in the correct\n * position. It also adds the view's elements to the DOM if the container isn't a\n * root node of another view (in that case, the view's elements will be added when\n * the container's parent view is added later).\n *\n * @param tView The `TView' of the `LView` to insert\n * @param lView The view to insert\n * @param lContainer The container into which the view should be inserted\n * @param index Which index in the container to insert the child view into\n */\nfunction insertView(tView, lView, lContainer, index) {\n    ngDevMode && assertLView(lView);\n    ngDevMode && assertLContainer(lContainer);\n    const indexInContainer = CONTAINER_HEADER_OFFSET + index;\n    const containerLength = lContainer.length;\n    if (index > 0) {\n        // This is a new view, we need to add it to the children.\n        lContainer[indexInContainer - 1][NEXT] = lView;\n    }\n    if (index < containerLength - CONTAINER_HEADER_OFFSET) {\n        lView[NEXT] = lContainer[indexInContainer];\n        addToArray(lContainer, CONTAINER_HEADER_OFFSET + index, lView);\n    }\n    else {\n        lContainer.push(lView);\n        lView[NEXT] = null;\n    }\n    lView[PARENT] = lContainer;\n    // track views where declaration and insertion points are different\n    const declarationLContainer = lView[DECLARATION_LCONTAINER];\n    if (declarationLContainer !== null && lContainer !== declarationLContainer) {\n        trackMovedView(declarationLContainer, lView);\n    }\n    // notify query that a new view has been added\n    const lQueries = lView[QUERIES];\n    if (lQueries !== null) {\n        lQueries.insertView(tView);\n    }\n    updateAncestorTraversalFlagsOnAttach(lView);\n    // Sets the attached flag\n    lView[FLAGS] |= 128 /* LViewFlags.Attached */;\n}\n/**\n * Track views created from the declaration container (TemplateRef) and inserted into a\n * different LContainer.\n */\nfunction trackMovedView(declarationContainer, lView) {\n    ngDevMode && assertDefined(lView, 'LView required');\n    ngDevMode && assertLContainer(declarationContainer);\n    const movedViews = declarationContainer[MOVED_VIEWS];\n    const insertedLContainer = lView[PARENT];\n    ngDevMode && assertLContainer(insertedLContainer);\n    const insertedComponentLView = insertedLContainer[PARENT][DECLARATION_COMPONENT_VIEW];\n    ngDevMode && assertDefined(insertedComponentLView, 'Missing insertedComponentLView');\n    const declaredComponentLView = lView[DECLARATION_COMPONENT_VIEW];\n    ngDevMode && assertDefined(declaredComponentLView, 'Missing declaredComponentLView');\n    if (declaredComponentLView !== insertedComponentLView) {\n        // At this point the declaration-component is not same as insertion-component; this means that\n        // this is a transplanted view. Mark the declared lView as having transplanted views so that\n        // those views can participate in CD.\n        declarationContainer[FLAGS] |= LContainerFlags.HasTransplantedViews;\n    }\n    if (movedViews === null) {\n        declarationContainer[MOVED_VIEWS] = [lView];\n    }\n    else {\n        movedViews.push(lView);\n    }\n}\nfunction detachMovedView(declarationContainer, lView) {\n    ngDevMode && assertLContainer(declarationContainer);\n    ngDevMode &&\n        assertDefined(declarationContainer[MOVED_VIEWS], 'A projected view should belong to a non-empty projected views collection');\n    const movedViews = declarationContainer[MOVED_VIEWS];\n    const declarationViewIndex = movedViews.indexOf(lView);\n    const insertionLContainer = lView[PARENT];\n    ngDevMode && assertLContainer(insertionLContainer);\n    movedViews.splice(declarationViewIndex, 1);\n}\n/**\n * Detaches a view from a container.\n *\n * This method removes the view from the container's array of active views. It also\n * removes the view's elements from the DOM.\n *\n * @param lContainer The container from which to detach a view\n * @param removeIndex The index of the view to detach\n * @returns Detached LView instance.\n */\nfunction detachView(lContainer, removeIndex) {\n    if (lContainer.length <= CONTAINER_HEADER_OFFSET)\n        return;\n    const indexInContainer = CONTAINER_HEADER_OFFSET + removeIndex;\n    const viewToDetach = lContainer[indexInContainer];\n    if (viewToDetach) {\n        const declarationLContainer = viewToDetach[DECLARATION_LCONTAINER];\n        if (declarationLContainer !== null && declarationLContainer !== lContainer) {\n            detachMovedView(declarationLContainer, viewToDetach);\n        }\n        if (removeIndex > 0) {\n            lContainer[indexInContainer - 1][NEXT] = viewToDetach[NEXT];\n        }\n        const removedLView = removeFromArray(lContainer, CONTAINER_HEADER_OFFSET + removeIndex);\n        removeViewFromDOM(viewToDetach[TVIEW], viewToDetach);\n        // notify query that a view has been removed\n        const lQueries = removedLView[QUERIES];\n        if (lQueries !== null) {\n            lQueries.detachView(removedLView[TVIEW]);\n        }\n        viewToDetach[PARENT] = null;\n        viewToDetach[NEXT] = null;\n        // Unsets the attached flag\n        viewToDetach[FLAGS] &= ~128 /* LViewFlags.Attached */;\n    }\n    return viewToDetach;\n}\n/**\n * A standalone function which destroys an LView,\n * conducting clean up (e.g. removing listeners, calling onDestroys).\n *\n * @param tView The `TView' of the `LView` to be destroyed\n * @param lView The view to be destroyed.\n */\nfunction destroyLView(tView, lView) {\n    if (!(lView[FLAGS] & 256 /* LViewFlags.Destroyed */)) {\n        const renderer = lView[RENDERER];\n        if (renderer.destroyNode) {\n            applyView(tView, lView, renderer, 3 /* WalkTNodeTreeAction.Destroy */, null, null);\n        }\n        destroyViewTree(lView);\n    }\n}\n/**\n * Calls onDestroys hooks for all directives and pipes in a given view and then removes all\n * listeners. Listeners are removed as the last step so events delivered in the onDestroys hooks\n * can be propagated to @Output listeners.\n *\n * @param tView `TView` for the `LView` to clean up.\n * @param lView The LView to clean up\n */\nfunction cleanUpView(tView, lView) {\n    if (!(lView[FLAGS] & 256 /* LViewFlags.Destroyed */)) {\n        // Usually the Attached flag is removed when the view is detached from its parent, however\n        // if it's a root view, the flag won't be unset hence why we're also removing on destroy.\n        lView[FLAGS] &= ~128 /* LViewFlags.Attached */;\n        // Mark the LView as destroyed *before* executing the onDestroy hooks. An onDestroy hook\n        // runs arbitrary user code, which could include its own `viewRef.destroy()` (or similar). If\n        // We don't flag the view as destroyed before the hooks, this could lead to an infinite loop.\n        // This also aligns with the ViewEngine behavior. It also means that the onDestroy hook is\n        // really more of an \"afterDestroy\" hook if you think about it.\n        lView[FLAGS] |= 256 /* LViewFlags.Destroyed */;\n        lView[REACTIVE_TEMPLATE_CONSUMER] && consumerDestroy$1(lView[REACTIVE_TEMPLATE_CONSUMER]);\n        executeOnDestroys(tView, lView);\n        processCleanups(tView, lView);\n        // For component views only, the local renderer is destroyed at clean up time.\n        if (lView[TVIEW].type === 1 /* TViewType.Component */) {\n            ngDevMode && ngDevMode.rendererDestroy++;\n            lView[RENDERER].destroy();\n        }\n        const declarationContainer = lView[DECLARATION_LCONTAINER];\n        // we are dealing with an embedded view that is still inserted into a container\n        if (declarationContainer !== null && isLContainer(lView[PARENT])) {\n            // and this is a projected view\n            if (declarationContainer !== lView[PARENT]) {\n                detachMovedView(declarationContainer, lView);\n            }\n            // For embedded views still attached to a container: remove query result from this view.\n            const lQueries = lView[QUERIES];\n            if (lQueries !== null) {\n                lQueries.detachView(tView);\n            }\n        }\n        // Unregister the view once everything else has been cleaned up.\n        unregisterLView(lView);\n    }\n}\n/** Removes listeners and unsubscribes from output subscriptions */\nfunction processCleanups(tView, lView) {\n    const tCleanup = tView.cleanup;\n    const lCleanup = lView[CLEANUP];\n    if (tCleanup !== null) {\n        for (let i = 0; i < tCleanup.length - 1; i += 2) {\n            if (typeof tCleanup[i] === 'string') {\n                // This is a native DOM listener. It will occupy 4 entries in the TCleanup array (hence i +=\n                // 2 at the end of this block).\n                const targetIdx = tCleanup[i + 3];\n                ngDevMode && assertNumber(targetIdx, 'cleanup target must be a number');\n                if (targetIdx >= 0) {\n                    // unregister\n                    lCleanup[targetIdx]();\n                }\n                else {\n                    // Subscription\n                    lCleanup[-targetIdx].unsubscribe();\n                }\n                i += 2;\n            }\n            else {\n                // This is a cleanup function that is grouped with the index of its context\n                const context = lCleanup[tCleanup[i + 1]];\n                tCleanup[i].call(context);\n            }\n        }\n    }\n    if (lCleanup !== null) {\n        lView[CLEANUP] = null;\n    }\n    const destroyHooks = lView[ON_DESTROY_HOOKS];\n    if (destroyHooks !== null) {\n        // Reset the ON_DESTROY_HOOKS array before iterating over it to prevent hooks that unregister\n        // themselves from mutating the array during iteration.\n        lView[ON_DESTROY_HOOKS] = null;\n        for (let i = 0; i < destroyHooks.length; i++) {\n            const destroyHooksFn = destroyHooks[i];\n            ngDevMode && assertFunction(destroyHooksFn, 'Expecting destroy hook to be a function.');\n            destroyHooksFn();\n        }\n    }\n}\n/** Calls onDestroy hooks for this view */\nfunction executeOnDestroys(tView, lView) {\n    let destroyHooks;\n    if (tView != null && (destroyHooks = tView.destroyHooks) != null) {\n        for (let i = 0; i < destroyHooks.length; i += 2) {\n            const context = lView[destroyHooks[i]];\n            // Only call the destroy hook if the context has been requested.\n            if (!(context instanceof NodeInjectorFactory)) {\n                const toCall = destroyHooks[i + 1];\n                if (Array.isArray(toCall)) {\n                    for (let j = 0; j < toCall.length; j += 2) {\n                        const callContext = context[toCall[j]];\n                        const hook = toCall[j + 1];\n                        profiler(4 /* ProfilerEvent.LifecycleHookStart */, callContext, hook);\n                        try {\n                            hook.call(callContext);\n                        }\n                        finally {\n                            profiler(5 /* ProfilerEvent.LifecycleHookEnd */, callContext, hook);\n                        }\n                    }\n                }\n                else {\n                    profiler(4 /* ProfilerEvent.LifecycleHookStart */, context, toCall);\n                    try {\n                        toCall.call(context);\n                    }\n                    finally {\n                        profiler(5 /* ProfilerEvent.LifecycleHookEnd */, context, toCall);\n                    }\n                }\n            }\n        }\n    }\n}\n/**\n * Returns a native element if a node can be inserted into the given parent.\n *\n * There are two reasons why we may not be able to insert a element immediately.\n * - Projection: When creating a child content element of a component, we have to skip the\n *   insertion because the content of a component will be projected.\n *   `<component><content>delayed due to projection</content></component>`\n * - Parent container is disconnected: This can happen when we are inserting a view into\n *   parent container, which itself is disconnected. For example the parent container is part\n *   of a View which has not be inserted or is made for projection but has not been inserted\n *   into destination.\n *\n * @param tView: Current `TView`.\n * @param tNode: `TNode` for which we wish to retrieve render parent.\n * @param lView: Current `LView`.\n */\nfunction getParentRElement(tView, tNode, lView) {\n    return getClosestRElement(tView, tNode.parent, lView);\n}\n/**\n * Get closest `RElement` or `null` if it can't be found.\n *\n * If `TNode` is `TNodeType.Element` => return `RElement` at `LView[tNode.index]` location.\n * If `TNode` is `TNodeType.ElementContainer|IcuContain` => return the parent (recursively).\n * If `TNode` is `null` then return host `RElement`:\n *   - return `null` if projection\n *   - return `null` if parent container is disconnected (we have no parent.)\n *\n * @param tView: Current `TView`.\n * @param tNode: `TNode` for which we wish to retrieve `RElement` (or `null` if host element is\n *     needed).\n * @param lView: Current `LView`.\n * @returns `null` if the `RElement` can't be determined at this time (no parent / projection)\n */\nfunction getClosestRElement(tView, tNode, lView) {\n    let parentTNode = tNode;\n    // Skip over element and ICU containers as those are represented by a comment node and\n    // can't be used as a render parent.\n    while (parentTNode !== null &&\n        (parentTNode.type & (8 /* TNodeType.ElementContainer */ | 32 /* TNodeType.Icu */))) {\n        tNode = parentTNode;\n        parentTNode = tNode.parent;\n    }\n    // If the parent tNode is null, then we are inserting across views: either into an embedded view\n    // or a component view.\n    if (parentTNode === null) {\n        // We are inserting a root element of the component view into the component host element and\n        // it should always be eager.\n        return lView[HOST];\n    }\n    else {\n        ngDevMode && assertTNodeType(parentTNode, 3 /* TNodeType.AnyRNode */ | 4 /* TNodeType.Container */);\n        const { componentOffset } = parentTNode;\n        if (componentOffset > -1) {\n            ngDevMode && assertTNodeForLView(parentTNode, lView);\n            const { encapsulation } = tView.data[parentTNode.directiveStart + componentOffset];\n            // We've got a parent which is an element in the current view. We just need to verify if the\n            // parent element is not a component. Component's content nodes are not inserted immediately\n            // because they will be projected, and so doing insert at this point would be wasteful.\n            // Since the projection would then move it to its final destination. Note that we can't\n            // make this assumption when using the Shadow DOM, because the native projection placeholders\n            // (<content> or <slot>) have to be in place as elements are being inserted.\n            if (encapsulation === ViewEncapsulation$1.None ||\n                encapsulation === ViewEncapsulation$1.Emulated) {\n                return null;\n            }\n        }\n        return getNativeByTNode(parentTNode, lView);\n    }\n}\n/**\n * Inserts a native node before another native node for a given parent.\n * This is a utility function that can be used when native nodes were determined.\n */\nfunction nativeInsertBefore(renderer, parent, child, beforeNode, isMove) {\n    ngDevMode && ngDevMode.rendererInsertBefore++;\n    renderer.insertBefore(parent, child, beforeNode, isMove);\n}\nfunction nativeAppendChild(renderer, parent, child) {\n    ngDevMode && ngDevMode.rendererAppendChild++;\n    ngDevMode && assertDefined(parent, 'parent node must be defined');\n    renderer.appendChild(parent, child);\n}\nfunction nativeAppendOrInsertBefore(renderer, parent, child, beforeNode, isMove) {\n    if (beforeNode !== null) {\n        nativeInsertBefore(renderer, parent, child, beforeNode, isMove);\n    }\n    else {\n        nativeAppendChild(renderer, parent, child);\n    }\n}\n/** Removes a node from the DOM given its native parent. */\nfunction nativeRemoveChild(renderer, parent, child, isHostElement) {\n    renderer.removeChild(parent, child, isHostElement);\n}\n/** Checks if an element is a `<template>` node. */\nfunction isTemplateNode(node) {\n    return node.tagName === 'TEMPLATE' && node.content !== undefined;\n}\n/**\n * Returns a native parent of a given native node.\n */\nfunction nativeParentNode(renderer, node) {\n    return renderer.parentNode(node);\n}\n/**\n * Returns a native sibling of a given native node.\n */\nfunction nativeNextSibling(renderer, node) {\n    return renderer.nextSibling(node);\n}\n/**\n * Find a node in front of which `currentTNode` should be inserted.\n *\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\n * takes `TNode.insertBeforeIndex` into account if i18n code has been invoked.\n *\n * @param parentTNode parent `TNode`\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\n * @param lView current `LView`\n */\nfunction getInsertInFrontOfRNode(parentTNode, currentTNode, lView) {\n    return _getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView);\n}\n/**\n * Find a node in front of which `currentTNode` should be inserted. (Does not take i18n into\n * account)\n *\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\n * does not take `TNode.insertBeforeIndex` into account.\n *\n * @param parentTNode parent `TNode`\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\n * @param lView current `LView`\n */\nfunction getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView) {\n    if (parentTNode.type & (8 /* TNodeType.ElementContainer */ | 32 /* TNodeType.Icu */)) {\n        return getNativeByTNode(parentTNode, lView);\n    }\n    return null;\n}\n/**\n * Tree shakable boundary for `getInsertInFrontOfRNodeWithI18n` function.\n *\n * This function will only be set if i18n code runs.\n */\nlet _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithNoI18n;\n/**\n * Tree shakable boundary for `processI18nInsertBefore` function.\n *\n * This function will only be set if i18n code runs.\n */\nlet _processI18nInsertBefore;\nfunction setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore) {\n    _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithI18n;\n    _processI18nInsertBefore = processI18nInsertBefore;\n}\n/**\n * Appends the `child` native node (or a collection of nodes) to the `parent`.\n *\n * @param tView The `TView' to be appended\n * @param lView The current LView\n * @param childRNode The native child (or children) that should be appended\n * @param childTNode The TNode of the child element\n */\nfunction appendChild(tView, lView, childRNode, childTNode) {\n    const parentRNode = getParentRElement(tView, childTNode, lView);\n    const renderer = lView[RENDERER];\n    const parentTNode = childTNode.parent || lView[T_HOST];\n    const anchorNode = getInsertInFrontOfRNode(parentTNode, childTNode, lView);\n    if (parentRNode != null) {\n        if (Array.isArray(childRNode)) {\n            for (let i = 0; i < childRNode.length; i++) {\n                nativeAppendOrInsertBefore(renderer, parentRNode, childRNode[i], anchorNode, false);\n            }\n        }\n        else {\n            nativeAppendOrInsertBefore(renderer, parentRNode, childRNode, anchorNode, false);\n        }\n    }\n    _processI18nInsertBefore !== undefined &&\n        _processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRNode);\n}\n/**\n * Returns the first native node for a given LView, starting from the provided TNode.\n *\n * Native nodes are returned in the order in which those appear in the native tree (DOM).\n */\nfunction getFirstNativeNode(lView, tNode) {\n    if (tNode !== null) {\n        ngDevMode &&\n            assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */ | 32 /* TNodeType.Icu */ | 16 /* TNodeType.Projection */);\n        const tNodeType = tNode.type;\n        if (tNodeType & 3 /* TNodeType.AnyRNode */) {\n            return getNativeByTNode(tNode, lView);\n        }\n        else if (tNodeType & 4 /* TNodeType.Container */) {\n            return getBeforeNodeForView(-1, lView[tNode.index]);\n        }\n        else if (tNodeType & 8 /* TNodeType.ElementContainer */) {\n            const elIcuContainerChild = tNode.child;\n            if (elIcuContainerChild !== null) {\n                return getFirstNativeNode(lView, elIcuContainerChild);\n            }\n            else {\n                const rNodeOrLContainer = lView[tNode.index];\n                if (isLContainer(rNodeOrLContainer)) {\n                    return getBeforeNodeForView(-1, rNodeOrLContainer);\n                }\n                else {\n                    return unwrapRNode(rNodeOrLContainer);\n                }\n            }\n        }\n        else if (tNodeType & 32 /* TNodeType.Icu */) {\n            let nextRNode = icuContainerIterate(tNode, lView);\n            let rNode = nextRNode();\n            // If the ICU container has no nodes, than we use the ICU anchor as the node.\n            return rNode || unwrapRNode(lView[tNode.index]);\n        }\n        else {\n            const projectionNodes = getProjectionNodes(lView, tNode);\n            if (projectionNodes !== null) {\n                if (Array.isArray(projectionNodes)) {\n                    return projectionNodes[0];\n                }\n                const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);\n                ngDevMode && assertParentView(parentView);\n                return getFirstNativeNode(parentView, projectionNodes);\n            }\n            else {\n                return getFirstNativeNode(lView, tNode.next);\n            }\n        }\n    }\n    return null;\n}\nfunction getProjectionNodes(lView, tNode) {\n    if (tNode !== null) {\n        const componentView = lView[DECLARATION_COMPONENT_VIEW];\n        const componentHost = componentView[T_HOST];\n        const slotIdx = tNode.projection;\n        ngDevMode && assertProjectionSlots(lView);\n        return componentHost.projection[slotIdx];\n    }\n    return null;\n}\nfunction getBeforeNodeForView(viewIndexInContainer, lContainer) {\n    const nextViewIndex = CONTAINER_HEADER_OFFSET + viewIndexInContainer + 1;\n    if (nextViewIndex < lContainer.length) {\n        const lView = lContainer[nextViewIndex];\n        const firstTNodeOfView = lView[TVIEW].firstChild;\n        if (firstTNodeOfView !== null) {\n            return getFirstNativeNode(lView, firstTNodeOfView);\n        }\n    }\n    return lContainer[NATIVE];\n}\n/**\n * Removes a native node itself using a given renderer. To remove the node we are looking up its\n * parent from the native tree as not all platforms / browsers support the equivalent of\n * node.remove().\n *\n * @param renderer A renderer to be used\n * @param rNode The native node that should be removed\n * @param isHostElement A flag indicating if a node to be removed is a host of a component.\n */\nfunction nativeRemoveNode(renderer, rNode, isHostElement) {\n    ngDevMode && ngDevMode.rendererRemoveNode++;\n    const nativeParent = nativeParentNode(renderer, rNode);\n    if (nativeParent) {\n        nativeRemoveChild(renderer, nativeParent, rNode, isHostElement);\n    }\n}\n/**\n * Clears the contents of a given RElement.\n *\n * @param rElement the native RElement to be cleared\n */\nfunction clearElementContents(rElement) {\n    rElement.textContent = '';\n}\n/**\n * Performs the operation of `action` on the node. Typically this involves inserting or removing\n * nodes on the LView or projection boundary.\n */\nfunction applyNodes(renderer, action, tNode, lView, parentRElement, beforeNode, isProjection) {\n    while (tNode != null) {\n        ngDevMode && assertTNodeForLView(tNode, lView);\n        ngDevMode &&\n            assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */ | 16 /* TNodeType.Projection */ | 32 /* TNodeType.Icu */);\n        const rawSlotValue = lView[tNode.index];\n        const tNodeType = tNode.type;\n        if (isProjection) {\n            if (action === 0 /* WalkTNodeTreeAction.Create */) {\n                rawSlotValue && attachPatchData(unwrapRNode(rawSlotValue), lView);\n                tNode.flags |= 2 /* TNodeFlags.isProjected */;\n            }\n        }\n        if ((tNode.flags & 32 /* TNodeFlags.isDetached */) !== 32 /* TNodeFlags.isDetached */) {\n            if (tNodeType & 8 /* TNodeType.ElementContainer */) {\n                applyNodes(renderer, action, tNode.child, lView, parentRElement, beforeNode, false);\n                applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n            }\n            else if (tNodeType & 32 /* TNodeType.Icu */) {\n                const nextRNode = icuContainerIterate(tNode, lView);\n                let rNode;\n                while (rNode = nextRNode()) {\n                    applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);\n                }\n                applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n            }\n            else if (tNodeType & 16 /* TNodeType.Projection */) {\n                applyProjectionRecursive(renderer, action, lView, tNode, parentRElement, beforeNode);\n            }\n            else {\n                ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 4 /* TNodeType.Container */);\n                applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n            }\n        }\n        tNode = isProjection ? tNode.projectionNext : tNode.next;\n    }\n}\nfunction applyView(tView, lView, renderer, action, parentRElement, beforeNode) {\n    applyNodes(renderer, action, tView.firstChild, lView, parentRElement, beforeNode, false);\n}\n/**\n * `applyProjection` performs operation on the projection.\n *\n * Inserting a projection requires us to locate the projected nodes from the parent component. The\n * complication is that those nodes themselves could be re-projected from their parent component.\n *\n * @param tView The `TView` of `LView` which needs to be inserted, detached, destroyed\n * @param lView The `LView` which needs to be inserted, detached, destroyed.\n * @param tProjectionNode node to project\n */\nfunction applyProjection(tView, lView, tProjectionNode) {\n    const renderer = lView[RENDERER];\n    const parentRNode = getParentRElement(tView, tProjectionNode, lView);\n    const parentTNode = tProjectionNode.parent || lView[T_HOST];\n    let beforeNode = getInsertInFrontOfRNode(parentTNode, tProjectionNode, lView);\n    applyProjectionRecursive(renderer, 0 /* WalkTNodeTreeAction.Create */, lView, tProjectionNode, parentRNode, beforeNode);\n}\n/**\n * `applyProjectionRecursive` performs operation on the projection specified by `action` (insert,\n * detach, destroy)\n *\n * Inserting a projection requires us to locate the projected nodes from the parent component. The\n * complication is that those nodes themselves could be re-projected from their parent component.\n *\n * @param renderer Render to use\n * @param action action to perform (insert, detach, destroy)\n * @param lView The LView which needs to be inserted, detached, destroyed.\n * @param tProjectionNode node to project\n * @param parentRElement parent DOM element for insertion/removal.\n * @param beforeNode Before which node the insertions should happen.\n */\nfunction applyProjectionRecursive(renderer, action, lView, tProjectionNode, parentRElement, beforeNode) {\n    const componentLView = lView[DECLARATION_COMPONENT_VIEW];\n    const componentNode = componentLView[T_HOST];\n    ngDevMode &&\n        assertEqual(typeof tProjectionNode.projection, 'number', 'expecting projection index');\n    const nodeToProjectOrRNodes = componentNode.projection[tProjectionNode.projection];\n    if (Array.isArray(nodeToProjectOrRNodes)) {\n        // This should not exist, it is a bit of a hack. When we bootstrap a top level node and we\n        // need to support passing projectable nodes, so we cheat and put them in the TNode\n        // of the Host TView. (Yes we put instance info at the T Level). We can get away with it\n        // because we know that TView is not shared and therefore it will not be a problem.\n        // This should be refactored and cleaned up.\n        for (let i = 0; i < nodeToProjectOrRNodes.length; i++) {\n            const rNode = nodeToProjectOrRNodes[i];\n            applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);\n        }\n    }\n    else {\n        let nodeToProject = nodeToProjectOrRNodes;\n        const projectedComponentLView = componentLView[PARENT];\n        // If a parent <ng-content> is located within a skip hydration block,\n        // annotate an actual node that is being projected with the same flag too.\n        if (hasInSkipHydrationBlockFlag(tProjectionNode)) {\n            nodeToProject.flags |= 128 /* TNodeFlags.inSkipHydrationBlock */;\n        }\n        applyNodes(renderer, action, nodeToProject, projectedComponentLView, parentRElement, beforeNode, true);\n    }\n}\n/**\n * `applyContainer` performs an operation on the container and its views as specified by\n * `action` (insert, detach, destroy)\n *\n * Inserting a Container is complicated by the fact that the container may have Views which\n * themselves have containers or projections.\n *\n * @param renderer Renderer to use\n * @param action action to perform (insert, detach, destroy)\n * @param lContainer The LContainer which needs to be inserted, detached, destroyed.\n * @param parentRElement parent DOM element for insertion/removal.\n * @param beforeNode Before which node the insertions should happen.\n */\nfunction applyContainer(renderer, action, lContainer, parentRElement, beforeNode) {\n    ngDevMode && assertLContainer(lContainer);\n    const anchor = lContainer[NATIVE]; // LContainer has its own before node.\n    const native = unwrapRNode(lContainer);\n    // An LContainer can be created dynamically on any node by injecting ViewContainerRef.\n    // Asking for a ViewContainerRef on an element will result in a creation of a separate anchor\n    // node (comment in the DOM) that will be different from the LContainer's host node. In this\n    // particular case we need to execute action on 2 nodes:\n    // - container's host node (this is done in the executeActionOnElementOrContainer)\n    // - container's host node (this is done here)\n    if (anchor !== native) {\n        // This is very strange to me (Misko). I would expect that the native is same as anchor. I\n        // don't see a reason why they should be different, but they are.\n        //\n        // If they are we need to process the second anchor as well.\n        applyToElementOrContainer(action, renderer, parentRElement, anchor, beforeNode);\n    }\n    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n        const lView = lContainer[i];\n        applyView(lView[TVIEW], lView, renderer, action, parentRElement, anchor);\n    }\n}\n/**\n * Writes class/style to element.\n *\n * @param renderer Renderer to use.\n * @param isClassBased `true` if it should be written to `class` (`false` to write to `style`)\n * @param rNode The Node to write to.\n * @param prop Property to write to. This would be the class/style name.\n * @param value Value to write. If `null`/`undefined`/`false` this is considered a remove (set/add\n *        otherwise).\n */\nfunction applyStyling(renderer, isClassBased, rNode, prop, value) {\n    if (isClassBased) {\n        // We actually want JS true/false here because any truthy value should add the class\n        if (!value) {\n            ngDevMode && ngDevMode.rendererRemoveClass++;\n            renderer.removeClass(rNode, prop);\n        }\n        else {\n            ngDevMode && ngDevMode.rendererAddClass++;\n            renderer.addClass(rNode, prop);\n        }\n    }\n    else {\n        let flags = prop.indexOf('-') === -1 ? undefined : RendererStyleFlags2.DashCase;\n        if (value == null /** || value === undefined */) {\n            ngDevMode && ngDevMode.rendererRemoveStyle++;\n            renderer.removeStyle(rNode, prop, flags);\n        }\n        else {\n            // A value is important if it ends with `!important`. The style\n            // parser strips any semicolons at the end of the value.\n            const isImportant = typeof value === 'string' ? value.endsWith('!important') : false;\n            if (isImportant) {\n                // !important has to be stripped from the value for it to be valid.\n                value = value.slice(0, -10);\n                flags |= RendererStyleFlags2.Important;\n            }\n            ngDevMode && ngDevMode.rendererSetStyle++;\n            renderer.setStyle(rNode, prop, value, flags);\n        }\n    }\n}\n/**\n * Write `cssText` to `RElement`.\n *\n * This function does direct write without any reconciliation. Used for writing initial values, so\n * that static styling values do not pull in the style parser.\n *\n * @param renderer Renderer to use\n * @param element The element which needs to be updated.\n * @param newValue The new class list to write.\n */\nfunction writeDirectStyle(renderer, element, newValue) {\n    ngDevMode && assertString(newValue, '\\'newValue\\' should be a string');\n    renderer.setAttribute(element, 'style', newValue);\n    ngDevMode && ngDevMode.rendererSetStyle++;\n}\n/**\n * Write `className` to `RElement`.\n *\n * This function does direct write without any reconciliation. Used for writing initial values, so\n * that static styling values do not pull in the style parser.\n *\n * @param renderer Renderer to use\n * @param element The element which needs to be updated.\n * @param newValue The new class list to write.\n */\nfunction writeDirectClass(renderer, element, newValue) {\n    ngDevMode && assertString(newValue, '\\'newValue\\' should be a string');\n    if (newValue === '') {\n        // There are tests in `google3` which expect `element.getAttribute('class')` to be `null`.\n        renderer.removeAttribute(element, 'class');\n    }\n    else {\n        renderer.setAttribute(element, 'class', newValue);\n    }\n    ngDevMode && ngDevMode.rendererSetClassName++;\n}\n/** Sets up the static DOM attributes on an `RNode`. */\nfunction setupStaticAttributes(renderer, element, tNode) {\n    const { mergedAttrs, classes, styles } = tNode;\n    if (mergedAttrs !== null) {\n        setUpAttributes(renderer, element, mergedAttrs);\n    }\n    if (classes !== null) {\n        writeDirectClass(renderer, element, classes);\n    }\n    if (styles !== null) {\n        writeDirectStyle(renderer, element, styles);\n    }\n}\n\n/**\n * @fileoverview\n * A module to facilitate use of a Trusted Types policy internally within\n * Angular. It lazily constructs the Trusted Types policy, providing helper\n * utilities for promoting strings to Trusted Types. When Trusted Types are not\n * available, strings are used as a fallback.\n * @security All use of this module is security-sensitive and should go through\n * security review.\n */\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy$1;\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy$1() {\n    if (policy$1 === undefined) {\n        policy$1 = null;\n        if (_global.trustedTypes) {\n            try {\n                policy$1 = _global.trustedTypes.createPolicy('angular', {\n                    createHTML: (s) => s,\n                    createScript: (s) => s,\n                    createScriptURL: (s) => s,\n                });\n            }\n            catch {\n                // trustedTypes.createPolicy throws if called with a name that is\n                // already registered, even in report-only mode. Until the API changes,\n                // catch the error not to break the applications functionally. In such\n                // cases, the code will fall back to using strings.\n            }\n        }\n    }\n    return policy$1;\n}\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will be interpreted as HTML by a browser, e.g. when assigning to\n * element.innerHTML.\n */\nfunction trustedHTMLFromString(html) {\n    return getPolicy$1()?.createHTML(html) || html;\n}\n/**\n * Unsafely promote a string to a TrustedScript, falling back to strings when\n * Trusted Types are not available.\n * @security In particular, it must be assured that the provided string will\n * never cause an XSS vulnerability if used in a context that will be\n * interpreted and executed as a script by a browser, e.g. when calling eval.\n */\nfunction trustedScriptFromString(script) {\n    return getPolicy$1()?.createScript(script) || script;\n}\n/**\n * Unsafely promote a string to a TrustedScriptURL, falling back to strings\n * when Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will cause a browser to load and execute a resource, e.g. when\n * assigning to script.src.\n */\nfunction trustedScriptURLFromString(url) {\n    return getPolicy$1()?.createScriptURL(url) || url;\n}\n/**\n * Unsafely call the Function constructor with the given string arguments. It\n * is only available in development mode, and should be stripped out of\n * production code.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only called from development code, as use in production code can lead to\n * XSS vulnerabilities.\n */\nfunction newTrustedFunctionForDev(...args) {\n    if (typeof ngDevMode === 'undefined') {\n        throw new Error('newTrustedFunctionForDev should never be called in production');\n    }\n    if (!_global.trustedTypes) {\n        // In environments that don't support Trusted Types, fall back to the most\n        // straightforward implementation:\n        return new Function(...args);\n    }\n    // Chrome currently does not support passing TrustedScript to the Function\n    // constructor. The following implements the workaround proposed on the page\n    // below, where the Chromium bug is also referenced:\n    // https://github.com/w3c/webappsec-trusted-types/wiki/Trusted-Types-for-function-constructor\n    const fnArgs = args.slice(0, -1).join(',');\n    const fnBody = args[args.length - 1];\n    const body = `(function anonymous(${fnArgs}\n) { ${fnBody}\n})`;\n    // Using eval directly confuses the compiler and prevents this module from\n    // being stripped out of JS binaries even if not used. The global['eval']\n    // indirection fixes that.\n    const fn = _global['eval'](trustedScriptFromString(body));\n    if (fn.bind === undefined) {\n        // Workaround for a browser bug that only exists in Chrome 83, where passing\n        // a TrustedScript to eval just returns the TrustedScript back without\n        // evaluating it. In that case, fall back to the most straightforward\n        // implementation:\n        return new Function(...args);\n    }\n    // To completely mimic the behavior of calling \"new Function\", two more\n    // things need to happen:\n    // 1. Stringifying the resulting function should return its source code\n    fn.toString = () => body;\n    // 2. When calling the resulting function, `this` should refer to `global`\n    return fn.bind(_global);\n    // When Trusted Types support in Function constructors is widely available,\n    // the implementation of this function can be simplified to:\n    // return new Function(...args.map(a => trustedScriptFromString(a)));\n}\n\n/**\n * Validation function invoked at runtime for each binding that might potentially\n * represent a security-sensitive attribute of an <iframe>.\n * See `IFRAME_SECURITY_SENSITIVE_ATTRS` in the\n * `packages/compiler/src/schema/dom_security_schema.ts` script for the full list\n * of such attributes.\n *\n * @codeGenApi\n */\nfunction ɵɵvalidateIframeAttribute(attrValue, tagName, attrName) {\n    const lView = getLView();\n    const tNode = getSelectedTNode();\n    const element = getNativeByTNode(tNode, lView);\n    // Restrict any dynamic bindings of security-sensitive attributes/properties\n    // on an <iframe> for security reasons.\n    if (tNode.type === 2 /* TNodeType.Element */ && tagName.toLowerCase() === 'iframe') {\n        const iframe = element;\n        // Unset previously applied `src` and `srcdoc` if we come across a situation when\n        // a security-sensitive attribute is set later via an attribute/property binding.\n        iframe.src = '';\n        iframe.srcdoc = trustedHTMLFromString('');\n        // Also remove the <iframe> from the document.\n        nativeRemoveNode(lView[RENDERER], iframe);\n        const errorMessage = ngDevMode &&\n            `Angular has detected that the \\`${attrName}\\` was applied ` +\n                `as a binding to an <iframe>${getTemplateLocationDetails(lView)}. ` +\n                `For security reasons, the \\`${attrName}\\` can be set on an <iframe> ` +\n                `as a static attribute only. \\n` +\n                `To fix this, switch the \\`${attrName}\\` binding to a static attribute ` +\n                `in a template or in host bindings section.`;\n        throw new RuntimeError(-910 /* RuntimeErrorCode.UNSAFE_IFRAME_ATTRS */, errorMessage);\n    }\n    return attrValue;\n}\n\n/**\n * @fileoverview\n * A module to facilitate use of a Trusted Types policy internally within\n * Angular specifically for bypassSecurityTrust* and custom sanitizers. It\n * lazily constructs the Trusted Types policy, providing helper utilities for\n * promoting strings to Trusted Types. When Trusted Types are not available,\n * strings are used as a fallback.\n * @security All use of this module is security-sensitive and should go through\n * security review.\n */\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy;\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy() {\n    if (policy === undefined) {\n        policy = null;\n        if (_global.trustedTypes) {\n            try {\n                policy = _global.trustedTypes\n                    .createPolicy('angular#unsafe-bypass', {\n                    createHTML: (s) => s,\n                    createScript: (s) => s,\n                    createScriptURL: (s) => s,\n                });\n            }\n            catch {\n                // trustedTypes.createPolicy throws if called with a name that is\n                // already registered, even in report-only mode. Until the API changes,\n                // catch the error not to break the applications functionally. In such\n                // cases, the code will fall back to using strings.\n            }\n        }\n    }\n    return policy;\n}\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only passed strings that come directly from custom sanitizers or the\n * bypassSecurityTrust* functions.\n */\nfunction trustedHTMLFromStringBypass(html) {\n    return getPolicy()?.createHTML(html) || html;\n}\n/**\n * Unsafely promote a string to a TrustedScript, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only passed strings that come directly from custom sanitizers or the\n * bypassSecurityTrust* functions.\n */\nfunction trustedScriptFromStringBypass(script) {\n    return getPolicy()?.createScript(script) || script;\n}\n/**\n * Unsafely promote a string to a TrustedScriptURL, falling back to strings\n * when Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only passed strings that come directly from custom sanitizers or the\n * bypassSecurityTrust* functions.\n */\nfunction trustedScriptURLFromStringBypass(url) {\n    return getPolicy()?.createScriptURL(url) || url;\n}\n\nclass SafeValueImpl {\n    constructor(changingThisBreaksApplicationSecurity) {\n        this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;\n    }\n    toString() {\n        return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}` +\n            ` (see ${XSS_SECURITY_URL})`;\n    }\n}\nclass SafeHtmlImpl extends SafeValueImpl {\n    getTypeName() {\n        return \"HTML\" /* BypassType.Html */;\n    }\n}\nclass SafeStyleImpl extends SafeValueImpl {\n    getTypeName() {\n        return \"Style\" /* BypassType.Style */;\n    }\n}\nclass SafeScriptImpl extends SafeValueImpl {\n    getTypeName() {\n        return \"Script\" /* BypassType.Script */;\n    }\n}\nclass SafeUrlImpl extends SafeValueImpl {\n    getTypeName() {\n        return \"URL\" /* BypassType.Url */;\n    }\n}\nclass SafeResourceUrlImpl extends SafeValueImpl {\n    getTypeName() {\n        return \"ResourceURL\" /* BypassType.ResourceUrl */;\n    }\n}\nfunction unwrapSafeValue(value) {\n    return value instanceof SafeValueImpl ? value.changingThisBreaksApplicationSecurity :\n        value;\n}\nfunction allowSanitizationBypassAndThrow(value, type) {\n    const actualType = getSanitizationBypassType(value);\n    if (actualType != null && actualType !== type) {\n        // Allow ResourceURLs in URL contexts, they are strictly more trusted.\n        if (actualType === \"ResourceURL\" /* BypassType.ResourceUrl */ && type === \"URL\" /* BypassType.Url */)\n            return true;\n        throw new Error(`Required a safe ${type}, got a ${actualType} (see ${XSS_SECURITY_URL})`);\n    }\n    return actualType === type;\n}\nfunction getSanitizationBypassType(value) {\n    return value instanceof SafeValueImpl && value.getTypeName() || null;\n}\n/**\n * Mark `html` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link htmlSanitizer} to be trusted implicitly.\n *\n * @param trustedHtml `html` string which needs to be implicitly trusted.\n * @returns a `html` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustHtml(trustedHtml) {\n    return new SafeHtmlImpl(trustedHtml);\n}\n/**\n * Mark `style` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link styleSanitizer} to be trusted implicitly.\n *\n * @param trustedStyle `style` string which needs to be implicitly trusted.\n * @returns a `style` hich has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustStyle(trustedStyle) {\n    return new SafeStyleImpl(trustedStyle);\n}\n/**\n * Mark `script` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link scriptSanitizer} to be trusted implicitly.\n *\n * @param trustedScript `script` string which needs to be implicitly trusted.\n * @returns a `script` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustScript(trustedScript) {\n    return new SafeScriptImpl(trustedScript);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link urlSanitizer} to be trusted implicitly.\n *\n * @param trustedUrl `url` string which needs to be implicitly trusted.\n * @returns a `url`  which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustUrl(trustedUrl) {\n    return new SafeUrlImpl(trustedUrl);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link resourceUrlSanitizer} to be trusted implicitly.\n *\n * @param trustedResourceUrl `url` string which needs to be implicitly trusted.\n * @returns a `url` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustResourceUrl(trustedResourceUrl) {\n    return new SafeResourceUrlImpl(trustedResourceUrl);\n}\n\n/**\n * This helper is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we use one of two strategies for doing this.\n * Default: DOMParser strategy\n * Fallback: InertDocument strategy\n */\nfunction getInertBodyHelper(defaultDoc) {\n    const inertDocumentHelper = new InertDocumentHelper(defaultDoc);\n    return isDOMParserAvailable() ? new DOMParserHelper(inertDocumentHelper) : inertDocumentHelper;\n}\n/**\n * Uses DOMParser to create and fill an inert body element.\n * This is the default strategy used in browsers that support it.\n */\nclass DOMParserHelper {\n    constructor(inertDocumentHelper) {\n        this.inertDocumentHelper = inertDocumentHelper;\n    }\n    getInertBodyElement(html) {\n        // We add these extra elements to ensure that the rest of the content is parsed as expected\n        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n        // `<head>` tag. Note that the `<body>` tag is closed implicitly to prevent unclosed tags\n        // in `html` from consuming the otherwise explicit `</body>` tag.\n        html = '<body><remove></remove>' + html;\n        try {\n            const body = new window.DOMParser()\n                .parseFromString(trustedHTMLFromString(html), 'text/html')\n                .body;\n            if (body === null) {\n                // In some browsers (e.g. Mozilla/5.0 iPad AppleWebKit Mobile) the `body` property only\n                // becomes available in the following tick of the JS engine. In that case we fall back to\n                // the `inertDocumentHelper` instead.\n                return this.inertDocumentHelper.getInertBodyElement(html);\n            }\n            body.removeChild(body.firstChild);\n            return body;\n        }\n        catch {\n            return null;\n        }\n    }\n}\n/**\n * Use an HTML5 `template` element to create and fill an inert DOM element.\n * This is the fallback strategy if the browser does not support DOMParser.\n */\nclass InertDocumentHelper {\n    constructor(defaultDoc) {\n        this.defaultDoc = defaultDoc;\n        this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');\n    }\n    getInertBodyElement(html) {\n        const templateEl = this.inertDocument.createElement('template');\n        templateEl.innerHTML = trustedHTMLFromString(html);\n        return templateEl;\n    }\n}\n/**\n * We need to determine whether the DOMParser exists in the global context and\n * supports parsing HTML; HTML parsing support is not as wide as other formats, see\n * https://developer.mozilla.org/en-US/docs/Web/API/DOMParser#Browser_compatibility.\n *\n * @suppress {uselessCode}\n */\nfunction isDOMParserAvailable() {\n    try {\n        return !!new window.DOMParser().parseFromString(trustedHTMLFromString(''), 'text/html');\n    }\n    catch {\n        return false;\n    }\n}\n\n/**\n * A pattern that recognizes URLs that are safe wrt. XSS in URL navigation\n * contexts.\n *\n * This regular expression matches a subset of URLs that will not cause script\n * execution if used in URL context within a HTML document. Specifically, this\n * regular expression matches if:\n * (1) Either a protocol that is not javascript:, and that has valid characters\n *     (alphanumeric or [+-.]).\n * (2) or no protocol.  A protocol must be followed by a colon. The below\n *     allows that by allowing colons only after one of the characters [/?#].\n *     A colon after a hash (#) must be in the fragment.\n *     Otherwise, a colon after a (?) must be in a query.\n *     Otherwise, a colon after a single solidus (/) must be in a path.\n *     Otherwise, a colon after a double solidus (//) must be in the authority\n *     (before port).\n *\n * The pattern disallows &, used in HTML entity declarations before\n * one of the characters in [/?#]. This disallows HTML entities used in the\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n * It also disallows HTML entities in the first path part of a relative path,\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n * that. More importantly, it disallows masking of a colon,\n * e.g. \"javascript&#58;...\".\n *\n * This regular expression was taken from the Closure sanitization library.\n */\nconst SAFE_URL_PATTERN = /^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:\\/?#]*(?:[\\/?#]|$))/i;\nfunction _sanitizeUrl(url) {\n    url = String(url);\n    if (url.match(SAFE_URL_PATTERN))\n        return url;\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        console.warn(`WARNING: sanitizing unsafe URL value ${url} (see ${XSS_SECURITY_URL})`);\n    }\n    return 'unsafe:' + url;\n}\n\nfunction tagSet(tags) {\n    const res = {};\n    for (const t of tags.split(','))\n        res[t] = true;\n    return res;\n}\nfunction merge(...sets) {\n    const res = {};\n    for (const s of sets) {\n        for (const v in s) {\n            if (s.hasOwnProperty(v))\n                res[v] = true;\n        }\n    }\n    return res;\n}\n// Good source of info about elements and attributes\n// https://html.spec.whatwg.org/#semantics\n// https://simon.html5.org/html-elements\n// Safe Void Elements - HTML5\n// https://html.spec.whatwg.org/#void-elements\nconst VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n// Elements that you can, intentionally, leave open (and which close themselves)\n// https://html.spec.whatwg.org/#optional-tags\nconst OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\nconst OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\nconst OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n// Safe Block Elements - HTML5\nconst BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +\n    'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\n    'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n// Inline Elements - HTML5\nconst INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +\n    'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +\n    'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\nconst VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n// Attributes that have href and hence need to be sanitized\nconst URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\nconst HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +\n    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +\n    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +\n    'scope,scrolling,shape,size,sizes,span,srclang,srcset,start,summary,tabindex,target,title,translate,type,usemap,' +\n    'valign,value,vspace,width');\n// Accessibility attributes as per WAI-ARIA 1.1 (W3C Working Draft 14 December 2018)\nconst ARIA_ATTRS = tagSet('aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,' +\n    'aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,' +\n    'aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,' +\n    'aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,' +\n    'aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,' +\n    'aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,' +\n    'aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext');\n// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security\n// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\n// innerHTML is required, SVG attributes should be added here.\n// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\n// can be sanitized, but they increase security surface area without a legitimate use case, so they\n// are left out here.\nconst VALID_ATTRS = merge(URI_ATTRS, HTML_ATTRS, ARIA_ATTRS);\n// Elements whose content should not be traversed/preserved, if the elements themselves are invalid.\n//\n// Typically, `<invalid>Some content</invalid>` would traverse (and in this case preserve)\n// `Some content`, but strip `invalid-element` opening/closing tags. For some elements, though, we\n// don't want to preserve the content, if the elements themselves are going to be removed.\nconst SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = tagSet('script,style,template');\n/**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nclass SanitizingHtmlSerializer {\n    constructor() {\n        // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just\n        // because characters were re-encoded.\n        this.sanitizedSomething = false;\n        this.buf = [];\n    }\n    sanitizeChildren(el) {\n        // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\n        // However this code never accesses properties off of `document` before deleting its contents\n        // again, so it shouldn't be vulnerable to DOM clobbering.\n        let current = el.firstChild;\n        let traverseContent = true;\n        while (current) {\n            if (current.nodeType === Node.ELEMENT_NODE) {\n                traverseContent = this.startElement(current);\n            }\n            else if (current.nodeType === Node.TEXT_NODE) {\n                this.chars(current.nodeValue);\n            }\n            else {\n                // Strip non-element, non-text nodes.\n                this.sanitizedSomething = true;\n            }\n            if (traverseContent && current.firstChild) {\n                current = current.firstChild;\n                continue;\n            }\n            while (current) {\n                // Leaving the element. Walk up and to the right, closing tags as we go.\n                if (current.nodeType === Node.ELEMENT_NODE) {\n                    this.endElement(current);\n                }\n                let next = this.checkClobberedElement(current, current.nextSibling);\n                if (next) {\n                    current = next;\n                    break;\n                }\n                current = this.checkClobberedElement(current, current.parentNode);\n            }\n        }\n        return this.buf.join('');\n    }\n    /**\n     * Sanitizes an opening element tag (if valid) and returns whether the element's contents should\n     * be traversed. Element content must always be traversed (even if the element itself is not\n     * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.\n     *\n     * @param element The element to sanitize.\n     * @return True if the element's contents should be traversed.\n     */\n    startElement(element) {\n        const tagName = element.nodeName.toLowerCase();\n        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n            this.sanitizedSomething = true;\n            return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);\n        }\n        this.buf.push('<');\n        this.buf.push(tagName);\n        const elAttrs = element.attributes;\n        for (let i = 0; i < elAttrs.length; i++) {\n            const elAttr = elAttrs.item(i);\n            const attrName = elAttr.name;\n            const lower = attrName.toLowerCase();\n            if (!VALID_ATTRS.hasOwnProperty(lower)) {\n                this.sanitizedSomething = true;\n                continue;\n            }\n            let value = elAttr.value;\n            // TODO(martinprobst): Special case image URIs for data:image/...\n            if (URI_ATTRS[lower])\n                value = _sanitizeUrl(value);\n            this.buf.push(' ', attrName, '=\"', encodeEntities(value), '\"');\n        }\n        this.buf.push('>');\n        return true;\n    }\n    endElement(current) {\n        const tagName = current.nodeName.toLowerCase();\n        if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n            this.buf.push('</');\n            this.buf.push(tagName);\n            this.buf.push('>');\n        }\n    }\n    chars(chars) {\n        this.buf.push(encodeEntities(chars));\n    }\n    checkClobberedElement(node, nextNode) {\n        if (nextNode &&\n            (node.compareDocumentPosition(nextNode) &\n                Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {\n            throw new Error(`Failed to sanitize html because the element is clobbered: ${node.outerHTML}`);\n        }\n        return nextNode;\n    }\n}\n// Regular Expressions for parsing tags and attributes\nconst SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n// ! to ~ is the ASCII range.\nconst NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param value\n */\nfunction encodeEntities(value) {\n    return value.replace(/&/g, '&amp;')\n        .replace(SURROGATE_PAIR_REGEXP, function (match) {\n        const hi = match.charCodeAt(0);\n        const low = match.charCodeAt(1);\n        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n    })\n        .replace(NON_ALPHANUMERIC_REGEXP, function (match) {\n        return '&#' + match.charCodeAt(0) + ';';\n    })\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n}\nlet inertBodyHelper;\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n */\nfunction _sanitizeHtml(defaultDoc, unsafeHtmlInput) {\n    let inertBodyElement = null;\n    try {\n        inertBodyHelper = inertBodyHelper || getInertBodyHelper(defaultDoc);\n        // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\n        let unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n        inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\n        // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\n        let mXSSAttempts = 5;\n        let parsedHtml = unsafeHtml;\n        do {\n            if (mXSSAttempts === 0) {\n                throw new Error('Failed to sanitize html because the input is unstable');\n            }\n            mXSSAttempts--;\n            unsafeHtml = parsedHtml;\n            parsedHtml = inertBodyElement.innerHTML;\n            inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        } while (unsafeHtml !== parsedHtml);\n        const sanitizer = new SanitizingHtmlSerializer();\n        const safeHtml = sanitizer.sanitizeChildren(getTemplateContent(inertBodyElement) || inertBodyElement);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && sanitizer.sanitizedSomething) {\n            console.warn(`WARNING: sanitizing HTML stripped some content, see ${XSS_SECURITY_URL}`);\n        }\n        return trustedHTMLFromString(safeHtml);\n    }\n    finally {\n        // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n        if (inertBodyElement) {\n            const parent = getTemplateContent(inertBodyElement) || inertBodyElement;\n            while (parent.firstChild) {\n                parent.removeChild(parent.firstChild);\n            }\n        }\n    }\n}\nfunction getTemplateContent(el) {\n    return 'content' in el /** Microsoft/TypeScript#21517 */ && isTemplateElement(el) ?\n        el.content :\n        null;\n}\nfunction isTemplateElement(el) {\n    return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';\n}\n\n/**\n * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property\n * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly\n * handled.\n *\n * See DomSanitizer for more details on security in Angular applications.\n *\n * @publicApi\n */\nvar SecurityContext;\n(function (SecurityContext) {\n    SecurityContext[SecurityContext[\"NONE\"] = 0] = \"NONE\";\n    SecurityContext[SecurityContext[\"HTML\"] = 1] = \"HTML\";\n    SecurityContext[SecurityContext[\"STYLE\"] = 2] = \"STYLE\";\n    SecurityContext[SecurityContext[\"SCRIPT\"] = 3] = \"SCRIPT\";\n    SecurityContext[SecurityContext[\"URL\"] = 4] = \"URL\";\n    SecurityContext[SecurityContext[\"RESOURCE_URL\"] = 5] = \"RESOURCE_URL\";\n})(SecurityContext || (SecurityContext = {}));\n\n/**\n * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `html` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustHtml}.\n *\n * @param unsafeHtml untrusted `html`, typically from the user.\n * @returns `html` string which is safe to display to user, because all of the dangerous javascript\n * and urls have been removed.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeHtml(unsafeHtml) {\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return trustedHTMLFromStringBypass(sanitizer.sanitize(SecurityContext.HTML, unsafeHtml) || '');\n    }\n    if (allowSanitizationBypassAndThrow(unsafeHtml, \"HTML\" /* BypassType.Html */)) {\n        return trustedHTMLFromStringBypass(unwrapSafeValue(unsafeHtml));\n    }\n    return _sanitizeHtml(getDocument(), renderStringify(unsafeHtml));\n}\n/**\n * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\n * dangerous content.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustStyle}.\n *\n * @param unsafeStyle untrusted `style`, typically from the user.\n * @returns `style` string which is safe to bind to the `style` properties.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeStyle(unsafeStyle) {\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.STYLE, unsafeStyle) || '';\n    }\n    if (allowSanitizationBypassAndThrow(unsafeStyle, \"Style\" /* BypassType.Style */)) {\n        return unwrapSafeValue(unsafeStyle);\n    }\n    return renderStringify(unsafeStyle);\n}\n/**\n * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\n * dangerous\n * content.\n *\n * This method parses the `url` and locates potentially dangerous content (such as javascript) and\n * removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustUrl}.\n *\n * @param unsafeUrl untrusted `url`, typically from the user.\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * all of the dangerous javascript has been removed.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeUrl(unsafeUrl) {\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.URL, unsafeUrl) || '';\n    }\n    if (allowSanitizationBypassAndThrow(unsafeUrl, \"URL\" /* BypassType.Url */)) {\n        return unwrapSafeValue(unsafeUrl);\n    }\n    return _sanitizeUrl(renderStringify(unsafeUrl));\n}\n/**\n * A `url` sanitizer which only lets trusted `url`s through.\n *\n * This passes only `url`s marked trusted by calling {@link bypassSanitizationTrustResourceUrl}.\n *\n * @param unsafeResourceUrl untrusted `url`, typically from the user.\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * only trusted `url`s have been allowed to pass.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeResourceUrl(unsafeResourceUrl) {\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return trustedScriptURLFromStringBypass(sanitizer.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '');\n    }\n    if (allowSanitizationBypassAndThrow(unsafeResourceUrl, \"ResourceURL\" /* BypassType.ResourceUrl */)) {\n        return trustedScriptURLFromStringBypass(unwrapSafeValue(unsafeResourceUrl));\n    }\n    throw new RuntimeError(904 /* RuntimeErrorCode.UNSAFE_VALUE_IN_RESOURCE_URL */, ngDevMode && `unsafe value used in a resource URL context (see ${XSS_SECURITY_URL})`);\n}\n/**\n * A `script` sanitizer which only lets trusted javascript through.\n *\n * This passes only `script`s marked trusted by calling {@link\n * bypassSanitizationTrustScript}.\n *\n * @param unsafeScript untrusted `script`, typically from the user.\n * @returns `url` string which is safe to bind to the `<script>` element such as `<img src>`,\n * because only trusted `scripts` have been allowed to pass.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeScript(unsafeScript) {\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return trustedScriptFromStringBypass(sanitizer.sanitize(SecurityContext.SCRIPT, unsafeScript) || '');\n    }\n    if (allowSanitizationBypassAndThrow(unsafeScript, \"Script\" /* BypassType.Script */)) {\n        return trustedScriptFromStringBypass(unwrapSafeValue(unsafeScript));\n    }\n    throw new RuntimeError(905 /* RuntimeErrorCode.UNSAFE_VALUE_IN_SCRIPT */, ngDevMode && 'unsafe value used in a script context');\n}\n/**\n * A template tag function for promoting the associated constant literal to a\n * TrustedHTML. Interpolation is explicitly not allowed.\n *\n * @param html constant template literal containing trusted HTML.\n * @returns TrustedHTML wrapping `html`.\n *\n * @security This is a security-sensitive function and should only be used to\n * convert constant values of attributes and properties found in\n * application-provided Angular templates to TrustedHTML.\n *\n * @codeGenApi\n */\nfunction ɵɵtrustConstantHtml(html) {\n    // The following runtime check ensures that the function was called as a\n    // template tag (e.g. ɵɵtrustConstantHtml`content`), without any interpolation\n    // (e.g. not ɵɵtrustConstantHtml`content ${variable}`). A TemplateStringsArray\n    // is an array with a `raw` property that is also an array. The associated\n    // template literal has no interpolation if and only if the length of the\n    // TemplateStringsArray is 1.\n    if (ngDevMode && (!Array.isArray(html) || !Array.isArray(html.raw) || html.length !== 1)) {\n        throw new Error(`Unexpected interpolation in trusted HTML constant: ${html.join('?')}`);\n    }\n    return trustedHTMLFromString(html[0]);\n}\n/**\n * A template tag function for promoting the associated constant literal to a\n * TrustedScriptURL. Interpolation is explicitly not allowed.\n *\n * @param url constant template literal containing a trusted script URL.\n * @returns TrustedScriptURL wrapping `url`.\n *\n * @security This is a security-sensitive function and should only be used to\n * convert constant values of attributes and properties found in\n * application-provided Angular templates to TrustedScriptURL.\n *\n * @codeGenApi\n */\nfunction ɵɵtrustConstantResourceUrl(url) {\n    // The following runtime check ensures that the function was called as a\n    // template tag (e.g. ɵɵtrustConstantResourceUrl`content`), without any\n    // interpolation (e.g. not ɵɵtrustConstantResourceUrl`content ${variable}`). A\n    // TemplateStringsArray is an array with a `raw` property that is also an\n    // array. The associated template literal has no interpolation if and only if\n    // the length of the TemplateStringsArray is 1.\n    if (ngDevMode && (!Array.isArray(url) || !Array.isArray(url.raw) || url.length !== 1)) {\n        throw new Error(`Unexpected interpolation in trusted URL constant: ${url.join('?')}`);\n    }\n    return trustedScriptURLFromString(url[0]);\n}\n/**\n * Detects which sanitizer to use for URL property, based on tag name and prop name.\n *\n * The rules are based on the RESOURCE_URL context config from\n * `packages/compiler/src/schema/dom_security_schema.ts`.\n * If tag and prop names don't match Resource URL schema, use URL sanitizer.\n */\nfunction getUrlSanitizer(tag, prop) {\n    if ((prop === 'src' &&\n        (tag === 'embed' || tag === 'frame' || tag === 'iframe' || tag === 'media' ||\n            tag === 'script')) ||\n        (prop === 'href' && (tag === 'base' || tag === 'link'))) {\n        return ɵɵsanitizeResourceUrl;\n    }\n    return ɵɵsanitizeUrl;\n}\n/**\n * Sanitizes URL, selecting sanitizer function based on tag and property names.\n *\n * This function is used in case we can't define security context at compile time, when only prop\n * name is available. This happens when we generate host bindings for Directives/Components. The\n * host element is unknown at compile time, so we defer calculation of specific sanitizer to\n * runtime.\n *\n * @param unsafeUrl untrusted `url`, typically from the user.\n * @param tag target element tag name.\n * @param prop name of the property that contains the value.\n * @returns `url` string which is safe to bind.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeUrlOrResourceUrl(unsafeUrl, tag, prop) {\n    return getUrlSanitizer(tag, prop)(unsafeUrl);\n}\nfunction validateAgainstEventProperties(name) {\n    if (name.toLowerCase().startsWith('on')) {\n        const errorMessage = `Binding to event property '${name}' is disallowed for security reasons, ` +\n            `please use (${name.slice(2)})=...` +\n            `\\nIf '${name}' is a directive input, make sure the directive is imported by the` +\n            ` current module.`;\n        throw new RuntimeError(306 /* RuntimeErrorCode.INVALID_EVENT_BINDING */, errorMessage);\n    }\n}\nfunction validateAgainstEventAttributes(name) {\n    if (name.toLowerCase().startsWith('on')) {\n        const errorMessage = `Binding to event attribute '${name}' is disallowed for security reasons, ` +\n            `please use (${name.slice(2)})=...`;\n        throw new RuntimeError(306 /* RuntimeErrorCode.INVALID_EVENT_BINDING */, errorMessage);\n    }\n}\nfunction getSanitizer() {\n    const lView = getLView();\n    return lView && lView[ENVIRONMENT].sanitizer;\n}\n\n/**\n * Injectable that is notified when an `LView` is made aware of changes to application state.\n */\nclass ChangeDetectionScheduler {\n}\n\n/**\n * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n *\n * @publicApi\n */\nfunction makeStateKey(key) {\n    return key;\n}\nfunction initTransferState() {\n    const transferState = new TransferState();\n    if (inject(PLATFORM_ID) === 'browser') {\n        transferState.store = retrieveTransferredState(getDocument(), inject(APP_ID));\n    }\n    return transferState;\n}\n/**\n * A key value store that is transferred from the application on the server side to the application\n * on the client side.\n *\n * The `TransferState` is available as an injectable token.\n * On the client, just inject this token using DI and use it, it will be lazily initialized.\n * On the server it's already included if `renderApplication` function is used. Otherwise, import\n * the `ServerTransferStateModule` module to make the `TransferState` available.\n *\n * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only\n * boolean, number, string, null and non-class objects will be serialized and deserialized in a\n * non-lossy manner.\n *\n * @publicApi\n */\nclass TransferState {\n    constructor() {\n        /** @internal */\n        this.store = {};\n        this.onSerializeCallbacks = {};\n    }\n    /** @nocollapse */\n    static { this.ɵprov = \n    /** @pureOrBreakMyCode */ ɵɵdefineInjectable({\n        token: TransferState,\n        providedIn: 'root',\n        factory: initTransferState,\n    }); }\n    /**\n     * Get the value corresponding to a key. Return `defaultValue` if key is not found.\n     */\n    get(key, defaultValue) {\n        return this.store[key] !== undefined ? this.store[key] : defaultValue;\n    }\n    /**\n     * Set the value corresponding to a key.\n     */\n    set(key, value) {\n        this.store[key] = value;\n    }\n    /**\n     * Remove a key from the store.\n     */\n    remove(key) {\n        delete this.store[key];\n    }\n    /**\n     * Test whether a key exists in the store.\n     */\n    hasKey(key) {\n        return this.store.hasOwnProperty(key);\n    }\n    /**\n     * Indicates whether the state is empty.\n     */\n    get isEmpty() {\n        return Object.keys(this.store).length === 0;\n    }\n    /**\n     * Register a callback to provide the value for a key when `toJson` is called.\n     */\n    onSerialize(key, callback) {\n        this.onSerializeCallbacks[key] = callback;\n    }\n    /**\n     * Serialize the current state of the store to JSON.\n     */\n    toJson() {\n        // Call the onSerialize callbacks and put those values into the store.\n        for (const key in this.onSerializeCallbacks) {\n            if (this.onSerializeCallbacks.hasOwnProperty(key)) {\n                try {\n                    this.store[key] = this.onSerializeCallbacks[key]();\n                }\n                catch (e) {\n                    console.warn('Exception in onSerialize callback: ', e);\n                }\n            }\n        }\n        // Escape script tag to avoid break out of <script> tag in serialized output.\n        // Encoding of `<` is the same behaviour as G3 script_builders.\n        return JSON.stringify(this.store).replace(/</g, '\\\\u003C');\n    }\n}\nfunction retrieveTransferredState(doc, appId) {\n    // Locate the script tag with the JSON data transferred from the server.\n    // The id of the script tag is set to the Angular appId + 'state'.\n    const script = doc.getElementById(appId + '-state');\n    if (script?.textContent) {\n        try {\n            // Avoid using any here as it triggers lint errors in google3 (any is not allowed).\n            // Decoding of `<` is done of the box by browsers and node.js, same behaviour as G3\n            // script_builders.\n            return JSON.parse(script.textContent);\n        }\n        catch (e) {\n            console.warn('Exception while restoring TransferState for app ' + appId, e);\n        }\n    }\n    return {};\n}\n\n/** Encodes that the node lookup should start from the host node of this component. */\nconst REFERENCE_NODE_HOST = 'h';\n/** Encodes that the node lookup should start from the document body node. */\nconst REFERENCE_NODE_BODY = 'b';\n/**\n * Describes navigation steps that the runtime logic need to perform,\n * starting from a given (known) element.\n */\nvar NodeNavigationStep;\n(function (NodeNavigationStep) {\n    NodeNavigationStep[\"FirstChild\"] = \"f\";\n    NodeNavigationStep[\"NextSibling\"] = \"n\";\n})(NodeNavigationStep || (NodeNavigationStep = {}));\n/**\n * Keys within serialized view data structure to represent various\n * parts. See the `SerializedView` interface below for additional information.\n */\nconst ELEMENT_CONTAINERS = 'e';\nconst TEMPLATES = 't';\nconst CONTAINERS = 'c';\nconst MULTIPLIER = 'x';\nconst NUM_ROOT_NODES = 'r';\nconst TEMPLATE_ID = 'i'; // as it's also an \"id\"\nconst NODES = 'n';\nconst DISCONNECTED_NODES = 'd';\n\n/**\n * The name of the key used in the TransferState collection,\n * where hydration information is located.\n */\nconst TRANSFER_STATE_TOKEN_ID = '__nghData__';\n/**\n * Lookup key used to reference DOM hydration data (ngh) in `TransferState`.\n */\nconst NGH_DATA_KEY = makeStateKey(TRANSFER_STATE_TOKEN_ID);\n/**\n * The name of the attribute that would be added to host component\n * nodes and contain a reference to a particular slot in transferred\n * state that contains the necessary hydration info for this component.\n */\nconst NGH_ATTR_NAME = 'ngh';\n/**\n * Marker used in a comment node to ensure hydration content integrity\n */\nconst SSR_CONTENT_INTEGRITY_MARKER = 'nghm';\n/**\n * Reference to a function that reads `ngh` attribute value from a given RNode\n * and retrieves hydration information from the TransferState using that value\n * as an index. Returns `null` by default, when hydration is not enabled.\n *\n * @param rNode Component's host element.\n * @param injector Injector that this component has access to.\n * @param isRootView Specifies whether we trying to read hydration info for the root view.\n */\nlet _retrieveHydrationInfoImpl = (rNode, injector, isRootView) => null;\nfunction retrieveHydrationInfoImpl(rNode, injector, isRootView = false) {\n    let nghAttrValue = rNode.getAttribute(NGH_ATTR_NAME);\n    if (nghAttrValue == null)\n        return null;\n    // For cases when a root component also acts as an anchor node for a ViewContainerRef\n    // (for example, when ViewContainerRef is injected in a root component), there is a need\n    // to serialize information about the component itself, as well as an LContainer that\n    // represents this ViewContainerRef. Effectively, we need to serialize 2 pieces of info:\n    // (1) hydration info for the root component itself and (2) hydration info for the\n    // ViewContainerRef instance (an LContainer). Each piece of information is included into\n    // the hydration data (in the TransferState object) separately, thus we end up with 2 ids.\n    // Since we only have 1 root element, we encode both bits of info into a single string:\n    // ids are separated by the `|` char (e.g. `10|25`, where `10` is the ngh for a component view\n    // and 25 is the `ngh` for a root view which holds LContainer).\n    const [componentViewNgh, rootViewNgh] = nghAttrValue.split('|');\n    nghAttrValue = isRootView ? rootViewNgh : componentViewNgh;\n    if (!nghAttrValue)\n        return null;\n    // We've read one of the ngh ids, keep the remaining one, so that\n    // we can set it back on the DOM element.\n    const remainingNgh = isRootView ? componentViewNgh : (rootViewNgh ? `|${rootViewNgh}` : '');\n    let data = {};\n    // An element might have an empty `ngh` attribute value (e.g. `<comp ngh=\"\" />`),\n    // which means that no special annotations are required. Do not attempt to read\n    // from the TransferState in this case.\n    if (nghAttrValue !== '') {\n        const transferState = injector.get(TransferState, null, { optional: true });\n        if (transferState !== null) {\n            const nghData = transferState.get(NGH_DATA_KEY, []);\n            // The nghAttrValue is always a number referencing an index\n            // in the hydration TransferState data.\n            data = nghData[Number(nghAttrValue)];\n            // If the `ngh` attribute exists and has a non-empty value,\n            // the hydration info *must* be present in the TransferState.\n            // If there is no data for some reasons, this is an error.\n            ngDevMode && assertDefined(data, 'Unable to retrieve hydration info from the TransferState.');\n        }\n    }\n    const dehydratedView = {\n        data,\n        firstChild: rNode.firstChild ?? null,\n    };\n    if (isRootView) {\n        // If there is hydration info present for the root view, it means that there was\n        // a ViewContainerRef injected in the root component. The root component host element\n        // acted as an anchor node in this scenario. As a result, the DOM nodes that represent\n        // embedded views in this ViewContainerRef are located as siblings to the host node,\n        // i.e. `<app-root /><#VIEW1><#VIEW2>...<!--container-->`. In this case, the current\n        // node becomes the first child of this root view and the next sibling is the first\n        // element in the DOM segment.\n        dehydratedView.firstChild = rNode;\n        // We use `0` here, since this is the slot (right after the HEADER_OFFSET)\n        // where a component LView or an LContainer is located in a root LView.\n        setSegmentHead(dehydratedView, 0, rNode.nextSibling);\n    }\n    if (remainingNgh) {\n        // If we have only used one of the ngh ids, store the remaining one\n        // back on this RNode.\n        rNode.setAttribute(NGH_ATTR_NAME, remainingNgh);\n    }\n    else {\n        // The `ngh` attribute is cleared from the DOM node now\n        // that the data has been retrieved for all indices.\n        rNode.removeAttribute(NGH_ATTR_NAME);\n    }\n    // Note: don't check whether this node was claimed for hydration,\n    // because this node might've been previously claimed while processing\n    // template instructions.\n    ngDevMode && markRNodeAsClaimedByHydration(rNode, /* checkIfAlreadyClaimed */ false);\n    ngDevMode && ngDevMode.hydratedComponents++;\n    return dehydratedView;\n}\n/**\n * Sets the implementation for the `retrieveHydrationInfo` function.\n */\nfunction enableRetrieveHydrationInfoImpl() {\n    _retrieveHydrationInfoImpl = retrieveHydrationInfoImpl;\n}\n/**\n * Retrieves hydration info by reading the value from the `ngh` attribute\n * and accessing a corresponding slot in TransferState storage.\n */\nfunction retrieveHydrationInfo(rNode, injector, isRootView = false) {\n    return _retrieveHydrationInfoImpl(rNode, injector, isRootView);\n}\n/**\n * Retrieves the necessary object from a given ViewRef to serialize:\n *  - an LView for component views\n *  - an LContainer for cases when component acts as a ViewContainerRef anchor\n *  - `null` in case of an embedded view\n */\nfunction getLNodeForHydration(viewRef) {\n    // Reading an internal field from `ViewRef` instance.\n    let lView = viewRef._lView;\n    const tView = lView[TVIEW];\n    // A registered ViewRef might represent an instance of an\n    // embedded view, in which case we do not need to annotate it.\n    if (tView.type === 2 /* TViewType.Embedded */) {\n        return null;\n    }\n    // Check if it's a root view and if so, retrieve component's\n    // LView from the first slot after the header.\n    if (isRootView(lView)) {\n        lView = lView[HEADER_OFFSET];\n    }\n    return lView;\n}\nfunction getTextNodeContent(node) {\n    return node.textContent?.replace(/\\s/gm, '');\n}\n/**\n * Restores text nodes and separators into the DOM that were lost during SSR\n * serialization. The hydration process replaces empty text nodes and text\n * nodes that are immediately adjacent to other text nodes with comment nodes\n * that this method filters on to restore those missing nodes that the\n * hydration process is expecting to be present.\n *\n * @param node The app's root HTML Element\n */\nfunction processTextNodeMarkersBeforeHydration(node) {\n    const doc = getDocument();\n    const commentNodesIterator = doc.createNodeIterator(node, NodeFilter.SHOW_COMMENT, {\n        acceptNode(node) {\n            const content = getTextNodeContent(node);\n            const isTextNodeMarker = content === \"ngetn\" /* TextNodeMarker.EmptyNode */ || content === \"ngtns\" /* TextNodeMarker.Separator */;\n            return isTextNodeMarker ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;\n        }\n    });\n    let currentNode;\n    // We cannot modify the DOM while using the commentIterator,\n    // because it throws off the iterator state.\n    // So we collect all marker nodes first and then follow up with\n    // applying the changes to the DOM: either inserting an empty node\n    // or just removing the marker if it was used as a separator.\n    const nodes = [];\n    while (currentNode = commentNodesIterator.nextNode()) {\n        nodes.push(currentNode);\n    }\n    for (const node of nodes) {\n        if (node.textContent === \"ngetn\" /* TextNodeMarker.EmptyNode */) {\n            node.replaceWith(doc.createTextNode(''));\n        }\n        else {\n            node.remove();\n        }\n    }\n}\n/**\n * Marks a node as \"claimed\" by hydration process.\n * This is needed to make assessments in tests whether\n * the hydration process handled all nodes.\n */\nfunction markRNodeAsClaimedByHydration(node, checkIfAlreadyClaimed = true) {\n    if (!ngDevMode) {\n        throw new Error('Calling `markRNodeAsClaimedByHydration` in prod mode ' +\n            'is not supported and likely a mistake.');\n    }\n    if (checkIfAlreadyClaimed && isRNodeClaimedForHydration(node)) {\n        throw new Error('Trying to claim a node, which was claimed already.');\n    }\n    node.__claimed = true;\n    ngDevMode.hydratedNodes++;\n}\nfunction isRNodeClaimedForHydration(node) {\n    return !!node.__claimed;\n}\nfunction setSegmentHead(hydrationInfo, index, node) {\n    hydrationInfo.segmentHeads ??= {};\n    hydrationInfo.segmentHeads[index] = node;\n}\nfunction getSegmentHead(hydrationInfo, index) {\n    return hydrationInfo.segmentHeads?.[index] ?? null;\n}\n/**\n * Returns the size of an <ng-container>, using either the information\n * serialized in `ELEMENT_CONTAINERS` (element container size) or by\n * computing the sum of root nodes in all dehydrated views in a given\n * container (in case this `<ng-container>` was also used as a view\n * container host node, e.g. <ng-container *ngIf>).\n */\nfunction getNgContainerSize(hydrationInfo, index) {\n    const data = hydrationInfo.data;\n    let size = data[ELEMENT_CONTAINERS]?.[index] ?? null;\n    // If there is no serialized information available in the `ELEMENT_CONTAINERS` slot,\n    // check if we have info about view containers at this location (e.g.\n    // `<ng-container *ngIf>`) and use container size as a number of root nodes in this\n    // element container.\n    if (size === null && data[CONTAINERS]?.[index]) {\n        size = calcSerializedContainerSize(hydrationInfo, index);\n    }\n    return size;\n}\nfunction getSerializedContainerViews(hydrationInfo, index) {\n    return hydrationInfo.data[CONTAINERS]?.[index] ?? null;\n}\n/**\n * Computes the size of a serialized container (the number of root nodes)\n * by calculating the sum of root nodes in all dehydrated views in this container.\n */\nfunction calcSerializedContainerSize(hydrationInfo, index) {\n    const views = getSerializedContainerViews(hydrationInfo, index) ?? [];\n    let numNodes = 0;\n    for (let view of views) {\n        numNodes += view[NUM_ROOT_NODES] * (view[MULTIPLIER] ?? 1);\n    }\n    return numNodes;\n}\n/**\n * Checks whether a node is annotated as \"disconnected\", i.e. not present\n * in the DOM at serialization time. We should not attempt hydration for\n * such nodes and instead, use a regular \"creation mode\".\n */\nfunction isDisconnectedNode$1(hydrationInfo, index) {\n    // Check if we are processing disconnected info for the first time.\n    if (typeof hydrationInfo.disconnectedNodes === 'undefined') {\n        const nodeIds = hydrationInfo.data[DISCONNECTED_NODES];\n        hydrationInfo.disconnectedNodes = nodeIds ? (new Set(nodeIds)) : null;\n    }\n    return !!hydrationInfo.disconnectedNodes?.has(index);\n}\n\n/**\n * Represents a component created by a `ComponentFactory`.\n * Provides access to the component instance and related objects,\n * and provides the means of destroying the instance.\n *\n * @publicApi\n */\nclass ComponentRef$1 {\n}\n/**\n * Base class for a factory that can create a component dynamically.\n * Instantiate a factory for a given type of component with `resolveComponentFactory()`.\n * Use the resulting `ComponentFactory.create()` method to create a component of that type.\n *\n * @publicApi\n *\n * @deprecated Angular no longer requires Component factories. Please use other APIs where\n *     Component class can be used directly.\n */\nclass ComponentFactory$1 {\n}\n\nfunction noComponentFactoryError(component) {\n    const error = Error(`No component factory found for ${stringify(component)}.`);\n    error[ERROR_COMPONENT] = component;\n    return error;\n}\nconst ERROR_COMPONENT = 'ngComponent';\nfunction getComponent$1(error) {\n    return error[ERROR_COMPONENT];\n}\nclass _NullComponentFactoryResolver {\n    resolveComponentFactory(component) {\n        throw noComponentFactoryError(component);\n    }\n}\n/**\n * A simple registry that maps `Components` to generated `ComponentFactory` classes\n * that can be used to create instances of components.\n * Use to obtain the factory for a given component type,\n * then use the factory's `create()` method to create a component of that type.\n *\n * Note: since v13, dynamic component creation via\n * [`ViewContainerRef.createComponent`](api/core/ViewContainerRef#createComponent)\n * does **not** require resolving component factory: component class can be used directly.\n *\n * @publicApi\n *\n * @deprecated Angular no longer requires Component factories. Please use other APIs where\n *     Component class can be used directly.\n */\nclass ComponentFactoryResolver$1 {\n    static { this.NULL = ( /* @__PURE__ */new _NullComponentFactoryResolver()); }\n}\n\n/**\n * Creates an ElementRef from the most recent node.\n *\n * @returns The ElementRef instance to use\n */\nfunction injectElementRef() {\n    return createElementRef(getCurrentTNode(), getLView());\n}\n/**\n * Creates an ElementRef given a node.\n *\n * @param tNode The node for which you'd like an ElementRef\n * @param lView The view to which the node belongs\n * @returns The ElementRef instance to use\n */\nfunction createElementRef(tNode, lView) {\n    return new ElementRef(getNativeByTNode(tNode, lView));\n}\n/**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * @security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](https://g.co/ng/security).\n *\n * @publicApi\n */\n// Note: We don't expose things like `Injector`, `ViewContainer`, ... here,\n// i.e. users have to ask for what they need. With that, we can build better analysis tools\n// and could do better codegen in the future.\nclass ElementRef {\n    constructor(nativeElement) {\n        this.nativeElement = nativeElement;\n    }\n    /**\n     * @internal\n     * @nocollapse\n     */\n    static { this.__NG_ELEMENT_ID__ = injectElementRef; }\n}\n/**\n * Unwraps `ElementRef` and return the `nativeElement`.\n *\n * @param value value to unwrap\n * @returns `nativeElement` if `ElementRef` otherwise returns value as is.\n */\nfunction unwrapElementRef(value) {\n    return value instanceof ElementRef ? value.nativeElement : value;\n}\n\n/**\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n *\n * @publicApi\n */\nclass RendererFactory2 {\n}\n/**\n * Extend this base class to implement custom rendering. By default, Angular\n * renders a template into DOM. You can use custom rendering to intercept\n * rendering calls, or to render to something other than DOM.\n *\n * Create your custom renderer using `RendererFactory2`.\n *\n * Use a custom renderer to bypass Angular's templating and\n * make custom UI changes that can't be expressed declaratively.\n * For example if you need to set a property or an attribute whose name is\n * not statically known, use the `setProperty()` or\n * `setAttribute()` method.\n *\n * @publicApi\n */\nclass Renderer2 {\n    constructor() {\n        /**\n         * If null or undefined, the view engine won't call it.\n         * This is used as a performance optimization for production mode.\n         */\n        this.destroyNode = null;\n    }\n    /**\n     * @internal\n     * @nocollapse\n     */\n    static { this.__NG_ELEMENT_ID__ = () => injectRenderer2(); }\n}\n/** Injects a Renderer2 for the current component. */\nfunction injectRenderer2() {\n    // We need the Renderer to be based on the component that it's being injected into, however since\n    // DI happens before we've entered its view, `getLView` will return the parent view instead.\n    const lView = getLView();\n    const tNode = getCurrentTNode();\n    const nodeAtIndex = getComponentLViewByIndex(tNode.index, lView);\n    return (isLView(nodeAtIndex) ? nodeAtIndex : lView)[RENDERER];\n}\n\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n * @publicApi\n */\nclass Sanitizer {\n    /** @nocollapse */\n    static { this.ɵprov = ɵɵdefineInjectable({\n        token: Sanitizer,\n        providedIn: 'root',\n        factory: () => null,\n    }); }\n}\n\n// This default value is when checking the hierarchy for a token.\n//\n// It means both:\n// - the token is not provided by the current injector,\n// - only the element injectors should be checked (ie do not check module injectors\n//\n//          mod1\n//         /\n//       el1   mod2\n//         \\  /\n//         el2\n//\n// When requesting el2.injector.get(token), we should check in the following order and return the\n// first found value:\n// - el2.injector.get(token, default)\n// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module\n// - mod2.injector.get(token, default)\nconst NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\n\n/**\n * Checks if the given `value` is a reactive `Signal`.\n */\nfunction isSignal(value) {\n    return typeof value === 'function' && value[SIGNAL$1] !== undefined;\n}\n\n/**\n * Create a computed `Signal` which derives a reactive value from an expression.\n */\nfunction computed(computation, options) {\n    const getter = createComputed$1(computation);\n    if (options?.equal) {\n        getter[SIGNAL$1].equal = options.equal;\n    }\n    return getter;\n}\n\n/**\n * Create a `Signal` that can be set or updated directly.\n */\nfunction signal(initialValue, options) {\n    const signalFn = createSignal$1(initialValue);\n    const node = signalFn[SIGNAL$1];\n    if (options?.equal) {\n        node.equal = options.equal;\n    }\n    signalFn.set = (newValue) => signalSetFn$1(node, newValue);\n    signalFn.update = (updateFn) => signalUpdateFn$1(node, updateFn);\n    signalFn.asReadonly = signalAsReadonlyFn.bind(signalFn);\n    return signalFn;\n}\nfunction signalAsReadonlyFn() {\n    const node = this[SIGNAL$1];\n    if (node.readonlyFn === undefined) {\n        const readonlyFn = () => this();\n        readonlyFn[SIGNAL$1] = node;\n        node.readonlyFn = readonlyFn;\n    }\n    return node.readonlyFn;\n}\n\n/**\n * Execute an arbitrary function in a non-reactive (non-tracking) context. The executed function\n * can, optionally, return a value.\n */\nfunction untracked(nonReactiveReadsFn) {\n    const prevConsumer = setActiveConsumer$1(null);\n    // We are not trying to catch any particular errors here, just making sure that the consumers\n    // stack is restored in case of errors.\n    try {\n        return nonReactiveReadsFn();\n    }\n    finally {\n        setActiveConsumer$1(prevConsumer);\n    }\n}\n\nfunction isIterable(obj) {\n    return obj !== null && typeof obj === 'object' && obj[Symbol.iterator] !== undefined;\n}\nfunction isListLikeIterable(obj) {\n    if (!isJsObject(obj))\n        return false;\n    return Array.isArray(obj) ||\n        (!(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]\n            Symbol.iterator in obj); // JS Iterable have a Symbol.iterator prop\n}\nfunction areIterablesEqual(a, b, comparator) {\n    const iterator1 = a[Symbol.iterator]();\n    const iterator2 = b[Symbol.iterator]();\n    while (true) {\n        const item1 = iterator1.next();\n        const item2 = iterator2.next();\n        if (item1.done && item2.done)\n            return true;\n        if (item1.done || item2.done)\n            return false;\n        if (!comparator(item1.value, item2.value))\n            return false;\n    }\n}\nfunction iterateListLike(obj, fn) {\n    if (Array.isArray(obj)) {\n        for (let i = 0; i < obj.length; i++) {\n            fn(obj[i]);\n        }\n    }\n    else {\n        const iterator = obj[Symbol.iterator]();\n        let item;\n        while (!((item = iterator.next()).done)) {\n            fn(item.value);\n        }\n    }\n}\nfunction isJsObject(o) {\n    return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\n\nclass DefaultIterableDifferFactory {\n    constructor() { }\n    supports(obj) {\n        return isListLikeIterable(obj);\n    }\n    create(trackByFn) {\n        return new DefaultIterableDiffer(trackByFn);\n    }\n}\nconst trackByIdentity = (index, item) => item;\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n * @publicApi\n */\nclass DefaultIterableDiffer {\n    constructor(trackByFn) {\n        this.length = 0;\n        // Keeps track of the used records at any point in time (during & across `_check()` calls)\n        this._linkedRecords = null;\n        // Keeps track of the removed records at any point in time during `_check()` calls.\n        this._unlinkedRecords = null;\n        this._previousItHead = null;\n        this._itHead = null;\n        this._itTail = null;\n        this._additionsHead = null;\n        this._additionsTail = null;\n        this._movesHead = null;\n        this._movesTail = null;\n        this._removalsHead = null;\n        this._removalsTail = null;\n        // Keeps track of records where custom track by is the same, but item identity has changed\n        this._identityChangesHead = null;\n        this._identityChangesTail = null;\n        this._trackByFn = trackByFn || trackByIdentity;\n    }\n    forEachItem(fn) {\n        let record;\n        for (record = this._itHead; record !== null; record = record._next) {\n            fn(record);\n        }\n    }\n    forEachOperation(fn) {\n        let nextIt = this._itHead;\n        let nextRemove = this._removalsHead;\n        let addRemoveOffset = 0;\n        let moveOffsets = null;\n        while (nextIt || nextRemove) {\n            // Figure out which is the next record to process\n            // Order: remove, add, move\n            const record = !nextRemove ||\n                nextIt &&\n                    nextIt.currentIndex <\n                        getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?\n                nextIt :\n                nextRemove;\n            const adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n            const currentIndex = record.currentIndex;\n            // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n            if (record === nextRemove) {\n                addRemoveOffset--;\n                nextRemove = nextRemove._nextRemoved;\n            }\n            else {\n                nextIt = nextIt._next;\n                if (record.previousIndex == null) {\n                    addRemoveOffset++;\n                }\n                else {\n                    // INVARIANT:  currentIndex < previousIndex\n                    if (!moveOffsets)\n                        moveOffsets = [];\n                    const localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n                    const localCurrentIndex = currentIndex - addRemoveOffset;\n                    if (localMovePreviousIndex != localCurrentIndex) {\n                        for (let i = 0; i < localMovePreviousIndex; i++) {\n                            const offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);\n                            const index = offset + i;\n                            if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n                                moveOffsets[i] = offset + 1;\n                            }\n                        }\n                        const previousIndex = record.previousIndex;\n                        moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n                    }\n                }\n            }\n            if (adjPreviousIndex !== currentIndex) {\n                fn(record, adjPreviousIndex, currentIndex);\n            }\n        }\n    }\n    forEachPreviousItem(fn) {\n        let record;\n        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n            fn(record);\n        }\n    }\n    forEachAddedItem(fn) {\n        let record;\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n            fn(record);\n        }\n    }\n    forEachMovedItem(fn) {\n        let record;\n        for (record = this._movesHead; record !== null; record = record._nextMoved) {\n            fn(record);\n        }\n    }\n    forEachRemovedItem(fn) {\n        let record;\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n            fn(record);\n        }\n    }\n    forEachIdentityChange(fn) {\n        let record;\n        for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n            fn(record);\n        }\n    }\n    diff(collection) {\n        if (collection == null)\n            collection = [];\n        if (!isListLikeIterable(collection)) {\n            throw new RuntimeError(900 /* RuntimeErrorCode.INVALID_DIFFER_INPUT */, ngDevMode &&\n                `Error trying to diff '${stringify(collection)}'. Only arrays and iterables are allowed`);\n        }\n        if (this.check(collection)) {\n            return this;\n        }\n        else {\n            return null;\n        }\n    }\n    onDestroy() { }\n    check(collection) {\n        this._reset();\n        let record = this._itHead;\n        let mayBeDirty = false;\n        let index;\n        let item;\n        let itemTrackBy;\n        if (Array.isArray(collection)) {\n            this.length = collection.length;\n            for (let index = 0; index < this.length; index++) {\n                item = collection[index];\n                itemTrackBy = this._trackByFn(index, item);\n                if (record === null || !Object.is(record.trackById, itemTrackBy)) {\n                    record = this._mismatch(record, item, itemTrackBy, index);\n                    mayBeDirty = true;\n                }\n                else {\n                    if (mayBeDirty) {\n                        // TODO(misko): can we limit this to duplicates only?\n                        record = this._verifyReinsertion(record, item, itemTrackBy, index);\n                    }\n                    if (!Object.is(record.item, item))\n                        this._addIdentityChange(record, item);\n                }\n                record = record._next;\n            }\n        }\n        else {\n            index = 0;\n            iterateListLike(collection, (item) => {\n                itemTrackBy = this._trackByFn(index, item);\n                if (record === null || !Object.is(record.trackById, itemTrackBy)) {\n                    record = this._mismatch(record, item, itemTrackBy, index);\n                    mayBeDirty = true;\n                }\n                else {\n                    if (mayBeDirty) {\n                        // TODO(misko): can we limit this to duplicates only?\n                        record = this._verifyReinsertion(record, item, itemTrackBy, index);\n                    }\n                    if (!Object.is(record.item, item))\n                        this._addIdentityChange(record, item);\n                }\n                record = record._next;\n                index++;\n            });\n            this.length = index;\n        }\n        this._truncate(record);\n        this.collection = collection;\n        return this.isDirty;\n    }\n    /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity\n     * changes.\n     */\n    get isDirty() {\n        return this._additionsHead !== null || this._movesHead !== null ||\n            this._removalsHead !== null || this._identityChangesHead !== null;\n    }\n    /**\n     * Reset the state of the change objects to show no changes. This means set previousKey to\n     * currentKey, and clear all of the queues (additions, moves, removals).\n     * Set the previousIndexes of moved and added items to their currentIndexes\n     * Reset the list of additions, moves and removals\n     *\n     * @internal\n     */\n    _reset() {\n        if (this.isDirty) {\n            let record;\n            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n                record._nextPrevious = record._next;\n            }\n            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                record.previousIndex = record.currentIndex;\n            }\n            this._additionsHead = this._additionsTail = null;\n            for (record = this._movesHead; record !== null; record = record._nextMoved) {\n                record.previousIndex = record.currentIndex;\n            }\n            this._movesHead = this._movesTail = null;\n            this._removalsHead = this._removalsTail = null;\n            this._identityChangesHead = this._identityChangesTail = null;\n            // TODO(vicb): when assert gets supported\n            // assert(!this.isDirty);\n        }\n    }\n    /**\n     * This is the core function which handles differences between collections.\n     *\n     * - `record` is the record which we saw at this position last time. If null then it is a new\n     *   item.\n     * - `item` is the current item in the collection\n     * - `index` is the position of the item in the collection\n     *\n     * @internal\n     */\n    _mismatch(record, item, itemTrackBy, index) {\n        // The previous record after which we will append the current one.\n        let previousRecord;\n        if (record === null) {\n            previousRecord = this._itTail;\n        }\n        else {\n            previousRecord = record._prev;\n            // Remove the record from the collection since we know it does not match the item.\n            this._remove(record);\n        }\n        // See if we have evicted the item, which used to be at some anterior position of _itHead list.\n        record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n        if (record !== null) {\n            // It is an item which we have evicted earlier: reinsert it back into the list.\n            // But first we need to check if identity changed, so we can update in view if necessary.\n            if (!Object.is(record.item, item))\n                this._addIdentityChange(record, item);\n            this._reinsertAfter(record, previousRecord, index);\n        }\n        else {\n            // Attempt to see if the item is at some posterior position of _itHead list.\n            record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n            if (record !== null) {\n                // We have the item in _itHead at/after `index` position. We need to move it forward in the\n                // collection.\n                // But first we need to check if identity changed, so we can update in view if necessary.\n                if (!Object.is(record.item, item))\n                    this._addIdentityChange(record, item);\n                this._moveAfter(record, previousRecord, index);\n            }\n            else {\n                // It is a new item: add it.\n                record =\n                    this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);\n            }\n        }\n        return record;\n    }\n    /**\n     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n     *\n     * Use case: `[a, a]` => `[b, a, a]`\n     *\n     * If we did not have this check then the insertion of `b` would:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) leave `a` at index `1` as is. <-- this is wrong!\n     *   3) reinsert `a` at index 2. <-- this is wrong!\n     *\n     * The correct behavior is:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) reinsert `a` at index 1.\n     *   3) move `a` at from `1` to `2`.\n     *\n     *\n     * Double check that we have not evicted a duplicate item. We need to check if the item type may\n     * have already been removed:\n     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n     * at the end.\n     *\n     * @internal\n     */\n    _verifyReinsertion(record, item, itemTrackBy, index) {\n        let reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n        if (reinsertRecord !== null) {\n            record = this._reinsertAfter(reinsertRecord, record._prev, index);\n        }\n        else if (record.currentIndex != index) {\n            record.currentIndex = index;\n            this._addToMoves(record, index);\n        }\n        return record;\n    }\n    /**\n     * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection\n     *\n     * - `record` The first excess {@link IterableChangeRecord_}.\n     *\n     * @internal\n     */\n    _truncate(record) {\n        // Anything after that needs to be removed;\n        while (record !== null) {\n            const nextRecord = record._next;\n            this._addToRemovals(this._unlink(record));\n            record = nextRecord;\n        }\n        if (this._unlinkedRecords !== null) {\n            this._unlinkedRecords.clear();\n        }\n        if (this._additionsTail !== null) {\n            this._additionsTail._nextAdded = null;\n        }\n        if (this._movesTail !== null) {\n            this._movesTail._nextMoved = null;\n        }\n        if (this._itTail !== null) {\n            this._itTail._next = null;\n        }\n        if (this._removalsTail !== null) {\n            this._removalsTail._nextRemoved = null;\n        }\n        if (this._identityChangesTail !== null) {\n            this._identityChangesTail._nextIdentityChange = null;\n        }\n    }\n    /** @internal */\n    _reinsertAfter(record, prevRecord, index) {\n        if (this._unlinkedRecords !== null) {\n            this._unlinkedRecords.remove(record);\n        }\n        const prev = record._prevRemoved;\n        const next = record._nextRemoved;\n        if (prev === null) {\n            this._removalsHead = next;\n        }\n        else {\n            prev._nextRemoved = next;\n        }\n        if (next === null) {\n            this._removalsTail = prev;\n        }\n        else {\n            next._prevRemoved = prev;\n        }\n        this._insertAfter(record, prevRecord, index);\n        this._addToMoves(record, index);\n        return record;\n    }\n    /** @internal */\n    _moveAfter(record, prevRecord, index) {\n        this._unlink(record);\n        this._insertAfter(record, prevRecord, index);\n        this._addToMoves(record, index);\n        return record;\n    }\n    /** @internal */\n    _addAfter(record, prevRecord, index) {\n        this._insertAfter(record, prevRecord, index);\n        if (this._additionsTail === null) {\n            // TODO(vicb):\n            // assert(this._additionsHead === null);\n            this._additionsTail = this._additionsHead = record;\n        }\n        else {\n            // TODO(vicb):\n            // assert(_additionsTail._nextAdded === null);\n            // assert(record._nextAdded === null);\n            this._additionsTail = this._additionsTail._nextAdded = record;\n        }\n        return record;\n    }\n    /** @internal */\n    _insertAfter(record, prevRecord, index) {\n        // TODO(vicb):\n        // assert(record != prevRecord);\n        // assert(record._next === null);\n        // assert(record._prev === null);\n        const next = prevRecord === null ? this._itHead : prevRecord._next;\n        // TODO(vicb):\n        // assert(next != record);\n        // assert(prevRecord != record);\n        record._next = next;\n        record._prev = prevRecord;\n        if (next === null) {\n            this._itTail = record;\n        }\n        else {\n            next._prev = record;\n        }\n        if (prevRecord === null) {\n            this._itHead = record;\n        }\n        else {\n            prevRecord._next = record;\n        }\n        if (this._linkedRecords === null) {\n            this._linkedRecords = new _DuplicateMap();\n        }\n        this._linkedRecords.put(record);\n        record.currentIndex = index;\n        return record;\n    }\n    /** @internal */\n    _remove(record) {\n        return this._addToRemovals(this._unlink(record));\n    }\n    /** @internal */\n    _unlink(record) {\n        if (this._linkedRecords !== null) {\n            this._linkedRecords.remove(record);\n        }\n        const prev = record._prev;\n        const next = record._next;\n        // TODO(vicb):\n        // assert((record._prev = null) === null);\n        // assert((record._next = null) === null);\n        if (prev === null) {\n            this._itHead = next;\n        }\n        else {\n            prev._next = next;\n        }\n        if (next === null) {\n            this._itTail = prev;\n        }\n        else {\n            next._prev = prev;\n        }\n        return record;\n    }\n    /** @internal */\n    _addToMoves(record, toIndex) {\n        // TODO(vicb):\n        // assert(record._nextMoved === null);\n        if (record.previousIndex === toIndex) {\n            return record;\n        }\n        if (this._movesTail === null) {\n            // TODO(vicb):\n            // assert(_movesHead === null);\n            this._movesTail = this._movesHead = record;\n        }\n        else {\n            // TODO(vicb):\n            // assert(_movesTail._nextMoved === null);\n            this._movesTail = this._movesTail._nextMoved = record;\n        }\n        return record;\n    }\n    _addToRemovals(record) {\n        if (this._unlinkedRecords === null) {\n            this._unlinkedRecords = new _DuplicateMap();\n        }\n        this._unlinkedRecords.put(record);\n        record.currentIndex = null;\n        record._nextRemoved = null;\n        if (this._removalsTail === null) {\n            // TODO(vicb):\n            // assert(_removalsHead === null);\n            this._removalsTail = this._removalsHead = record;\n            record._prevRemoved = null;\n        }\n        else {\n            // TODO(vicb):\n            // assert(_removalsTail._nextRemoved === null);\n            // assert(record._nextRemoved === null);\n            record._prevRemoved = this._removalsTail;\n            this._removalsTail = this._removalsTail._nextRemoved = record;\n        }\n        return record;\n    }\n    /** @internal */\n    _addIdentityChange(record, item) {\n        record.item = item;\n        if (this._identityChangesTail === null) {\n            this._identityChangesTail = this._identityChangesHead = record;\n        }\n        else {\n            this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n        }\n        return record;\n    }\n}\nclass IterableChangeRecord_ {\n    constructor(item, trackById) {\n        this.item = item;\n        this.trackById = trackById;\n        this.currentIndex = null;\n        this.previousIndex = null;\n        /** @internal */\n        this._nextPrevious = null;\n        /** @internal */\n        this._prev = null;\n        /** @internal */\n        this._next = null;\n        /** @internal */\n        this._prevDup = null;\n        /** @internal */\n        this._nextDup = null;\n        /** @internal */\n        this._prevRemoved = null;\n        /** @internal */\n        this._nextRemoved = null;\n        /** @internal */\n        this._nextAdded = null;\n        /** @internal */\n        this._nextMoved = null;\n        /** @internal */\n        this._nextIdentityChange = null;\n    }\n}\n// A linked list of IterableChangeRecords with the same IterableChangeRecord_.item\nclass _DuplicateItemRecordList {\n    constructor() {\n        /** @internal */\n        this._head = null;\n        /** @internal */\n        this._tail = null;\n    }\n    /**\n     * Append the record to the list of duplicates.\n     *\n     * Note: by design all records in the list of duplicates hold the same value in record.item.\n     */\n    add(record) {\n        if (this._head === null) {\n            this._head = this._tail = record;\n            record._nextDup = null;\n            record._prevDup = null;\n        }\n        else {\n            // TODO(vicb):\n            // assert(record.item ==  _head.item ||\n            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n            this._tail._nextDup = record;\n            record._prevDup = this._tail;\n            record._nextDup = null;\n            this._tail = record;\n        }\n    }\n    // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and\n    // IterableChangeRecord_.currentIndex >= atOrAfterIndex\n    get(trackById, atOrAfterIndex) {\n        let record;\n        for (record = this._head; record !== null; record = record._nextDup) {\n            if ((atOrAfterIndex === null || atOrAfterIndex <= record.currentIndex) &&\n                Object.is(record.trackById, trackById)) {\n                return record;\n            }\n        }\n        return null;\n    }\n    /**\n     * Remove one {@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * Returns whether the list of duplicates is empty.\n     */\n    remove(record) {\n        // TODO(vicb):\n        // assert(() {\n        //  // verify that the record being removed is in the list.\n        //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\n        //    if (identical(cursor, record)) return true;\n        //  }\n        //  return false;\n        //});\n        const prev = record._prevDup;\n        const next = record._nextDup;\n        if (prev === null) {\n            this._head = next;\n        }\n        else {\n            prev._nextDup = next;\n        }\n        if (next === null) {\n            this._tail = prev;\n        }\n        else {\n            next._prevDup = prev;\n        }\n        return this._head === null;\n    }\n}\nclass _DuplicateMap {\n    constructor() {\n        this.map = new Map();\n    }\n    put(record) {\n        const key = record.trackById;\n        let duplicates = this.map.get(key);\n        if (!duplicates) {\n            duplicates = new _DuplicateItemRecordList();\n            this.map.set(key, duplicates);\n        }\n        duplicates.add(record);\n    }\n    /**\n     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n     *\n     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n     * have any more `a`s needs to return the second `a`.\n     */\n    get(trackById, atOrAfterIndex) {\n        const key = trackById;\n        const recordList = this.map.get(key);\n        return recordList ? recordList.get(trackById, atOrAfterIndex) : null;\n    }\n    /**\n     * Removes a {@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * The list of duplicates also is removed from the map if it gets empty.\n     */\n    remove(record) {\n        const key = record.trackById;\n        const recordList = this.map.get(key);\n        // Remove the list of duplicates when it gets empty\n        if (recordList.remove(record)) {\n            this.map.delete(key);\n        }\n        return record;\n    }\n    get isEmpty() {\n        return this.map.size === 0;\n    }\n    clear() {\n        this.map.clear();\n    }\n}\nfunction getPreviousIndex(item, addRemoveOffset, moveOffsets) {\n    const previousIndex = item.previousIndex;\n    if (previousIndex === null)\n        return previousIndex;\n    let moveOffset = 0;\n    if (moveOffsets && previousIndex < moveOffsets.length) {\n        moveOffset = moveOffsets[previousIndex];\n    }\n    return previousIndex + addRemoveOffset + moveOffset;\n}\n\nclass DefaultKeyValueDifferFactory {\n    constructor() { }\n    supports(obj) {\n        return obj instanceof Map || isJsObject(obj);\n    }\n    create() {\n        return new DefaultKeyValueDiffer();\n    }\n}\nclass DefaultKeyValueDiffer {\n    constructor() {\n        this._records = new Map();\n        this._mapHead = null;\n        // _appendAfter is used in the check loop\n        this._appendAfter = null;\n        this._previousMapHead = null;\n        this._changesHead = null;\n        this._changesTail = null;\n        this._additionsHead = null;\n        this._additionsTail = null;\n        this._removalsHead = null;\n        this._removalsTail = null;\n    }\n    get isDirty() {\n        return this._additionsHead !== null || this._changesHead !== null ||\n            this._removalsHead !== null;\n    }\n    forEachItem(fn) {\n        let record;\n        for (record = this._mapHead; record !== null; record = record._next) {\n            fn(record);\n        }\n    }\n    forEachPreviousItem(fn) {\n        let record;\n        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n            fn(record);\n        }\n    }\n    forEachChangedItem(fn) {\n        let record;\n        for (record = this._changesHead; record !== null; record = record._nextChanged) {\n            fn(record);\n        }\n    }\n    forEachAddedItem(fn) {\n        let record;\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n            fn(record);\n        }\n    }\n    forEachRemovedItem(fn) {\n        let record;\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n            fn(record);\n        }\n    }\n    diff(map) {\n        if (!map) {\n            map = new Map();\n        }\n        else if (!(map instanceof Map || isJsObject(map))) {\n            throw new RuntimeError(900 /* RuntimeErrorCode.INVALID_DIFFER_INPUT */, ngDevMode &&\n                `Error trying to diff '${stringify(map)}'. Only maps and objects are allowed`);\n        }\n        return this.check(map) ? this : null;\n    }\n    onDestroy() { }\n    /**\n     * Check the current state of the map vs the previous.\n     * The algorithm is optimised for when the keys do no change.\n     */\n    check(map) {\n        this._reset();\n        let insertBefore = this._mapHead;\n        this._appendAfter = null;\n        this._forEach(map, (value, key) => {\n            if (insertBefore && insertBefore.key === key) {\n                this._maybeAddToChanges(insertBefore, value);\n                this._appendAfter = insertBefore;\n                insertBefore = insertBefore._next;\n            }\n            else {\n                const record = this._getOrCreateRecordForKey(key, value);\n                insertBefore = this._insertBeforeOrAppend(insertBefore, record);\n            }\n        });\n        // Items remaining at the end of the list have been deleted\n        if (insertBefore) {\n            if (insertBefore._prev) {\n                insertBefore._prev._next = null;\n            }\n            this._removalsHead = insertBefore;\n            for (let record = insertBefore; record !== null; record = record._nextRemoved) {\n                if (record === this._mapHead) {\n                    this._mapHead = null;\n                }\n                this._records.delete(record.key);\n                record._nextRemoved = record._next;\n                record.previousValue = record.currentValue;\n                record.currentValue = null;\n                record._prev = null;\n                record._next = null;\n            }\n        }\n        // Make sure tails have no next records from previous runs\n        if (this._changesTail)\n            this._changesTail._nextChanged = null;\n        if (this._additionsTail)\n            this._additionsTail._nextAdded = null;\n        return this.isDirty;\n    }\n    /**\n     * Inserts a record before `before` or append at the end of the list when `before` is null.\n     *\n     * Notes:\n     * - This method appends at `this._appendAfter`,\n     * - This method updates `this._appendAfter`,\n     * - The return value is the new value for the insertion pointer.\n     */\n    _insertBeforeOrAppend(before, record) {\n        if (before) {\n            const prev = before._prev;\n            record._next = before;\n            record._prev = prev;\n            before._prev = record;\n            if (prev) {\n                prev._next = record;\n            }\n            if (before === this._mapHead) {\n                this._mapHead = record;\n            }\n            this._appendAfter = before;\n            return before;\n        }\n        if (this._appendAfter) {\n            this._appendAfter._next = record;\n            record._prev = this._appendAfter;\n        }\n        else {\n            this._mapHead = record;\n        }\n        this._appendAfter = record;\n        return null;\n    }\n    _getOrCreateRecordForKey(key, value) {\n        if (this._records.has(key)) {\n            const record = this._records.get(key);\n            this._maybeAddToChanges(record, value);\n            const prev = record._prev;\n            const next = record._next;\n            if (prev) {\n                prev._next = next;\n            }\n            if (next) {\n                next._prev = prev;\n            }\n            record._next = null;\n            record._prev = null;\n            return record;\n        }\n        const record = new KeyValueChangeRecord_(key);\n        this._records.set(key, record);\n        record.currentValue = value;\n        this._addToAdditions(record);\n        return record;\n    }\n    /** @internal */\n    _reset() {\n        if (this.isDirty) {\n            let record;\n            // let `_previousMapHead` contain the state of the map before the changes\n            this._previousMapHead = this._mapHead;\n            for (record = this._previousMapHead; record !== null; record = record._next) {\n                record._nextPrevious = record._next;\n            }\n            // Update `record.previousValue` with the value of the item before the changes\n            // We need to update all changed items (that's those which have been added and changed)\n            for (record = this._changesHead; record !== null; record = record._nextChanged) {\n                record.previousValue = record.currentValue;\n            }\n            for (record = this._additionsHead; record != null; record = record._nextAdded) {\n                record.previousValue = record.currentValue;\n            }\n            this._changesHead = this._changesTail = null;\n            this._additionsHead = this._additionsTail = null;\n            this._removalsHead = null;\n        }\n    }\n    // Add the record or a given key to the list of changes only when the value has actually changed\n    _maybeAddToChanges(record, newValue) {\n        if (!Object.is(newValue, record.currentValue)) {\n            record.previousValue = record.currentValue;\n            record.currentValue = newValue;\n            this._addToChanges(record);\n        }\n    }\n    _addToAdditions(record) {\n        if (this._additionsHead === null) {\n            this._additionsHead = this._additionsTail = record;\n        }\n        else {\n            this._additionsTail._nextAdded = record;\n            this._additionsTail = record;\n        }\n    }\n    _addToChanges(record) {\n        if (this._changesHead === null) {\n            this._changesHead = this._changesTail = record;\n        }\n        else {\n            this._changesTail._nextChanged = record;\n            this._changesTail = record;\n        }\n    }\n    /** @internal */\n    _forEach(obj, fn) {\n        if (obj instanceof Map) {\n            obj.forEach(fn);\n        }\n        else {\n            Object.keys(obj).forEach(k => fn(obj[k], k));\n        }\n    }\n}\nclass KeyValueChangeRecord_ {\n    constructor(key) {\n        this.key = key;\n        this.previousValue = null;\n        this.currentValue = null;\n        /** @internal */\n        this._nextPrevious = null;\n        /** @internal */\n        this._next = null;\n        /** @internal */\n        this._prev = null;\n        /** @internal */\n        this._nextAdded = null;\n        /** @internal */\n        this._nextRemoved = null;\n        /** @internal */\n        this._nextChanged = null;\n    }\n}\n\nfunction defaultIterableDiffersFactory() {\n    return new IterableDiffers([new DefaultIterableDifferFactory()]);\n}\n/**\n * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n *\n * @publicApi\n */\nclass IterableDiffers {\n    /** @nocollapse */\n    static { this.ɵprov = ɵɵdefineInjectable({ token: IterableDiffers, providedIn: 'root', factory: defaultIterableDiffersFactory }); }\n    constructor(factories) {\n        this.factories = factories;\n    }\n    static create(factories, parent) {\n        if (parent != null) {\n            const copied = parent.factories.slice();\n            factories = factories.concat(copied);\n        }\n        return new IterableDiffers(factories);\n    }\n    /**\n     * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the\n     * inherited {@link IterableDiffers} instance with the provided factories and return a new\n     * {@link IterableDiffers} instance.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {@link IterableDiffer} available.\n     *\n     * ```\n     * @Component({\n     *   viewProviders: [\n     *     IterableDiffers.extend([new ImmutableListDiffer()])\n     *   ]\n     * })\n     * ```\n     */\n    static extend(factories) {\n        return {\n            provide: IterableDiffers,\n            useFactory: (parent) => {\n                // if parent is null, it means that we are in the root injector and we have just overridden\n                // the default injection mechanism for IterableDiffers, in such a case just assume\n                // `defaultIterableDiffersFactory`.\n                return IterableDiffers.create(factories, parent || defaultIterableDiffersFactory());\n            },\n            // Dependency technically isn't optional, but we can provide a better error message this way.\n            deps: [[IterableDiffers, new SkipSelf(), new Optional()]]\n        };\n    }\n    find(iterable) {\n        const factory = this.factories.find(f => f.supports(iterable));\n        if (factory != null) {\n            return factory;\n        }\n        else {\n            throw new RuntimeError(901 /* RuntimeErrorCode.NO_SUPPORTING_DIFFER_FACTORY */, ngDevMode &&\n                `Cannot find a differ supporting object '${iterable}' of type '${getTypeNameForDebugging(iterable)}'`);\n        }\n    }\n}\nfunction getTypeNameForDebugging(type) {\n    return type['name'] || typeof type;\n}\n\nfunction defaultKeyValueDiffersFactory() {\n    return new KeyValueDiffers([new DefaultKeyValueDifferFactory()]);\n}\n/**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n *\n * @publicApi\n */\nclass KeyValueDiffers {\n    /** @nocollapse */\n    static { this.ɵprov = ɵɵdefineInjectable({ token: KeyValueDiffers, providedIn: 'root', factory: defaultKeyValueDiffersFactory }); }\n    constructor(factories) {\n        this.factories = factories;\n    }\n    static create(factories, parent) {\n        if (parent) {\n            const copied = parent.factories.slice();\n            factories = factories.concat(copied);\n        }\n        return new KeyValueDiffers(factories);\n    }\n    /**\n     * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the\n     * inherited {@link KeyValueDiffers} instance with the provided factories and return a new\n     * {@link KeyValueDiffers} instance.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {@link KeyValueDiffer} available.\n     *\n     * ```\n     * @Component({\n     *   viewProviders: [\n     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n     *   ]\n     * })\n     * ```\n     */\n    static extend(factories) {\n        return {\n            provide: KeyValueDiffers,\n            useFactory: (parent) => {\n                // if parent is null, it means that we are in the root injector and we have just overridden\n                // the default injection mechanism for KeyValueDiffers, in such a case just assume\n                // `defaultKeyValueDiffersFactory`.\n                return KeyValueDiffers.create(factories, parent || defaultKeyValueDiffersFactory());\n            },\n            // Dependency technically isn't optional, but we can provide a better error message this way.\n            deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\n        };\n    }\n    find(kv) {\n        const factory = this.factories.find(f => f.supports(kv));\n        if (factory) {\n            return factory;\n        }\n        throw new RuntimeError(901 /* RuntimeErrorCode.NO_SUPPORTING_DIFFER_FACTORY */, ngDevMode && `Cannot find a differ supporting object '${kv}'`);\n    }\n}\n\nfunction devModeEqual(a, b) {\n    const isListLikeIterableA = isListLikeIterable(a);\n    const isListLikeIterableB = isListLikeIterable(b);\n    if (isListLikeIterableA && isListLikeIterableB) {\n        return areIterablesEqual(a, b, devModeEqual);\n    }\n    else {\n        const isAObject = a && (typeof a === 'object' || typeof a === 'function');\n        const isBObject = b && (typeof b === 'object' || typeof b === 'function');\n        if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n            return true;\n        }\n        else {\n            return Object.is(a, b);\n        }\n    }\n}\n\nfunction collectNativeNodes(tView, lView, tNode, result, isProjection = false) {\n    while (tNode !== null) {\n        ngDevMode &&\n            assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */ | 16 /* TNodeType.Projection */ | 32 /* TNodeType.Icu */);\n        const lNode = lView[tNode.index];\n        if (lNode !== null) {\n            result.push(unwrapRNode(lNode));\n        }\n        // A given lNode can represent either a native node or a LContainer (when it is a host of a\n        // ViewContainerRef). When we find a LContainer we need to descend into it to collect root nodes\n        // from the views in this container.\n        if (isLContainer(lNode)) {\n            collectNativeNodesInLContainer(lNode, result);\n        }\n        const tNodeType = tNode.type;\n        if (tNodeType & 8 /* TNodeType.ElementContainer */) {\n            collectNativeNodes(tView, lView, tNode.child, result);\n        }\n        else if (tNodeType & 32 /* TNodeType.Icu */) {\n            const nextRNode = icuContainerIterate(tNode, lView);\n            let rNode;\n            while (rNode = nextRNode()) {\n                result.push(rNode);\n            }\n        }\n        else if (tNodeType & 16 /* TNodeType.Projection */) {\n            const nodesInSlot = getProjectionNodes(lView, tNode);\n            if (Array.isArray(nodesInSlot)) {\n                result.push(...nodesInSlot);\n            }\n            else {\n                const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);\n                ngDevMode && assertParentView(parentView);\n                collectNativeNodes(parentView[TVIEW], parentView, nodesInSlot, result, true);\n            }\n        }\n        tNode = isProjection ? tNode.projectionNext : tNode.next;\n    }\n    return result;\n}\n/**\n * Collects all root nodes in all views in a given LContainer.\n */\nfunction collectNativeNodesInLContainer(lContainer, result) {\n    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n        const lViewInAContainer = lContainer[i];\n        const lViewFirstChildTNode = lViewInAContainer[TVIEW].firstChild;\n        if (lViewFirstChildTNode !== null) {\n            collectNativeNodes(lViewInAContainer[TVIEW], lViewInAContainer, lViewFirstChildTNode, result);\n        }\n    }\n    // When an LContainer is created, the anchor (comment) node is:\n    // - (1) either reused in case of an ElementContainer (<ng-container>)\n    // - (2) or a new comment node is created\n    // In the first case, the anchor comment node would be added to the final\n    // list by the code in the `collectNativeNodes` function\n    // (see the `result.push(unwrapRNode(lNode))` line), but the second\n    // case requires extra handling: the anchor node needs to be added to the\n    // final list manually. See additional information in the `createAnchorNode`\n    // function in the `view_container_ref.ts`.\n    //\n    // In the first case, the same reference would be stored in the `NATIVE`\n    // and `HOST` slots in an LContainer. Otherwise, this is the second case and\n    // we should add an element to the final list.\n    if (lContainer[NATIVE] !== lContainer[HOST]) {\n        result.push(lContainer[NATIVE]);\n    }\n}\n\nlet freeConsumers = [];\n/**\n * Create a new template consumer pointing at the specified LView.\n * Sometimes, a previously created consumer may be reused, in order to save on allocations. In that\n * case, the LView will be updated.\n */\nfunction getOrBorrowReactiveLViewConsumer(lView) {\n    return lView[REACTIVE_TEMPLATE_CONSUMER] ?? borrowReactiveLViewConsumer(lView);\n}\nfunction borrowReactiveLViewConsumer(lView) {\n    const consumer = freeConsumers.pop() ?? Object.create(REACTIVE_LVIEW_CONSUMER_NODE);\n    consumer.lView = lView;\n    return consumer;\n}\nfunction maybeReturnReactiveLViewConsumer(consumer) {\n    if (consumer.lView[REACTIVE_TEMPLATE_CONSUMER] === consumer) {\n        // The consumer got committed.\n        return;\n    }\n    consumer.lView = null;\n    freeConsumers.push(consumer);\n}\nconst REACTIVE_LVIEW_CONSUMER_NODE = {\n    ...REACTIVE_NODE$1,\n    consumerIsAlwaysLive: true,\n    consumerMarkedDirty: (node) => {\n        markAncestorsForTraversal(node.lView);\n    },\n    consumerOnSignalRead() {\n        this.lView[REACTIVE_TEMPLATE_CONSUMER] = this;\n    },\n};\n\nconst ERROR_ORIGINAL_ERROR = 'ngOriginalError';\nfunction wrappedError(message, originalError) {\n    const msg = `${message} caused by: ${originalError instanceof Error ? originalError.message : originalError}`;\n    const error = Error(msg);\n    error[ERROR_ORIGINAL_ERROR] = originalError;\n    return error;\n}\nfunction getOriginalError(error) {\n    return error[ERROR_ORIGINAL_ERROR];\n}\n\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * @NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n * @publicApi\n */\nclass ErrorHandler {\n    constructor() {\n        /**\n         * @internal\n         */\n        this._console = console;\n    }\n    handleError(error) {\n        const originalError = this._findOriginalError(error);\n        this._console.error('ERROR', error);\n        if (originalError) {\n            this._console.error('ORIGINAL ERROR', originalError);\n        }\n    }\n    /** @internal */\n    _findOriginalError(error) {\n        let e = error && getOriginalError(error);\n        while (e && getOriginalError(e)) {\n            e = getOriginalError(e);\n        }\n        return e || null;\n    }\n}\n/**\n * `InjectionToken` used to configure how to call the `ErrorHandler`.\n *\n * `NgZone` is provided by default today so the default (and only) implementation for this\n * is calling `ErrorHandler.handleError` outside of the Angular zone.\n */\nconst INTERNAL_APPLICATION_ERROR_HANDLER = new InjectionToken((typeof ngDevMode === 'undefined' || ngDevMode) ? 'internal error handler' : '', {\n    providedIn: 'root',\n    factory: () => {\n        const userErrorHandler = inject(ErrorHandler);\n        return userErrorHandler.handleError.bind(undefined);\n    }\n});\n\n/**\n * Internal token that specifies whether DOM reuse logic\n * during hydration is enabled.\n */\nconst IS_HYDRATION_DOM_REUSE_ENABLED = new InjectionToken((typeof ngDevMode === 'undefined' || !!ngDevMode) ? 'IS_HYDRATION_DOM_REUSE_ENABLED' : '');\n// By default (in client rendering mode), we remove all the contents\n// of the host element and render an application after that.\nconst PRESERVE_HOST_CONTENT_DEFAULT = false;\n/**\n * Internal token that indicates whether host element content should be\n * retained during the bootstrap.\n */\nconst PRESERVE_HOST_CONTENT = new InjectionToken((typeof ngDevMode === 'undefined' || !!ngDevMode) ? 'PRESERVE_HOST_CONTENT' : '', {\n    providedIn: 'root',\n    factory: () => PRESERVE_HOST_CONTENT_DEFAULT,\n});\n\nfunction normalizeDebugBindingName(name) {\n    // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers\n    name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));\n    return `ng-reflect-${name}`;\n}\nconst CAMEL_CASE_REGEXP = /([A-Z])/g;\nfunction camelCaseToDashCase(input) {\n    return input.replace(CAMEL_CASE_REGEXP, (...m) => '-' + m[1].toLowerCase());\n}\nfunction normalizeDebugBindingValue(value) {\n    try {\n        // Limit the size of the value as otherwise the DOM just gets polluted.\n        return value != null ? value.toString().slice(0, 30) : value;\n    }\n    catch (e) {\n        return '[ERROR] Exception while trying to serialize the value';\n    }\n}\n\n/**\n * The max length of the string representation of a value in an error message\n */\nconst VALUE_STRING_LENGTH_LIMIT = 200;\n/** Verifies that a given type is a Standalone Component. */\nfunction assertStandaloneComponentType(type) {\n    assertComponentDef(type);\n    const componentDef = getComponentDef(type);\n    if (!componentDef.standalone) {\n        throw new RuntimeError(907 /* RuntimeErrorCode.TYPE_IS_NOT_STANDALONE */, `The ${stringifyForError(type)} component is not marked as standalone, ` +\n            `but Angular expects to have a standalone component here. ` +\n            `Please make sure the ${stringifyForError(type)} component has ` +\n            `the \\`standalone: true\\` flag in the decorator.`);\n    }\n}\n/** Verifies whether a given type is a component */\nfunction assertComponentDef(type) {\n    if (!getComponentDef(type)) {\n        throw new RuntimeError(906 /* RuntimeErrorCode.MISSING_GENERATED_DEF */, `The ${stringifyForError(type)} is not an Angular component, ` +\n            `make sure it has the \\`@Component\\` decorator.`);\n    }\n}\n/** Called when there are multiple component selectors that match a given node */\nfunction throwMultipleComponentError(tNode, first, second) {\n    throw new RuntimeError(-300 /* RuntimeErrorCode.MULTIPLE_COMPONENTS_MATCH */, `Multiple components match node with tagname ${tNode.value}: ` +\n        `${stringifyForError(first)} and ` +\n        `${stringifyForError(second)}`);\n}\n/** Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on. */\nfunction throwErrorIfNoChangesMode(creationMode, oldValue, currValue, propName, lView) {\n    const hostComponentDef = getDeclarationComponentDef(lView);\n    const componentClassName = hostComponentDef?.type?.name;\n    const field = propName ? ` for '${propName}'` : '';\n    let msg = `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value${field}: '${formatValue(oldValue)}'. Current value: '${formatValue(currValue)}'.${componentClassName ? ` Expression location: ${componentClassName} component` : ''}`;\n    if (creationMode) {\n        msg +=\n            ` It seems like the view has been created after its parent and its children have been dirty checked.` +\n                ` Has it been created in a change detection hook?`;\n    }\n    throw new RuntimeError(-100 /* RuntimeErrorCode.EXPRESSION_CHANGED_AFTER_CHECKED */, msg);\n}\nfunction formatValue(value) {\n    let strValue = String(value);\n    // JSON.stringify will throw on circular references\n    try {\n        if (Array.isArray(value) || strValue === '[object Object]') {\n            strValue = JSON.stringify(value);\n        }\n    }\n    catch (error) {\n    }\n    return strValue.length > VALUE_STRING_LENGTH_LIMIT ?\n        (strValue.substring(0, VALUE_STRING_LENGTH_LIMIT) + '…') :\n        strValue;\n}\nfunction constructDetailsForInterpolation(lView, rootIndex, expressionIndex, meta, changedValue) {\n    const [propName, prefix, ...chunks] = meta.split(INTERPOLATION_DELIMITER);\n    let oldValue = prefix, newValue = prefix;\n    for (let i = 0; i < chunks.length; i++) {\n        const slotIdx = rootIndex + i;\n        oldValue += `${lView[slotIdx]}${chunks[i]}`;\n        newValue += `${slotIdx === expressionIndex ? changedValue : lView[slotIdx]}${chunks[i]}`;\n    }\n    return { propName, oldValue, newValue };\n}\n/**\n * Constructs an object that contains details for the ExpressionChangedAfterItHasBeenCheckedError:\n * - property name (for property bindings or interpolations)\n * - old and new values, enriched using information from metadata\n *\n * More information on the metadata storage format can be found in `storePropertyBindingMetadata`\n * function description.\n */\nfunction getExpressionChangedErrorDetails(lView, bindingIndex, oldValue, newValue) {\n    const tData = lView[TVIEW].data;\n    const metadata = tData[bindingIndex];\n    if (typeof metadata === 'string') {\n        // metadata for property interpolation\n        if (metadata.indexOf(INTERPOLATION_DELIMITER) > -1) {\n            return constructDetailsForInterpolation(lView, bindingIndex, bindingIndex, metadata, newValue);\n        }\n        // metadata for property binding\n        return { propName: metadata, oldValue, newValue };\n    }\n    // metadata is not available for this expression, check if this expression is a part of the\n    // property interpolation by going from the current binding index left and look for a string that\n    // contains INTERPOLATION_DELIMITER, the layout in tView.data for this case will look like this:\n    // [..., 'id�Prefix � and � suffix', null, null, null, ...]\n    if (metadata === null) {\n        let idx = bindingIndex - 1;\n        while (typeof tData[idx] !== 'string' && tData[idx + 1] === null) {\n            idx--;\n        }\n        const meta = tData[idx];\n        if (typeof meta === 'string') {\n            const matches = meta.match(new RegExp(INTERPOLATION_DELIMITER, 'g'));\n            // first interpolation delimiter separates property name from interpolation parts (in case of\n            // property interpolations), so we subtract one from total number of found delimiters\n            if (matches && (matches.length - 1) > bindingIndex - idx) {\n                return constructDetailsForInterpolation(lView, idx, bindingIndex, meta, newValue);\n            }\n        }\n    }\n    return { propName: undefined, oldValue, newValue };\n}\n\n/** A special value which designates that a value has not changed. */\nconst NO_CHANGE = (typeof ngDevMode === 'undefined' || ngDevMode) ? { __brand__: 'NO_CHANGE' } : {};\n\n/**\n * Advances to an element for later binding instructions.\n *\n * Used in conjunction with instructions like {@link property} to act on elements with specified\n * indices, for example those created with {@link element} or {@link elementStart}.\n *\n * ```ts\n * (rf: RenderFlags, ctx: any) => {\n *   if (rf & 1) {\n *     text(0, 'Hello');\n *     text(1, 'Goodbye')\n *     element(2, 'div');\n *   }\n *   if (rf & 2) {\n *     advance(2); // Advance twice to the <div>.\n *     property('title', 'test');\n *   }\n *  }\n * ```\n * @param delta Number of elements to advance forwards by.\n *\n * @codeGenApi\n */\nfunction ɵɵadvance(delta) {\n    ngDevMode && assertGreaterThan(delta, 0, 'Can only advance forward');\n    selectIndexInternal(getTView(), getLView(), getSelectedIndex() + delta, !!ngDevMode && isInCheckNoChangesMode());\n}\nfunction selectIndexInternal(tView, lView, index, checkNoChangesMode) {\n    ngDevMode && assertIndexInDeclRange(lView[TVIEW], index);\n    // Flush the initial hooks for elements in the view that have been added up to this point.\n    // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n    if (!checkNoChangesMode) {\n        const hooksInitPhaseCompleted = (lView[FLAGS] & 3 /* LViewFlags.InitPhaseStateMask */) === 3 /* InitPhaseState.InitPhaseCompleted */;\n        if (hooksInitPhaseCompleted) {\n            const preOrderCheckHooks = tView.preOrderCheckHooks;\n            if (preOrderCheckHooks !== null) {\n                executeCheckHooks(lView, preOrderCheckHooks, index);\n            }\n        }\n        else {\n            const preOrderHooks = tView.preOrderHooks;\n            if (preOrderHooks !== null) {\n                executeInitAndCheckHooks(lView, preOrderHooks, 0 /* InitPhaseState.OnInitHooksToBeRun */, index);\n            }\n        }\n    }\n    // We must set the selected index *after* running the hooks, because hooks may have side-effects\n    // that cause other template functions to run, thus updating the selected index, which is global\n    // state. If we run `setSelectedIndex` *before* we run the hooks, in some cases the selected index\n    // will be altered by the time we leave the `ɵɵadvance` instruction.\n    setSelectedIndex(index);\n}\n\nfunction ɵɵdirectiveInject(token, flags = InjectFlags.Default) {\n    const lView = getLView();\n    // Fall back to inject() if view hasn't been created. This situation can happen in tests\n    // if inject utilities are used before bootstrapping.\n    if (lView === null) {\n        // Verify that we will not get into infinite loop.\n        ngDevMode && assertInjectImplementationNotEqual(ɵɵdirectiveInject);\n        return ɵɵinject(token, flags);\n    }\n    const tNode = getCurrentTNode();\n    const value = getOrCreateInjectable(tNode, lView, resolveForwardRef(token), flags);\n    ngDevMode && emitInjectEvent(token, value, flags);\n    return value;\n}\n/**\n * Throws an error indicating that a factory function could not be generated by the compiler for a\n * particular class.\n *\n * This instruction allows the actual error message to be optimized away when ngDevMode is turned\n * off, saving bytes of generated code while still providing a good experience in dev mode.\n *\n * The name of the class is not mentioned here, but will be in the generated factory function name\n * and thus in the stack trace.\n *\n * @codeGenApi\n */\nfunction ɵɵinvalidFactory() {\n    const msg = ngDevMode ? `This constructor was not compatible with Dependency Injection.` : 'invalid';\n    throw new Error(msg);\n}\n\n/**\n * Invoke `HostBindingsFunction`s for view.\n *\n * This methods executes `TView.hostBindingOpCodes`. It is used to execute the\n * `HostBindingsFunction`s associated with the current `LView`.\n *\n * @param tView Current `TView`.\n * @param lView Current `LView`.\n */\nfunction processHostBindingOpCodes(tView, lView) {\n    const hostBindingOpCodes = tView.hostBindingOpCodes;\n    if (hostBindingOpCodes === null)\n        return;\n    try {\n        for (let i = 0; i < hostBindingOpCodes.length; i++) {\n            const opCode = hostBindingOpCodes[i];\n            if (opCode < 0) {\n                // Negative numbers are element indexes.\n                setSelectedIndex(~opCode);\n            }\n            else {\n                // Positive numbers are NumberTuple which store bindingRootIndex and directiveIndex.\n                const directiveIdx = opCode;\n                const bindingRootIndx = hostBindingOpCodes[++i];\n                const hostBindingFn = hostBindingOpCodes[++i];\n                setBindingRootForHostBindings(bindingRootIndx, directiveIdx);\n                const context = lView[directiveIdx];\n                hostBindingFn(2 /* RenderFlags.Update */, context);\n            }\n        }\n    }\n    finally {\n        setSelectedIndex(-1);\n    }\n}\nfunction createLView(parentLView, tView, context, flags, host, tHostNode, environment, renderer, injector, embeddedViewInjector, hydrationInfo) {\n    const lView = tView.blueprint.slice();\n    lView[HOST] = host;\n    lView[FLAGS] = flags | 4 /* LViewFlags.CreationMode */ | 128 /* LViewFlags.Attached */ | 8 /* LViewFlags.FirstLViewPass */ |\n        64 /* LViewFlags.Dirty */;\n    if (embeddedViewInjector !== null ||\n        (parentLView && (parentLView[FLAGS] & 2048 /* LViewFlags.HasEmbeddedViewInjector */))) {\n        lView[FLAGS] |= 2048 /* LViewFlags.HasEmbeddedViewInjector */;\n    }\n    resetPreOrderHookFlags(lView);\n    ngDevMode && tView.declTNode && parentLView && assertTNodeForLView(tView.declTNode, parentLView);\n    lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;\n    lView[CONTEXT] = context;\n    lView[ENVIRONMENT] = (environment || parentLView && parentLView[ENVIRONMENT]);\n    ngDevMode && assertDefined(lView[ENVIRONMENT], 'LViewEnvironment is required');\n    lView[RENDERER] = (renderer || parentLView && parentLView[RENDERER]);\n    ngDevMode && assertDefined(lView[RENDERER], 'Renderer is required');\n    lView[INJECTOR$1] = injector || parentLView && parentLView[INJECTOR$1] || null;\n    lView[T_HOST] = tHostNode;\n    lView[ID] = getUniqueLViewId();\n    lView[HYDRATION] = hydrationInfo;\n    lView[EMBEDDED_VIEW_INJECTOR] = embeddedViewInjector;\n    ngDevMode &&\n        assertEqual(tView.type == 2 /* TViewType.Embedded */ ? parentLView !== null : true, true, 'Embedded views must have parentLView');\n    lView[DECLARATION_COMPONENT_VIEW] =\n        tView.type == 2 /* TViewType.Embedded */ ? parentLView[DECLARATION_COMPONENT_VIEW] : lView;\n    return lView;\n}\nfunction getOrCreateTNode(tView, index, type, name, attrs) {\n    ngDevMode && index !== 0 && // 0 are bogus nodes and they are OK. See `createContainerRef` in\n        // `view_engine_compatibility` for additional context.\n        assertGreaterThanOrEqual(index, HEADER_OFFSET, 'TNodes can\\'t be in the LView header.');\n    // Keep this function short, so that the VM will inline it.\n    ngDevMode && assertPureTNodeType(type);\n    let tNode = tView.data[index];\n    if (tNode === null) {\n        tNode = createTNodeAtIndex(tView, index, type, name, attrs);\n        if (isInI18nBlock()) {\n            // If we are in i18n block then all elements should be pre declared through `Placeholder`\n            // See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.\n            // If the `TNode` was not pre-declared than it means it was not mentioned which means it was\n            // removed, so we mark it as detached.\n            tNode.flags |= 32 /* TNodeFlags.isDetached */;\n        }\n    }\n    else if (tNode.type & 64 /* TNodeType.Placeholder */) {\n        tNode.type = type;\n        tNode.value = name;\n        tNode.attrs = attrs;\n        const parent = getCurrentParentTNode();\n        tNode.injectorIndex = parent === null ? -1 : parent.injectorIndex;\n        ngDevMode && assertTNodeForTView(tNode, tView);\n        ngDevMode && assertEqual(index, tNode.index, 'Expecting same index');\n    }\n    setCurrentTNode(tNode, true);\n    return tNode;\n}\nfunction createTNodeAtIndex(tView, index, type, name, attrs) {\n    const currentTNode = getCurrentTNodePlaceholderOk();\n    const isParent = isCurrentTNodeParent();\n    const parent = isParent ? currentTNode : currentTNode && currentTNode.parent;\n    // Parents cannot cross component boundaries because components will be used in multiple places.\n    const tNode = tView.data[index] =\n        createTNode(tView, parent, type, index, name, attrs);\n    // Assign a pointer to the first child node of a given view. The first node is not always the one\n    // at index 0, in case of i18n, index 0 can be the instruction `i18nStart` and the first node has\n    // the index 1 or more, so we can't just check node index.\n    if (tView.firstChild === null) {\n        tView.firstChild = tNode;\n    }\n    if (currentTNode !== null) {\n        if (isParent) {\n            // FIXME(misko): This logic looks unnecessarily complicated. Could we simplify?\n            if (currentTNode.child == null && tNode.parent !== null) {\n                // We are in the same view, which means we are adding content node to the parent view.\n                currentTNode.child = tNode;\n            }\n        }\n        else {\n            if (currentTNode.next === null) {\n                // In the case of i18n the `currentTNode` may already be linked, in which case we don't want\n                // to break the links which i18n created.\n                currentTNode.next = tNode;\n                tNode.prev = currentTNode;\n            }\n        }\n    }\n    return tNode;\n}\n/**\n * When elements are created dynamically after a view blueprint is created (e.g. through\n * i18nApply()), we need to adjust the blueprint for future\n * template passes.\n *\n * @param tView `TView` associated with `LView`\n * @param lView The `LView` containing the blueprint to adjust\n * @param numSlotsToAlloc The number of slots to alloc in the LView, should be >0\n * @param initialValue Initial value to store in blueprint\n */\nfunction allocExpando(tView, lView, numSlotsToAlloc, initialValue) {\n    if (numSlotsToAlloc === 0)\n        return -1;\n    if (ngDevMode) {\n        assertFirstCreatePass(tView);\n        assertSame(tView, lView[TVIEW], '`LView` must be associated with `TView`!');\n        assertEqual(tView.data.length, lView.length, 'Expecting LView to be same size as TView');\n        assertEqual(tView.data.length, tView.blueprint.length, 'Expecting Blueprint to be same size as TView');\n        assertFirstUpdatePass(tView);\n    }\n    const allocIdx = lView.length;\n    for (let i = 0; i < numSlotsToAlloc; i++) {\n        lView.push(initialValue);\n        tView.blueprint.push(initialValue);\n        tView.data.push(null);\n    }\n    return allocIdx;\n}\nfunction executeTemplate(tView, lView, templateFn, rf, context) {\n    const prevSelectedIndex = getSelectedIndex();\n    const isUpdatePhase = rf & 2 /* RenderFlags.Update */;\n    try {\n        setSelectedIndex(-1);\n        if (isUpdatePhase && lView.length > HEADER_OFFSET) {\n            // When we're updating, inherently select 0 so we don't\n            // have to generate that instruction for most update blocks.\n            selectIndexInternal(tView, lView, HEADER_OFFSET, !!ngDevMode && isInCheckNoChangesMode());\n        }\n        const preHookType = isUpdatePhase ? 2 /* ProfilerEvent.TemplateUpdateStart */ : 0 /* ProfilerEvent.TemplateCreateStart */;\n        profiler(preHookType, context);\n        templateFn(rf, context);\n    }\n    finally {\n        setSelectedIndex(prevSelectedIndex);\n        const postHookType = isUpdatePhase ? 3 /* ProfilerEvent.TemplateUpdateEnd */ : 1 /* ProfilerEvent.TemplateCreateEnd */;\n        profiler(postHookType, context);\n    }\n}\n//////////////////////////\n//// Element\n//////////////////////////\nfunction executeContentQueries(tView, tNode, lView) {\n    if (isContentQueryHost(tNode)) {\n        const prevConsumer = setActiveConsumer$1(null);\n        try {\n            const start = tNode.directiveStart;\n            const end = tNode.directiveEnd;\n            for (let directiveIndex = start; directiveIndex < end; directiveIndex++) {\n                const def = tView.data[directiveIndex];\n                if (def.contentQueries) {\n                    def.contentQueries(1 /* RenderFlags.Create */, lView[directiveIndex], directiveIndex);\n                }\n            }\n        }\n        finally {\n            setActiveConsumer$1(prevConsumer);\n        }\n    }\n}\n/**\n * Creates directive instances.\n */\nfunction createDirectivesInstances(tView, lView, tNode) {\n    if (!getBindingsEnabled())\n        return;\n    instantiateAllDirectives(tView, lView, tNode, getNativeByTNode(tNode, lView));\n    if ((tNode.flags & 64 /* TNodeFlags.hasHostBindings */) === 64 /* TNodeFlags.hasHostBindings */) {\n        invokeDirectivesHostBindings(tView, lView, tNode);\n    }\n}\n/**\n * Takes a list of local names and indices and pushes the resolved local variable values\n * to LView in the same order as they are loaded in the template with load().\n */\nfunction saveResolvedLocalsInData(viewData, tNode, localRefExtractor = getNativeByTNode) {\n    const localNames = tNode.localNames;\n    if (localNames !== null) {\n        let localIndex = tNode.index + 1;\n        for (let i = 0; i < localNames.length; i += 2) {\n            const index = localNames[i + 1];\n            const value = index === -1 ?\n                localRefExtractor(tNode, viewData) :\n                viewData[index];\n            viewData[localIndex++] = value;\n        }\n    }\n}\n/**\n * Gets TView from a template function or creates a new TView\n * if it doesn't already exist.\n *\n * @param def ComponentDef\n * @returns TView\n */\nfunction getOrCreateComponentTView(def) {\n    const tView = def.tView;\n    // Create a TView if there isn't one, or recreate it if the first create pass didn't\n    // complete successfully since we can't know for sure whether it's in a usable shape.\n    if (tView === null || tView.incompleteFirstPass) {\n        // Declaration node here is null since this function is called when we dynamically create a\n        // component and hence there is no declaration.\n        const declTNode = null;\n        return def.tView = createTView(1 /* TViewType.Component */, declTNode, def.template, def.decls, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery, def.schemas, def.consts, def.id);\n    }\n    return tView;\n}\n/**\n * Creates a TView instance\n *\n * @param type Type of `TView`.\n * @param declTNode Declaration location of this `TView`.\n * @param templateFn Template function\n * @param decls The number of nodes, local refs, and pipes in this template\n * @param directives Registry of directives for this view\n * @param pipes Registry of pipes for this view\n * @param viewQuery View queries for this view\n * @param schemas Schemas for this view\n * @param consts Constants for this view\n */\nfunction createTView(type, declTNode, templateFn, decls, vars, directives, pipes, viewQuery, schemas, constsOrFactory, ssrId) {\n    ngDevMode && ngDevMode.tView++;\n    const bindingStartIndex = HEADER_OFFSET + decls;\n    // This length does not yet contain host bindings from child directives because at this point,\n    // we don't know which directives are active on this template. As soon as a directive is matched\n    // that has a host binding, we will update the blueprint with that def's hostVars count.\n    const initialViewLength = bindingStartIndex + vars;\n    const blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);\n    const consts = typeof constsOrFactory === 'function' ? constsOrFactory() : constsOrFactory;\n    const tView = blueprint[TVIEW] = {\n        type: type,\n        blueprint: blueprint,\n        template: templateFn,\n        queries: null,\n        viewQuery: viewQuery,\n        declTNode: declTNode,\n        data: blueprint.slice().fill(null, bindingStartIndex),\n        bindingStartIndex: bindingStartIndex,\n        expandoStartIndex: initialViewLength,\n        hostBindingOpCodes: null,\n        firstCreatePass: true,\n        firstUpdatePass: true,\n        staticViewQueries: false,\n        staticContentQueries: false,\n        preOrderHooks: null,\n        preOrderCheckHooks: null,\n        contentHooks: null,\n        contentCheckHooks: null,\n        viewHooks: null,\n        viewCheckHooks: null,\n        destroyHooks: null,\n        cleanup: null,\n        contentQueries: null,\n        components: null,\n        directiveRegistry: typeof directives === 'function' ? directives() : directives,\n        pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,\n        firstChild: null,\n        schemas: schemas,\n        consts: consts,\n        incompleteFirstPass: false,\n        ssrId,\n    };\n    if (ngDevMode) {\n        // For performance reasons it is important that the tView retains the same shape during runtime.\n        // (To make sure that all of the code is monomorphic.) For this reason we seal the object to\n        // prevent class transitions.\n        Object.seal(tView);\n    }\n    return tView;\n}\nfunction createViewBlueprint(bindingStartIndex, initialViewLength) {\n    const blueprint = [];\n    for (let i = 0; i < initialViewLength; i++) {\n        blueprint.push(i < bindingStartIndex ? null : NO_CHANGE);\n    }\n    return blueprint;\n}\n/**\n * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\n *\n * @param renderer the renderer used to locate the element.\n * @param elementOrSelector Render element or CSS selector to locate the element.\n * @param encapsulation View Encapsulation defined for component that requests host element.\n * @param injector Root view injector instance.\n */\nfunction locateHostElement(renderer, elementOrSelector, encapsulation, injector) {\n    // Note: we use default value for the `PRESERVE_HOST_CONTENT` here even though it's a\n    // tree-shakable one (providedIn:'root'). This code path can be triggered during dynamic\n    // component creation (after calling ViewContainerRef.createComponent) when an injector\n    // instance can be provided. The injector instance might be disconnected from the main DI\n    // tree, thus the `PRESERVE_HOST_CONTENT` would not be able to instantiate. In this case, the\n    // default value will be used.\n    const preserveHostContent = injector.get(PRESERVE_HOST_CONTENT, PRESERVE_HOST_CONTENT_DEFAULT);\n    // When using native Shadow DOM, do not clear host element to allow native slot\n    // projection.\n    const preserveContent = preserveHostContent || encapsulation === ViewEncapsulation$1.ShadowDom;\n    const rootElement = renderer.selectRootElement(elementOrSelector, preserveContent);\n    applyRootElementTransform(rootElement);\n    return rootElement;\n}\n/**\n * Applies any root element transformations that are needed. If hydration is enabled,\n * this will process corrupted text nodes.\n *\n * @param rootElement the app root HTML Element\n */\nfunction applyRootElementTransform(rootElement) {\n    _applyRootElementTransformImpl(rootElement);\n}\n/**\n * Reference to a function that applies transformations to the root HTML element\n * of an app. When hydration is enabled, this processes any corrupt text nodes\n * so they are properly hydratable on the client.\n *\n * @param rootElement the app root HTML Element\n */\nlet _applyRootElementTransformImpl = (rootElement) => null;\n/**\n * Processes text node markers before hydration begins. This replaces any special comment\n * nodes that were added prior to serialization are swapped out to restore proper text\n * nodes before hydration.\n *\n * @param rootElement the app root HTML Element\n */\nfunction applyRootElementTransformImpl(rootElement) {\n    if (hasSkipHydrationAttrOnRElement(rootElement)) {\n        // Handle a situation when the `ngSkipHydration` attribute is applied\n        // to the root node of an application. In this case, we should clear\n        // the contents and render everything from scratch.\n        clearElementContents(rootElement);\n    }\n    else {\n        processTextNodeMarkersBeforeHydration(rootElement);\n    }\n}\n/**\n * Sets the implementation for the `applyRootElementTransform` function.\n */\nfunction enableApplyRootElementTransformImpl() {\n    _applyRootElementTransformImpl = applyRootElementTransformImpl;\n}\n/**\n * Saves context for this cleanup function in LView.cleanupInstances.\n *\n * On the first template pass, saves in TView:\n * - Cleanup function\n * - Index of context we just saved in LView.cleanupInstances\n */\nfunction storeCleanupWithContext(tView, lView, context, cleanupFn) {\n    const lCleanup = getOrCreateLViewCleanup(lView);\n    // Historically the `storeCleanupWithContext` was used to register both framework-level and\n    // user-defined cleanup callbacks, but over time those two types of cleanups were separated.\n    // This dev mode checks assures that user-level cleanup callbacks are _not_ stored in data\n    // structures reserved for framework-specific hooks.\n    ngDevMode &&\n        assertDefined(context, 'Cleanup context is mandatory when registering framework-level destroy hooks');\n    lCleanup.push(context);\n    if (tView.firstCreatePass) {\n        getOrCreateTViewCleanup(tView).push(cleanupFn, lCleanup.length - 1);\n    }\n    else {\n        // Make sure that no new framework-level cleanup functions are registered after the first\n        // template pass is done (and TView data structures are meant to fully constructed).\n        if (ngDevMode) {\n            Object.freeze(getOrCreateTViewCleanup(tView));\n        }\n    }\n}\nfunction createTNode(tView, tParent, type, index, value, attrs) {\n    ngDevMode && index !== 0 && // 0 are bogus nodes and they are OK. See `createContainerRef` in\n        // `view_engine_compatibility` for additional context.\n        assertGreaterThanOrEqual(index, HEADER_OFFSET, 'TNodes can\\'t be in the LView header.');\n    ngDevMode && assertNotSame(attrs, undefined, '\\'undefined\\' is not valid value for \\'attrs\\'');\n    ngDevMode && ngDevMode.tNode++;\n    ngDevMode && tParent && assertTNodeForTView(tParent, tView);\n    let injectorIndex = tParent ? tParent.injectorIndex : -1;\n    let flags = 0;\n    if (isInSkipHydrationBlock$1()) {\n        flags |= 128 /* TNodeFlags.inSkipHydrationBlock */;\n    }\n    const tNode = {\n        type,\n        index,\n        insertBeforeIndex: null,\n        injectorIndex,\n        directiveStart: -1,\n        directiveEnd: -1,\n        directiveStylingLast: -1,\n        componentOffset: -1,\n        propertyBindings: null,\n        flags,\n        providerIndexes: 0,\n        value: value,\n        attrs: attrs,\n        mergedAttrs: null,\n        localNames: null,\n        initialInputs: undefined,\n        inputs: null,\n        outputs: null,\n        tView: null,\n        next: null,\n        prev: null,\n        projectionNext: null,\n        child: null,\n        parent: tParent,\n        projection: null,\n        styles: null,\n        stylesWithoutHost: null,\n        residualStyles: undefined,\n        classes: null,\n        classesWithoutHost: null,\n        residualClasses: undefined,\n        classBindings: 0,\n        styleBindings: 0,\n    };\n    if (ngDevMode) {\n        // For performance reasons it is important that the tNode retains the same shape during runtime.\n        // (To make sure that all of the code is monomorphic.) For this reason we seal the object to\n        // prevent class transitions.\n        Object.seal(tNode);\n    }\n    return tNode;\n}\n/**\n * Generates the `PropertyAliases` data structure from the provided input/output mapping.\n * @param aliasMap Input/output mapping from the directive definition.\n * @param directiveIndex Index of the directive.\n * @param propertyAliases Object in which to store the results.\n * @param hostDirectiveAliasMap Object used to alias or filter out properties for host directives.\n * If the mapping is provided, it'll act as an allowlist, as well as a mapping of what public\n * name inputs/outputs should be exposed under.\n */\nfunction generatePropertyAliases(aliasMap, directiveIndex, propertyAliases, hostDirectiveAliasMap) {\n    for (let publicName in aliasMap) {\n        if (aliasMap.hasOwnProperty(publicName)) {\n            propertyAliases = propertyAliases === null ? {} : propertyAliases;\n            const internalName = aliasMap[publicName];\n            // If there are no host directive mappings, we want to remap using the alias map from the\n            // definition itself. If there is an alias map, it has two functions:\n            // 1. It serves as an allowlist of bindings that are exposed by the host directives. Only the\n            // ones inside the host directive map will be exposed on the host.\n            // 2. The public name of the property is aliased using the host directive alias map, rather\n            // than the alias map from the definition.\n            if (hostDirectiveAliasMap === null) {\n                addPropertyAlias(propertyAliases, directiveIndex, publicName, internalName);\n            }\n            else if (hostDirectiveAliasMap.hasOwnProperty(publicName)) {\n                addPropertyAlias(propertyAliases, directiveIndex, hostDirectiveAliasMap[publicName], internalName);\n            }\n        }\n    }\n    return propertyAliases;\n}\nfunction addPropertyAlias(propertyAliases, directiveIndex, publicName, internalName) {\n    if (propertyAliases.hasOwnProperty(publicName)) {\n        propertyAliases[publicName].push(directiveIndex, internalName);\n    }\n    else {\n        propertyAliases[publicName] = [directiveIndex, internalName];\n    }\n}\n/**\n * Initializes data structures required to work with directive inputs and outputs.\n * Initialization is done for all directives matched on a given TNode.\n */\nfunction initializeInputAndOutputAliases(tView, tNode, hostDirectiveDefinitionMap) {\n    ngDevMode && assertFirstCreatePass(tView);\n    const start = tNode.directiveStart;\n    const end = tNode.directiveEnd;\n    const tViewData = tView.data;\n    const tNodeAttrs = tNode.attrs;\n    const inputsFromAttrs = [];\n    let inputsStore = null;\n    let outputsStore = null;\n    for (let directiveIndex = start; directiveIndex < end; directiveIndex++) {\n        const directiveDef = tViewData[directiveIndex];\n        const aliasData = hostDirectiveDefinitionMap ? hostDirectiveDefinitionMap.get(directiveDef) : null;\n        const aliasedInputs = aliasData ? aliasData.inputs : null;\n        const aliasedOutputs = aliasData ? aliasData.outputs : null;\n        inputsStore =\n            generatePropertyAliases(directiveDef.inputs, directiveIndex, inputsStore, aliasedInputs);\n        outputsStore =\n            generatePropertyAliases(directiveDef.outputs, directiveIndex, outputsStore, aliasedOutputs);\n        // Do not use unbound attributes as inputs to structural directives, since structural\n        // directive inputs can only be set using microsyntax (e.g. `<div *dir=\"exp\">`).\n        // TODO(FW-1930): microsyntax expressions may also contain unbound/static attributes, which\n        // should be set for inline templates.\n        const initialInputs = (inputsStore !== null && tNodeAttrs !== null && !isInlineTemplate(tNode)) ?\n            generateInitialInputs(inputsStore, directiveIndex, tNodeAttrs) :\n            null;\n        inputsFromAttrs.push(initialInputs);\n    }\n    if (inputsStore !== null) {\n        if (inputsStore.hasOwnProperty('class')) {\n            tNode.flags |= 8 /* TNodeFlags.hasClassInput */;\n        }\n        if (inputsStore.hasOwnProperty('style')) {\n            tNode.flags |= 16 /* TNodeFlags.hasStyleInput */;\n        }\n    }\n    tNode.initialInputs = inputsFromAttrs;\n    tNode.inputs = inputsStore;\n    tNode.outputs = outputsStore;\n}\n/**\n * Mapping between attributes names that don't correspond to their element property names.\n *\n * Performance note: this function is written as a series of if checks (instead of, say, a property\n * object lookup) for performance reasons - the series of `if` checks seems to be the fastest way of\n * mapping property names. Do NOT change without benchmarking.\n *\n * Note: this mapping has to be kept in sync with the equally named mapping in the template\n * type-checking machinery of ngtsc.\n */\nfunction mapPropName(name) {\n    if (name === 'class')\n        return 'className';\n    if (name === 'for')\n        return 'htmlFor';\n    if (name === 'formaction')\n        return 'formAction';\n    if (name === 'innerHtml')\n        return 'innerHTML';\n    if (name === 'readonly')\n        return 'readOnly';\n    if (name === 'tabindex')\n        return 'tabIndex';\n    return name;\n}\nfunction elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, nativeOnly) {\n    ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n    const element = getNativeByTNode(tNode, lView);\n    let inputData = tNode.inputs;\n    let dataValue;\n    if (!nativeOnly && inputData != null && (dataValue = inputData[propName])) {\n        setInputsForProperty(tView, lView, dataValue, propName, value);\n        if (isComponentHost(tNode))\n            markDirtyIfOnPush(lView, tNode.index);\n        if (ngDevMode) {\n            setNgReflectProperties(lView, element, tNode.type, dataValue, value);\n        }\n    }\n    else if (tNode.type & 3 /* TNodeType.AnyRNode */) {\n        propName = mapPropName(propName);\n        if (ngDevMode) {\n            validateAgainstEventProperties(propName);\n            if (!isPropertyValid(element, propName, tNode.value, tView.schemas)) {\n                handleUnknownPropertyError(propName, tNode.value, tNode.type, lView);\n            }\n            ngDevMode.rendererSetProperty++;\n        }\n        // It is assumed that the sanitizer is only added when the compiler determines that the\n        // property is risky, so sanitization can be done without further checks.\n        value = sanitizer != null ? sanitizer(value, tNode.value || '', propName) : value;\n        renderer.setProperty(element, propName, value);\n    }\n    else if (tNode.type & 12 /* TNodeType.AnyContainer */) {\n        // If the node is a container and the property didn't\n        // match any of the inputs or schemas we should throw.\n        if (ngDevMode && !matchingSchemas(tView.schemas, tNode.value)) {\n            handleUnknownPropertyError(propName, tNode.value, tNode.type, lView);\n        }\n    }\n}\n/** If node is an OnPush component, marks its LView dirty. */\nfunction markDirtyIfOnPush(lView, viewIndex) {\n    ngDevMode && assertLView(lView);\n    const childComponentLView = getComponentLViewByIndex(viewIndex, lView);\n    if (!(childComponentLView[FLAGS] & 16 /* LViewFlags.CheckAlways */)) {\n        childComponentLView[FLAGS] |= 64 /* LViewFlags.Dirty */;\n    }\n}\nfunction setNgReflectProperty(lView, element, type, attrName, value) {\n    const renderer = lView[RENDERER];\n    attrName = normalizeDebugBindingName(attrName);\n    const debugValue = normalizeDebugBindingValue(value);\n    if (type & 3 /* TNodeType.AnyRNode */) {\n        if (value == null) {\n            renderer.removeAttribute(element, attrName);\n        }\n        else {\n            renderer.setAttribute(element, attrName, debugValue);\n        }\n    }\n    else {\n        const textContent = escapeCommentText(`bindings=${JSON.stringify({ [attrName]: debugValue }, null, 2)}`);\n        renderer.setValue(element, textContent);\n    }\n}\nfunction setNgReflectProperties(lView, element, type, dataValue, value) {\n    if (type & (3 /* TNodeType.AnyRNode */ | 4 /* TNodeType.Container */)) {\n        /**\n         * dataValue is an array containing runtime input or output names for the directives:\n         * i+0: directive instance index\n         * i+1: privateName\n         *\n         * e.g. [0, 'change', 'change-minified']\n         * we want to set the reflected property with the privateName: dataValue[i+1]\n         */\n        for (let i = 0; i < dataValue.length; i += 2) {\n            setNgReflectProperty(lView, element, type, dataValue[i + 1], value);\n        }\n    }\n}\n/**\n * Resolve the matched directives on a node.\n */\nfunction resolveDirectives(tView, lView, tNode, localRefs) {\n    // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in\n    // tsickle.\n    ngDevMode && assertFirstCreatePass(tView);\n    if (getBindingsEnabled()) {\n        const exportsMap = localRefs === null ? null : { '': -1 };\n        const matchResult = findDirectiveDefMatches(tView, tNode);\n        let directiveDefs;\n        let hostDirectiveDefs;\n        if (matchResult === null) {\n            directiveDefs = hostDirectiveDefs = null;\n        }\n        else {\n            [directiveDefs, hostDirectiveDefs] = matchResult;\n        }\n        if (directiveDefs !== null) {\n            initializeDirectives(tView, lView, tNode, directiveDefs, exportsMap, hostDirectiveDefs);\n        }\n        if (exportsMap)\n            cacheMatchingLocalNames(tNode, localRefs, exportsMap);\n    }\n    // Merge the template attrs last so that they have the highest priority.\n    tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);\n}\n/** Initializes the data structures necessary for a list of directives to be instantiated. */\nfunction initializeDirectives(tView, lView, tNode, directives, exportsMap, hostDirectiveDefs) {\n    ngDevMode && assertFirstCreatePass(tView);\n    // Publishes the directive types to DI so they can be injected. Needs to\n    // happen in a separate pass before the TNode flags have been initialized.\n    for (let i = 0; i < directives.length; i++) {\n        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, directives[i].type);\n    }\n    initTNodeFlags(tNode, tView.data.length, directives.length);\n    // When the same token is provided by several directives on the same node, some rules apply in\n    // the viewEngine:\n    // - viewProviders have priority over providers\n    // - the last directive in NgModule.declarations has priority over the previous one\n    // So to match these rules, the order in which providers are added in the arrays is very\n    // important.\n    for (let i = 0; i < directives.length; i++) {\n        const def = directives[i];\n        if (def.providersResolver)\n            def.providersResolver(def);\n    }\n    let preOrderHooksFound = false;\n    let preOrderCheckHooksFound = false;\n    let directiveIdx = allocExpando(tView, lView, directives.length, null);\n    ngDevMode &&\n        assertSame(directiveIdx, tNode.directiveStart, 'TNode.directiveStart should point to just allocated space');\n    for (let i = 0; i < directives.length; i++) {\n        const def = directives[i];\n        // Merge the attrs in the order of matches. This assumes that the first directive is the\n        // component itself, so that the component has the least priority.\n        tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, def.hostAttrs);\n        configureViewWithDirective(tView, tNode, lView, directiveIdx, def);\n        saveNameToExportMap(directiveIdx, def, exportsMap);\n        if (def.contentQueries !== null)\n            tNode.flags |= 4 /* TNodeFlags.hasContentQuery */;\n        if (def.hostBindings !== null || def.hostAttrs !== null || def.hostVars !== 0)\n            tNode.flags |= 64 /* TNodeFlags.hasHostBindings */;\n        const lifeCycleHooks = def.type.prototype;\n        // Only push a node index into the preOrderHooks array if this is the first\n        // pre-order hook found on this node.\n        if (!preOrderHooksFound &&\n            (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngOnInit || lifeCycleHooks.ngDoCheck)) {\n            // We will push the actual hook function into this array later during dir instantiation.\n            // We cannot do it now because we must ensure hooks are registered in the same\n            // order that directives are created (i.e. injection order).\n            (tView.preOrderHooks ??= []).push(tNode.index);\n            preOrderHooksFound = true;\n        }\n        if (!preOrderCheckHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngDoCheck)) {\n            (tView.preOrderCheckHooks ??= []).push(tNode.index);\n            preOrderCheckHooksFound = true;\n        }\n        directiveIdx++;\n    }\n    initializeInputAndOutputAliases(tView, tNode, hostDirectiveDefs);\n}\n/**\n * Add `hostBindings` to the `TView.hostBindingOpCodes`.\n *\n * @param tView `TView` to which the `hostBindings` should be added.\n * @param tNode `TNode` the element which contains the directive\n * @param directiveIdx Directive index in view.\n * @param directiveVarsIdx Where will the directive's vars be stored\n * @param def `ComponentDef`/`DirectiveDef`, which contains the `hostVars`/`hostBindings` to add.\n */\nfunction registerHostBindingOpCodes(tView, tNode, directiveIdx, directiveVarsIdx, def) {\n    ngDevMode && assertFirstCreatePass(tView);\n    const hostBindings = def.hostBindings;\n    if (hostBindings) {\n        let hostBindingOpCodes = tView.hostBindingOpCodes;\n        if (hostBindingOpCodes === null) {\n            hostBindingOpCodes = tView.hostBindingOpCodes = [];\n        }\n        const elementIndx = ~tNode.index;\n        if (lastSelectedElementIdx(hostBindingOpCodes) != elementIndx) {\n            // Conditionally add select element so that we are more efficient in execution.\n            // NOTE: this is strictly not necessary and it trades code size for runtime perf.\n            // (We could just always add it.)\n            hostBindingOpCodes.push(elementIndx);\n        }\n        hostBindingOpCodes.push(directiveIdx, directiveVarsIdx, hostBindings);\n    }\n}\n/**\n * Returns the last selected element index in the `HostBindingOpCodes`\n *\n * For perf reasons we don't need to update the selected element index in `HostBindingOpCodes` only\n * if it changes. This method returns the last index (or '0' if not found.)\n *\n * Selected element index are only the ones which are negative.\n */\nfunction lastSelectedElementIdx(hostBindingOpCodes) {\n    let i = hostBindingOpCodes.length;\n    while (i > 0) {\n        const value = hostBindingOpCodes[--i];\n        if (typeof value === 'number' && value < 0) {\n            return value;\n        }\n    }\n    return 0;\n}\n/**\n * Instantiate all the directives that were previously resolved on the current node.\n */\nfunction instantiateAllDirectives(tView, lView, tNode, native) {\n    const start = tNode.directiveStart;\n    const end = tNode.directiveEnd;\n    // The component view needs to be created before creating the node injector\n    // since it is used to inject some special symbols like `ChangeDetectorRef`.\n    if (isComponentHost(tNode)) {\n        ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */);\n        addComponentLogic(lView, tNode, tView.data[start + tNode.componentOffset]);\n    }\n    if (!tView.firstCreatePass) {\n        getOrCreateNodeInjectorForNode(tNode, lView);\n    }\n    attachPatchData(native, lView);\n    const initialInputs = tNode.initialInputs;\n    for (let i = start; i < end; i++) {\n        const def = tView.data[i];\n        const directive = getNodeInjectable(lView, tView, i, tNode);\n        attachPatchData(directive, lView);\n        if (initialInputs !== null) {\n            setInputsFromAttrs(lView, i - start, directive, def, tNode, initialInputs);\n        }\n        if (isComponentDef(def)) {\n            const componentView = getComponentLViewByIndex(tNode.index, lView);\n            componentView[CONTEXT] = getNodeInjectable(lView, tView, i, tNode);\n        }\n    }\n}\nfunction invokeDirectivesHostBindings(tView, lView, tNode) {\n    const start = tNode.directiveStart;\n    const end = tNode.directiveEnd;\n    const elementIndex = tNode.index;\n    const currentDirectiveIndex = getCurrentDirectiveIndex();\n    try {\n        setSelectedIndex(elementIndex);\n        for (let dirIndex = start; dirIndex < end; dirIndex++) {\n            const def = tView.data[dirIndex];\n            const directive = lView[dirIndex];\n            setCurrentDirectiveIndex(dirIndex);\n            if (def.hostBindings !== null || def.hostVars !== 0 || def.hostAttrs !== null) {\n                invokeHostBindingsInCreationMode(def, directive);\n            }\n        }\n    }\n    finally {\n        setSelectedIndex(-1);\n        setCurrentDirectiveIndex(currentDirectiveIndex);\n    }\n}\n/**\n * Invoke the host bindings in creation mode.\n *\n * @param def `DirectiveDef` which may contain the `hostBindings` function.\n * @param directive Instance of directive.\n */\nfunction invokeHostBindingsInCreationMode(def, directive) {\n    if (def.hostBindings !== null) {\n        def.hostBindings(1 /* RenderFlags.Create */, directive);\n    }\n}\n/**\n * Matches the current node against all available selectors.\n * If a component is matched (at most one), it is returned in first position in the array.\n */\nfunction findDirectiveDefMatches(tView, tNode) {\n    ngDevMode && assertFirstCreatePass(tView);\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */);\n    const registry = tView.directiveRegistry;\n    let matches = null;\n    let hostDirectiveDefs = null;\n    if (registry) {\n        for (let i = 0; i < registry.length; i++) {\n            const def = registry[i];\n            if (isNodeMatchingSelectorList(tNode, def.selectors, /* isProjectionMode */ false)) {\n                matches || (matches = []);\n                if (isComponentDef(def)) {\n                    if (ngDevMode) {\n                        assertTNodeType(tNode, 2 /* TNodeType.Element */, `\"${tNode.value}\" tags cannot be used as component hosts. ` +\n                            `Please use a different tag to activate the ${stringify(def.type)} component.`);\n                        if (isComponentHost(tNode)) {\n                            throwMultipleComponentError(tNode, matches.find(isComponentDef).type, def.type);\n                        }\n                    }\n                    // Components are inserted at the front of the matches array so that their lifecycle\n                    // hooks run before any directive lifecycle hooks. This appears to be for ViewEngine\n                    // compatibility. This logic doesn't make sense with host directives, because it\n                    // would allow the host directives to undo any overrides the host may have made.\n                    // To handle this case, the host directives of components are inserted at the beginning\n                    // of the array, followed by the component. As such, the insertion order is as follows:\n                    // 1. Host directives belonging to the selector-matched component.\n                    // 2. Selector-matched component.\n                    // 3. Host directives belonging to selector-matched directives.\n                    // 4. Selector-matched directives.\n                    if (def.findHostDirectiveDefs !== null) {\n                        const hostDirectiveMatches = [];\n                        hostDirectiveDefs = hostDirectiveDefs || new Map();\n                        def.findHostDirectiveDefs(def, hostDirectiveMatches, hostDirectiveDefs);\n                        // Add all host directives declared on this component, followed by the component itself.\n                        // Host directives should execute first so the host has a chance to override changes\n                        // to the DOM made by them.\n                        matches.unshift(...hostDirectiveMatches, def);\n                        // Component is offset starting from the beginning of the host directives array.\n                        const componentOffset = hostDirectiveMatches.length;\n                        markAsComponentHost(tView, tNode, componentOffset);\n                    }\n                    else {\n                        // No host directives on this component, just add the\n                        // component def to the beginning of the matches.\n                        matches.unshift(def);\n                        markAsComponentHost(tView, tNode, 0);\n                    }\n                }\n                else {\n                    // Append any host directives to the matches first.\n                    hostDirectiveDefs = hostDirectiveDefs || new Map();\n                    def.findHostDirectiveDefs?.(def, matches, hostDirectiveDefs);\n                    matches.push(def);\n                }\n            }\n        }\n    }\n    ngDevMode && matches !== null && assertNoDuplicateDirectives(matches);\n    return matches === null ? null : [matches, hostDirectiveDefs];\n}\n/**\n * Marks a given TNode as a component's host. This consists of:\n * - setting the component offset on the TNode.\n * - storing index of component's host element so it will be queued for view refresh during CD.\n */\nfunction markAsComponentHost(tView, hostTNode, componentOffset) {\n    ngDevMode && assertFirstCreatePass(tView);\n    ngDevMode && assertGreaterThan(componentOffset, -1, 'componentOffset must be great than -1');\n    hostTNode.componentOffset = componentOffset;\n    (tView.components ??= []).push(hostTNode.index);\n}\n/** Caches local names and their matching directive indices for query and template lookups. */\nfunction cacheMatchingLocalNames(tNode, localRefs, exportsMap) {\n    if (localRefs) {\n        const localNames = tNode.localNames = [];\n        // Local names must be stored in tNode in the same order that localRefs are defined\n        // in the template to ensure the data is loaded in the same slots as their refs\n        // in the template (for template queries).\n        for (let i = 0; i < localRefs.length; i += 2) {\n            const index = exportsMap[localRefs[i + 1]];\n            if (index == null)\n                throw new RuntimeError(-301 /* RuntimeErrorCode.EXPORT_NOT_FOUND */, ngDevMode && `Export of name '${localRefs[i + 1]}' not found!`);\n            localNames.push(localRefs[i], index);\n        }\n    }\n}\n/**\n * Builds up an export map as directives are created, so local refs can be quickly mapped\n * to their directive instances.\n */\nfunction saveNameToExportMap(directiveIdx, def, exportsMap) {\n    if (exportsMap) {\n        if (def.exportAs) {\n            for (let i = 0; i < def.exportAs.length; i++) {\n                exportsMap[def.exportAs[i]] = directiveIdx;\n            }\n        }\n        if (isComponentDef(def))\n            exportsMap[''] = directiveIdx;\n    }\n}\n/**\n * Initializes the flags on the current node, setting all indices to the initial index,\n * the directive count to 0, and adding the isComponent flag.\n * @param index the initial index\n */\nfunction initTNodeFlags(tNode, index, numberOfDirectives) {\n    ngDevMode &&\n        assertNotEqual(numberOfDirectives, tNode.directiveEnd - tNode.directiveStart, 'Reached the max number of directives');\n    tNode.flags |= 1 /* TNodeFlags.isDirectiveHost */;\n    // When the first directive is created on a node, save the index\n    tNode.directiveStart = index;\n    tNode.directiveEnd = index + numberOfDirectives;\n    tNode.providerIndexes = index;\n}\n/**\n * Setup directive for instantiation.\n *\n * We need to create a `NodeInjectorFactory` which is then inserted in both the `Blueprint` as well\n * as `LView`. `TView` gets the `DirectiveDef`.\n *\n * @param tView `TView`\n * @param tNode `TNode`\n * @param lView `LView`\n * @param directiveIndex Index where the directive will be stored in the Expando.\n * @param def `DirectiveDef`\n */\nfunction configureViewWithDirective(tView, tNode, lView, directiveIndex, def) {\n    ngDevMode &&\n        assertGreaterThanOrEqual(directiveIndex, HEADER_OFFSET, 'Must be in Expando section');\n    tView.data[directiveIndex] = def;\n    const directiveFactory = def.factory || (def.factory = getFactoryDef(def.type, true));\n    // Even though `directiveFactory` will already be using `ɵɵdirectiveInject` in its generated code,\n    // we also want to support `inject()` directly from the directive constructor context so we set\n    // `ɵɵdirectiveInject` as the inject implementation here too.\n    const nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), ɵɵdirectiveInject);\n    tView.blueprint[directiveIndex] = nodeInjectorFactory;\n    lView[directiveIndex] = nodeInjectorFactory;\n    registerHostBindingOpCodes(tView, tNode, directiveIndex, allocExpando(tView, lView, def.hostVars, NO_CHANGE), def);\n}\nfunction addComponentLogic(lView, hostTNode, def) {\n    const native = getNativeByTNode(hostTNode, lView);\n    const tView = getOrCreateComponentTView(def);\n    // Only component views should be added to the view tree directly. Embedded views are\n    // accessed through their containers because they may be removed / re-added later.\n    const rendererFactory = lView[ENVIRONMENT].rendererFactory;\n    let lViewFlags = 16 /* LViewFlags.CheckAlways */;\n    if (def.signals) {\n        lViewFlags = 4096 /* LViewFlags.SignalView */;\n    }\n    else if (def.onPush) {\n        lViewFlags = 64 /* LViewFlags.Dirty */;\n    }\n    const componentView = addToViewTree(lView, createLView(lView, tView, null, lViewFlags, native, hostTNode, null, rendererFactory.createRenderer(native, def), null, null, null));\n    // Component view will always be created before any injected LContainers,\n    // so this is a regular element, wrap it with the component view\n    lView[hostTNode.index] = componentView;\n}\nfunction elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace) {\n    if (ngDevMode) {\n        assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n        validateAgainstEventAttributes(name);\n        assertTNodeType(tNode, 2 /* TNodeType.Element */, `Attempted to set attribute \\`${name}\\` on a container node. ` +\n            `Host bindings are not valid on ng-container or ng-template.`);\n    }\n    const element = getNativeByTNode(tNode, lView);\n    setElementAttribute(lView[RENDERER], element, namespace, tNode.value, name, value, sanitizer);\n}\nfunction setElementAttribute(renderer, element, namespace, tagName, name, value, sanitizer) {\n    if (value == null) {\n        ngDevMode && ngDevMode.rendererRemoveAttribute++;\n        renderer.removeAttribute(element, name, namespace);\n    }\n    else {\n        ngDevMode && ngDevMode.rendererSetAttribute++;\n        const strValue = sanitizer == null ? renderStringify(value) : sanitizer(value, tagName || '', name);\n        renderer.setAttribute(element, name, strValue, namespace);\n    }\n}\n/**\n * Sets initial input properties on directive instances from attribute data\n *\n * @param lView Current LView that is being processed.\n * @param directiveIndex Index of the directive in directives array\n * @param instance Instance of the directive on which to set the initial inputs\n * @param def The directive def that contains the list of inputs\n * @param tNode The static data for this node\n */\nfunction setInputsFromAttrs(lView, directiveIndex, instance, def, tNode, initialInputData) {\n    const initialInputs = initialInputData[directiveIndex];\n    if (initialInputs !== null) {\n        for (let i = 0; i < initialInputs.length;) {\n            const publicName = initialInputs[i++];\n            const privateName = initialInputs[i++];\n            const value = initialInputs[i++];\n            writeToDirectiveInput(def, instance, publicName, privateName, value);\n            if (ngDevMode) {\n                const nativeElement = getNativeByTNode(tNode, lView);\n                setNgReflectProperty(lView, nativeElement, tNode.type, privateName, value);\n            }\n        }\n    }\n}\nfunction writeToDirectiveInput(def, instance, publicName, privateName, value) {\n    const prevConsumer = setActiveConsumer$1(null);\n    try {\n        const inputTransforms = def.inputTransforms;\n        if (inputTransforms !== null && inputTransforms.hasOwnProperty(privateName)) {\n            value = inputTransforms[privateName].call(instance, value);\n        }\n        if (def.setInput !== null) {\n            def.setInput(instance, value, publicName, privateName);\n        }\n        else {\n            instance[privateName] = value;\n        }\n    }\n    finally {\n        setActiveConsumer$1(prevConsumer);\n    }\n}\n/**\n * Generates initialInputData for a node and stores it in the template's static storage\n * so subsequent template invocations don't have to recalculate it.\n *\n * initialInputData is an array containing values that need to be set as input properties\n * for directives on this node, but only once on creation. We need this array to support\n * the case where you set an @Input property of a directive using attribute-like syntax.\n * e.g. if you have a `name` @Input, you can set it once like this:\n *\n * <my-component name=\"Bess\"></my-component>\n *\n * @param inputs Input alias map that was generated from the directive def inputs.\n * @param directiveIndex Index of the directive that is currently being processed.\n * @param attrs Static attrs on this node.\n */\nfunction generateInitialInputs(inputs, directiveIndex, attrs) {\n    let inputsToStore = null;\n    let i = 0;\n    while (i < attrs.length) {\n        const attrName = attrs[i];\n        if (attrName === 0 /* AttributeMarker.NamespaceURI */) {\n            // We do not allow inputs on namespaced attributes.\n            i += 4;\n            continue;\n        }\n        else if (attrName === 5 /* AttributeMarker.ProjectAs */) {\n            // Skip over the `ngProjectAs` value.\n            i += 2;\n            continue;\n        }\n        // If we hit any other attribute markers, we're done anyway. None of those are valid inputs.\n        if (typeof attrName === 'number')\n            break;\n        if (inputs.hasOwnProperty(attrName)) {\n            if (inputsToStore === null)\n                inputsToStore = [];\n            // Find the input's public name from the input store. Note that we can be found easier\n            // through the directive def, but we want to do it using the inputs store so that it can\n            // account for host directive aliases.\n            const inputConfig = inputs[attrName];\n            for (let j = 0; j < inputConfig.length; j += 2) {\n                if (inputConfig[j] === directiveIndex) {\n                    inputsToStore.push(attrName, inputConfig[j + 1], attrs[i + 1]);\n                    // A directive can't have multiple inputs with the same name so we can break here.\n                    break;\n                }\n            }\n        }\n        i += 2;\n    }\n    return inputsToStore;\n}\n//////////////////////////\n//// ViewContainer & View\n//////////////////////////\n/**\n * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.\n *\n * @param hostNative The host element for the LContainer\n * @param hostTNode The host TNode for the LContainer\n * @param currentView The parent view of the LContainer\n * @param native The native comment element\n * @param isForViewContainerRef Optional a flag indicating the ViewContainerRef case\n * @returns LContainer\n */\nfunction createLContainer(hostNative, currentView, native, tNode) {\n    ngDevMode && assertLView(currentView);\n    const lContainer = [\n        hostNative,\n        true,\n        0,\n        currentView,\n        null,\n        tNode,\n        null,\n        native,\n        null,\n        null, // moved views\n    ];\n    ngDevMode &&\n        assertEqual(lContainer.length, CONTAINER_HEADER_OFFSET, 'Should allocate correct number of slots for LContainer header.');\n    return lContainer;\n}\n/** Refreshes all content queries declared by directives in a given view */\nfunction refreshContentQueries(tView, lView) {\n    const contentQueries = tView.contentQueries;\n    if (contentQueries !== null) {\n        const prevConsumer = setActiveConsumer$1(null);\n        try {\n            for (let i = 0; i < contentQueries.length; i += 2) {\n                const queryStartIdx = contentQueries[i];\n                const directiveDefIdx = contentQueries[i + 1];\n                if (directiveDefIdx !== -1) {\n                    const directiveDef = tView.data[directiveDefIdx];\n                    ngDevMode && assertDefined(directiveDef, 'DirectiveDef not found.');\n                    ngDevMode &&\n                        assertDefined(directiveDef.contentQueries, 'contentQueries function should be defined');\n                    setCurrentQueryIndex(queryStartIdx);\n                    directiveDef.contentQueries(2 /* RenderFlags.Update */, lView[directiveDefIdx], directiveDefIdx);\n                }\n            }\n        }\n        finally {\n            setActiveConsumer$1(prevConsumer);\n        }\n    }\n}\n/**\n * Adds LView or LContainer to the end of the current view tree.\n *\n * This structure will be used to traverse through nested views to remove listeners\n * and call onDestroy callbacks.\n *\n * @param lView The view where LView or LContainer should be added\n * @param adjustedHostIndex Index of the view's host node in LView[], adjusted for header\n * @param lViewOrLContainer The LView or LContainer to add to the view tree\n * @returns The state passed in\n */\nfunction addToViewTree(lView, lViewOrLContainer) {\n    // TODO(benlesh/misko): This implementation is incorrect, because it always adds the LContainer\n    // to the end of the queue, which means if the developer retrieves the LContainers from RNodes out\n    // of order, the change detection will run out of order, as the act of retrieving the the\n    // LContainer from the RNode is what adds it to the queue.\n    if (lView[CHILD_HEAD]) {\n        lView[CHILD_TAIL][NEXT] = lViewOrLContainer;\n    }\n    else {\n        lView[CHILD_HEAD] = lViewOrLContainer;\n    }\n    lView[CHILD_TAIL] = lViewOrLContainer;\n    return lViewOrLContainer;\n}\n///////////////////////////////\n//// Change detection\n///////////////////////////////\nfunction executeViewQueryFn(flags, viewQueryFn, component) {\n    ngDevMode && assertDefined(viewQueryFn, 'View queries function to execute must be defined.');\n    setCurrentQueryIndex(0);\n    const prevConsumer = setActiveConsumer$1(null);\n    try {\n        viewQueryFn(flags, component);\n    }\n    finally {\n        setActiveConsumer$1(prevConsumer);\n    }\n}\n///////////////////////////////\n//// Bindings & interpolations\n///////////////////////////////\n/**\n * Stores meta-data for a property binding to be used by TestBed's `DebugElement.properties`.\n *\n * In order to support TestBed's `DebugElement.properties` we need to save, for each binding:\n * - a bound property name;\n * - a static parts of interpolated strings;\n *\n * A given property metadata is saved at the binding's index in the `TView.data` (in other words, a\n * property binding metadata will be stored in `TView.data` at the same index as a bound value in\n * `LView`). Metadata are represented as `INTERPOLATION_DELIMITER`-delimited string with the\n * following format:\n * - `propertyName` for bound properties;\n * - `propertyName�prefix�interpolation_static_part1�..interpolation_static_partN�suffix` for\n * interpolated properties.\n *\n * @param tData `TData` where meta-data will be saved;\n * @param tNode `TNode` that is a target of the binding;\n * @param propertyName bound property name;\n * @param bindingIndex binding index in `LView`\n * @param interpolationParts static interpolation parts (for property interpolations)\n */\nfunction storePropertyBindingMetadata(tData, tNode, propertyName, bindingIndex, ...interpolationParts) {\n    // Binding meta-data are stored only the first time a given property instruction is processed.\n    // Since we don't have a concept of the \"first update pass\" we need to check for presence of the\n    // binding meta-data to decide if one should be stored (or if was stored already).\n    if (tData[bindingIndex] === null) {\n        if (tNode.inputs == null || !tNode.inputs[propertyName]) {\n            const propBindingIdxs = tNode.propertyBindings || (tNode.propertyBindings = []);\n            propBindingIdxs.push(bindingIndex);\n            let bindingMetadata = propertyName;\n            if (interpolationParts.length > 0) {\n                bindingMetadata +=\n                    INTERPOLATION_DELIMITER + interpolationParts.join(INTERPOLATION_DELIMITER);\n            }\n            tData[bindingIndex] = bindingMetadata;\n        }\n    }\n}\nfunction getOrCreateLViewCleanup(view) {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return view[CLEANUP] || (view[CLEANUP] = []);\n}\nfunction getOrCreateTViewCleanup(tView) {\n    return tView.cleanup || (tView.cleanup = []);\n}\n/**\n * There are cases where the sub component's renderer needs to be included\n * instead of the current renderer (see the componentSyntheticHost* instructions).\n */\nfunction loadComponentRenderer(currentDef, tNode, lView) {\n    // TODO(FW-2043): the `currentDef` is null when host bindings are invoked while creating root\n    // component (see packages/core/src/render3/component.ts). This is not consistent with the process\n    // of creating inner components, when current directive index is available in the state. In order\n    // to avoid relying on current def being `null` (thus special-casing root component creation), the\n    // process of creating root component should be unified with the process of creating inner\n    // components.\n    if (currentDef === null || isComponentDef(currentDef)) {\n        lView = unwrapLView(lView[tNode.index]);\n    }\n    return lView[RENDERER];\n}\n/** Handles an error thrown in an LView. */\nfunction handleError(lView, error) {\n    const injector = lView[INJECTOR$1];\n    const errorHandler = injector ? injector.get(ErrorHandler, null) : null;\n    errorHandler && errorHandler.handleError(error);\n}\n/**\n * Set the inputs of directives at the current node to corresponding value.\n *\n * @param tView The current TView\n * @param lView the `LView` which contains the directives.\n * @param inputs mapping between the public \"input\" name and privately-known,\n *        possibly minified, property names to write to.\n * @param value Value to set.\n */\nfunction setInputsForProperty(tView, lView, inputs, publicName, value) {\n    for (let i = 0; i < inputs.length;) {\n        const index = inputs[i++];\n        const privateName = inputs[i++];\n        const instance = lView[index];\n        ngDevMode && assertIndexInRange(lView, index);\n        const def = tView.data[index];\n        writeToDirectiveInput(def, instance, publicName, privateName, value);\n    }\n}\n/**\n * Updates a text binding at a given index in a given LView.\n */\nfunction textBindingInternal(lView, index, value) {\n    ngDevMode && assertString(value, 'Value should be a string');\n    ngDevMode && assertNotSame(value, NO_CHANGE, 'value should not be NO_CHANGE');\n    ngDevMode && assertIndexInRange(lView, index);\n    const element = getNativeByIndex(index, lView);\n    ngDevMode && assertDefined(element, 'native element should exist');\n    updateTextNode(lView[RENDERER], element, value);\n}\n\n/**\n * The maximum number of times the change detection traversal will rerun before throwing an error.\n */\nconst MAXIMUM_REFRESH_RERUNS = 100;\nfunction detectChangesInternal(lView, notifyErrorHandler = true) {\n    const environment = lView[ENVIRONMENT];\n    const rendererFactory = environment.rendererFactory;\n    const afterRenderEventManager = environment.afterRenderEventManager;\n    // Check no changes mode is a dev only mode used to verify that bindings have not changed\n    // since they were assigned. We do not want to invoke renderer factory functions in that mode\n    // to avoid any possible side-effects.\n    const checkNoChangesMode = !!ngDevMode && isInCheckNoChangesMode();\n    if (!checkNoChangesMode) {\n        rendererFactory.begin?.();\n        afterRenderEventManager?.begin();\n    }\n    try {\n        detectChangesInViewWhileDirty(lView);\n    }\n    catch (error) {\n        if (notifyErrorHandler) {\n            handleError(lView, error);\n        }\n        throw error;\n    }\n    finally {\n        if (!checkNoChangesMode) {\n            rendererFactory.end?.();\n            // One final flush of the effects queue to catch any effects created in `ngAfterViewInit` or\n            // other post-order hooks.\n            environment.inlineEffectRunner?.flush();\n            // Invoke all callbacks registered via `after*Render`, if needed.\n            afterRenderEventManager?.end();\n        }\n    }\n}\nfunction detectChangesInViewWhileDirty(lView) {\n    detectChangesInView(lView, 0 /* ChangeDetectionMode.Global */);\n    let retries = 0;\n    // If after running change detection, this view still needs to be refreshed or there are\n    // descendants views that need to be refreshed due to re-dirtying during the change detection\n    // run, detect changes on the view again. We run change detection in `Targeted` mode to only\n    // refresh views with the `RefreshView` flag.\n    while (requiresRefreshOrTraversal(lView)) {\n        if (retries === MAXIMUM_REFRESH_RERUNS) {\n            throw new RuntimeError(103 /* RuntimeErrorCode.INFINITE_CHANGE_DETECTION */, ngDevMode &&\n                'Infinite change detection while trying to refresh views. ' +\n                    'There may be components which each cause the other to require a refresh, ' +\n                    'causing an infinite loop.');\n        }\n        retries++;\n        // Even if this view is detached, we still detect changes in targeted mode because this was\n        // the root of the change detection run.\n        detectChangesInView(lView, 1 /* ChangeDetectionMode.Targeted */);\n    }\n}\nfunction checkNoChangesInternal(lView, notifyErrorHandler = true) {\n    setIsInCheckNoChangesMode(true);\n    try {\n        detectChangesInternal(lView, notifyErrorHandler);\n    }\n    finally {\n        setIsInCheckNoChangesMode(false);\n    }\n}\n/**\n * Processes a view in update mode. This includes a number of steps in a specific order:\n * - executing a template function in update mode;\n * - executing hooks;\n * - refreshing queries;\n * - setting host bindings;\n * - refreshing child (embedded and component) views.\n */\nfunction refreshView(tView, lView, templateFn, context) {\n    ngDevMode && assertEqual(isCreationMode(lView), false, 'Should be run in update mode');\n    const flags = lView[FLAGS];\n    if ((flags & 256 /* LViewFlags.Destroyed */) === 256 /* LViewFlags.Destroyed */)\n        return;\n    // Check no changes mode is a dev only mode used to verify that bindings have not changed\n    // since they were assigned. We do not want to execute lifecycle hooks in that mode.\n    const isInCheckNoChangesPass = ngDevMode && isInCheckNoChangesMode();\n    !isInCheckNoChangesPass && lView[ENVIRONMENT].inlineEffectRunner?.flush();\n    // Start component reactive context\n    // - We might already be in a reactive context if this is an embedded view of the host.\n    // - We might be descending into a view that needs a consumer.\n    enterView(lView);\n    let prevConsumer = null;\n    let currentConsumer = null;\n    if (!isInCheckNoChangesPass && viewShouldHaveReactiveConsumer(tView)) {\n        currentConsumer = getOrBorrowReactiveLViewConsumer(lView);\n        prevConsumer = consumerBeforeComputation$1(currentConsumer);\n    }\n    try {\n        resetPreOrderHookFlags(lView);\n        setBindingIndex(tView.bindingStartIndex);\n        if (templateFn !== null) {\n            executeTemplate(tView, lView, templateFn, 2 /* RenderFlags.Update */, context);\n        }\n        const hooksInitPhaseCompleted = (flags & 3 /* LViewFlags.InitPhaseStateMask */) === 3 /* InitPhaseState.InitPhaseCompleted */;\n        // execute pre-order hooks (OnInit, OnChanges, DoCheck)\n        // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n        if (!isInCheckNoChangesPass) {\n            if (hooksInitPhaseCompleted) {\n                const preOrderCheckHooks = tView.preOrderCheckHooks;\n                if (preOrderCheckHooks !== null) {\n                    executeCheckHooks(lView, preOrderCheckHooks, null);\n                }\n            }\n            else {\n                const preOrderHooks = tView.preOrderHooks;\n                if (preOrderHooks !== null) {\n                    executeInitAndCheckHooks(lView, preOrderHooks, 0 /* InitPhaseState.OnInitHooksToBeRun */, null);\n                }\n                incrementInitPhaseFlags(lView, 0 /* InitPhaseState.OnInitHooksToBeRun */);\n            }\n        }\n        // First mark transplanted views that are declared in this lView as needing a refresh at their\n        // insertion points. This is needed to avoid the situation where the template is defined in this\n        // `LView` but its declaration appears after the insertion component.\n        markTransplantedViewsForRefresh(lView);\n        detectChangesInEmbeddedViews(lView, 0 /* ChangeDetectionMode.Global */);\n        // Content query results must be refreshed before content hooks are called.\n        if (tView.contentQueries !== null) {\n            refreshContentQueries(tView, lView);\n        }\n        // execute content hooks (AfterContentInit, AfterContentChecked)\n        // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n        if (!isInCheckNoChangesPass) {\n            if (hooksInitPhaseCompleted) {\n                const contentCheckHooks = tView.contentCheckHooks;\n                if (contentCheckHooks !== null) {\n                    executeCheckHooks(lView, contentCheckHooks);\n                }\n            }\n            else {\n                const contentHooks = tView.contentHooks;\n                if (contentHooks !== null) {\n                    executeInitAndCheckHooks(lView, contentHooks, 1 /* InitPhaseState.AfterContentInitHooksToBeRun */);\n                }\n                incrementInitPhaseFlags(lView, 1 /* InitPhaseState.AfterContentInitHooksToBeRun */);\n            }\n        }\n        processHostBindingOpCodes(tView, lView);\n        // Refresh child component views.\n        const components = tView.components;\n        if (components !== null) {\n            detectChangesInChildComponents(lView, components, 0 /* ChangeDetectionMode.Global */);\n        }\n        // View queries must execute after refreshing child components because a template in this view\n        // could be inserted in a child component. If the view query executes before child component\n        // refresh, the template might not yet be inserted.\n        const viewQuery = tView.viewQuery;\n        if (viewQuery !== null) {\n            executeViewQueryFn(2 /* RenderFlags.Update */, viewQuery, context);\n        }\n        // execute view hooks (AfterViewInit, AfterViewChecked)\n        // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n        if (!isInCheckNoChangesPass) {\n            if (hooksInitPhaseCompleted) {\n                const viewCheckHooks = tView.viewCheckHooks;\n                if (viewCheckHooks !== null) {\n                    executeCheckHooks(lView, viewCheckHooks);\n                }\n            }\n            else {\n                const viewHooks = tView.viewHooks;\n                if (viewHooks !== null) {\n                    executeInitAndCheckHooks(lView, viewHooks, 2 /* InitPhaseState.AfterViewInitHooksToBeRun */);\n                }\n                incrementInitPhaseFlags(lView, 2 /* InitPhaseState.AfterViewInitHooksToBeRun */);\n            }\n        }\n        if (tView.firstUpdatePass === true) {\n            // We need to make sure that we only flip the flag on successful `refreshView` only\n            // Don't do this in `finally` block.\n            // If we did this in `finally` block then an exception could block the execution of styling\n            // instructions which in turn would be unable to insert themselves into the styling linked\n            // list. The result of this would be that if the exception would not be throw on subsequent CD\n            // the styling would be unable to process it data and reflect to the DOM.\n            tView.firstUpdatePass = false;\n        }\n        // Schedule any effects that are waiting on the update pass of this view.\n        if (lView[EFFECTS_TO_SCHEDULE]) {\n            for (const notifyEffect of lView[EFFECTS_TO_SCHEDULE]) {\n                notifyEffect();\n            }\n            // Once they've been run, we can drop the array.\n            lView[EFFECTS_TO_SCHEDULE] = null;\n        }\n        // Do not reset the dirty state when running in check no changes mode. We don't want components\n        // to behave differently depending on whether check no changes is enabled or not. For example:\n        // Marking an OnPush component as dirty from within the `ngAfterViewInit` hook in order to\n        // refresh a `NgClass` binding should work. If we would reset the dirty state in the check\n        // no changes cycle, the component would be not be dirty for the next update pass. This would\n        // be different in production mode where the component dirty state is not reset.\n        if (!isInCheckNoChangesPass) {\n            lView[FLAGS] &= ~(64 /* LViewFlags.Dirty */ | 8 /* LViewFlags.FirstLViewPass */);\n        }\n    }\n    catch (e) {\n        // If refreshing a view causes an error, we need to remark the ancestors as needing traversal\n        // because the error might have caused a situation where views below the current location are\n        // dirty but will be unreachable because the \"has dirty children\" flag in the ancestors has been\n        // cleared during change detection and we failed to run to completion.\n        markAncestorsForTraversal(lView);\n        throw e;\n    }\n    finally {\n        if (currentConsumer !== null) {\n            consumerAfterComputation$1(currentConsumer, prevConsumer);\n            maybeReturnReactiveLViewConsumer(currentConsumer);\n        }\n        leaveView();\n    }\n}\n/**\n * Indicates if the view should get its own reactive consumer node.\n *\n * In the current design, all embedded views share a consumer with the component view. This allows\n * us to refresh at the component level rather than at a per-view level. In addition, root views get\n * their own reactive node because root component will have a host view that executes the\n * component's host bindings. This needs to be tracked in a consumer as well.\n *\n * To get a more granular change detection than per-component, all we would just need to update the\n * condition here so that a given view gets a reactive consumer which can become dirty independently\n * from its parent component. For example embedded views for signal components could be created with\n * a new type \"SignalEmbeddedView\" and the condition here wouldn't even need updating in order to\n * get granular per-view change detection for signal components.\n */\nfunction viewShouldHaveReactiveConsumer(tView) {\n    return tView.type !== 2 /* TViewType.Embedded */;\n}\n/**\n * Goes over embedded views (ones created through ViewContainerRef APIs) and refreshes\n * them by executing an associated template function.\n */\nfunction detectChangesInEmbeddedViews(lView, mode) {\n    for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {\n        lContainer[FLAGS] &= ~LContainerFlags.HasChildViewsToRefresh;\n        for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n            const embeddedLView = lContainer[i];\n            detectChangesInViewIfAttached(embeddedLView, mode);\n        }\n    }\n}\n/**\n * Mark transplanted views as needing to be refreshed at their insertion points.\n *\n * @param lView The `LView` that may have transplanted views.\n */\nfunction markTransplantedViewsForRefresh(lView) {\n    for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {\n        if (!(lContainer[FLAGS] & LContainerFlags.HasTransplantedViews))\n            continue;\n        const movedViews = lContainer[MOVED_VIEWS];\n        ngDevMode && assertDefined(movedViews, 'Transplanted View flags set but missing MOVED_VIEWS');\n        for (let i = 0; i < movedViews.length; i++) {\n            const movedLView = movedViews[i];\n            const insertionLContainer = movedLView[PARENT];\n            ngDevMode && assertLContainer(insertionLContainer);\n            markViewForRefresh(movedLView);\n        }\n    }\n}\n/**\n * Detects changes in a component by entering the component view and processing its bindings,\n * queries, etc. if it is CheckAlways, OnPush and Dirty, etc.\n *\n * @param componentHostIdx  Element index in LView[] (adjusted for HEADER_OFFSET)\n */\nfunction detectChangesInComponent(hostLView, componentHostIdx, mode) {\n    ngDevMode && assertEqual(isCreationMode(hostLView), false, 'Should be run in update mode');\n    const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);\n    detectChangesInViewIfAttached(componentView, mode);\n}\n/**\n * Visits a view as part of change detection traversal.\n *\n * If the view is detached, no additional traversal happens.\n */\nfunction detectChangesInViewIfAttached(lView, mode) {\n    if (!viewAttachedToChangeDetector(lView)) {\n        return;\n    }\n    detectChangesInView(lView, mode);\n}\n/**\n * Visits a view as part of change detection traversal.\n *\n * The view is refreshed if:\n * - If the view is CheckAlways or Dirty and ChangeDetectionMode is `Global`\n * - If the view has the `RefreshView` flag\n *\n * The view is not refreshed, but descendants are traversed in `ChangeDetectionMode.Targeted` if the\n * view HasChildViewsToRefresh flag is set.\n */\nfunction detectChangesInView(lView, mode) {\n    const isInCheckNoChangesPass = ngDevMode && isInCheckNoChangesMode();\n    const tView = lView[TVIEW];\n    const flags = lView[FLAGS];\n    const consumer = lView[REACTIVE_TEMPLATE_CONSUMER];\n    // Refresh CheckAlways views in Global mode.\n    let shouldRefreshView = !!(mode === 0 /* ChangeDetectionMode.Global */ && flags & 16 /* LViewFlags.CheckAlways */);\n    // Refresh Dirty views in Global mode, as long as we're not in checkNoChanges.\n    // CheckNoChanges never worked with `OnPush` components because the `Dirty` flag was\n    // cleared before checkNoChanges ran. Because there is now a loop for to check for\n    // backwards views, it gives an opportunity for `OnPush` components to be marked `Dirty`\n    // before the CheckNoChanges pass. We don't want existing errors that are hidden by the\n    // current CheckNoChanges bug to surface when making unrelated changes.\n    shouldRefreshView ||= !!(flags & 64 /* LViewFlags.Dirty */ && mode === 0 /* ChangeDetectionMode.Global */ && !isInCheckNoChangesPass);\n    // Always refresh views marked for refresh, regardless of mode.\n    shouldRefreshView ||= !!(flags & 1024 /* LViewFlags.RefreshView */);\n    // Refresh views when they have a dirty reactive consumer, regardless of mode.\n    shouldRefreshView ||= !!(consumer?.dirty && consumerPollProducersForChange$1(consumer));\n    // Mark the Flags and `ReactiveNode` as not dirty before refreshing the component, so that they\n    // can be re-dirtied during the refresh process.\n    if (consumer) {\n        consumer.dirty = false;\n    }\n    lView[FLAGS] &= ~(8192 /* LViewFlags.HasChildViewsToRefresh */ | 1024 /* LViewFlags.RefreshView */);\n    if (shouldRefreshView) {\n        refreshView(tView, lView, tView.template, lView[CONTEXT]);\n    }\n    else if (flags & 8192 /* LViewFlags.HasChildViewsToRefresh */) {\n        detectChangesInEmbeddedViews(lView, 1 /* ChangeDetectionMode.Targeted */);\n        const components = tView.components;\n        if (components !== null) {\n            detectChangesInChildComponents(lView, components, 1 /* ChangeDetectionMode.Targeted */);\n        }\n    }\n}\n/** Refreshes child components in the current view (update mode). */\nfunction detectChangesInChildComponents(hostLView, components, mode) {\n    for (let i = 0; i < components.length; i++) {\n        detectChangesInComponent(hostLView, components[i], mode);\n    }\n}\n\n/**\n * Marks current view and all ancestors dirty.\n *\n * Returns the root view because it is found as a byproduct of marking the view tree\n * dirty, and can be used by methods that consume markViewDirty() to easily schedule\n * change detection. Otherwise, such methods would need to traverse up the view tree\n * an additional time to get the root view and schedule a tick on it.\n *\n * @param lView The starting LView to mark dirty\n * @returns the root LView\n */\nfunction markViewDirty(lView) {\n    lView[ENVIRONMENT].changeDetectionScheduler?.notify();\n    while (lView) {\n        lView[FLAGS] |= 64 /* LViewFlags.Dirty */;\n        const parent = getLViewParent(lView);\n        // Stop traversing up as soon as you find a root view that wasn't attached to any container\n        if (isRootView(lView) && !parent) {\n            return lView;\n        }\n        // continue otherwise\n        lView = parent;\n    }\n    return null;\n}\n\nclass ViewRef$1 {\n    get rootNodes() {\n        const lView = this._lView;\n        const tView = lView[TVIEW];\n        return collectNativeNodes(tView, lView, tView.firstChild, []);\n    }\n    constructor(\n    /**\n     * This represents `LView` associated with the component when ViewRef is a ChangeDetectorRef.\n     *\n     * When ViewRef is created for a dynamic component, this also represents the `LView` for the\n     * component.\n     *\n     * For a \"regular\" ViewRef created for an embedded view, this is the `LView` for the embedded\n     * view.\n     *\n     * @internal\n     */\n    _lView, \n    /**\n     * This represents the `LView` associated with the point where `ChangeDetectorRef` was\n     * requested.\n     *\n     * This may be different from `_lView` if the `_cdRefInjectingView` is an embedded view.\n     */\n    _cdRefInjectingView, notifyErrorHandler = true) {\n        this._lView = _lView;\n        this._cdRefInjectingView = _cdRefInjectingView;\n        this.notifyErrorHandler = notifyErrorHandler;\n        this._appRef = null;\n        this._attachedToViewContainer = false;\n    }\n    get context() {\n        return this._lView[CONTEXT];\n    }\n    /**\n     * @deprecated Replacing the full context object is not supported. Modify the context\n     *   directly, or consider using a `Proxy` if you need to replace the full object.\n     * // TODO(devversion): Remove this.\n     */\n    set context(value) {\n        if (ngDevMode) {\n            // Note: We have a warning message here because the `@deprecated` JSDoc will not be picked\n            // up for assignments on the setter. We want to let users know about the deprecated usage.\n            console.warn('Angular: Replacing the `context` object of an `EmbeddedViewRef` is deprecated.');\n        }\n        this._lView[CONTEXT] = value;\n    }\n    get destroyed() {\n        return (this._lView[FLAGS] & 256 /* LViewFlags.Destroyed */) === 256 /* LViewFlags.Destroyed */;\n    }\n    destroy() {\n        if (this._appRef) {\n            this._appRef.detachView(this);\n        }\n        else if (this._attachedToViewContainer) {\n            const parent = this._lView[PARENT];\n            if (isLContainer(parent)) {\n                const viewRefs = parent[VIEW_REFS];\n                const index = viewRefs ? viewRefs.indexOf(this) : -1;\n                if (index > -1) {\n                    ngDevMode &&\n                        assertEqual(index, parent.indexOf(this._lView) - CONTAINER_HEADER_OFFSET, 'An attached view should be in the same position within its container as its ViewRef in the VIEW_REFS array.');\n                    detachView(parent, index);\n                    removeFromArray(viewRefs, index);\n                }\n            }\n            this._attachedToViewContainer = false;\n        }\n        destroyLView(this._lView[TVIEW], this._lView);\n    }\n    onDestroy(callback) {\n        storeLViewOnDestroy(this._lView, callback);\n    }\n    /**\n     * Marks a view and all of its ancestors dirty.\n     *\n     * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush} component is\n     * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n     * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Component({\n     *   selector: 'app-root',\n     *   template: `Number of ticks: {{numberOfTicks}}`\n     *   changeDetection: ChangeDetectionStrategy.OnPush,\n     * })\n     * class AppComponent {\n     *   numberOfTicks = 0;\n     *\n     *   constructor(private ref: ChangeDetectorRef) {\n     *     setInterval(() => {\n     *       this.numberOfTicks++;\n     *       // the following is required, otherwise the view will not be updated\n     *       this.ref.markForCheck();\n     *     }, 1000);\n     *   }\n     * }\n     * ```\n     */\n    markForCheck() {\n        markViewDirty(this._cdRefInjectingView || this._lView);\n    }\n    /**\n     * Detaches the view from the change detection tree.\n     *\n     * Detached views will not be checked during change detection runs until they are\n     * re-attached, even if they are dirty. `detach` can be used in combination with\n     * {@link ChangeDetectorRef#detectChanges} to implement local change\n     * detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds. We can do that by detaching\n     * the component's change detector and doing a local check every five seconds.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   // in a real application the returned data will be different every time\n     *   get data() {\n     *     return [1,2,3,4,5];\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'giant-list',\n     *   template: `\n     *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n     *   `,\n     * })\n     * class GiantList {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n     *     ref.detach();\n     *     setInterval(() => {\n     *       this.ref.detectChanges();\n     *     }, 5000);\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     <giant-list><giant-list>\n     *   `,\n     * })\n     * class App {\n     * }\n     * ```\n     */\n    detach() {\n        this._lView[FLAGS] &= ~128 /* LViewFlags.Attached */;\n    }\n    /**\n     * Re-attaches a view to the change detection tree.\n     *\n     * This can be used to re-attach views that were previously detached from the tree\n     * using {@link ChangeDetectorRef#detach}. Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example creates a component displaying `live` data. The component will detach\n     * its change detector from the main change detector tree when the component's live property\n     * is set to false.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   data = 1;\n     *\n     *   constructor() {\n     *     setInterval(() => {\n     *       this.data = this.data * 2;\n     *     }, 500);\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'live-data',\n     *   inputs: ['live'],\n     *   template: 'Data: {{dataProvider.data}}'\n     * })\n     * class LiveData {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n     *\n     *   set live(value) {\n     *     if (value) {\n     *       this.ref.reattach();\n     *     } else {\n     *       this.ref.detach();\n     *     }\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'app-root',\n     *   providers: [DataProvider],\n     *   template: `\n     *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n     *     <live-data [live]=\"live\"><live-data>\n     *   `,\n     * })\n     * class AppComponent {\n     *   live = true;\n     * }\n     * ```\n     */\n    reattach() {\n        updateAncestorTraversalFlagsOnAttach(this._lView);\n        this._lView[FLAGS] |= 128 /* LViewFlags.Attached */;\n    }\n    /**\n     * Checks the view and its children.\n     *\n     * This can also be used in combination with {@link ChangeDetectorRef#detach} to implement\n     * local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine, the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds.\n     *\n     * We can do that by detaching the component's change detector and doing a local change detection\n     * check every five seconds.\n     *\n     * See {@link ChangeDetectorRef#detach} for more information.\n     */\n    detectChanges() {\n        // Add `RefreshView` flag to ensure this view is refreshed if not already dirty.\n        // `RefreshView` flag is used intentionally over `Dirty` because it gets cleared before\n        // executing any of the actual refresh code while the `Dirty` flag doesn't get cleared\n        // until the end of the refresh. Using `RefreshView` prevents creating a potential difference\n        // in the state of the LViewFlags during template execution.\n        this._lView[FLAGS] |= 1024 /* LViewFlags.RefreshView */;\n        detectChangesInternal(this._lView, this.notifyErrorHandler);\n    }\n    /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * This is used in development mode to verify that running change detection doesn't\n     * introduce other changes.\n     */\n    checkNoChanges() {\n        if (ngDevMode) {\n            checkNoChangesInternal(this._lView, this.notifyErrorHandler);\n        }\n    }\n    attachToViewContainerRef() {\n        if (this._appRef) {\n            throw new RuntimeError(902 /* RuntimeErrorCode.VIEW_ALREADY_ATTACHED */, ngDevMode && 'This view is already attached directly to the ApplicationRef!');\n        }\n        this._attachedToViewContainer = true;\n    }\n    detachFromAppRef() {\n        this._appRef = null;\n        detachViewFromDOM(this._lView[TVIEW], this._lView);\n    }\n    attachToAppRef(appRef) {\n        if (this._attachedToViewContainer) {\n            throw new RuntimeError(902 /* RuntimeErrorCode.VIEW_ALREADY_ATTACHED */, ngDevMode && 'This view is already attached to a ViewContainer!');\n        }\n        this._appRef = appRef;\n        updateAncestorTraversalFlagsOnAttach(this._lView);\n    }\n}\n\n/**\n * Base class that provides change detection functionality.\n * A change-detection tree collects all views that are to be checked for changes.\n * Use the methods to add and remove views from the tree, initiate change-detection,\n * and explicitly mark views as _dirty_, meaning that they have changed and need to be re-rendered.\n *\n * @see [Using change detection hooks](guide/lifecycle-hooks#using-change-detection-hooks)\n * @see [Defining custom change detection](guide/lifecycle-hooks#defining-custom-change-detection)\n *\n * @usageNotes\n *\n * The following examples demonstrate how to modify default change-detection behavior\n * to perform explicit detection when needed.\n *\n * ### Use `markForCheck()` with `CheckOnce` strategy\n *\n * The following example sets the `OnPush` change-detection strategy for a component\n * (`CheckOnce`, rather than the default `CheckAlways`), then forces a second check\n * after an interval.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\"\n * region=\"mark-for-check\"></code-example>\n *\n * ### Detach change detector to limit how often check occurs\n *\n * The following example defines a component with a large list of read-only data\n * that is expected to change constantly, many times per second.\n * To improve performance, we want to check and update the list\n * less often than the changes actually occur. To do that, we detach\n * the component's change detector and perform an explicit local check every five seconds.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"detach\"></code-example>\n *\n *\n * ### Reattaching a detached component\n *\n * The following example creates a component displaying live data.\n * The component detaches its change detector from the main change detector tree\n * when the `live` property is set to false, and reattaches it when the property\n * becomes true.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"reattach\"></code-example>\n *\n * @publicApi\n */\nclass ChangeDetectorRef {\n    /**\n     * @internal\n     * @nocollapse\n     */\n    static { this.__NG_ELEMENT_ID__ = injectChangeDetectorRef; }\n}\n/** Returns a ChangeDetectorRef (a.k.a. a ViewRef) */\nfunction injectChangeDetectorRef(flags) {\n    return createViewRef(getCurrentTNode(), getLView(), (flags & 16 /* InternalInjectFlags.ForPipe */) === 16 /* InternalInjectFlags.ForPipe */);\n}\n/**\n * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).\n *\n * @param tNode The node that is requesting a ChangeDetectorRef\n * @param lView The view to which the node belongs\n * @param isPipe Whether the view is being injected into a pipe.\n * @returns The ChangeDetectorRef to use\n */\nfunction createViewRef(tNode, lView, isPipe) {\n    if (isComponentHost(tNode) && !isPipe) {\n        // The LView represents the location where the component is declared.\n        // Instead we want the LView for the component View and so we need to look it up.\n        const componentView = getComponentLViewByIndex(tNode.index, lView); // look down\n        return new ViewRef$1(componentView, componentView);\n    }\n    else if (tNode.type & (3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */ | 32 /* TNodeType.Icu */)) {\n        // The LView represents the location where the injection is requested from.\n        // We need to locate the containing LView (in case where the `lView` is an embedded view)\n        const hostComponentView = lView[DECLARATION_COMPONENT_VIEW]; // look up\n        return new ViewRef$1(hostComponentView, lView);\n    }\n    return null;\n}\n\n/**\n * Structural diffing for `Object`s and `Map`s.\n */\nconst keyValDiff = [new DefaultKeyValueDifferFactory()];\n/**\n * Structural diffing for `Iterable` types such as `Array`s.\n */\nconst iterableDiff = [new DefaultIterableDifferFactory()];\nconst defaultIterableDiffers = new IterableDiffers(iterableDiff);\nconst defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);\n\n/**\n * @module\n * @description\n * Change detection enables data binding in Angular.\n */\n\n/**\n * `DestroyRef` lets you set callbacks to run for any cleanup or destruction behavior.\n * The scope of this destruction depends on where `DestroyRef` is injected. If `DestroyRef`\n * is injected in a component or directive, the callbacks run when that component or\n * directive is destroyed. Otherwise the callbacks run when a corresponding injector is destroyed.\n *\n * @publicApi\n */\nclass DestroyRef {\n    /**\n     * @internal\n     * @nocollapse\n     */\n    static { this.__NG_ELEMENT_ID__ = injectDestroyRef; }\n    /**\n     * @internal\n     * @nocollapse\n     */\n    static { this.__NG_ENV_ID__ = (injector) => injector; }\n}\nclass NodeInjectorDestroyRef extends DestroyRef {\n    constructor(_lView) {\n        super();\n        this._lView = _lView;\n    }\n    onDestroy(callback) {\n        storeLViewOnDestroy(this._lView, callback);\n        return () => removeLViewOnDestroy(this._lView, callback);\n    }\n}\nfunction injectDestroyRef() {\n    return new NodeInjectorDestroyRef(getLView());\n}\n\n/**\n * Asserts that the current stack frame is not within a reactive context. Useful\n * to disallow certain code from running inside a reactive context (see {@link toSignal}).\n *\n * @param debugFn a reference to the function making the assertion (used for the error message).\n *\n * @publicApi\n */\nfunction assertNotInReactiveContext(debugFn, extraContext) {\n    // Taking a `Function` instead of a string name here prevents the un-minified name of the function\n    // from being retained in the bundle regardless of minification.\n    if (getActiveConsumer$1() !== null) {\n        throw new RuntimeError(-602 /* RuntimeErrorCode.ASSERTION_NOT_INSIDE_REACTIVE_CONTEXT */, ngDevMode &&\n            `${debugFn.name}() cannot be called from within a reactive context.${extraContext ? ` ${extraContext}` : ''}`);\n    }\n}\n\n/**\n * Not public API, which guarantees `EffectScheduler` only ever comes from the application root\n * injector.\n */\nconst APP_EFFECT_SCHEDULER = new InjectionToken('', {\n    providedIn: 'root',\n    factory: () => inject(EffectScheduler),\n});\n/**\n * A scheduler which manages the execution of effects.\n */\nclass EffectScheduler {\n    /** @nocollapse */\n    static { this.ɵprov = ɵɵdefineInjectable({\n        token: EffectScheduler,\n        providedIn: 'root',\n        factory: () => new ZoneAwareMicrotaskScheduler(),\n    }); }\n}\n/**\n * An `EffectScheduler` which is capable of queueing scheduled effects per-zone, and flushing them\n * as an explicit operation.\n */\nclass ZoneAwareQueueingScheduler {\n    constructor() {\n        this.queuedEffectCount = 0;\n        this.queues = new Map();\n    }\n    scheduleEffect(handle) {\n        const zone = handle.creationZone;\n        if (!this.queues.has(zone)) {\n            this.queues.set(zone, new Set());\n        }\n        const queue = this.queues.get(zone);\n        if (queue.has(handle)) {\n            return;\n        }\n        this.queuedEffectCount++;\n        queue.add(handle);\n    }\n    /**\n     * Run all scheduled effects.\n     *\n     * Execution order of effects within the same zone is guaranteed to be FIFO, but there is no\n     * ordering guarantee between effects scheduled in different zones.\n     */\n    flush() {\n        while (this.queuedEffectCount > 0) {\n            for (const [zone, queue] of this.queues) {\n                // `zone` here must be defined.\n                if (zone === null) {\n                    this.flushQueue(queue);\n                }\n                else {\n                    zone.run(() => this.flushQueue(queue));\n                }\n            }\n        }\n    }\n    flushQueue(queue) {\n        for (const handle of queue) {\n            queue.delete(handle);\n            this.queuedEffectCount--;\n            // TODO: what happens if this throws an error?\n            handle.run();\n        }\n    }\n    /** @nocollapse */\n    static { this.ɵprov = ɵɵdefineInjectable({\n        token: ZoneAwareQueueingScheduler,\n        providedIn: 'root',\n        factory: () => new ZoneAwareQueueingScheduler(),\n    }); }\n}\n/**\n * A wrapper around `ZoneAwareQueueingScheduler` that schedules flushing via the microtask queue\n * when.\n */\nclass ZoneAwareMicrotaskScheduler {\n    constructor() {\n        this.hasQueuedFlush = false;\n        this.delegate = new ZoneAwareQueueingScheduler();\n        this.flushTask = () => {\n            // Leave `hasQueuedFlush` as `true` so we don't queue another microtask if more effects are\n            // scheduled during flushing. The flush of the `ZoneAwareQueueingScheduler` delegate is\n            // guaranteed to empty the queue.\n            this.delegate.flush();\n            this.hasQueuedFlush = false;\n            // This is a variable initialization, not a method.\n            // tslint:disable-next-line:semicolon\n        };\n    }\n    scheduleEffect(handle) {\n        this.delegate.scheduleEffect(handle);\n        if (!this.hasQueuedFlush) {\n            queueMicrotask(this.flushTask);\n            this.hasQueuedFlush = true;\n        }\n    }\n}\n/**\n * Core reactive node for an Angular effect.\n *\n * `EffectHandle` combines the reactive graph's `Watch` base node for effects with the framework's\n * scheduling abstraction (`EffectScheduler`) as well as automatic cleanup via `DestroyRef` if\n * available/requested.\n */\nclass EffectHandle {\n    constructor(scheduler, effectFn, creationZone, destroyRef, errorHandler, allowSignalWrites) {\n        this.scheduler = scheduler;\n        this.effectFn = effectFn;\n        this.creationZone = creationZone;\n        this.errorHandler = errorHandler;\n        this.watcher = createWatch$1((onCleanup) => this.runEffect(onCleanup), () => this.schedule(), allowSignalWrites);\n        this.unregisterOnDestroy = destroyRef?.onDestroy(() => this.destroy());\n    }\n    runEffect(onCleanup) {\n        try {\n            this.effectFn(onCleanup);\n        }\n        catch (err) {\n            this.errorHandler?.handleError(err);\n        }\n    }\n    run() {\n        this.watcher.run();\n    }\n    schedule() {\n        this.scheduler.scheduleEffect(this);\n    }\n    destroy() {\n        this.watcher.destroy();\n        this.unregisterOnDestroy?.();\n        // Note: if the effect is currently scheduled, it's not un-scheduled, and so the scheduler will\n        // retain a reference to it. Attempting to execute it will be a no-op.\n    }\n}\n/**\n * Create a global `Effect` for the given reactive function.\n *\n * @developerPreview\n */\nfunction effect(effectFn, options) {\n    ngDevMode &&\n        assertNotInReactiveContext(effect, 'Call `effect` outside of a reactive context. For example, schedule the ' +\n            'effect inside the component constructor.');\n    !options?.injector && assertInInjectionContext(effect);\n    const injector = options?.injector ?? inject(Injector);\n    const errorHandler = injector.get(ErrorHandler, null, { optional: true });\n    const destroyRef = options?.manualCleanup !== true ? injector.get(DestroyRef) : null;\n    const handle = new EffectHandle(injector.get(APP_EFFECT_SCHEDULER), effectFn, (typeof Zone === 'undefined') ? null : Zone.current, destroyRef, errorHandler, options?.allowSignalWrites ?? false);\n    // Effects need to be marked dirty manually to trigger their initial run. The timing of this\n    // marking matters, because the effects may read signals that track component inputs, which are\n    // only available after those components have had their first update pass.\n    //\n    // We inject `ChangeDetectorRef` optionally, to determine whether this effect is being created in\n    // the context of a component or not. If it is, then we check whether the component has already\n    // run its update pass, and defer the effect's initial scheduling until the update pass if it\n    // hasn't already run.\n    const cdr = injector.get(ChangeDetectorRef, null, { optional: true });\n    if (!cdr || !(cdr._lView[FLAGS] & 8 /* LViewFlags.FirstLViewPass */)) {\n        // This effect is either not running in a view injector, or the view has already\n        // undergone its first change detection pass, which is necessary for any required inputs to be\n        // set.\n        handle.watcher.notify();\n    }\n    else {\n        // Delay the initialization of the effect until the view is fully initialized.\n        (cdr._lView[EFFECTS_TO_SCHEDULE] ??= []).push(handle.watcher.notify);\n    }\n    return handle;\n}\n\n// clang-format off\n// clang-format on\n\nconst markedFeatures = new Set();\n// tslint:disable:ban\n/**\n * A guarded `performance.mark` for feature marking.\n *\n * This method exists because while all supported browser and node.js version supported by Angular\n * support performance.mark API. This is not the case for other environments such as JSDOM and\n * Cloudflare workers.\n */\nfunction performanceMarkFeature(feature) {\n    if (markedFeatures.has(feature)) {\n        return;\n    }\n    markedFeatures.add(feature);\n    performance?.mark?.('mark_feature_usage', { detail: { feature } });\n}\n\nclass EventEmitter_ extends Subject {\n    constructor(isAsync = false) {\n        super();\n        this.__isAsync = isAsync;\n    }\n    emit(value) {\n        super.next(value);\n    }\n    subscribe(observerOrNext, error, complete) {\n        let nextFn = observerOrNext;\n        let errorFn = error || (() => null);\n        let completeFn = complete;\n        if (observerOrNext && typeof observerOrNext === 'object') {\n            const observer = observerOrNext;\n            nextFn = observer.next?.bind(observer);\n            errorFn = observer.error?.bind(observer);\n            completeFn = observer.complete?.bind(observer);\n        }\n        if (this.__isAsync) {\n            errorFn = _wrapInTimeout(errorFn);\n            if (nextFn) {\n                nextFn = _wrapInTimeout(nextFn);\n            }\n            if (completeFn) {\n                completeFn = _wrapInTimeout(completeFn);\n            }\n        }\n        const sink = super.subscribe({ next: nextFn, error: errorFn, complete: completeFn });\n        if (observerOrNext instanceof Subscription) {\n            observerOrNext.add(sink);\n        }\n        return sink;\n    }\n}\nfunction _wrapInTimeout(fn) {\n    return (value) => {\n        setTimeout(fn, undefined, value);\n    };\n}\n/**\n * @publicApi\n */\nconst EventEmitter = EventEmitter_;\n\nfunction noop(...args) {\n    // Do nothing.\n}\n\nfunction getNativeRequestAnimationFrame() {\n    // Note: the `getNativeRequestAnimationFrame` is used in the `NgZone` class, but we cannot use the\n    // `inject` function. The `NgZone` instance may be created manually, and thus the injection\n    // context will be unavailable. This might be enough to check whether `requestAnimationFrame` is\n    // available because otherwise, we'll fall back to `setTimeout`.\n    const isBrowser = typeof _global['requestAnimationFrame'] === 'function';\n    // Note: `requestAnimationFrame` is unavailable when the code runs in the Node.js environment. We\n    // use `setTimeout` because no changes are required other than checking if the current platform is\n    // the browser. `setTimeout` is a well-established API that is available in both environments.\n    // `requestAnimationFrame` is used in the browser to coalesce event tasks since event tasks are\n    // usually executed within the same rendering frame (but this is more implementation details of\n    // browsers).\n    let nativeRequestAnimationFrame = _global[isBrowser ? 'requestAnimationFrame' : 'setTimeout'];\n    let nativeCancelAnimationFrame = _global[isBrowser ? 'cancelAnimationFrame' : 'clearTimeout'];\n    if (typeof Zone !== 'undefined' && nativeRequestAnimationFrame && nativeCancelAnimationFrame) {\n        // Note: zone.js sets original implementations on patched APIs behind the\n        // `__zone_symbol__OriginalDelegate` key (see `attachOriginToPatched`). Given the following\n        // example: `window.requestAnimationFrame.__zone_symbol__OriginalDelegate`; this would return an\n        // unpatched implementation of the `requestAnimationFrame`, which isn't intercepted by the\n        // Angular zone. We use the unpatched implementation to avoid another change detection when\n        // coalescing tasks.\n        const unpatchedRequestAnimationFrame = nativeRequestAnimationFrame[Zone.__symbol__('OriginalDelegate')];\n        if (unpatchedRequestAnimationFrame) {\n            nativeRequestAnimationFrame = unpatchedRequestAnimationFrame;\n        }\n        const unpatchedCancelAnimationFrame = nativeCancelAnimationFrame[Zone.__symbol__('OriginalDelegate')];\n        if (unpatchedCancelAnimationFrame) {\n            nativeCancelAnimationFrame = unpatchedCancelAnimationFrame;\n        }\n    }\n    return { nativeRequestAnimationFrame, nativeCancelAnimationFrame };\n}\n\nclass AsyncStackTaggingZoneSpec {\n    constructor(namePrefix, consoleAsyncStackTaggingImpl = console) {\n        this.name = 'asyncStackTagging for ' + namePrefix;\n        this.createTask = consoleAsyncStackTaggingImpl?.createTask ?? (() => null);\n    }\n    onScheduleTask(delegate, _current, target, task) {\n        task.consoleTask = this.createTask(`Zone - ${task.source || task.type}`);\n        return delegate.scheduleTask(target, task);\n    }\n    onInvokeTask(delegate, _currentZone, targetZone, task, applyThis, applyArgs) {\n        let ret;\n        if (task.consoleTask) {\n            ret = task.consoleTask.run(() => delegate.invokeTask(targetZone, task, applyThis, applyArgs));\n        }\n        else {\n            ret = delegate.invokeTask(targetZone, task, applyThis, applyArgs);\n        }\n        return ret;\n    }\n}\n\n/**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * import {Component, NgZone} from '@angular/core';\n * import {NgIf} from '@angular/common';\n *\n * @Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nclass NgZone {\n    constructor({ enableLongStackTrace = false, shouldCoalesceEventChangeDetection = false, shouldCoalesceRunChangeDetection = false }) {\n        this.hasPendingMacrotasks = false;\n        this.hasPendingMicrotasks = false;\n        /**\n         * Whether there are no outstanding microtasks or macrotasks.\n         */\n        this.isStable = true;\n        /**\n         * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n         */\n        this.onUnstable = new EventEmitter(false);\n        /**\n         * Notifies when there is no more microtasks enqueued in the current VM Turn.\n         * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n         * For this reason this event can fire multiple times per VM Turn.\n         */\n        this.onMicrotaskEmpty = new EventEmitter(false);\n        /**\n         * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n         * implies we are about to relinquish VM turn.\n         * This event gets called just once.\n         */\n        this.onStable = new EventEmitter(false);\n        /**\n         * Notifies that an error has been delivered.\n         */\n        this.onError = new EventEmitter(false);\n        if (typeof Zone == 'undefined') {\n            throw new RuntimeError(908 /* RuntimeErrorCode.MISSING_ZONEJS */, ngDevMode && `In this configuration Angular requires Zone.js`);\n        }\n        Zone.assertZonePatched();\n        const self = this;\n        self._nesting = 0;\n        self._outer = self._inner = Zone.current;\n        // AsyncStackTaggingZoneSpec provides `linked stack traces` to show\n        // where the async operation is scheduled. For more details, refer\n        // to this article, https://developer.chrome.com/blog/devtools-better-angular-debugging/\n        // And we only import this AsyncStackTaggingZoneSpec in development mode,\n        // in the production mode, the AsyncStackTaggingZoneSpec will be tree shaken away.\n        if (ngDevMode) {\n            self._inner = self._inner.fork(new AsyncStackTaggingZoneSpec('Angular'));\n        }\n        if (Zone['TaskTrackingZoneSpec']) {\n            self._inner = self._inner.fork(new Zone['TaskTrackingZoneSpec']);\n        }\n        if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {\n            self._inner = self._inner.fork(Zone['longStackTraceZoneSpec']);\n        }\n        // if shouldCoalesceRunChangeDetection is true, all tasks including event tasks will be\n        // coalesced, so shouldCoalesceEventChangeDetection option is not necessary and can be skipped.\n        self.shouldCoalesceEventChangeDetection =\n            !shouldCoalesceRunChangeDetection && shouldCoalesceEventChangeDetection;\n        self.shouldCoalesceRunChangeDetection = shouldCoalesceRunChangeDetection;\n        self.lastRequestAnimationFrameId = -1;\n        self.nativeRequestAnimationFrame = getNativeRequestAnimationFrame().nativeRequestAnimationFrame;\n        forkInnerZoneWithAngularBehavior(self);\n    }\n    /**\n      This method checks whether the method call happens within an Angular Zone instance.\n    */\n    static isInAngularZone() {\n        // Zone needs to be checked, because this method might be called even when NoopNgZone is used.\n        return typeof Zone !== 'undefined' && Zone.current.get('isAngularZone') === true;\n    }\n    /**\n      Assures that the method is called within the Angular Zone, otherwise throws an error.\n    */\n    static assertInAngularZone() {\n        if (!NgZone.isInAngularZone()) {\n            throw new RuntimeError(909 /* RuntimeErrorCode.UNEXPECTED_ZONE_STATE */, ngDevMode && 'Expected to be in Angular Zone, but it is not!');\n        }\n    }\n    /**\n      Assures that the method is called outside of the Angular Zone, otherwise throws an error.\n    */\n    static assertNotInAngularZone() {\n        if (NgZone.isInAngularZone()) {\n            throw new RuntimeError(909 /* RuntimeErrorCode.UNEXPECTED_ZONE_STATE */, ngDevMode && 'Expected to not be in Angular Zone, but it is!');\n        }\n    }\n    /**\n     * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n     * the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     */\n    run(fn, applyThis, applyArgs) {\n        return this._inner.run(fn, applyThis, applyArgs);\n    }\n    /**\n     * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n     * returned by the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     */\n    runTask(fn, applyThis, applyArgs, name) {\n        const zone = this._inner;\n        const task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop, noop);\n        try {\n            return zone.runTask(task, applyThis, applyArgs);\n        }\n        finally {\n            zone.cancelTask(task);\n        }\n    }\n    /**\n     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n     * rethrown.\n     */\n    runGuarded(fn, applyThis, applyArgs) {\n        return this._inner.runGuarded(fn, applyThis, applyArgs);\n    }\n    /**\n     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n     * the function.\n     *\n     * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do\n     * work that\n     * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * outside of the Angular zone.\n     *\n     * Use {@link #run} to reenter the Angular zone and do work that updates the application model.\n     */\n    runOutsideAngular(fn) {\n        return this._outer.run(fn);\n    }\n}\nconst EMPTY_PAYLOAD = {};\nfunction checkStable(zone) {\n    // TODO: @JiaLiPassion, should check zone.isCheckStableRunning to prevent\n    // re-entry. The case is:\n    //\n    // @Component({...})\n    // export class AppComponent {\n    // constructor(private ngZone: NgZone) {\n    //   this.ngZone.onStable.subscribe(() => {\n    //     this.ngZone.run(() => console.log('stable'););\n    //   });\n    // }\n    //\n    // The onStable subscriber run another function inside ngZone\n    // which causes `checkStable()` re-entry.\n    // But this fix causes some issues in g3, so this fix will be\n    // launched in another PR.\n    if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {\n        try {\n            zone._nesting++;\n            zone.onMicrotaskEmpty.emit(null);\n        }\n        finally {\n            zone._nesting--;\n            if (!zone.hasPendingMicrotasks) {\n                try {\n                    zone.runOutsideAngular(() => zone.onStable.emit(null));\n                }\n                finally {\n                    zone.isStable = true;\n                }\n            }\n        }\n    }\n}\nfunction delayChangeDetectionForEvents(zone) {\n    /**\n     * We also need to check _nesting here\n     * Consider the following case with shouldCoalesceRunChangeDetection = true\n     *\n     * ngZone.run(() => {});\n     * ngZone.run(() => {});\n     *\n     * We want the two `ngZone.run()` only trigger one change detection\n     * when shouldCoalesceRunChangeDetection is true.\n     * And because in this case, change detection run in async way(requestAnimationFrame),\n     * so we also need to check the _nesting here to prevent multiple\n     * change detections.\n     */\n    if (zone.isCheckStableRunning || zone.lastRequestAnimationFrameId !== -1) {\n        return;\n    }\n    zone.lastRequestAnimationFrameId = zone.nativeRequestAnimationFrame.call(_global, () => {\n        // This is a work around for https://github.com/angular/angular/issues/36839.\n        // The core issue is that when event coalescing is enabled it is possible for microtasks\n        // to get flushed too early (As is the case with `Promise.then`) between the\n        // coalescing eventTasks.\n        //\n        // To workaround this we schedule a \"fake\" eventTask before we process the\n        // coalescing eventTasks. The benefit of this is that the \"fake\" container eventTask\n        //  will prevent the microtasks queue from getting drained in between the coalescing\n        // eventTask execution.\n        if (!zone.fakeTopEventTask) {\n            zone.fakeTopEventTask = Zone.root.scheduleEventTask('fakeTopEventTask', () => {\n                zone.lastRequestAnimationFrameId = -1;\n                updateMicroTaskStatus(zone);\n                zone.isCheckStableRunning = true;\n                checkStable(zone);\n                zone.isCheckStableRunning = false;\n            }, undefined, () => { }, () => { });\n        }\n        zone.fakeTopEventTask.invoke();\n    });\n    updateMicroTaskStatus(zone);\n}\nfunction forkInnerZoneWithAngularBehavior(zone) {\n    const delayChangeDetectionForEventsDelegate = () => {\n        delayChangeDetectionForEvents(zone);\n    };\n    zone._inner = zone._inner.fork({\n        name: 'angular',\n        properties: { 'isAngularZone': true },\n        onInvokeTask: (delegate, current, target, task, applyThis, applyArgs) => {\n            if (shouldBeIgnoredByZone(applyArgs)) {\n                return delegate.invokeTask(target, task, applyThis, applyArgs);\n            }\n            try {\n                onEnter(zone);\n                return delegate.invokeTask(target, task, applyThis, applyArgs);\n            }\n            finally {\n                if ((zone.shouldCoalesceEventChangeDetection && task.type === 'eventTask') ||\n                    zone.shouldCoalesceRunChangeDetection) {\n                    delayChangeDetectionForEventsDelegate();\n                }\n                onLeave(zone);\n            }\n        },\n        onInvoke: (delegate, current, target, callback, applyThis, applyArgs, source) => {\n            try {\n                onEnter(zone);\n                return delegate.invoke(target, callback, applyThis, applyArgs, source);\n            }\n            finally {\n                if (zone.shouldCoalesceRunChangeDetection) {\n                    delayChangeDetectionForEventsDelegate();\n                }\n                onLeave(zone);\n            }\n        },\n        onHasTask: (delegate, current, target, hasTaskState) => {\n            delegate.hasTask(target, hasTaskState);\n            if (current === target) {\n                // We are only interested in hasTask events which originate from our zone\n                // (A child hasTask event is not interesting to us)\n                if (hasTaskState.change == 'microTask') {\n                    zone._hasPendingMicrotasks = hasTaskState.microTask;\n                    updateMicroTaskStatus(zone);\n                    checkStable(zone);\n                }\n                else if (hasTaskState.change == 'macroTask') {\n                    zone.hasPendingMacrotasks = hasTaskState.macroTask;\n                }\n            }\n        },\n        onHandleError: (delegate, current, target, error) => {\n            delegate.handleError(target, error);\n            zone.runOutsideAngular(() => zone.onError.emit(error));\n            return false;\n        }\n    });\n}\nfunction updateMicroTaskStatus(zone) {\n    if (zone._hasPendingMicrotasks ||\n        ((zone.shouldCoalesceEventChangeDetection || zone.shouldCoalesceRunChangeDetection) &&\n            zone.lastRequestAnimationFrameId !== -1)) {\n        zone.hasPendingMicrotasks = true;\n    }\n    else {\n        zone.hasPendingMicrotasks = false;\n    }\n}\nfunction onEnter(zone) {\n    zone._nesting++;\n    if (zone.isStable) {\n        zone.isStable = false;\n        zone.onUnstable.emit(null);\n    }\n}\nfunction onLeave(zone) {\n    zone._nesting--;\n    checkStable(zone);\n}\n/**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nclass NoopNgZone {\n    constructor() {\n        this.hasPendingMicrotasks = false;\n        this.hasPendingMacrotasks = false;\n        this.isStable = true;\n        this.onUnstable = new EventEmitter();\n        this.onMicrotaskEmpty = new EventEmitter();\n        this.onStable = new EventEmitter();\n        this.onError = new EventEmitter();\n    }\n    run(fn, applyThis, applyArgs) {\n        return fn.apply(applyThis, applyArgs);\n    }\n    runGuarded(fn, applyThis, applyArgs) {\n        return fn.apply(applyThis, applyArgs);\n    }\n    runOutsideAngular(fn) {\n        return fn();\n    }\n    runTask(fn, applyThis, applyArgs, name) {\n        return fn.apply(applyThis, applyArgs);\n    }\n}\nfunction shouldBeIgnoredByZone(applyArgs) {\n    if (!Array.isArray(applyArgs)) {\n        return false;\n    }\n    // We should only ever get 1 arg passed through to invokeTask.\n    // Short circuit here incase that behavior changes.\n    if (applyArgs.length !== 1) {\n        return false;\n    }\n    // Prevent triggering change detection when the __ignore_ng_zone__ flag is detected.\n    return applyArgs[0].data?.['__ignore_ng_zone__'] === true;\n}\nfunction getNgZone(ngZoneToUse = 'zone.js', options) {\n    if (ngZoneToUse === 'noop') {\n        return new NoopNgZone();\n    }\n    if (ngZoneToUse === 'zone.js') {\n        return new NgZone(options);\n    }\n    return ngZoneToUse;\n}\n\n/**\n * The phase to run an `afterRender` or `afterNextRender` callback in.\n *\n * Callbacks in the same phase run in the order they are registered. Phases run in the\n * following order after each render:\n *\n *   1. `AfterRenderPhase.EarlyRead`\n *   2. `AfterRenderPhase.Write`\n *   3. `AfterRenderPhase.MixedReadWrite`\n *   4. `AfterRenderPhase.Read`\n *\n * Angular is unable to verify or enforce that phases are used correctly, and instead\n * relies on each developer to follow the guidelines documented for each value and\n * carefully choose the appropriate one, refactoring their code if necessary. By doing\n * so, Angular is better able to minimize the performance degradation associated with\n * manual DOM access, ensuring the best experience for the end users of your application\n * or library.\n *\n * @developerPreview\n */\nvar AfterRenderPhase;\n(function (AfterRenderPhase) {\n    /**\n     * Use `AfterRenderPhase.EarlyRead` for callbacks that only need to **read** from the\n     * DOM before a subsequent `AfterRenderPhase.Write` callback, for example to perform\n     * custom layout that the browser doesn't natively support. **Never** use this phase\n     * for callbacks that can write to the DOM or when `AfterRenderPhase.Read` is adequate.\n     *\n     * <div class=\"alert is-important\">\n     *\n     * Using this value can degrade performance.\n     * Instead, prefer using built-in browser functionality when possible.\n     *\n     * </div>\n     */\n    AfterRenderPhase[AfterRenderPhase[\"EarlyRead\"] = 0] = \"EarlyRead\";\n    /**\n     * Use `AfterRenderPhase.Write` for callbacks that only **write** to the DOM. **Never**\n     * use this phase for callbacks that can read from the DOM.\n     */\n    AfterRenderPhase[AfterRenderPhase[\"Write\"] = 1] = \"Write\";\n    /**\n     * Use `AfterRenderPhase.MixedReadWrite` for callbacks that read from or write to the\n     * DOM, that haven't been refactored to use a different phase. **Never** use this phase\n     * for callbacks that can use a different phase instead.\n     *\n     * <div class=\"alert is-critical\">\n     *\n     * Using this value can **significantly** degrade performance.\n     * Instead, prefer refactoring into multiple callbacks using a more specific phase.\n     *\n     * </div>\n     */\n    AfterRenderPhase[AfterRenderPhase[\"MixedReadWrite\"] = 2] = \"MixedReadWrite\";\n    /**\n     * Use `AfterRenderPhase.Read` for callbacks that only **read** from the DOM. **Never**\n     * use this phase for callbacks that can write to the DOM.\n     */\n    AfterRenderPhase[AfterRenderPhase[\"Read\"] = 3] = \"Read\";\n})(AfterRenderPhase || (AfterRenderPhase = {}));\n/** `AfterRenderRef` that does nothing. */\nconst NOOP_AFTER_RENDER_REF = {\n    destroy() { }\n};\n/**\n * Register a callback to run once before any userspace `afterRender` or\n * `afterNextRender` callbacks.\n *\n * This function should almost always be used instead of `afterRender` or\n * `afterNextRender` for implementing framework functionality. Consider:\n *\n *   1.) `AfterRenderPhase.EarlyRead` is intended to be used for implementing\n *       custom layout. If the framework itself mutates the DOM after *any*\n *       `AfterRenderPhase.EarlyRead` callbacks are run, the phase can no\n *       longer reliably serve its purpose.\n *\n *   2.) Importing `afterRender` in the framework can reduce the ability for it\n *       to be tree-shaken, and the framework shouldn't need much of the behavior.\n */\nfunction internalAfterNextRender(callback, options) {\n    const injector = options?.injector ?? inject(Injector);\n    // Similarly to the public `afterNextRender` function, an internal one\n    // is only invoked in a browser.\n    if (!isPlatformBrowser(injector))\n        return;\n    const afterRenderEventManager = injector.get(AfterRenderEventManager);\n    afterRenderEventManager.internalCallbacks.push(callback);\n}\n/**\n * Register a callback to be invoked each time the application\n * finishes rendering.\n *\n * <div class=\"alert is-critical\">\n *\n * You should always explicitly specify a non-default [phase](api/core/AfterRenderPhase), or you\n * risk significant performance degradation.\n *\n * </div>\n *\n * Note that the callback will run\n * - in the order it was registered\n * - once per render\n * - on browser platforms only\n *\n * <div class=\"alert is-important\">\n *\n * Components are not guaranteed to be [hydrated](guide/hydration) before the callback runs.\n * You must use caution when directly reading or writing the DOM and layout.\n *\n * </div>\n *\n * @param callback A callback function to register\n *\n * @usageNotes\n *\n * Use `afterRender` to read or write the DOM after each render.\n *\n * ### Example\n * ```ts\n * @Component({\n *   selector: 'my-cmp',\n *   template: `<span #content>{{ ... }}</span>`,\n * })\n * export class MyComponent {\n *   @ViewChild('content') contentRef: ElementRef;\n *\n *   constructor() {\n *     afterRender(() => {\n *       console.log('content height: ' + this.contentRef.nativeElement.scrollHeight);\n *     }, {phase: AfterRenderPhase.Read});\n *   }\n * }\n * ```\n *\n * @developerPreview\n */\nfunction afterRender(callback, options) {\n    ngDevMode &&\n        assertNotInReactiveContext(afterRender, 'Call `afterRender` outside of a reactive context. For example, schedule the render ' +\n            'callback inside the component constructor`.');\n    !options && assertInInjectionContext(afterRender);\n    const injector = options?.injector ?? inject(Injector);\n    if (!isPlatformBrowser(injector)) {\n        return NOOP_AFTER_RENDER_REF;\n    }\n    performanceMarkFeature('NgAfterRender');\n    const afterRenderEventManager = injector.get(AfterRenderEventManager);\n    // Lazily initialize the handler implementation, if necessary. This is so that it can be\n    // tree-shaken if `afterRender` and `afterNextRender` aren't used.\n    const callbackHandler = afterRenderEventManager.handler ??= new AfterRenderCallbackHandlerImpl();\n    const phase = options?.phase ?? AfterRenderPhase.MixedReadWrite;\n    const destroy = () => {\n        callbackHandler.unregister(instance);\n        unregisterFn();\n    };\n    const unregisterFn = injector.get(DestroyRef).onDestroy(destroy);\n    const instance = new AfterRenderCallback(injector, phase, callback);\n    callbackHandler.register(instance);\n    return { destroy };\n}\n/**\n * Register a callback to be invoked the next time the application\n * finishes rendering.\n *\n * <div class=\"alert is-critical\">\n *\n * You should always explicitly specify a non-default [phase](api/core/AfterRenderPhase), or you\n * risk significant performance degradation.\n *\n * </div>\n *\n * Note that the callback will run\n * - in the order it was registered\n * - on browser platforms only\n *\n * <div class=\"alert is-important\">\n *\n * Components are not guaranteed to be [hydrated](guide/hydration) before the callback runs.\n * You must use caution when directly reading or writing the DOM and layout.\n *\n * </div>\n *\n * @param callback A callback function to register\n *\n * @usageNotes\n *\n * Use `afterNextRender` to read or write the DOM once,\n * for example to initialize a non-Angular library.\n *\n * ### Example\n * ```ts\n * @Component({\n *   selector: 'my-chart-cmp',\n *   template: `<div #chart>{{ ... }}</div>`,\n * })\n * export class MyChartCmp {\n *   @ViewChild('chart') chartRef: ElementRef;\n *   chart: MyChart|null;\n *\n *   constructor() {\n *     afterNextRender(() => {\n *       this.chart = new MyChart(this.chartRef.nativeElement);\n *     }, {phase: AfterRenderPhase.Write});\n *   }\n * }\n * ```\n *\n * @developerPreview\n */\nfunction afterNextRender(callback, options) {\n    !options && assertInInjectionContext(afterNextRender);\n    const injector = options?.injector ?? inject(Injector);\n    if (!isPlatformBrowser(injector)) {\n        return NOOP_AFTER_RENDER_REF;\n    }\n    performanceMarkFeature('NgAfterNextRender');\n    const afterRenderEventManager = injector.get(AfterRenderEventManager);\n    // Lazily initialize the handler implementation, if necessary. This is so that it can be\n    // tree-shaken if `afterRender` and `afterNextRender` aren't used.\n    const callbackHandler = afterRenderEventManager.handler ??= new AfterRenderCallbackHandlerImpl();\n    const phase = options?.phase ?? AfterRenderPhase.MixedReadWrite;\n    const destroy = () => {\n        callbackHandler.unregister(instance);\n        unregisterFn();\n    };\n    const unregisterFn = injector.get(DestroyRef).onDestroy(destroy);\n    const instance = new AfterRenderCallback(injector, phase, () => {\n        destroy();\n        callback();\n    });\n    callbackHandler.register(instance);\n    return { destroy };\n}\n/**\n * A wrapper around a function to be used as an after render callback.\n */\nclass AfterRenderCallback {\n    constructor(injector, phase, callbackFn) {\n        this.phase = phase;\n        this.callbackFn = callbackFn;\n        this.zone = injector.get(NgZone);\n        this.errorHandler = injector.get(ErrorHandler, null, { optional: true });\n    }\n    invoke() {\n        try {\n            this.zone.runOutsideAngular(this.callbackFn);\n        }\n        catch (err) {\n            this.errorHandler?.handleError(err);\n        }\n    }\n}\n/**\n * Core functionality for `afterRender` and `afterNextRender`. Kept separate from\n * `AfterRenderEventManager` for tree-shaking.\n */\nclass AfterRenderCallbackHandlerImpl {\n    constructor() {\n        this.executingCallbacks = false;\n        this.buckets = {\n            // Note: the order of these keys controls the order the phases are run.\n            [AfterRenderPhase.EarlyRead]: new Set(),\n            [AfterRenderPhase.Write]: new Set(),\n            [AfterRenderPhase.MixedReadWrite]: new Set(),\n            [AfterRenderPhase.Read]: new Set(),\n        };\n        this.deferredCallbacks = new Set();\n    }\n    validateBegin() {\n        if (this.executingCallbacks) {\n            throw new RuntimeError(102 /* RuntimeErrorCode.RECURSIVE_APPLICATION_RENDER */, ngDevMode &&\n                'A new render operation began before the previous operation ended. ' +\n                    'Did you trigger change detection from afterRender or afterNextRender?');\n        }\n    }\n    register(callback) {\n        // If we're currently running callbacks, new callbacks should be deferred\n        // until the next render operation.\n        const target = this.executingCallbacks ? this.deferredCallbacks : this.buckets[callback.phase];\n        target.add(callback);\n    }\n    unregister(callback) {\n        this.buckets[callback.phase].delete(callback);\n        this.deferredCallbacks.delete(callback);\n    }\n    execute() {\n        this.executingCallbacks = true;\n        for (const bucket of Object.values(this.buckets)) {\n            for (const callback of bucket) {\n                callback.invoke();\n            }\n        }\n        this.executingCallbacks = false;\n        for (const callback of this.deferredCallbacks) {\n            this.buckets[callback.phase].add(callback);\n        }\n        this.deferredCallbacks.clear();\n    }\n    destroy() {\n        for (const bucket of Object.values(this.buckets)) {\n            bucket.clear();\n        }\n        this.deferredCallbacks.clear();\n    }\n}\n/**\n * Implements core timing for `afterRender` and `afterNextRender` events.\n * Delegates to an optional `AfterRenderCallbackHandler` for implementation.\n */\nclass AfterRenderEventManager {\n    constructor() {\n        this.renderDepth = 0;\n        /* @internal */\n        this.handler = null;\n        /* @internal */\n        this.internalCallbacks = [];\n    }\n    /**\n     * Mark the beginning of a render operation (i.e. CD cycle).\n     * Throws if called while executing callbacks.\n     */\n    begin() {\n        this.handler?.validateBegin();\n        this.renderDepth++;\n    }\n    /**\n     * Mark the end of a render operation. Callbacks will be\n     * executed if there are no more pending operations.\n     */\n    end() {\n        ngDevMode && assertGreaterThan(this.renderDepth, 0, 'renderDepth must be greater than 0');\n        this.renderDepth--;\n        if (this.renderDepth === 0) {\n            // Note: internal callbacks power `internalAfterNextRender`. Since internal callbacks\n            // are fairly trivial, they are kept separate so that `AfterRenderCallbackHandlerImpl`\n            // can still be tree-shaken unless used by the application.\n            for (const callback of this.internalCallbacks) {\n                callback();\n            }\n            this.internalCallbacks.length = 0;\n            this.handler?.execute();\n        }\n    }\n    ngOnDestroy() {\n        this.handler?.destroy();\n        this.handler = null;\n        this.internalCallbacks.length = 0;\n    }\n    /** @nocollapse */\n    static { this.ɵprov = ɵɵdefineInjectable({\n        token: AfterRenderEventManager,\n        providedIn: 'root',\n        factory: () => new AfterRenderEventManager(),\n    }); }\n}\n\nfunction renderComponent(hostLView, componentHostIdx) {\n    ngDevMode && assertEqual(isCreationMode(hostLView), true, 'Should be run in creation mode');\n    const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);\n    const componentTView = componentView[TVIEW];\n    syncViewWithBlueprint(componentTView, componentView);\n    const hostRNode = componentView[HOST];\n    // Populate an LView with hydration info retrieved from the DOM via TransferState.\n    if (hostRNode !== null && componentView[HYDRATION] === null) {\n        componentView[HYDRATION] = retrieveHydrationInfo(hostRNode, componentView[INJECTOR$1]);\n    }\n    renderView(componentTView, componentView, componentView[CONTEXT]);\n}\n/**\n * Syncs an LView instance with its blueprint if they have gotten out of sync.\n *\n * Typically, blueprints and their view instances should always be in sync, so the loop here\n * will be skipped. However, consider this case of two components side-by-side:\n *\n * App template:\n * ```\n * <comp></comp>\n * <comp></comp>\n * ```\n *\n * The following will happen:\n * 1. App template begins processing.\n * 2. First <comp> is matched as a component and its LView is created.\n * 3. Second <comp> is matched as a component and its LView is created.\n * 4. App template completes processing, so it's time to check child templates.\n * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.\n * 6. Second <comp> template is checked. Its blueprint has been updated by the first\n * <comp> template, but its LView was created before this update, so it is out of sync.\n *\n * Note that embedded views inside ngFor loops will never be out of sync because these views\n * are processed as soon as they are created.\n *\n * @param tView The `TView` that contains the blueprint for syncing\n * @param lView The view to sync\n */\nfunction syncViewWithBlueprint(tView, lView) {\n    for (let i = lView.length; i < tView.blueprint.length; i++) {\n        lView.push(tView.blueprint[i]);\n    }\n}\n/**\n * Processes a view in the creation mode. This includes a number of steps in a specific order:\n * - creating view query functions (if any);\n * - executing a template function in the creation mode;\n * - updating static queries (if any);\n * - creating child components defined in a given view.\n */\nfunction renderView(tView, lView, context) {\n    ngDevMode && assertEqual(isCreationMode(lView), true, 'Should be run in creation mode');\n    enterView(lView);\n    try {\n        const viewQuery = tView.viewQuery;\n        if (viewQuery !== null) {\n            executeViewQueryFn(1 /* RenderFlags.Create */, viewQuery, context);\n        }\n        // Execute a template associated with this view, if it exists. A template function might not be\n        // defined for the root component views.\n        const templateFn = tView.template;\n        if (templateFn !== null) {\n            executeTemplate(tView, lView, templateFn, 1 /* RenderFlags.Create */, context);\n        }\n        // This needs to be set before children are processed to support recursive components.\n        // This must be set to false immediately after the first creation run because in an\n        // ngFor loop, all the views will be created together before update mode runs and turns\n        // off firstCreatePass. If we don't set it here, instances will perform directive\n        // matching, etc again and again.\n        if (tView.firstCreatePass) {\n            tView.firstCreatePass = false;\n        }\n        // We resolve content queries specifically marked as `static` in creation mode. Dynamic\n        // content queries are resolved during change detection (i.e. update mode), after embedded\n        // views are refreshed (see block above).\n        if (tView.staticContentQueries) {\n            refreshContentQueries(tView, lView);\n        }\n        // We must materialize query results before child components are processed\n        // in case a child component has projected a container. The LContainer needs\n        // to exist so the embedded views are properly attached by the container.\n        if (tView.staticViewQueries) {\n            executeViewQueryFn(2 /* RenderFlags.Update */, tView.viewQuery, context);\n        }\n        // Render child component views.\n        const components = tView.components;\n        if (components !== null) {\n            renderChildComponents(lView, components);\n        }\n    }\n    catch (error) {\n        // If we didn't manage to get past the first template pass due to\n        // an error, mark the view as corrupted so we can try to recover.\n        if (tView.firstCreatePass) {\n            tView.incompleteFirstPass = true;\n            tView.firstCreatePass = false;\n        }\n        throw error;\n    }\n    finally {\n        lView[FLAGS] &= ~4 /* LViewFlags.CreationMode */;\n        leaveView();\n    }\n}\n/** Renders child components in the current view (creation mode). */\nfunction renderChildComponents(hostLView, components) {\n    for (let i = 0; i < components.length; i++) {\n        renderComponent(hostLView, components[i]);\n    }\n}\n\n/**\n * Compute the static styling (class/style) from `TAttributes`.\n *\n * This function should be called during `firstCreatePass` only.\n *\n * @param tNode The `TNode` into which the styling information should be loaded.\n * @param attrs `TAttributes` containing the styling information.\n * @param writeToHost Where should the resulting static styles be written?\n *   - `false` Write to `TNode.stylesWithoutHost` / `TNode.classesWithoutHost`\n *   - `true` Write to `TNode.styles` / `TNode.classes`\n */\nfunction computeStaticStyling(tNode, attrs, writeToHost) {\n    ngDevMode &&\n        assertFirstCreatePass(getTView(), 'Expecting to be called in first template pass only');\n    let styles = writeToHost ? tNode.styles : null;\n    let classes = writeToHost ? tNode.classes : null;\n    let mode = 0;\n    if (attrs !== null) {\n        for (let i = 0; i < attrs.length; i++) {\n            const value = attrs[i];\n            if (typeof value === 'number') {\n                mode = value;\n            }\n            else if (mode == 1 /* AttributeMarker.Classes */) {\n                classes = concatStringsWithSpace(classes, value);\n            }\n            else if (mode == 2 /* AttributeMarker.Styles */) {\n                const style = value;\n                const styleValue = attrs[++i];\n                styles = concatStringsWithSpace(styles, style + ': ' + styleValue + ';');\n            }\n        }\n    }\n    writeToHost ? tNode.styles = styles : tNode.stylesWithoutHost = styles;\n    writeToHost ? tNode.classes = classes : tNode.classesWithoutHost = classes;\n}\n\nclass ComponentFactoryResolver extends ComponentFactoryResolver$1 {\n    /**\n     * @param ngModule The NgModuleRef to which all resolved factories are bound.\n     */\n    constructor(ngModule) {\n        super();\n        this.ngModule = ngModule;\n    }\n    resolveComponentFactory(component) {\n        ngDevMode && assertComponentType(component);\n        const componentDef = getComponentDef(component);\n        return new ComponentFactory(componentDef, this.ngModule);\n    }\n}\nfunction toRefArray(map) {\n    const array = [];\n    for (let nonMinified in map) {\n        if (map.hasOwnProperty(nonMinified)) {\n            const minified = map[nonMinified];\n            array.push({ propName: minified, templateName: nonMinified });\n        }\n    }\n    return array;\n}\nfunction getNamespace(elementName) {\n    const name = elementName.toLowerCase();\n    return name === 'svg' ? SVG_NAMESPACE : (name === 'math' ? MATH_ML_NAMESPACE : null);\n}\n/**\n * Injector that looks up a value using a specific injector, before falling back to the module\n * injector. Used primarily when creating components or embedded views dynamically.\n */\nclass ChainedInjector {\n    constructor(injector, parentInjector) {\n        this.injector = injector;\n        this.parentInjector = parentInjector;\n    }\n    get(token, notFoundValue, flags) {\n        flags = convertToBitFlags(flags);\n        const value = this.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, flags);\n        if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n            notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n            // Return the value from the root element injector when\n            // - it provides it\n            //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n            // - the module injector should not be checked\n            //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n            return value;\n        }\n        return this.parentInjector.get(token, notFoundValue, flags);\n    }\n}\n/**\n * ComponentFactory interface implementation.\n */\nclass ComponentFactory extends ComponentFactory$1 {\n    get inputs() {\n        const componentDef = this.componentDef;\n        const inputTransforms = componentDef.inputTransforms;\n        const refArray = toRefArray(componentDef.inputs);\n        if (inputTransforms !== null) {\n            for (const input of refArray) {\n                if (inputTransforms.hasOwnProperty(input.propName)) {\n                    input.transform = inputTransforms[input.propName];\n                }\n            }\n        }\n        return refArray;\n    }\n    get outputs() {\n        return toRefArray(this.componentDef.outputs);\n    }\n    /**\n     * @param componentDef The component definition.\n     * @param ngModule The NgModuleRef to which the factory is bound.\n     */\n    constructor(componentDef, ngModule) {\n        super();\n        this.componentDef = componentDef;\n        this.ngModule = ngModule;\n        this.componentType = componentDef.type;\n        this.selector = stringifyCSSSelectorList(componentDef.selectors);\n        this.ngContentSelectors =\n            componentDef.ngContentSelectors ? componentDef.ngContentSelectors : [];\n        this.isBoundToModule = !!ngModule;\n    }\n    create(injector, projectableNodes, rootSelectorOrNode, environmentInjector) {\n        // Check if the component is orphan\n        if (ngDevMode && (typeof ngJitMode === 'undefined' || ngJitMode) &&\n            this.componentDef.debugInfo?.forbidOrphanRendering) {\n            if (depsTracker.isOrphanComponent(this.componentType)) {\n                throw new RuntimeError(1001 /* RuntimeErrorCode.RUNTIME_DEPS_ORPHAN_COMPONENT */, `Orphan component found! Trying to render the component ${debugStringifyTypeForError(this.componentType)} without first loading the NgModule that declares it. It is recommended to make this component standalone in order to avoid this error. If this is not possible now, import the component's NgModule in the appropriate NgModule, or the standalone component in which you are trying to render this component. If this is a lazy import, load the NgModule lazily as well and use its module injector.`);\n            }\n        }\n        environmentInjector = environmentInjector || this.ngModule;\n        let realEnvironmentInjector = environmentInjector instanceof EnvironmentInjector ?\n            environmentInjector :\n            environmentInjector?.injector;\n        if (realEnvironmentInjector && this.componentDef.getStandaloneInjector !== null) {\n            realEnvironmentInjector = this.componentDef.getStandaloneInjector(realEnvironmentInjector) ||\n                realEnvironmentInjector;\n        }\n        const rootViewInjector = realEnvironmentInjector ? new ChainedInjector(injector, realEnvironmentInjector) : injector;\n        const rendererFactory = rootViewInjector.get(RendererFactory2, null);\n        if (rendererFactory === null) {\n            throw new RuntimeError(407 /* RuntimeErrorCode.RENDERER_NOT_FOUND */, ngDevMode &&\n                'Angular was not able to inject a renderer (RendererFactory2). ' +\n                    'Likely this is due to a broken DI hierarchy. ' +\n                    'Make sure that any injector used to create this component has a correct parent.');\n        }\n        const sanitizer = rootViewInjector.get(Sanitizer, null);\n        const afterRenderEventManager = rootViewInjector.get(AfterRenderEventManager, null);\n        const changeDetectionScheduler = rootViewInjector.get(ChangeDetectionScheduler, null);\n        const environment = {\n            rendererFactory,\n            sanitizer,\n            // We don't use inline effects (yet).\n            inlineEffectRunner: null,\n            afterRenderEventManager,\n            changeDetectionScheduler,\n        };\n        const hostRenderer = rendererFactory.createRenderer(null, this.componentDef);\n        // Determine a tag name used for creating host elements when this component is created\n        // dynamically. Default to 'div' if this component did not specify any tag name in its selector.\n        const elementName = this.componentDef.selectors[0][0] || 'div';\n        const hostRNode = rootSelectorOrNode ?\n            locateHostElement(hostRenderer, rootSelectorOrNode, this.componentDef.encapsulation, rootViewInjector) :\n            createElementNode(hostRenderer, elementName, getNamespace(elementName));\n        let rootFlags = 512 /* LViewFlags.IsRoot */;\n        if (this.componentDef.signals) {\n            rootFlags |= 4096 /* LViewFlags.SignalView */;\n        }\n        else if (!this.componentDef.onPush) {\n            rootFlags |= 16 /* LViewFlags.CheckAlways */;\n        }\n        let hydrationInfo = null;\n        if (hostRNode !== null) {\n            hydrationInfo = retrieveHydrationInfo(hostRNode, rootViewInjector, true /* isRootView */);\n        }\n        // Create the root view. Uses empty TView and ContentTemplate.\n        const rootTView = createTView(0 /* TViewType.Root */, null, null, 1, 0, null, null, null, null, null, null);\n        const rootLView = createLView(null, rootTView, null, rootFlags, null, null, environment, hostRenderer, rootViewInjector, null, hydrationInfo);\n        // rootView is the parent when bootstrapping\n        // TODO(misko): it looks like we are entering view here but we don't really need to as\n        // `renderView` does that. However as the code is written it is needed because\n        // `createRootComponentView` and `createRootComponent` both read global state. Fixing those\n        // issues would allow us to drop this.\n        enterView(rootLView);\n        let component;\n        let tElementNode;\n        try {\n            const rootComponentDef = this.componentDef;\n            let rootDirectives;\n            let hostDirectiveDefs = null;\n            if (rootComponentDef.findHostDirectiveDefs) {\n                rootDirectives = [];\n                hostDirectiveDefs = new Map();\n                rootComponentDef.findHostDirectiveDefs(rootComponentDef, rootDirectives, hostDirectiveDefs);\n                rootDirectives.push(rootComponentDef);\n                ngDevMode && assertNoDuplicateDirectives(rootDirectives);\n            }\n            else {\n                rootDirectives = [rootComponentDef];\n            }\n            const hostTNode = createRootComponentTNode(rootLView, hostRNode);\n            const componentView = createRootComponentView(hostTNode, hostRNode, rootComponentDef, rootDirectives, rootLView, environment, hostRenderer);\n            tElementNode = getTNode(rootTView, HEADER_OFFSET);\n            // TODO(crisbeto): in practice `hostRNode` should always be defined, but there are some tests\n            // where the renderer is mocked out and `undefined` is returned. We should update the tests so\n            // that this check can be removed.\n            if (hostRNode) {\n                setRootNodeAttributes(hostRenderer, rootComponentDef, hostRNode, rootSelectorOrNode);\n            }\n            if (projectableNodes !== undefined) {\n                projectNodes(tElementNode, this.ngContentSelectors, projectableNodes);\n            }\n            // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and\n            // executed here?\n            // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref\n            component = createRootComponent(componentView, rootComponentDef, rootDirectives, hostDirectiveDefs, rootLView, [LifecycleHooksFeature]);\n            renderView(rootTView, rootLView, null);\n        }\n        finally {\n            leaveView();\n        }\n        return new ComponentRef(this.componentType, component, createElementRef(tElementNode, rootLView), rootLView, tElementNode);\n    }\n}\n/**\n * Represents an instance of a Component created via a {@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}\n * method.\n *\n */\nclass ComponentRef extends ComponentRef$1 {\n    constructor(componentType, instance, location, _rootLView, _tNode) {\n        super();\n        this.location = location;\n        this._rootLView = _rootLView;\n        this._tNode = _tNode;\n        this.previousInputValues = null;\n        this.instance = instance;\n        this.hostView = this.changeDetectorRef = new ViewRef$1(_rootLView, undefined, /* _cdRefInjectingView */ false);\n        this.componentType = componentType;\n    }\n    setInput(name, value) {\n        const inputData = this._tNode.inputs;\n        let dataValue;\n        if (inputData !== null && (dataValue = inputData[name])) {\n            this.previousInputValues ??= new Map();\n            // Do not set the input if it is the same as the last value\n            // This behavior matches `bindingUpdated` when binding inputs in templates.\n            if (this.previousInputValues.has(name) &&\n                Object.is(this.previousInputValues.get(name), value)) {\n                return;\n            }\n            const lView = this._rootLView;\n            setInputsForProperty(lView[TVIEW], lView, dataValue, name, value);\n            this.previousInputValues.set(name, value);\n            const childComponentLView = getComponentLViewByIndex(this._tNode.index, lView);\n            markViewDirty(childComponentLView);\n        }\n        else {\n            if (ngDevMode) {\n                const cmpNameForError = stringifyForError(this.componentType);\n                let message = `Can't set value of the '${name}' input on the '${cmpNameForError}' component. `;\n                message += `Make sure that the '${name}' property is annotated with @Input() or a mapped @Input('${name}') exists.`;\n                reportUnknownPropertyError(message);\n            }\n        }\n    }\n    get injector() {\n        return new NodeInjector(this._tNode, this._rootLView);\n    }\n    destroy() {\n        this.hostView.destroy();\n    }\n    onDestroy(callback) {\n        this.hostView.onDestroy(callback);\n    }\n}\n/** Creates a TNode that can be used to instantiate a root component. */\nfunction createRootComponentTNode(lView, rNode) {\n    const tView = lView[TVIEW];\n    const index = HEADER_OFFSET;\n    ngDevMode && assertIndexInRange(lView, index);\n    lView[index] = rNode;\n    // '#host' is added here as we don't know the real host DOM name (we don't want to read it) and at\n    // the same time we want to communicate the debug `TNode` that this is a special `TNode`\n    // representing a host element.\n    return getOrCreateTNode(tView, index, 2 /* TNodeType.Element */, '#host', null);\n}\n/**\n * Creates the root component view and the root component node.\n *\n * @param hostRNode Render host element.\n * @param rootComponentDef ComponentDef\n * @param rootView The parent view where the host node is stored\n * @param rendererFactory Factory to be used for creating child renderers.\n * @param hostRenderer The current renderer\n * @param sanitizer The sanitizer, if provided\n *\n * @returns Component view created\n */\nfunction createRootComponentView(tNode, hostRNode, rootComponentDef, rootDirectives, rootView, environment, hostRenderer) {\n    const tView = rootView[TVIEW];\n    applyRootComponentStyling(rootDirectives, tNode, hostRNode, hostRenderer);\n    // Hydration info is on the host element and needs to be retrieved\n    // and passed to the component LView.\n    let hydrationInfo = null;\n    if (hostRNode !== null) {\n        hydrationInfo = retrieveHydrationInfo(hostRNode, rootView[INJECTOR$1]);\n    }\n    const viewRenderer = environment.rendererFactory.createRenderer(hostRNode, rootComponentDef);\n    let lViewFlags = 16 /* LViewFlags.CheckAlways */;\n    if (rootComponentDef.signals) {\n        lViewFlags = 4096 /* LViewFlags.SignalView */;\n    }\n    else if (rootComponentDef.onPush) {\n        lViewFlags = 64 /* LViewFlags.Dirty */;\n    }\n    const componentView = createLView(rootView, getOrCreateComponentTView(rootComponentDef), null, lViewFlags, rootView[tNode.index], tNode, environment, viewRenderer, null, null, hydrationInfo);\n    if (tView.firstCreatePass) {\n        markAsComponentHost(tView, tNode, rootDirectives.length - 1);\n    }\n    addToViewTree(rootView, componentView);\n    // Store component view at node index, with node as the HOST\n    return rootView[tNode.index] = componentView;\n}\n/** Sets up the styling information on a root component. */\nfunction applyRootComponentStyling(rootDirectives, tNode, rNode, hostRenderer) {\n    for (const def of rootDirectives) {\n        tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, def.hostAttrs);\n    }\n    if (tNode.mergedAttrs !== null) {\n        computeStaticStyling(tNode, tNode.mergedAttrs, true);\n        if (rNode !== null) {\n            setupStaticAttributes(hostRenderer, rNode, tNode);\n        }\n    }\n}\n/**\n * Creates a root component and sets it up with features and host bindings.Shared by\n * renderComponent() and ViewContainerRef.createComponent().\n */\nfunction createRootComponent(componentView, rootComponentDef, rootDirectives, hostDirectiveDefs, rootLView, hostFeatures) {\n    const rootTNode = getCurrentTNode();\n    ngDevMode && assertDefined(rootTNode, 'tNode should have been already created');\n    const tView = rootLView[TVIEW];\n    const native = getNativeByTNode(rootTNode, rootLView);\n    initializeDirectives(tView, rootLView, rootTNode, rootDirectives, null, hostDirectiveDefs);\n    for (let i = 0; i < rootDirectives.length; i++) {\n        const directiveIndex = rootTNode.directiveStart + i;\n        const directiveInstance = getNodeInjectable(rootLView, tView, directiveIndex, rootTNode);\n        attachPatchData(directiveInstance, rootLView);\n    }\n    invokeDirectivesHostBindings(tView, rootLView, rootTNode);\n    if (native) {\n        attachPatchData(native, rootLView);\n    }\n    // We're guaranteed for the `componentOffset` to be positive here\n    // since a root component always matches a component def.\n    ngDevMode &&\n        assertGreaterThan(rootTNode.componentOffset, -1, 'componentOffset must be great than -1');\n    const component = getNodeInjectable(rootLView, tView, rootTNode.directiveStart + rootTNode.componentOffset, rootTNode);\n    componentView[CONTEXT] = rootLView[CONTEXT] = component;\n    if (hostFeatures !== null) {\n        for (const feature of hostFeatures) {\n            feature(component, rootComponentDef);\n        }\n    }\n    // We want to generate an empty QueryList for root content queries for backwards\n    // compatibility with ViewEngine.\n    executeContentQueries(tView, rootTNode, componentView);\n    return component;\n}\n/** Sets the static attributes on a root component. */\nfunction setRootNodeAttributes(hostRenderer, componentDef, hostRNode, rootSelectorOrNode) {\n    if (rootSelectorOrNode) {\n        // The placeholder will be replaced with the actual version at build time.\n        setUpAttributes(hostRenderer, hostRNode, ['ng-version', '17.0.8']);\n    }\n    else {\n        // If host element is created as a part of this function call (i.e. `rootSelectorOrNode`\n        // is not defined), also apply attributes and classes extracted from component selector.\n        // Extract attributes and classes from the first selector only to match VE behavior.\n        const { attrs, classes } = extractAttrsAndClassesFromSelector(componentDef.selectors[0]);\n        if (attrs) {\n            setUpAttributes(hostRenderer, hostRNode, attrs);\n        }\n        if (classes && classes.length > 0) {\n            writeDirectClass(hostRenderer, hostRNode, classes.join(' '));\n        }\n    }\n}\n/** Projects the `projectableNodes` that were specified when creating a root component. */\nfunction projectNodes(tNode, ngContentSelectors, projectableNodes) {\n    const projection = tNode.projection = [];\n    for (let i = 0; i < ngContentSelectors.length; i++) {\n        const nodesforSlot = projectableNodes[i];\n        // Projectable nodes can be passed as array of arrays or an array of iterables (ngUpgrade\n        // case). Here we do normalize passed data structure to be an array of arrays to avoid\n        // complex checks down the line.\n        // We also normalize the length of the passed in projectable nodes (to match the number of\n        // <ng-container> slots defined by a component).\n        projection.push(nodesforSlot != null ? Array.from(nodesforSlot) : null);\n    }\n}\n/**\n * Used to enable lifecycle hooks on the root component.\n *\n * Include this feature when calling `renderComponent` if the root component\n * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\n * be called properly.\n *\n * Example:\n *\n * ```\n * renderComponent(AppComponent, {hostFeatures: [LifecycleHooksFeature]});\n * ```\n */\nfunction LifecycleHooksFeature() {\n    const tNode = getCurrentTNode();\n    ngDevMode && assertDefined(tNode, 'TNode is required');\n    registerPostOrderHooks(getLView()[TVIEW], tNode);\n}\n\nfunction getSuperType(type) {\n    return Object.getPrototypeOf(type.prototype).constructor;\n}\n/**\n * Merges the definition from a super class to a sub class.\n * @param definition The definition that is a SubClass of another directive of component\n *\n * @codeGenApi\n */\nfunction ɵɵInheritDefinitionFeature(definition) {\n    let superType = getSuperType(definition.type);\n    let shouldInheritFields = true;\n    const inheritanceChain = [definition];\n    while (superType) {\n        let superDef = undefined;\n        if (isComponentDef(definition)) {\n            // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n            superDef = superType.ɵcmp || superType.ɵdir;\n        }\n        else {\n            if (superType.ɵcmp) {\n                throw new RuntimeError(903 /* RuntimeErrorCode.INVALID_INHERITANCE */, ngDevMode &&\n                    `Directives cannot inherit Components. Directive ${stringifyForError(definition.type)} is attempting to extend component ${stringifyForError(superType)}`);\n            }\n            // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n            superDef = superType.ɵdir;\n        }\n        if (superDef) {\n            if (shouldInheritFields) {\n                inheritanceChain.push(superDef);\n                // Some fields in the definition may be empty, if there were no values to put in them that\n                // would've justified object creation. Unwrap them if necessary.\n                const writeableDef = definition;\n                writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);\n                writeableDef.inputTransforms = maybeUnwrapEmpty(definition.inputTransforms);\n                writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);\n                writeableDef.outputs = maybeUnwrapEmpty(definition.outputs);\n                // Merge hostBindings\n                const superHostBindings = superDef.hostBindings;\n                superHostBindings && inheritHostBindings(definition, superHostBindings);\n                // Merge queries\n                const superViewQuery = superDef.viewQuery;\n                const superContentQueries = superDef.contentQueries;\n                superViewQuery && inheritViewQuery(definition, superViewQuery);\n                superContentQueries && inheritContentQueries(definition, superContentQueries);\n                // Merge inputs and outputs\n                fillProperties(definition.inputs, superDef.inputs);\n                fillProperties(definition.declaredInputs, superDef.declaredInputs);\n                fillProperties(definition.outputs, superDef.outputs);\n                if (superDef.inputTransforms !== null) {\n                    if (writeableDef.inputTransforms === null) {\n                        writeableDef.inputTransforms = {};\n                    }\n                    fillProperties(writeableDef.inputTransforms, superDef.inputTransforms);\n                }\n                // Merge animations metadata.\n                // If `superDef` is a Component, the `data` field is present (defaults to an empty object).\n                if (isComponentDef(superDef) && superDef.data.animation) {\n                    // If super def is a Component, the `definition` is also a Component, since Directives can\n                    // not inherit Components (we throw an error above and cannot reach this code).\n                    const defData = definition.data;\n                    defData.animation = (defData.animation || []).concat(superDef.data.animation);\n                }\n            }\n            // Run parent features\n            const features = superDef.features;\n            if (features) {\n                for (let i = 0; i < features.length; i++) {\n                    const feature = features[i];\n                    if (feature && feature.ngInherit) {\n                        feature(definition);\n                    }\n                    // If `InheritDefinitionFeature` is a part of the current `superDef`, it means that this\n                    // def already has all the necessary information inherited from its super class(es), so we\n                    // can stop merging fields from super classes. However we need to iterate through the\n                    // prototype chain to look for classes that might contain other \"features\" (like\n                    // NgOnChanges), which we should invoke for the original `definition`. We set the\n                    // `shouldInheritFields` flag to indicate that, essentially skipping fields inheritance\n                    // logic and only invoking functions from the \"features\" list.\n                    if (feature === ɵɵInheritDefinitionFeature) {\n                        shouldInheritFields = false;\n                    }\n                }\n            }\n        }\n        superType = Object.getPrototypeOf(superType);\n    }\n    mergeHostAttrsAcrossInheritance(inheritanceChain);\n}\n/**\n * Merge the `hostAttrs` and `hostVars` from the inherited parent to the base class.\n *\n * @param inheritanceChain A list of `WritableDefs` starting at the top most type and listing\n * sub-types in order. For each type take the `hostAttrs` and `hostVars` and merge it with the child\n * type.\n */\nfunction mergeHostAttrsAcrossInheritance(inheritanceChain) {\n    let hostVars = 0;\n    let hostAttrs = null;\n    // We process the inheritance order from the base to the leaves here.\n    for (let i = inheritanceChain.length - 1; i >= 0; i--) {\n        const def = inheritanceChain[i];\n        // For each `hostVars`, we need to add the superclass amount.\n        def.hostVars = (hostVars += def.hostVars);\n        // for each `hostAttrs` we need to merge it with superclass.\n        def.hostAttrs =\n            mergeHostAttrs(def.hostAttrs, hostAttrs = mergeHostAttrs(hostAttrs, def.hostAttrs));\n    }\n}\nfunction maybeUnwrapEmpty(value) {\n    if (value === EMPTY_OBJ) {\n        return {};\n    }\n    else if (value === EMPTY_ARRAY) {\n        return [];\n    }\n    else {\n        return value;\n    }\n}\nfunction inheritViewQuery(definition, superViewQuery) {\n    const prevViewQuery = definition.viewQuery;\n    if (prevViewQuery) {\n        definition.viewQuery = (rf, ctx) => {\n            superViewQuery(rf, ctx);\n            prevViewQuery(rf, ctx);\n        };\n    }\n    else {\n        definition.viewQuery = superViewQuery;\n    }\n}\nfunction inheritContentQueries(definition, superContentQueries) {\n    const prevContentQueries = definition.contentQueries;\n    if (prevContentQueries) {\n        definition.contentQueries = (rf, ctx, directiveIndex) => {\n            superContentQueries(rf, ctx, directiveIndex);\n            prevContentQueries(rf, ctx, directiveIndex);\n        };\n    }\n    else {\n        definition.contentQueries = superContentQueries;\n    }\n}\nfunction inheritHostBindings(definition, superHostBindings) {\n    const prevHostBindings = definition.hostBindings;\n    if (prevHostBindings) {\n        definition.hostBindings = (rf, ctx) => {\n            superHostBindings(rf, ctx);\n            prevHostBindings(rf, ctx);\n        };\n    }\n    else {\n        definition.hostBindings = superHostBindings;\n    }\n}\n\n/**\n * Fields which exist on either directive or component definitions, and need to be copied from\n * parent to child classes by the `ɵɵCopyDefinitionFeature`.\n */\nconst COPY_DIRECTIVE_FIELDS = [\n    // The child class should use the providers of its parent.\n    'providersResolver',\n    // Not listed here are any fields which are handled by the `ɵɵInheritDefinitionFeature`, such\n    // as inputs, outputs, and host binding functions.\n];\n/**\n * Fields which exist only on component definitions, and need to be copied from parent to child\n * classes by the `ɵɵCopyDefinitionFeature`.\n *\n * The type here allows any field of `ComponentDef` which is not also a property of `DirectiveDef`,\n * since those should go in `COPY_DIRECTIVE_FIELDS` above.\n */\nconst COPY_COMPONENT_FIELDS = [\n    // The child class should use the template function of its parent, including all template\n    // semantics.\n    'template',\n    'decls',\n    'consts',\n    'vars',\n    'onPush',\n    'ngContentSelectors',\n    // The child class should use the CSS styles of its parent, including all styling semantics.\n    'styles',\n    'encapsulation',\n    // The child class should be checked by the runtime in the same way as its parent.\n    'schemas',\n];\n/**\n * Copies the fields not handled by the `ɵɵInheritDefinitionFeature` from the supertype of a\n * definition.\n *\n * This exists primarily to support ngcc migration of an existing View Engine pattern, where an\n * entire decorator is inherited from a parent to a child class. When ngcc detects this case, it\n * generates a skeleton definition on the child class, and applies this feature.\n *\n * The `ɵɵCopyDefinitionFeature` then copies any needed fields from the parent class' definition,\n * including things like the component template function.\n *\n * @param definition The definition of a child class which inherits from a parent class with its\n * own definition.\n *\n * @codeGenApi\n */\nfunction ɵɵCopyDefinitionFeature(definition) {\n    let superType = getSuperType(definition.type);\n    let superDef = undefined;\n    if (isComponentDef(definition)) {\n        // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n        superDef = superType.ɵcmp;\n    }\n    else {\n        // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n        superDef = superType.ɵdir;\n    }\n    // Needed because `definition` fields are readonly.\n    const defAny = definition;\n    // Copy over any fields that apply to either directives or components.\n    for (const field of COPY_DIRECTIVE_FIELDS) {\n        defAny[field] = superDef[field];\n    }\n    if (isComponentDef(superDef)) {\n        // Copy over any component-specific fields.\n        for (const field of COPY_COMPONENT_FIELDS) {\n            defAny[field] = superDef[field];\n        }\n    }\n}\n\n/**\n * This feature adds the host directives behavior to a directive definition by patching a\n * function onto it. The expectation is that the runtime will invoke the function during\n * directive matching.\n *\n * For example:\n * ```ts\n * class ComponentWithHostDirective {\n *   static ɵcmp = defineComponent({\n *    type: ComponentWithHostDirective,\n *    features: [ɵɵHostDirectivesFeature([\n *      SimpleHostDirective,\n *      {directive: AdvancedHostDirective, inputs: ['foo: alias'], outputs: ['bar']},\n *    ])]\n *  });\n * }\n * ```\n *\n * @codeGenApi\n */\nfunction ɵɵHostDirectivesFeature(rawHostDirectives) {\n    const feature = (definition) => {\n        const resolved = (Array.isArray(rawHostDirectives) ? rawHostDirectives : rawHostDirectives()).map(dir => {\n            return typeof dir === 'function' ?\n                { directive: resolveForwardRef(dir), inputs: EMPTY_OBJ, outputs: EMPTY_OBJ } :\n                {\n                    directive: resolveForwardRef(dir.directive),\n                    inputs: bindingArrayToMap(dir.inputs),\n                    outputs: bindingArrayToMap(dir.outputs)\n                };\n        });\n        if (definition.hostDirectives === null) {\n            definition.findHostDirectiveDefs = findHostDirectiveDefs;\n            definition.hostDirectives = resolved;\n        }\n        else {\n            definition.hostDirectives.unshift(...resolved);\n        }\n    };\n    feature.ngInherit = true;\n    return feature;\n}\nfunction findHostDirectiveDefs(currentDef, matchedDefs, hostDirectiveDefs) {\n    if (currentDef.hostDirectives !== null) {\n        for (const hostDirectiveConfig of currentDef.hostDirectives) {\n            const hostDirectiveDef = getDirectiveDef(hostDirectiveConfig.directive);\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                validateHostDirective(hostDirectiveConfig, hostDirectiveDef);\n            }\n            // We need to patch the `declaredInputs` so that\n            // `ngOnChanges` can map the properties correctly.\n            patchDeclaredInputs(hostDirectiveDef.declaredInputs, hostDirectiveConfig.inputs);\n            // Host directives execute before the host so that its host bindings can be overwritten.\n            findHostDirectiveDefs(hostDirectiveDef, matchedDefs, hostDirectiveDefs);\n            hostDirectiveDefs.set(hostDirectiveDef, hostDirectiveConfig);\n            matchedDefs.push(hostDirectiveDef);\n        }\n    }\n}\n/**\n * Converts an array in the form of `['publicName', 'alias', 'otherPublicName', 'otherAlias']` into\n * a map in the form of `{publicName: 'alias', otherPublicName: 'otherAlias'}`.\n */\nfunction bindingArrayToMap(bindings) {\n    if (bindings === undefined || bindings.length === 0) {\n        return EMPTY_OBJ;\n    }\n    const result = {};\n    for (let i = 0; i < bindings.length; i += 2) {\n        result[bindings[i]] = bindings[i + 1];\n    }\n    return result;\n}\n/**\n * `ngOnChanges` has some leftover legacy ViewEngine behavior where the keys inside the\n * `SimpleChanges` event refer to the *declared* name of the input, not its public name or its\n * minified name. E.g. in `@Input('alias') foo: string`, the name in the `SimpleChanges` object\n * will always be `foo`, and not `alias` or the minified name of `foo` in apps using property\n * minification.\n *\n * This is achieved through the `DirectiveDef.declaredInputs` map that is constructed when the\n * definition is declared. When a property is written to the directive instance, the\n * `NgOnChangesFeature` will try to remap the property name being written to using the\n * `declaredInputs`.\n *\n * Since the host directive input remapping happens during directive matching, `declaredInputs`\n * won't contain the new alias that the input is available under. This function addresses the\n * issue by patching the host directive aliases to the `declaredInputs`. There is *not* a risk of\n * this patching accidentally introducing new inputs to the host directive, because `declaredInputs`\n * is used *only* by the `NgOnChangesFeature` when determining what name is used in the\n * `SimpleChanges` object which won't be reached if an input doesn't exist.\n */\nfunction patchDeclaredInputs(declaredInputs, exposedInputs) {\n    for (const publicName in exposedInputs) {\n        if (exposedInputs.hasOwnProperty(publicName)) {\n            const remappedPublicName = exposedInputs[publicName];\n            const privateName = declaredInputs[publicName];\n            // We *technically* shouldn't be able to hit this case because we can't have multiple\n            // inputs on the same property and we have validations against conflicting aliases in\n            // `validateMappings`. If we somehow did, it would lead to `ngOnChanges` being invoked\n            // with the wrong name so we have a non-user-friendly assertion here just in case.\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n                declaredInputs.hasOwnProperty(remappedPublicName)) {\n                assertEqual(declaredInputs[remappedPublicName], declaredInputs[publicName], `Conflicting host directive input alias ${publicName}.`);\n            }\n            declaredInputs[remappedPublicName] = privateName;\n        }\n    }\n}\n/**\n * Verifies that the host directive has been configured correctly.\n * @param hostDirectiveConfig Host directive configuration object.\n * @param directiveDef Directive definition of the host directive.\n */\nfunction validateHostDirective(hostDirectiveConfig, directiveDef) {\n    const type = hostDirectiveConfig.directive;\n    if (directiveDef === null) {\n        if (getComponentDef(type) !== null) {\n            throw new RuntimeError(310 /* RuntimeErrorCode.HOST_DIRECTIVE_COMPONENT */, `Host directive ${type.name} cannot be a component.`);\n        }\n        throw new RuntimeError(307 /* RuntimeErrorCode.HOST_DIRECTIVE_UNRESOLVABLE */, `Could not resolve metadata for host directive ${type.name}. ` +\n            `Make sure that the ${type.name} class is annotated with an @Directive decorator.`);\n    }\n    if (!directiveDef.standalone) {\n        throw new RuntimeError(308 /* RuntimeErrorCode.HOST_DIRECTIVE_NOT_STANDALONE */, `Host directive ${directiveDef.type.name} must be standalone.`);\n    }\n    validateMappings('input', directiveDef, hostDirectiveConfig.inputs);\n    validateMappings('output', directiveDef, hostDirectiveConfig.outputs);\n}\n/**\n * Checks that the host directive inputs/outputs configuration is valid.\n * @param bindingType Kind of binding that is being validated. Used in the error message.\n * @param def Definition of the host directive that is being validated against.\n * @param hostDirectiveBindings Host directive mapping object that shold be validated.\n */\nfunction validateMappings(bindingType, def, hostDirectiveBindings) {\n    const className = def.type.name;\n    const bindings = bindingType === 'input' ? def.inputs : def.outputs;\n    for (const publicName in hostDirectiveBindings) {\n        if (hostDirectiveBindings.hasOwnProperty(publicName)) {\n            if (!bindings.hasOwnProperty(publicName)) {\n                throw new RuntimeError(311 /* RuntimeErrorCode.HOST_DIRECTIVE_UNDEFINED_BINDING */, `Directive ${className} does not have an ${bindingType} with a public name of ${publicName}.`);\n            }\n            const remappedPublicName = hostDirectiveBindings[publicName];\n            if (bindings.hasOwnProperty(remappedPublicName) && remappedPublicName !== publicName &&\n                bindings[remappedPublicName] !== publicName) {\n                throw new RuntimeError(312 /* RuntimeErrorCode.HOST_DIRECTIVE_CONFLICTING_ALIAS */, `Cannot alias ${bindingType} ${publicName} of host directive ${className} to ${remappedPublicName}, because it already has a different ${bindingType} with the same public name.`);\n            }\n        }\n    }\n}\n\n/**\n * Decorates the directive definition with support for input transform functions.\n *\n * If the directive uses inheritance, the feature should be included before the\n * `InheritDefinitionFeature` to ensure that the `inputTransforms` field is populated.\n *\n * @codeGenApi\n */\nfunction ɵɵInputTransformsFeature(definition) {\n    const inputs = definition.inputConfig;\n    const inputTransforms = {};\n    for (const minifiedKey in inputs) {\n        if (inputs.hasOwnProperty(minifiedKey)) {\n            // Note: the private names are used for the keys, rather than the public ones, because public\n            // names can be re-aliased in host directives which would invalidate the lookup.\n            const value = inputs[minifiedKey];\n            if (Array.isArray(value) && value[2]) {\n                inputTransforms[minifiedKey] = value[2];\n            }\n        }\n    }\n    definition.inputTransforms =\n        inputTransforms;\n}\n\n// TODO(misko): consider inlining\n/** Updates binding and returns the value. */\nfunction updateBinding(lView, bindingIndex, value) {\n    return lView[bindingIndex] = value;\n}\n/** Gets the current binding value. */\nfunction getBinding(lView, bindingIndex) {\n    ngDevMode && assertIndexInRange(lView, bindingIndex);\n    ngDevMode &&\n        assertNotSame(lView[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');\n    return lView[bindingIndex];\n}\n/**\n * Updates binding if changed, then returns whether it was updated.\n *\n * This function also checks the `CheckNoChangesMode` and throws if changes are made.\n * Some changes (Objects/iterables) during `CheckNoChangesMode` are exempt to comply with VE\n * behavior.\n *\n * @param lView current `LView`\n * @param bindingIndex The binding in the `LView` to check\n * @param value New value to check against `lView[bindingIndex]`\n * @returns `true` if the bindings has changed. (Throws if binding has changed during\n *          `CheckNoChangesMode`)\n */\nfunction bindingUpdated(lView, bindingIndex, value) {\n    ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n    ngDevMode &&\n        assertLessThan(bindingIndex, lView.length, `Slot should have been initialized to NO_CHANGE`);\n    const oldValue = lView[bindingIndex];\n    if (Object.is(oldValue, value)) {\n        return false;\n    }\n    else {\n        if (ngDevMode && isInCheckNoChangesMode()) {\n            // View engine didn't report undefined values as changed on the first checkNoChanges pass\n            // (before the change detection was run).\n            const oldValueToCompare = oldValue !== NO_CHANGE ? oldValue : undefined;\n            if (!devModeEqual(oldValueToCompare, value)) {\n                const details = getExpressionChangedErrorDetails(lView, bindingIndex, oldValueToCompare, value);\n                throwErrorIfNoChangesMode(oldValue === NO_CHANGE, details.oldValue, details.newValue, details.propName, lView);\n            }\n            // There was a change, but the `devModeEqual` decided that the change is exempt from an error.\n            // For this reason we exit as if no change. The early exit is needed to prevent the changed\n            // value to be written into `LView` (If we would write the new value that we would not see it\n            // as change on next CD.)\n            return false;\n        }\n        lView[bindingIndex] = value;\n        return true;\n    }\n}\n/** Updates 2 bindings if changed, then returns whether either was updated. */\nfunction bindingUpdated2(lView, bindingIndex, exp1, exp2) {\n    const different = bindingUpdated(lView, bindingIndex, exp1);\n    return bindingUpdated(lView, bindingIndex + 1, exp2) || different;\n}\n/** Updates 3 bindings if changed, then returns whether any was updated. */\nfunction bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) {\n    const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n    return bindingUpdated(lView, bindingIndex + 2, exp3) || different;\n}\n/** Updates 4 bindings if changed, then returns whether any was updated. */\nfunction bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) {\n    const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n    return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;\n}\n\n/**\n * Updates the value of or removes a bound attribute on an Element.\n *\n * Used in the case of `[attr.title]=\"value\"`\n *\n * @param name name The name of the attribute.\n * @param value value The attribute is removed when value is `null` or `undefined`.\n *                  Otherwise the attribute value is set to the stringified value.\n * @param sanitizer An optional function used to sanitize the value.\n * @param namespace Optional namespace to use when setting the attribute.\n *\n * @codeGenApi\n */\nfunction ɵɵattribute(name, value, sanitizer, namespace) {\n    const lView = getLView();\n    const bindingIndex = nextBindingIndex();\n    if (bindingUpdated(lView, bindingIndex, value)) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace);\n        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, 'attr.' + name, bindingIndex);\n    }\n    return ɵɵattribute;\n}\n\n/**\n * Create interpolation bindings with a variable number of expressions.\n *\n * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.\n * Those are faster because there is no need to create an array of expressions and iterate over it.\n *\n * `values`:\n * - has static text at even indexes,\n * - has evaluated expressions at odd indexes.\n *\n * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nfunction interpolationV(lView, values) {\n    ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');\n    ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');\n    let isBindingUpdated = false;\n    let bindingIndex = getBindingIndex();\n    for (let i = 1; i < values.length; i += 2) {\n        // Check if bindings (odd indexes) have changed\n        isBindingUpdated = bindingUpdated(lView, bindingIndex++, values[i]) || isBindingUpdated;\n    }\n    setBindingIndex(bindingIndex);\n    if (!isBindingUpdated) {\n        return NO_CHANGE;\n    }\n    // Build the updated content\n    let content = values[0];\n    for (let i = 1; i < values.length; i += 2) {\n        content += renderStringify(values[i]) + values[i + 1];\n    }\n    return content;\n}\n/**\n * Creates an interpolation binding with 1 expression.\n *\n * @param prefix static value used for concatenation only.\n * @param v0 value checked for change.\n * @param suffix static value used for concatenation only.\n */\nfunction interpolation1(lView, prefix, v0, suffix) {\n    const different = bindingUpdated(lView, nextBindingIndex(), v0);\n    return different ? prefix + renderStringify(v0) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 2 expressions.\n */\nfunction interpolation2(lView, prefix, v0, i0, v1, suffix) {\n    const bindingIndex = getBindingIndex();\n    const different = bindingUpdated2(lView, bindingIndex, v0, v1);\n    incrementBindingIndex(2);\n    return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 3 expressions.\n */\nfunction interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix) {\n    const bindingIndex = getBindingIndex();\n    const different = bindingUpdated3(lView, bindingIndex, v0, v1, v2);\n    incrementBindingIndex(3);\n    return different ?\n        prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + suffix :\n        NO_CHANGE;\n}\n/**\n * Create an interpolation binding with 4 expressions.\n */\nfunction interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n    const bindingIndex = getBindingIndex();\n    const different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    incrementBindingIndex(4);\n    return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 +\n        renderStringify(v2) + i2 + renderStringify(v3) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 5 expressions.\n */\nfunction interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n    const bindingIndex = getBindingIndex();\n    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated(lView, bindingIndex + 4, v4) || different;\n    incrementBindingIndex(5);\n    return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 +\n        renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 6 expressions.\n */\nfunction interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n    const bindingIndex = getBindingIndex();\n    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;\n    incrementBindingIndex(6);\n    return different ?\n        prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n            renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 7 expressions.\n */\nfunction interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n    const bindingIndex = getBindingIndex();\n    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;\n    incrementBindingIndex(7);\n    return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 +\n        renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 +\n        renderStringify(v5) + i5 + renderStringify(v6) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 8 expressions.\n */\nfunction interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n    const bindingIndex = getBindingIndex();\n    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;\n    incrementBindingIndex(8);\n    return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 +\n        renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 +\n        renderStringify(v5) + i5 + renderStringify(v6) + i6 + renderStringify(v7) + suffix :\n        NO_CHANGE;\n}\n\n/**\n *\n * Update an interpolated attribute on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate1('title', 'prefix', v0, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate1(attrName, prefix, v0, suffix, sanitizer, namespace) {\n    const lView = getLView();\n    const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tNode = getSelectedTNode();\n        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n        ngDevMode &&\n            storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 1, prefix, suffix);\n    }\n    return ɵɵattributeInterpolate1;\n}\n/**\n *\n * Update an interpolated attribute on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate2(attrName, prefix, v0, i0, v1, suffix, sanitizer, namespace) {\n    const lView = getLView();\n    const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tNode = getSelectedTNode();\n        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n        ngDevMode &&\n            storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 2, prefix, i0, suffix);\n    }\n    return ɵɵattributeInterpolate2;\n}\n/**\n *\n * Update an interpolated attribute on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate3(\n * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate3(attrName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer, namespace) {\n    const lView = getLView();\n    const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tNode = getSelectedTNode();\n        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n        ngDevMode &&\n            storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 3, prefix, i0, i1, suffix);\n    }\n    return ɵɵattributeInterpolate3;\n}\n/**\n *\n * Update an interpolated attribute on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate4(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate4(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer, namespace) {\n    const lView = getLView();\n    const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tNode = getSelectedTNode();\n        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n        ngDevMode &&\n            storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);\n    }\n    return ɵɵattributeInterpolate4;\n}\n/**\n *\n * Update an interpolated attribute on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate5(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate5(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer, namespace) {\n    const lView = getLView();\n    const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tNode = getSelectedTNode();\n        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n        ngDevMode &&\n            storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);\n    }\n    return ɵɵattributeInterpolate5;\n}\n/**\n *\n * Update an interpolated attribute on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate6(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate6(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer, namespace) {\n    const lView = getLView();\n    const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tNode = getSelectedTNode();\n        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n        ngDevMode &&\n            storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);\n    }\n    return ɵɵattributeInterpolate6;\n}\n/**\n *\n * Update an interpolated attribute on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate7(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate7(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer, namespace) {\n    const lView = getLView();\n    const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tNode = getSelectedTNode();\n        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n        ngDevMode &&\n            storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);\n    }\n    return ɵɵattributeInterpolate7;\n}\n/**\n *\n * Update an interpolated attribute on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate8(\n *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate8(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer, namespace) {\n    const lView = getLView();\n    const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tNode = getSelectedTNode();\n        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n        ngDevMode &&\n            storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);\n    }\n    return ɵɵattributeInterpolate8;\n}\n/**\n * Update an interpolated attribute on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolateV(\n *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *\n * @param attrName The name of the attribute to update.\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolateV(attrName, values, sanitizer, namespace) {\n    const lView = getLView();\n    const interpolated = interpolationV(lView, values);\n    if (interpolated !== NO_CHANGE) {\n        const tNode = getSelectedTNode();\n        elementAttributeInternal(tNode, lView, attrName, interpolated, sanitizer, namespace);\n        if (ngDevMode) {\n            const interpolationInBetween = [values[0]]; // prefix\n            for (let i = 2; i < values.length; i += 2) {\n                interpolationInBetween.push(values[i]);\n            }\n            storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - interpolationInBetween.length + 1, ...interpolationInBetween);\n        }\n    }\n    return ɵɵattributeInterpolateV;\n}\n\nfunction toTStylingRange(prev, next) {\n    ngDevMode && assertNumberInRange(prev, 0, 32767 /* StylingRange.UNSIGNED_MASK */);\n    ngDevMode && assertNumberInRange(next, 0, 32767 /* StylingRange.UNSIGNED_MASK */);\n    return (prev << 17 /* StylingRange.PREV_SHIFT */ | next << 2 /* StylingRange.NEXT_SHIFT */);\n}\nfunction getTStylingRangePrev(tStylingRange) {\n    ngDevMode && assertNumber(tStylingRange, 'expected number');\n    return (tStylingRange >> 17 /* StylingRange.PREV_SHIFT */) & 32767 /* StylingRange.UNSIGNED_MASK */;\n}\nfunction getTStylingRangePrevDuplicate(tStylingRange) {\n    ngDevMode && assertNumber(tStylingRange, 'expected number');\n    return (tStylingRange & 2 /* StylingRange.PREV_DUPLICATE */) == 2 /* StylingRange.PREV_DUPLICATE */;\n}\nfunction setTStylingRangePrev(tStylingRange, previous) {\n    ngDevMode && assertNumber(tStylingRange, 'expected number');\n    ngDevMode && assertNumberInRange(previous, 0, 32767 /* StylingRange.UNSIGNED_MASK */);\n    return ((tStylingRange & ~4294836224 /* StylingRange.PREV_MASK */) | (previous << 17 /* StylingRange.PREV_SHIFT */));\n}\nfunction setTStylingRangePrevDuplicate(tStylingRange) {\n    ngDevMode && assertNumber(tStylingRange, 'expected number');\n    return (tStylingRange | 2 /* StylingRange.PREV_DUPLICATE */);\n}\nfunction getTStylingRangeNext(tStylingRange) {\n    ngDevMode && assertNumber(tStylingRange, 'expected number');\n    return (tStylingRange & 131068 /* StylingRange.NEXT_MASK */) >> 2 /* StylingRange.NEXT_SHIFT */;\n}\nfunction setTStylingRangeNext(tStylingRange, next) {\n    ngDevMode && assertNumber(tStylingRange, 'expected number');\n    ngDevMode && assertNumberInRange(next, 0, 32767 /* StylingRange.UNSIGNED_MASK */);\n    return ((tStylingRange & ~131068 /* StylingRange.NEXT_MASK */) | //\n        next << 2 /* StylingRange.NEXT_SHIFT */);\n}\nfunction getTStylingRangeNextDuplicate(tStylingRange) {\n    ngDevMode && assertNumber(tStylingRange, 'expected number');\n    return ((tStylingRange) & 1 /* StylingRange.NEXT_DUPLICATE */) === 1 /* StylingRange.NEXT_DUPLICATE */;\n}\nfunction setTStylingRangeNextDuplicate(tStylingRange) {\n    ngDevMode && assertNumber(tStylingRange, 'expected number');\n    return (tStylingRange | 1 /* StylingRange.NEXT_DUPLICATE */);\n}\nfunction getTStylingRangeTail(tStylingRange) {\n    ngDevMode && assertNumber(tStylingRange, 'expected number');\n    const next = getTStylingRangeNext(tStylingRange);\n    return next === 0 ? getTStylingRangePrev(tStylingRange) : next;\n}\n\n/**\n * NOTE: The word `styling` is used interchangeably as style or class styling.\n *\n * This file contains code to link styling instructions together so that they can be replayed in\n * priority order. The file exists because Ivy styling instruction execution order does not match\n * that of the priority order. The purpose of this code is to create a linked list so that the\n * instructions can be traversed in priority order when computing the styles.\n *\n * Assume we are dealing with the following code:\n * ```\n * @Component({\n *   template: `\n *     <my-cmp [style]=\" {color: '#001'} \"\n *             [style.color]=\" #002 \"\n *             dir-style-color-1\n *             dir-style-color-2> `\n * })\n * class ExampleComponent {\n *   static ngComp = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#001'});\n *     ɵɵstyleProp('color', '#002');\n *     ...\n *   }\n * }\n *\n * @Directive({\n *   selector: `[dir-style-color-1]',\n * })\n * class Style1Directive {\n *   @HostBinding('style') style = {color: '#005'};\n *   @HostBinding('style.color') color = '#006';\n *\n *   static ngDir = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#005'});\n *     ɵɵstyleProp('color', '#006');\n *     ...\n *   }\n * }\n *\n * @Directive({\n *   selector: `[dir-style-color-2]',\n * })\n * class Style2Directive {\n *   @HostBinding('style') style = {color: '#007'};\n *   @HostBinding('style.color') color = '#008';\n *\n *   static ngDir = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#007'});\n *     ɵɵstyleProp('color', '#008');\n *     ...\n *   }\n * }\n *\n * @Directive({\n *   selector: `my-cmp',\n * })\n * class MyComponent {\n *   @HostBinding('style') style = {color: '#003'};\n *   @HostBinding('style.color') color = '#004';\n *\n *   static ngComp = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#003'});\n *     ɵɵstyleProp('color', '#004');\n *     ...\n *   }\n * }\n * ```\n *\n * The Order of instruction execution is:\n *\n * NOTE: the comment binding location is for illustrative purposes only.\n *\n * ```\n * // Template: (ExampleComponent)\n *     ɵɵstyleMap({color: '#001'});   // Binding index: 10\n *     ɵɵstyleProp('color', '#002');  // Binding index: 12\n * // MyComponent\n *     ɵɵstyleMap({color: '#003'});   // Binding index: 20\n *     ɵɵstyleProp('color', '#004');  // Binding index: 22\n * // Style1Directive\n *     ɵɵstyleMap({color: '#005'});   // Binding index: 24\n *     ɵɵstyleProp('color', '#006');  // Binding index: 26\n * // Style2Directive\n *     ɵɵstyleMap({color: '#007'});   // Binding index: 28\n *     ɵɵstyleProp('color', '#008');  // Binding index: 30\n * ```\n *\n * The correct priority order of concatenation is:\n *\n * ```\n * // MyComponent\n *     ɵɵstyleMap({color: '#003'});   // Binding index: 20\n *     ɵɵstyleProp('color', '#004');  // Binding index: 22\n * // Style1Directive\n *     ɵɵstyleMap({color: '#005'});   // Binding index: 24\n *     ɵɵstyleProp('color', '#006');  // Binding index: 26\n * // Style2Directive\n *     ɵɵstyleMap({color: '#007'});   // Binding index: 28\n *     ɵɵstyleProp('color', '#008');  // Binding index: 30\n * // Template: (ExampleComponent)\n *     ɵɵstyleMap({color: '#001'});   // Binding index: 10\n *     ɵɵstyleProp('color', '#002');  // Binding index: 12\n * ```\n *\n * What color should be rendered?\n *\n * Once the items are correctly sorted in the list, the answer is simply the last item in the\n * concatenation list which is `#002`.\n *\n * To do so we keep a linked list of all of the bindings which pertain to this element.\n * Notice that the bindings are inserted in the order of execution, but the `TView.data` allows\n * us to traverse them in the order of priority.\n *\n * |Idx|`TView.data`|`LView`          | Notes\n * |---|------------|-----------------|--------------\n * |...|            |                 |\n * |10 |`null`      |`{color: '#001'}`| `ɵɵstyleMap('color', {color: '#001'})`\n * |11 |`30 | 12`   | ...             |\n * |12 |`color`     |`'#002'`         | `ɵɵstyleProp('color', '#002')`\n * |13 |`10 | 0`    | ...             |\n * |...|            |                 |\n * |20 |`null`      |`{color: '#003'}`| `ɵɵstyleMap('color', {color: '#003'})`\n * |21 |`0 | 22`    | ...             |\n * |22 |`color`     |`'#004'`         | `ɵɵstyleProp('color', '#004')`\n * |23 |`20 | 24`   | ...             |\n * |24 |`null`      |`{color: '#005'}`| `ɵɵstyleMap('color', {color: '#005'})`\n * |25 |`22 | 26`   | ...             |\n * |26 |`color`     |`'#006'`         | `ɵɵstyleProp('color', '#006')`\n * |27 |`24 | 28`   | ...             |\n * |28 |`null`      |`{color: '#007'}`| `ɵɵstyleMap('color', {color: '#007'})`\n * |29 |`26 | 30`   | ...             |\n * |30 |`color`     |`'#008'`         | `ɵɵstyleProp('color', '#008')`\n * |31 |`28 | 10`   | ...             |\n *\n * The above data structure allows us to re-concatenate the styling no matter which data binding\n * changes.\n *\n * NOTE: in addition to keeping track of next/previous index the `TView.data` also stores prev/next\n * duplicate bit. The duplicate bit if true says there either is a binding with the same name or\n * there is a map (which may contain the name). This information is useful in knowing if other\n * styles with higher priority need to be searched for overwrites.\n *\n * NOTE: See `should support example in 'tnode_linked_list.ts' documentation` in\n * `tnode_linked_list_spec.ts` for working example.\n */\nlet __unused_const_as_closure_does_not_like_standalone_comment_blocks__;\n/**\n * Insert new `tStyleValue` at `TData` and link existing style bindings such that we maintain linked\n * list of styles and compute the duplicate flag.\n *\n * Note: this function is executed during `firstUpdatePass` only to populate the `TView.data`.\n *\n * The function works by keeping track of `tStylingRange` which contains two pointers pointing to\n * the head/tail of the template portion of the styles.\n *  - if `isHost === false` (we are template) then insertion is at tail of `TStylingRange`\n *  - if `isHost === true` (we are host binding) then insertion is at head of `TStylingRange`\n *\n * @param tData The `TData` to insert into.\n * @param tNode `TNode` associated with the styling element.\n * @param tStylingKey See `TStylingKey`.\n * @param index location of where `tStyleValue` should be stored (and linked into list.)\n * @param isHostBinding `true` if the insertion is for a `hostBinding`. (insertion is in front of\n *               template.)\n * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.\n *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)\n */\nfunction insertTStylingBinding(tData, tNode, tStylingKeyWithStatic, index, isHostBinding, isClassBinding) {\n    ngDevMode && assertFirstUpdatePass(getTView());\n    let tBindings = isClassBinding ? tNode.classBindings : tNode.styleBindings;\n    let tmplHead = getTStylingRangePrev(tBindings);\n    let tmplTail = getTStylingRangeNext(tBindings);\n    tData[index] = tStylingKeyWithStatic;\n    let isKeyDuplicateOfStatic = false;\n    let tStylingKey;\n    if (Array.isArray(tStylingKeyWithStatic)) {\n        // We are case when the `TStylingKey` contains static fields as well.\n        const staticKeyValueArray = tStylingKeyWithStatic;\n        tStylingKey = staticKeyValueArray[1]; // unwrap.\n        // We need to check if our key is present in the static so that we can mark it as duplicate.\n        if (tStylingKey === null ||\n            keyValueArrayIndexOf(staticKeyValueArray, tStylingKey) > 0) {\n            // tStylingKey is present in the statics, need to mark it as duplicate.\n            isKeyDuplicateOfStatic = true;\n        }\n    }\n    else {\n        tStylingKey = tStylingKeyWithStatic;\n    }\n    if (isHostBinding) {\n        // We are inserting host bindings\n        // If we don't have template bindings then `tail` is 0.\n        const hasTemplateBindings = tmplTail !== 0;\n        // This is important to know because that means that the `head` can't point to the first\n        // template bindings (there are none.) Instead the head points to the tail of the template.\n        if (hasTemplateBindings) {\n            // template head's \"prev\" will point to last host binding or to 0 if no host bindings yet\n            const previousNode = getTStylingRangePrev(tData[tmplHead + 1]);\n            tData[index + 1] = toTStylingRange(previousNode, tmplHead);\n            // if a host binding has already been registered, we need to update the next of that host\n            // binding to point to this one\n            if (previousNode !== 0) {\n                // We need to update the template-tail value to point to us.\n                tData[previousNode + 1] =\n                    setTStylingRangeNext(tData[previousNode + 1], index);\n            }\n            // The \"previous\" of the template binding head should point to this host binding\n            tData[tmplHead + 1] = setTStylingRangePrev(tData[tmplHead + 1], index);\n        }\n        else {\n            tData[index + 1] = toTStylingRange(tmplHead, 0);\n            // if a host binding has already been registered, we need to update the next of that host\n            // binding to point to this one\n            if (tmplHead !== 0) {\n                // We need to update the template-tail value to point to us.\n                tData[tmplHead + 1] = setTStylingRangeNext(tData[tmplHead + 1], index);\n            }\n            // if we don't have template, the head points to template-tail, and needs to be advanced.\n            tmplHead = index;\n        }\n    }\n    else {\n        // We are inserting in template section.\n        // We need to set this binding's \"previous\" to the current template tail\n        tData[index + 1] = toTStylingRange(tmplTail, 0);\n        ngDevMode &&\n            assertEqual(tmplHead !== 0 && tmplTail === 0, false, 'Adding template bindings after hostBindings is not allowed.');\n        if (tmplHead === 0) {\n            tmplHead = index;\n        }\n        else {\n            // We need to update the previous value \"next\" to point to this binding\n            tData[tmplTail + 1] = setTStylingRangeNext(tData[tmplTail + 1], index);\n        }\n        tmplTail = index;\n    }\n    // Now we need to update / compute the duplicates.\n    // Starting with our location search towards head (least priority)\n    if (isKeyDuplicateOfStatic) {\n        tData[index + 1] = setTStylingRangePrevDuplicate(tData[index + 1]);\n    }\n    markDuplicates(tData, tStylingKey, index, true, isClassBinding);\n    markDuplicates(tData, tStylingKey, index, false, isClassBinding);\n    markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding);\n    tBindings = toTStylingRange(tmplHead, tmplTail);\n    if (isClassBinding) {\n        tNode.classBindings = tBindings;\n    }\n    else {\n        tNode.styleBindings = tBindings;\n    }\n}\n/**\n * Look into the residual styling to see if the current `tStylingKey` is duplicate of residual.\n *\n * @param tNode `TNode` where the residual is stored.\n * @param tStylingKey `TStylingKey` to store.\n * @param tData `TData` associated with the current `LView`.\n * @param index location of where `tStyleValue` should be stored (and linked into list.)\n * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.\n *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)\n */\nfunction markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding) {\n    const residual = isClassBinding ? tNode.residualClasses : tNode.residualStyles;\n    if (residual != null /* or undefined */ && typeof tStylingKey == 'string' &&\n        keyValueArrayIndexOf(residual, tStylingKey) >= 0) {\n        // We have duplicate in the residual so mark ourselves as duplicate.\n        tData[index + 1] = setTStylingRangeNextDuplicate(tData[index + 1]);\n    }\n}\n/**\n * Marks `TStyleValue`s as duplicates if another style binding in the list has the same\n * `TStyleValue`.\n *\n * NOTE: this function is intended to be called twice once with `isPrevDir` set to `true` and once\n * with it set to `false` to search both the previous as well as next items in the list.\n *\n * No duplicate case\n * ```\n *   [style.color]\n *   [style.width.px] <<- index\n *   [style.height.px]\n * ```\n *\n * In the above case adding `[style.width.px]` to the existing `[style.color]` produces no\n * duplicates because `width` is not found in any other part of the linked list.\n *\n * Duplicate case\n * ```\n *   [style.color]\n *   [style.width.em]\n *   [style.width.px] <<- index\n * ```\n * In the above case adding `[style.width.px]` will produce a duplicate with `[style.width.em]`\n * because `width` is found in the chain.\n *\n * Map case 1\n * ```\n *   [style.width.px]\n *   [style.color]\n *   [style]  <<- index\n * ```\n * In the above case adding `[style]` will produce a duplicate with any other bindings because\n * `[style]` is a Map and as such is fully dynamic and could produce `color` or `width`.\n *\n * Map case 2\n * ```\n *   [style]\n *   [style.width.px]\n *   [style.color]  <<- index\n * ```\n * In the above case adding `[style.color]` will produce a duplicate because there is already a\n * `[style]` binding which is a Map and as such is fully dynamic and could produce `color` or\n * `width`.\n *\n * NOTE: Once `[style]` (Map) is added into the system all things are mapped as duplicates.\n * NOTE: We use `style` as example, but same logic is applied to `class`es as well.\n *\n * @param tData `TData` where the linked list is stored.\n * @param tStylingKey `TStylingKeyPrimitive` which contains the value to compare to other keys in\n *        the linked list.\n * @param index Starting location in the linked list to search from\n * @param isPrevDir Direction.\n *        - `true` for previous (lower priority);\n *        - `false` for next (higher priority).\n */\nfunction markDuplicates(tData, tStylingKey, index, isPrevDir, isClassBinding) {\n    const tStylingAtIndex = tData[index + 1];\n    const isMap = tStylingKey === null;\n    let cursor = isPrevDir ? getTStylingRangePrev(tStylingAtIndex) : getTStylingRangeNext(tStylingAtIndex);\n    let foundDuplicate = false;\n    // We keep iterating as long as we have a cursor\n    // AND either:\n    // - we found what we are looking for, OR\n    // - we are a map in which case we have to continue searching even after we find what we were\n    //   looking for since we are a wild card and everything needs to be flipped to duplicate.\n    while (cursor !== 0 && (foundDuplicate === false || isMap)) {\n        ngDevMode && assertIndexInRange(tData, cursor);\n        const tStylingValueAtCursor = tData[cursor];\n        const tStyleRangeAtCursor = tData[cursor + 1];\n        if (isStylingMatch(tStylingValueAtCursor, tStylingKey)) {\n            foundDuplicate = true;\n            tData[cursor + 1] = isPrevDir ? setTStylingRangeNextDuplicate(tStyleRangeAtCursor) :\n                setTStylingRangePrevDuplicate(tStyleRangeAtCursor);\n        }\n        cursor = isPrevDir ? getTStylingRangePrev(tStyleRangeAtCursor) :\n            getTStylingRangeNext(tStyleRangeAtCursor);\n    }\n    if (foundDuplicate) {\n        // if we found a duplicate, than mark ourselves.\n        tData[index + 1] = isPrevDir ? setTStylingRangePrevDuplicate(tStylingAtIndex) :\n            setTStylingRangeNextDuplicate(tStylingAtIndex);\n    }\n}\n/**\n * Determines if two `TStylingKey`s are a match.\n *\n * When computing whether a binding contains a duplicate, we need to compare if the instruction\n * `TStylingKey` has a match.\n *\n * Here are examples of `TStylingKey`s which match given `tStylingKeyCursor` is:\n * - `color`\n *    - `color`    // Match another color\n *    - `null`     // That means that `tStylingKey` is a `classMap`/`styleMap` instruction\n *    - `['', 'color', 'other', true]` // wrapped `color` so match\n *    - `['', null, 'other', true]`       // wrapped `null` so match\n *    - `['', 'width', 'color', 'value']` // wrapped static value contains a match on `'color'`\n * - `null`       // `tStylingKeyCursor` always match as it is `classMap`/`styleMap` instruction\n *\n * @param tStylingKeyCursor\n * @param tStylingKey\n */\nfunction isStylingMatch(tStylingKeyCursor, tStylingKey) {\n    ngDevMode &&\n        assertNotEqual(Array.isArray(tStylingKey), true, 'Expected that \\'tStylingKey\\' has been unwrapped');\n    if (tStylingKeyCursor === null || // If the cursor is `null` it means that we have map at that\n        // location so we must assume that we have a match.\n        tStylingKey == null || // If `tStylingKey` is `null` then it is a map therefor assume that it\n        // contains a match.\n        (Array.isArray(tStylingKeyCursor) ? tStylingKeyCursor[1] : tStylingKeyCursor) ===\n            tStylingKey // If the keys match explicitly than we are a match.\n    ) {\n        return true;\n    }\n    else if (Array.isArray(tStylingKeyCursor) && typeof tStylingKey === 'string') {\n        // if we did not find a match, but `tStylingKeyCursor` is `KeyValueArray` that means cursor has\n        // statics and we need to check those as well.\n        return keyValueArrayIndexOf(tStylingKeyCursor, tStylingKey) >=\n            0; // see if we are matching the key\n    }\n    return false;\n}\n\n// Global state of the parser. (This makes parser non-reentrant, but that is not an issue)\nconst parserState = {\n    textEnd: 0,\n    key: 0,\n    keyEnd: 0,\n    value: 0,\n    valueEnd: 0,\n};\n/**\n * Retrieves the last parsed `key` of style.\n * @param text the text to substring the key from.\n */\nfunction getLastParsedKey(text) {\n    return text.substring(parserState.key, parserState.keyEnd);\n}\n/**\n * Retrieves the last parsed `value` of style.\n * @param text the text to substring the key from.\n */\nfunction getLastParsedValue(text) {\n    return text.substring(parserState.value, parserState.valueEnd);\n}\n/**\n * Initializes `className` string for parsing and parses the first token.\n *\n * This function is intended to be used in this format:\n * ```\n * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\n *   const key = getLastParsedKey();\n *   ...\n * }\n * ```\n * @param text `className` to parse\n * @returns index where the next invocation of `parseClassNameNext` should resume.\n */\nfunction parseClassName(text) {\n    resetParserState(text);\n    return parseClassNameNext(text, consumeWhitespace(text, 0, parserState.textEnd));\n}\n/**\n * Parses next `className` token.\n *\n * This function is intended to be used in this format:\n * ```\n * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\n *   const key = getLastParsedKey();\n *   ...\n * }\n * ```\n *\n * @param text `className` to parse\n * @param index where the parsing should resume.\n * @returns index where the next invocation of `parseClassNameNext` should resume.\n */\nfunction parseClassNameNext(text, index) {\n    const end = parserState.textEnd;\n    if (end === index) {\n        return -1;\n    }\n    index = parserState.keyEnd = consumeClassToken(text, parserState.key = index, end);\n    return consumeWhitespace(text, index, end);\n}\n/**\n * Initializes `cssText` string for parsing and parses the first key/values.\n *\n * This function is intended to be used in this format:\n * ```\n * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {\n *   const key = getLastParsedKey();\n *   const value = getLastParsedValue();\n *   ...\n * }\n * ```\n * @param text `cssText` to parse\n * @returns index where the next invocation of `parseStyleNext` should resume.\n */\nfunction parseStyle(text) {\n    resetParserState(text);\n    return parseStyleNext(text, consumeWhitespace(text, 0, parserState.textEnd));\n}\n/**\n * Parses the next `cssText` key/values.\n *\n * This function is intended to be used in this format:\n * ```\n * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {\n *   const key = getLastParsedKey();\n *   const value = getLastParsedValue();\n *   ...\n * }\n *\n * @param text `cssText` to parse\n * @param index where the parsing should resume.\n * @returns index where the next invocation of `parseStyleNext` should resume.\n */\nfunction parseStyleNext(text, startIndex) {\n    const end = parserState.textEnd;\n    let index = parserState.key = consumeWhitespace(text, startIndex, end);\n    if (end === index) {\n        // we reached an end so just quit\n        return -1;\n    }\n    index = parserState.keyEnd = consumeStyleKey(text, index, end);\n    index = consumeSeparator(text, index, end, 58 /* CharCode.COLON */);\n    index = parserState.value = consumeWhitespace(text, index, end);\n    index = parserState.valueEnd = consumeStyleValue(text, index, end);\n    return consumeSeparator(text, index, end, 59 /* CharCode.SEMI_COLON */);\n}\n/**\n * Reset the global state of the styling parser.\n * @param text The styling text to parse.\n */\nfunction resetParserState(text) {\n    parserState.key = 0;\n    parserState.keyEnd = 0;\n    parserState.value = 0;\n    parserState.valueEnd = 0;\n    parserState.textEnd = text.length;\n}\n/**\n * Returns index of next non-whitespace character.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index of next non-whitespace character (May be the same as `start` if no whitespace at\n *          that location.)\n */\nfunction consumeWhitespace(text, startIndex, endIndex) {\n    while (startIndex < endIndex && text.charCodeAt(startIndex) <= 32 /* CharCode.SPACE */) {\n        startIndex++;\n    }\n    return startIndex;\n}\n/**\n * Returns index of last char in class token.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after last char in class token.\n */\nfunction consumeClassToken(text, startIndex, endIndex) {\n    while (startIndex < endIndex && text.charCodeAt(startIndex) > 32 /* CharCode.SPACE */) {\n        startIndex++;\n    }\n    return startIndex;\n}\n/**\n * Consumes all of the characters belonging to style key and token.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after last style key character.\n */\nfunction consumeStyleKey(text, startIndex, endIndex) {\n    let ch;\n    while (startIndex < endIndex &&\n        ((ch = text.charCodeAt(startIndex)) === 45 /* CharCode.DASH */ || ch === 95 /* CharCode.UNDERSCORE */ ||\n            ((ch & -33 /* CharCode.UPPER_CASE */) >= 65 /* CharCode.A */ && (ch & -33 /* CharCode.UPPER_CASE */) <= 90 /* CharCode.Z */) ||\n            (ch >= 48 /* CharCode.ZERO */ && ch <= 57 /* CharCode.NINE */))) {\n        startIndex++;\n    }\n    return startIndex;\n}\n/**\n * Consumes all whitespace and the separator `:` after the style key.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after separator and surrounding whitespace.\n */\nfunction consumeSeparator(text, startIndex, endIndex, separator) {\n    startIndex = consumeWhitespace(text, startIndex, endIndex);\n    if (startIndex < endIndex) {\n        if (ngDevMode && text.charCodeAt(startIndex) !== separator) {\n            malformedStyleError(text, String.fromCharCode(separator), startIndex);\n        }\n        startIndex++;\n    }\n    return startIndex;\n}\n/**\n * Consumes style value honoring `url()` and `\"\"` text.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after last style value character.\n */\nfunction consumeStyleValue(text, startIndex, endIndex) {\n    let ch1 = -1; // 1st previous character\n    let ch2 = -1; // 2nd previous character\n    let ch3 = -1; // 3rd previous character\n    let i = startIndex;\n    let lastChIndex = i;\n    while (i < endIndex) {\n        const ch = text.charCodeAt(i++);\n        if (ch === 59 /* CharCode.SEMI_COLON */) {\n            return lastChIndex;\n        }\n        else if (ch === 34 /* CharCode.DOUBLE_QUOTE */ || ch === 39 /* CharCode.SINGLE_QUOTE */) {\n            lastChIndex = i = consumeQuotedText(text, ch, i, endIndex);\n        }\n        else if (startIndex ===\n            i - 4 && // We have seen only 4 characters so far \"URL(\" (Ignore \"foo_URL()\")\n            ch3 === 85 /* CharCode.U */ &&\n            ch2 === 82 /* CharCode.R */ && ch1 === 76 /* CharCode.L */ && ch === 40 /* CharCode.OPEN_PAREN */) {\n            lastChIndex = i = consumeQuotedText(text, 41 /* CharCode.CLOSE_PAREN */, i, endIndex);\n        }\n        else if (ch > 32 /* CharCode.SPACE */) {\n            // if we have a non-whitespace character then capture its location\n            lastChIndex = i;\n        }\n        ch3 = ch2;\n        ch2 = ch1;\n        ch1 = ch & -33 /* CharCode.UPPER_CASE */;\n    }\n    return lastChIndex;\n}\n/**\n * Consumes all of the quoted characters.\n *\n * @param text Text to scan\n * @param quoteCharCode CharCode of either `\"` or `'` quote or `)` for `url(...)`.\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after quoted characters.\n */\nfunction consumeQuotedText(text, quoteCharCode, startIndex, endIndex) {\n    let ch1 = -1; // 1st previous character\n    let index = startIndex;\n    while (index < endIndex) {\n        const ch = text.charCodeAt(index++);\n        if (ch == quoteCharCode && ch1 !== 92 /* CharCode.BACK_SLASH */) {\n            return index;\n        }\n        if (ch == 92 /* CharCode.BACK_SLASH */ && ch1 === 92 /* CharCode.BACK_SLASH */) {\n            // two back slashes cancel each other out. For example `\"\\\\\"` should properly end the\n            // quotation. (It should not assume that the last `\"` is escaped.)\n            ch1 = 0;\n        }\n        else {\n            ch1 = ch;\n        }\n    }\n    throw ngDevMode ? malformedStyleError(text, String.fromCharCode(quoteCharCode), endIndex) :\n        new Error();\n}\nfunction malformedStyleError(text, expecting, index) {\n    ngDevMode && assertEqual(typeof text === 'string', true, 'String expected here');\n    throw throwError(`Malformed style at location ${index} in string '` + text.substring(0, index) + '[>>' +\n        text.substring(index, index + 1) + '<<]' + text.slice(index + 1) +\n        `'. Expecting '${expecting}'.`);\n}\n\n/**\n * Update a property on a selected element.\n *\n * Operates on the element selected by index via the {@link select} instruction.\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled\n *\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n * @returns This function returns itself so that it may be chained\n * (e.g. `property('name', ctx.name)('title', ctx.title)`)\n *\n * @codeGenApi\n */\nfunction ɵɵproperty(propName, value, sanitizer) {\n    const lView = getLView();\n    const bindingIndex = nextBindingIndex();\n    if (bindingUpdated(lView, bindingIndex, value)) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, false);\n        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n    }\n    return ɵɵproperty;\n}\n/**\n * Given `<div style=\"...\" my-dir>` and `MyDir` with `@Input('style')` we need to write to\n * directive input.\n */\nfunction setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased) {\n    const inputs = tNode.inputs;\n    const property = isClassBased ? 'class' : 'style';\n    // We support both 'class' and `className` hence the fallback.\n    setInputsForProperty(tView, lView, inputs[property], property, value);\n}\n\n/**\n * Update a style binding on an element with the provided value.\n *\n * If the style value is falsy then it will be removed from the element\n * (or assigned a different value depending if there are any styles placed\n * on the element with `styleMap` or any static styles that are\n * present from when the element was created with `styling`).\n *\n * Note that the styling element is updated as part of `stylingApply`.\n *\n * @param prop A valid CSS property.\n * @param value New value to write (`null` or an empty string to remove).\n * @param suffix Optional suffix. Used with scalar values to add unit such as `px`.\n *\n * Note that this will apply the provided style value to the host element if this function is called\n * within a host binding function.\n *\n * @codeGenApi\n */\nfunction ɵɵstyleProp(prop, value, suffix) {\n    checkStylingProperty(prop, value, suffix, false);\n    return ɵɵstyleProp;\n}\n/**\n * Update a class binding on an element with the provided value.\n *\n * This instruction is meant to handle the `[class.foo]=\"exp\"` case and,\n * therefore, the class binding itself must already be allocated using\n * `styling` within the creation block.\n *\n * @param prop A valid CSS class (only one).\n * @param value A true/false value which will turn the class on or off.\n *\n * Note that this will apply the provided class value to the host element if this function\n * is called within a host binding function.\n *\n * @codeGenApi\n */\nfunction ɵɵclassProp(className, value) {\n    checkStylingProperty(className, value, null, true);\n    return ɵɵclassProp;\n}\n/**\n * Update style bindings using an object literal on an element.\n *\n * This instruction is meant to apply styling via the `[style]=\"exp\"` template bindings.\n * When styles are applied to the element they will then be updated with respect to\n * any styles/classes set via `styleProp`. If any styles are set to falsy\n * then they will be removed from the element.\n *\n * Note that the styling instruction will not be applied until `stylingApply` is called.\n *\n * @param styles A key/value style map of the styles that will be applied to the given element.\n *        Any missing styles (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's styling.\n *\n * Note that this will apply the provided styleMap value to the host element if this function\n * is called within a host binding.\n *\n * @codeGenApi\n */\nfunction ɵɵstyleMap(styles) {\n    checkStylingMap(styleKeyValueArraySet, styleStringParser, styles, false);\n}\n/**\n * Parse text as style and add values to KeyValueArray.\n *\n * This code is pulled out to a separate function so that it can be tree shaken away if it is not\n * needed. It is only referenced from `ɵɵstyleMap`.\n *\n * @param keyValueArray KeyValueArray to add parsed values to.\n * @param text text to parse.\n */\nfunction styleStringParser(keyValueArray, text) {\n    for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i)) {\n        styleKeyValueArraySet(keyValueArray, getLastParsedKey(text), getLastParsedValue(text));\n    }\n}\n/**\n * Update class bindings using an object literal or class-string on an element.\n *\n * This instruction is meant to apply styling via the `[class]=\"exp\"` template bindings.\n * When classes are applied to the element they will then be updated with\n * respect to any styles/classes set via `classProp`. If any\n * classes are set to falsy then they will be removed from the element.\n *\n * Note that the styling instruction will not be applied until `stylingApply` is called.\n * Note that this will the provided classMap value to the host element if this function is called\n * within a host binding.\n *\n * @param classes A key/value map or string of CSS classes that will be added to the\n *        given element. Any missing classes (that have already been applied to the element\n *        beforehand) will be removed (unset) from the element's list of CSS classes.\n *\n * @codeGenApi\n */\nfunction ɵɵclassMap(classes) {\n    checkStylingMap(classKeyValueArraySet, classStringParser, classes, true);\n}\n/**\n * Parse text as class and add values to KeyValueArray.\n *\n * This code is pulled out to a separate function so that it can be tree shaken away if it is not\n * needed. It is only referenced from `ɵɵclassMap`.\n *\n * @param keyValueArray KeyValueArray to add parsed values to.\n * @param text text to parse.\n */\nfunction classStringParser(keyValueArray, text) {\n    for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\n        keyValueArraySet(keyValueArray, getLastParsedKey(text), true);\n    }\n}\n/**\n * Common code between `ɵɵclassProp` and `ɵɵstyleProp`.\n *\n * @param prop property name.\n * @param value binding value.\n * @param suffix suffix for the property (e.g. `em` or `px`)\n * @param isClassBased `true` if `class` change (`false` if `style`)\n */\nfunction checkStylingProperty(prop, value, suffix, isClassBased) {\n    const lView = getLView();\n    const tView = getTView();\n    // Styling instructions use 2 slots per binding.\n    // 1. one for the value / TStylingKey\n    // 2. one for the intermittent-value / TStylingRange\n    const bindingIndex = incrementBindingIndex(2);\n    if (tView.firstUpdatePass) {\n        stylingFirstUpdatePass(tView, prop, bindingIndex, isClassBased);\n    }\n    if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {\n        const tNode = tView.data[getSelectedIndex()];\n        updateStyling(tView, tNode, lView, lView[RENDERER], prop, lView[bindingIndex + 1] = normalizeSuffix(value, suffix), isClassBased, bindingIndex);\n    }\n}\n/**\n * Common code between `ɵɵclassMap` and `ɵɵstyleMap`.\n *\n * @param keyValueArraySet (See `keyValueArraySet` in \"util/array_utils\") Gets passed in as a\n *        function so that `style` can be processed. This is done for tree shaking purposes.\n * @param stringParser Parser used to parse `value` if `string`. (Passed in as `style` and `class`\n *        have different parsers.)\n * @param value bound value from application\n * @param isClassBased `true` if `class` change (`false` if `style`)\n */\nfunction checkStylingMap(keyValueArraySet, stringParser, value, isClassBased) {\n    const tView = getTView();\n    const bindingIndex = incrementBindingIndex(2);\n    if (tView.firstUpdatePass) {\n        stylingFirstUpdatePass(tView, null, bindingIndex, isClassBased);\n    }\n    const lView = getLView();\n    if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {\n        // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the\n        // if so as not to read unnecessarily.\n        const tNode = tView.data[getSelectedIndex()];\n        if (hasStylingInputShadow(tNode, isClassBased) && !isInHostBindings(tView, bindingIndex)) {\n            if (ngDevMode) {\n                // verify that if we are shadowing then `TData` is appropriately marked so that we skip\n                // processing this binding in styling resolution.\n                const tStylingKey = tView.data[bindingIndex];\n                assertEqual(Array.isArray(tStylingKey) ? tStylingKey[1] : tStylingKey, false, 'Styling linked list shadow input should be marked as \\'false\\'');\n            }\n            // VE does not concatenate the static portion like we are doing here.\n            // Instead VE just ignores the static completely if dynamic binding is present.\n            // Because of locality we have already set the static portion because we don't know if there\n            // is a dynamic portion until later. If we would ignore the static portion it would look like\n            // the binding has removed it. This would confuse `[ngStyle]`/`[ngClass]` to do the wrong\n            // thing as it would think that the static portion was removed. For this reason we\n            // concatenate it so that `[ngStyle]`/`[ngClass]`  can continue to work on changed.\n            let staticPrefix = isClassBased ? tNode.classesWithoutHost : tNode.stylesWithoutHost;\n            ngDevMode && isClassBased === false && staticPrefix !== null &&\n                assertEqual(staticPrefix.endsWith(';'), true, 'Expecting static portion to end with \\';\\'');\n            if (staticPrefix !== null) {\n                // We want to make sure that falsy values of `value` become empty strings.\n                value = concatStringsWithSpace(staticPrefix, value ? value : '');\n            }\n            // Given `<div [style] my-dir>` such that `my-dir` has `@Input('style')`.\n            // This takes over the `[style]` binding. (Same for `[class]`)\n            setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased);\n        }\n        else {\n            updateStylingMap(tView, tNode, lView, lView[RENDERER], lView[bindingIndex + 1], lView[bindingIndex + 1] = toStylingKeyValueArray(keyValueArraySet, stringParser, value), isClassBased, bindingIndex);\n        }\n    }\n}\n/**\n * Determines when the binding is in `hostBindings` section\n *\n * @param tView Current `TView`\n * @param bindingIndex index of binding which we would like if it is in `hostBindings`\n */\nfunction isInHostBindings(tView, bindingIndex) {\n    // All host bindings are placed after the expando section.\n    return bindingIndex >= tView.expandoStartIndex;\n}\n/**\n * Collects the necessary information to insert the binding into a linked list of style bindings\n * using `insertTStylingBinding`.\n *\n * @param tView `TView` where the binding linked list will be stored.\n * @param tStylingKey Property/key of the binding.\n * @param bindingIndex Index of binding associated with the `prop`\n * @param isClassBased `true` if `class` change (`false` if `style`)\n */\nfunction stylingFirstUpdatePass(tView, tStylingKey, bindingIndex, isClassBased) {\n    ngDevMode && assertFirstUpdatePass(tView);\n    const tData = tView.data;\n    if (tData[bindingIndex + 1] === null) {\n        // The above check is necessary because we don't clear first update pass until first successful\n        // (no exception) template execution. This prevents the styling instruction from double adding\n        // itself to the list.\n        // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the\n        // if so as not to read unnecessarily.\n        const tNode = tData[getSelectedIndex()];\n        ngDevMode && assertDefined(tNode, 'TNode expected');\n        const isHostBindings = isInHostBindings(tView, bindingIndex);\n        if (hasStylingInputShadow(tNode, isClassBased) && tStylingKey === null && !isHostBindings) {\n            // `tStylingKey === null` implies that we are either `[style]` or `[class]` binding.\n            // If there is a directive which uses `@Input('style')` or `@Input('class')` than\n            // we need to neutralize this binding since that directive is shadowing it.\n            // We turn this into a noop by setting the key to `false`\n            tStylingKey = false;\n        }\n        tStylingKey = wrapInStaticStylingKey(tData, tNode, tStylingKey, isClassBased);\n        insertTStylingBinding(tData, tNode, tStylingKey, bindingIndex, isHostBindings, isClassBased);\n    }\n}\n/**\n * Adds static styling information to the binding if applicable.\n *\n * The linked list of styles not only stores the list and keys, but also stores static styling\n * information on some of the keys. This function determines if the key should contain the styling\n * information and computes it.\n *\n * See `TStylingStatic` for more details.\n *\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param stylingKey `TStylingKeyPrimitive` which may need to be wrapped into `TStylingKey`\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction wrapInStaticStylingKey(tData, tNode, stylingKey, isClassBased) {\n    const hostDirectiveDef = getCurrentDirectiveDef(tData);\n    let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;\n    if (hostDirectiveDef === null) {\n        // We are in template node.\n        // If template node already had styling instruction then it has already collected the static\n        // styling and there is no need to collect them again. We know that we are the first styling\n        // instruction because the `TNode.*Bindings` points to 0 (nothing has been inserted yet).\n        const isFirstStylingInstructionInTemplate = (isClassBased ? tNode.classBindings : tNode.styleBindings) === 0;\n        if (isFirstStylingInstructionInTemplate) {\n            // It would be nice to be able to get the statics from `mergeAttrs`, however, at this point\n            // they are already merged and it would not be possible to figure which property belongs where\n            // in the priority.\n            stylingKey = collectStylingFromDirectives(null, tData, tNode, stylingKey, isClassBased);\n            stylingKey = collectStylingFromTAttrs(stylingKey, tNode.attrs, isClassBased);\n            // We know that if we have styling binding in template we can't have residual.\n            residual = null;\n        }\n    }\n    else {\n        // We are in host binding node and there was no binding instruction in template node.\n        // This means that we need to compute the residual.\n        const directiveStylingLast = tNode.directiveStylingLast;\n        const isFirstStylingInstructionInHostBinding = directiveStylingLast === -1 || tData[directiveStylingLast] !== hostDirectiveDef;\n        if (isFirstStylingInstructionInHostBinding) {\n            stylingKey =\n                collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased);\n            if (residual === null) {\n                // - If `null` than either:\n                //    - Template styling instruction already ran and it has consumed the static\n                //      styling into its `TStylingKey` and so there is no need to update residual. Instead\n                //      we need to update the `TStylingKey` associated with the first template node\n                //      instruction. OR\n                //    - Some other styling instruction ran and determined that there are no residuals\n                let templateStylingKey = getTemplateHeadTStylingKey(tData, tNode, isClassBased);\n                if (templateStylingKey !== undefined && Array.isArray(templateStylingKey)) {\n                    // Only recompute if `templateStylingKey` had static values. (If no static value found\n                    // then there is nothing to do since this operation can only produce less static keys, not\n                    // more.)\n                    templateStylingKey = collectStylingFromDirectives(null, tData, tNode, templateStylingKey[1] /* unwrap previous statics */, isClassBased);\n                    templateStylingKey =\n                        collectStylingFromTAttrs(templateStylingKey, tNode.attrs, isClassBased);\n                    setTemplateHeadTStylingKey(tData, tNode, isClassBased, templateStylingKey);\n                }\n            }\n            else {\n                // We only need to recompute residual if it is not `null`.\n                // - If existing residual (implies there was no template styling). This means that some of\n                //   the statics may have moved from the residual to the `stylingKey` and so we have to\n                //   recompute.\n                // - If `undefined` this is the first time we are running.\n                residual = collectResidual(tData, tNode, isClassBased);\n            }\n        }\n    }\n    if (residual !== undefined) {\n        isClassBased ? (tNode.residualClasses = residual) : (tNode.residualStyles = residual);\n    }\n    return stylingKey;\n}\n/**\n * Retrieve the `TStylingKey` for the template styling instruction.\n *\n * This is needed since `hostBinding` styling instructions are inserted after the template\n * instruction. While the template instruction needs to update the residual in `TNode` the\n * `hostBinding` instructions need to update the `TStylingKey` of the template instruction because\n * the template instruction is downstream from the `hostBindings` instructions.\n *\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @return `TStylingKey` if found or `undefined` if not found.\n */\nfunction getTemplateHeadTStylingKey(tData, tNode, isClassBased) {\n    const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;\n    if (getTStylingRangeNext(bindings) === 0) {\n        // There does not seem to be a styling instruction in the `template`.\n        return undefined;\n    }\n    return tData[getTStylingRangePrev(bindings)];\n}\n/**\n * Update the `TStylingKey` of the first template instruction in `TNode`.\n *\n * Logically `hostBindings` styling instructions are of lower priority than that of the template.\n * However, they execute after the template styling instructions. This means that they get inserted\n * in front of the template styling instructions.\n *\n * If we have a template styling instruction and a new `hostBindings` styling instruction is\n * executed it means that it may need to steal static fields from the template instruction. This\n * method allows us to update the first template instruction `TStylingKey` with a new value.\n *\n * Assume:\n * ```\n * <div my-dir style=\"color: red\" [style.color]=\"tmplExp\"></div>\n *\n * @Directive({\n *   host: {\n *     'style': 'width: 100px',\n *     '[style.color]': 'dirExp',\n *   }\n * })\n * class MyDir {}\n * ```\n *\n * when `[style.color]=\"tmplExp\"` executes it creates this data structure.\n * ```\n *  ['', 'color', 'color', 'red', 'width', '100px'],\n * ```\n *\n * The reason for this is that the template instruction does not know if there are styling\n * instructions and must assume that there are none and must collect all of the static styling.\n * (both\n * `color' and 'width`)\n *\n * When `'[style.color]': 'dirExp',` executes we need to insert a new data into the linked list.\n * ```\n *  ['', 'color', 'width', '100px'],  // newly inserted\n *  ['', 'color', 'color', 'red', 'width', '100px'], // this is wrong\n * ```\n *\n * Notice that the template statics is now wrong as it incorrectly contains `width` so we need to\n * update it like so:\n * ```\n *  ['', 'color', 'width', '100px'],\n *  ['', 'color', 'color', 'red'],    // UPDATE\n * ```\n *\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @param tStylingKey New `TStylingKey` which is replacing the old one.\n */\nfunction setTemplateHeadTStylingKey(tData, tNode, isClassBased, tStylingKey) {\n    const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;\n    ngDevMode &&\n        assertNotEqual(getTStylingRangeNext(bindings), 0, 'Expecting to have at least one template styling binding.');\n    tData[getTStylingRangePrev(bindings)] = tStylingKey;\n}\n/**\n * Collect all static values after the current `TNode.directiveStylingLast` index.\n *\n * Collect the remaining styling information which has not yet been collected by an existing\n * styling instruction.\n *\n * @param tData `TData` where the `DirectiveDefs` are stored.\n * @param tNode `TNode` which contains the directive range.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction collectResidual(tData, tNode, isClassBased) {\n    let residual = undefined;\n    const directiveEnd = tNode.directiveEnd;\n    ngDevMode &&\n        assertNotEqual(tNode.directiveStylingLast, -1, 'By the time this function gets called at least one hostBindings-node styling instruction must have executed.');\n    // We add `1 + tNode.directiveStart` because we need to skip the current directive (as we are\n    // collecting things after the last `hostBindings` directive which had a styling instruction.)\n    for (let i = 1 + tNode.directiveStylingLast; i < directiveEnd; i++) {\n        const attrs = tData[i].hostAttrs;\n        residual = collectStylingFromTAttrs(residual, attrs, isClassBased);\n    }\n    return collectStylingFromTAttrs(residual, tNode.attrs, isClassBased);\n}\n/**\n * Collect the static styling information with lower priority than `hostDirectiveDef`.\n *\n * (This is opposite of residual styling.)\n *\n * @param hostDirectiveDef `DirectiveDef` for which we want to collect lower priority static\n *        styling. (Or `null` if template styling)\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param stylingKey Existing `TStylingKey` to update or wrap.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased) {\n    // We need to loop because there can be directives which have `hostAttrs` but don't have\n    // `hostBindings` so this loop catches up to the current directive..\n    let currentDirective = null;\n    const directiveEnd = tNode.directiveEnd;\n    let directiveStylingLast = tNode.directiveStylingLast;\n    if (directiveStylingLast === -1) {\n        directiveStylingLast = tNode.directiveStart;\n    }\n    else {\n        directiveStylingLast++;\n    }\n    while (directiveStylingLast < directiveEnd) {\n        currentDirective = tData[directiveStylingLast];\n        ngDevMode && assertDefined(currentDirective, 'expected to be defined');\n        stylingKey = collectStylingFromTAttrs(stylingKey, currentDirective.hostAttrs, isClassBased);\n        if (currentDirective === hostDirectiveDef)\n            break;\n        directiveStylingLast++;\n    }\n    if (hostDirectiveDef !== null) {\n        // we only advance the styling cursor if we are collecting data from host bindings.\n        // Template executes before host bindings and so if we would update the index,\n        // host bindings would not get their statics.\n        tNode.directiveStylingLast = directiveStylingLast;\n    }\n    return stylingKey;\n}\n/**\n * Convert `TAttrs` into `TStylingStatic`.\n *\n * @param stylingKey existing `TStylingKey` to update or wrap.\n * @param attrs `TAttributes` to process.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction collectStylingFromTAttrs(stylingKey, attrs, isClassBased) {\n    const desiredMarker = isClassBased ? 1 /* AttributeMarker.Classes */ : 2 /* AttributeMarker.Styles */;\n    let currentMarker = -1 /* AttributeMarker.ImplicitAttributes */;\n    if (attrs !== null) {\n        for (let i = 0; i < attrs.length; i++) {\n            const item = attrs[i];\n            if (typeof item === 'number') {\n                currentMarker = item;\n            }\n            else {\n                if (currentMarker === desiredMarker) {\n                    if (!Array.isArray(stylingKey)) {\n                        stylingKey = stylingKey === undefined ? [] : ['', stylingKey];\n                    }\n                    keyValueArraySet(stylingKey, item, isClassBased ? true : attrs[++i]);\n                }\n            }\n        }\n    }\n    return stylingKey === undefined ? null : stylingKey;\n}\n/**\n * Convert user input to `KeyValueArray`.\n *\n * This function takes user input which could be `string`, Object literal, or iterable and converts\n * it into a consistent representation. The output of this is `KeyValueArray` (which is an array\n * where\n * even indexes contain keys and odd indexes contain values for those keys).\n *\n * The advantage of converting to `KeyValueArray` is that we can perform diff in an input\n * independent\n * way.\n * (ie we can compare `foo bar` to `['bar', 'baz'] and determine a set of changes which need to be\n * applied)\n *\n * The fact that `KeyValueArray` is sorted is very important because it allows us to compute the\n * difference in linear fashion without the need to allocate any additional data.\n *\n * For example if we kept this as a `Map` we would have to iterate over previous `Map` to determine\n * which values need to be deleted, over the new `Map` to determine additions, and we would have to\n * keep additional `Map` to keep track of duplicates or items which have not yet been visited.\n *\n * @param keyValueArraySet (See `keyValueArraySet` in \"util/array_utils\") Gets passed in as a\n *        function so that `style` can be processed. This is done\n *        for tree shaking purposes.\n * @param stringParser The parser is passed in so that it will be tree shakable. See\n *        `styleStringParser` and `classStringParser`\n * @param value The value to parse/convert to `KeyValueArray`\n */\nfunction toStylingKeyValueArray(keyValueArraySet, stringParser, value) {\n    if (value == null /*|| value === undefined */ || value === '')\n        return EMPTY_ARRAY;\n    const styleKeyValueArray = [];\n    const unwrappedValue = unwrapSafeValue(value);\n    if (Array.isArray(unwrappedValue)) {\n        for (let i = 0; i < unwrappedValue.length; i++) {\n            keyValueArraySet(styleKeyValueArray, unwrappedValue[i], true);\n        }\n    }\n    else if (typeof unwrappedValue === 'object') {\n        for (const key in unwrappedValue) {\n            if (unwrappedValue.hasOwnProperty(key)) {\n                keyValueArraySet(styleKeyValueArray, key, unwrappedValue[key]);\n            }\n        }\n    }\n    else if (typeof unwrappedValue === 'string') {\n        stringParser(styleKeyValueArray, unwrappedValue);\n    }\n    else {\n        ngDevMode &&\n            throwError('Unsupported styling type ' + typeof unwrappedValue + ': ' + unwrappedValue);\n    }\n    return styleKeyValueArray;\n}\n/**\n * Set a `value` for a `key`.\n *\n * See: `keyValueArraySet` for details\n *\n * @param keyValueArray KeyValueArray to add to.\n * @param key Style key to add.\n * @param value The value to set.\n */\nfunction styleKeyValueArraySet(keyValueArray, key, value) {\n    keyValueArraySet(keyValueArray, key, unwrapSafeValue(value));\n}\n/**\n * Class-binding-specific function for setting the `value` for a `key`.\n *\n * See: `keyValueArraySet` for details\n *\n * @param keyValueArray KeyValueArray to add to.\n * @param key Style key to add.\n * @param value The value to set.\n */\nfunction classKeyValueArraySet(keyValueArray, key, value) {\n    // We use `classList.add` to eventually add the CSS classes to the DOM node. Any value passed into\n    // `add` is stringified and added to the `class` attribute, e.g. even null, undefined or numbers\n    // will be added. Stringify the key here so that our internal data structure matches the value in\n    // the DOM. The only exceptions are empty strings and strings that contain spaces for which\n    // the browser throws an error. We ignore such values, because the error is somewhat cryptic.\n    const stringKey = String(key);\n    if (stringKey !== '' && !stringKey.includes(' ')) {\n        keyValueArraySet(keyValueArray, stringKey, value);\n    }\n}\n/**\n * Update map based styling.\n *\n * Map based styling could be anything which contains more than one binding. For example `string`,\n * or object literal. Dealing with all of these types would complicate the logic so\n * instead this function expects that the complex input is first converted into normalized\n * `KeyValueArray`. The advantage of normalization is that we get the values sorted, which makes it\n * very cheap to compute deltas between the previous and current value.\n *\n * @param tView Associated `TView.data` contains the linked list of binding priorities.\n * @param tNode `TNode` where the binding is located.\n * @param lView `LView` contains the values associated with other styling binding at this `TNode`.\n * @param renderer Renderer to use if any updates.\n * @param oldKeyValueArray Previous value represented as `KeyValueArray`\n * @param newKeyValueArray Current value represented as `KeyValueArray`\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @param bindingIndex Binding index of the binding.\n */\nfunction updateStylingMap(tView, tNode, lView, renderer, oldKeyValueArray, newKeyValueArray, isClassBased, bindingIndex) {\n    if (oldKeyValueArray === NO_CHANGE) {\n        // On first execution the oldKeyValueArray is NO_CHANGE => treat it as empty KeyValueArray.\n        oldKeyValueArray = EMPTY_ARRAY;\n    }\n    let oldIndex = 0;\n    let newIndex = 0;\n    let oldKey = 0 < oldKeyValueArray.length ? oldKeyValueArray[0] : null;\n    let newKey = 0 < newKeyValueArray.length ? newKeyValueArray[0] : null;\n    while (oldKey !== null || newKey !== null) {\n        ngDevMode && assertLessThan(oldIndex, 999, 'Are we stuck in infinite loop?');\n        ngDevMode && assertLessThan(newIndex, 999, 'Are we stuck in infinite loop?');\n        const oldValue = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex + 1] : undefined;\n        const newValue = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex + 1] : undefined;\n        let setKey = null;\n        let setValue = undefined;\n        if (oldKey === newKey) {\n            // UPDATE: Keys are equal => new value is overwriting old value.\n            oldIndex += 2;\n            newIndex += 2;\n            if (oldValue !== newValue) {\n                setKey = newKey;\n                setValue = newValue;\n            }\n        }\n        else if (newKey === null || oldKey !== null && oldKey < newKey) {\n            // DELETE: oldKey key is missing or we did not find the oldKey in the newValue\n            // (because the keyValueArray is sorted and `newKey` is found later alphabetically).\n            // `\"background\" < \"color\"` so we need to delete `\"background\"` because it is not found in the\n            // new array.\n            oldIndex += 2;\n            setKey = oldKey;\n        }\n        else {\n            // CREATE: newKey's is earlier alphabetically than oldKey's (or no oldKey) => we have new key.\n            // `\"color\" > \"background\"` so we need to add `color` because it is in new array but not in\n            // old array.\n            ngDevMode && assertDefined(newKey, 'Expecting to have a valid key');\n            newIndex += 2;\n            setKey = newKey;\n            setValue = newValue;\n        }\n        if (setKey !== null) {\n            updateStyling(tView, tNode, lView, renderer, setKey, setValue, isClassBased, bindingIndex);\n        }\n        oldKey = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex] : null;\n        newKey = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex] : null;\n    }\n}\n/**\n * Update a simple (property name) styling.\n *\n * This function takes `prop` and updates the DOM to that value. The function takes the binding\n * value as well as binding priority into consideration to determine which value should be written\n * to DOM. (For example it may be determined that there is a higher priority overwrite which blocks\n * the DOM write, or if the value goes to `undefined` a lower priority overwrite may be consulted.)\n *\n * @param tView Associated `TView.data` contains the linked list of binding priorities.\n * @param tNode `TNode` where the binding is located.\n * @param lView `LView` contains the values associated with other styling binding at this `TNode`.\n * @param renderer Renderer to use if any updates.\n * @param prop Either style property name or a class name.\n * @param value Either style value for `prop` or `true`/`false` if `prop` is class.\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @param bindingIndex Binding index of the binding.\n */\nfunction updateStyling(tView, tNode, lView, renderer, prop, value, isClassBased, bindingIndex) {\n    if (!(tNode.type & 3 /* TNodeType.AnyRNode */)) {\n        // It is possible to have styling on non-elements (such as ng-container).\n        // This is rare, but it does happen. In such a case, just ignore the binding.\n        return;\n    }\n    const tData = tView.data;\n    const tRange = tData[bindingIndex + 1];\n    const higherPriorityValue = getTStylingRangeNextDuplicate(tRange) ?\n        findStylingValue(tData, tNode, lView, prop, getTStylingRangeNext(tRange), isClassBased) :\n        undefined;\n    if (!isStylingValuePresent(higherPriorityValue)) {\n        // We don't have a next duplicate, or we did not find a duplicate value.\n        if (!isStylingValuePresent(value)) {\n            // We should delete current value or restore to lower priority value.\n            if (getTStylingRangePrevDuplicate(tRange)) {\n                // We have a possible prev duplicate, let's retrieve it.\n                value = findStylingValue(tData, null, lView, prop, bindingIndex, isClassBased);\n            }\n        }\n        const rNode = getNativeByIndex(getSelectedIndex(), lView);\n        applyStyling(renderer, isClassBased, rNode, prop, value);\n    }\n}\n/**\n * Search for styling value with higher priority which is overwriting current value, or a\n * value of lower priority to which we should fall back if the value is `undefined`.\n *\n * When value is being applied at a location, related values need to be consulted.\n * - If there is a higher priority binding, we should be using that one instead.\n *   For example `<div  [style]=\"{color:exp1}\" [style.color]=\"exp2\">` change to `exp1`\n *   requires that we check `exp2` to see if it is set to value other than `undefined`.\n * - If there is a lower priority binding and we are changing to `undefined`\n *   For example `<div  [style]=\"{color:exp1}\" [style.color]=\"exp2\">` change to `exp2` to\n *   `undefined` requires that we check `exp1` (and static values) and use that as new value.\n *\n * NOTE: The styling stores two values.\n * 1. The raw value which came from the application is stored at `index + 0` location. (This value\n *    is used for dirty checking).\n * 2. The normalized value is stored at `index + 1`.\n *\n * @param tData `TData` used for traversing the priority.\n * @param tNode `TNode` to use for resolving static styling. Also controls search direction.\n *   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.\n *      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.\n *   - `null` search prev and go all the way to end. Return last value where\n *     `isStylingValuePresent(value)` is true.\n * @param lView `LView` used for retrieving the actual values.\n * @param prop Property which we are interested in.\n * @param index Starting index in the linked list of styling bindings where the search should start.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction findStylingValue(tData, tNode, lView, prop, index, isClassBased) {\n    // `TNode` to use for resolving static styling. Also controls search direction.\n    //   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.\n    //      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.\n    //   - `null` search prev and go all the way to end. Return last value where\n    //     `isStylingValuePresent(value)` is true.\n    const isPrevDirection = tNode === null;\n    let value = undefined;\n    while (index > 0) {\n        const rawKey = tData[index];\n        const containsStatics = Array.isArray(rawKey);\n        // Unwrap the key if we contain static values.\n        const key = containsStatics ? rawKey[1] : rawKey;\n        const isStylingMap = key === null;\n        let valueAtLViewIndex = lView[index + 1];\n        if (valueAtLViewIndex === NO_CHANGE) {\n            // In firstUpdatePass the styling instructions create a linked list of styling.\n            // On subsequent passes it is possible for a styling instruction to try to read a binding\n            // which\n            // has not yet executed. In that case we will find `NO_CHANGE` and we should assume that\n            // we have `undefined` (or empty array in case of styling-map instruction) instead. This\n            // allows the resolution to apply the value (which may later be overwritten when the\n            // binding actually executes.)\n            valueAtLViewIndex = isStylingMap ? EMPTY_ARRAY : undefined;\n        }\n        let currentValue = isStylingMap ? keyValueArrayGet(valueAtLViewIndex, prop) :\n            (key === prop ? valueAtLViewIndex : undefined);\n        if (containsStatics && !isStylingValuePresent(currentValue)) {\n            currentValue = keyValueArrayGet(rawKey, prop);\n        }\n        if (isStylingValuePresent(currentValue)) {\n            value = currentValue;\n            if (isPrevDirection) {\n                return value;\n            }\n        }\n        const tRange = tData[index + 1];\n        index = isPrevDirection ? getTStylingRangePrev(tRange) : getTStylingRangeNext(tRange);\n    }\n    if (tNode !== null) {\n        // in case where we are going in next direction AND we did not find anything, we need to\n        // consult residual styling\n        let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;\n        if (residual != null /** OR residual !=== undefined */) {\n            value = keyValueArrayGet(residual, prop);\n        }\n    }\n    return value;\n}\n/**\n * Determines if the binding value should be used (or if the value is 'undefined' and hence priority\n * resolution should be used.)\n *\n * @param value Binding style value.\n */\nfunction isStylingValuePresent(value) {\n    // Currently only `undefined` value is considered non-binding. That is `undefined` says I don't\n    // have an opinion as to what this binding should be and you should consult other bindings by\n    // priority to determine the valid value.\n    // This is extracted into a single function so that we have a single place to control this.\n    return value !== undefined;\n}\n/**\n * Normalizes and/or adds a suffix to the value.\n *\n * If value is `null`/`undefined` no suffix is added\n * @param value\n * @param suffix\n */\nfunction normalizeSuffix(value, suffix) {\n    if (value == null || value === '') {\n        // do nothing\n        // Do not add the suffix if the value is going to be empty.\n        // As it produce invalid CSS, which the browsers will automatically omit but Domino will not.\n        // Example: `\"left\": \"px;\"` instead of `\"left\": \"\"`.\n    }\n    else if (typeof suffix === 'string') {\n        value = value + suffix;\n    }\n    else if (typeof value === 'object') {\n        value = stringify(unwrapSafeValue(value));\n    }\n    return value;\n}\n/**\n * Tests if the `TNode` has input shadow.\n *\n * An input shadow is when a directive steals (shadows) the input by using `@Input('style')` or\n * `@Input('class')` as input.\n *\n * @param tNode `TNode` which we would like to see if it has shadow.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction hasStylingInputShadow(tNode, isClassBased) {\n    return (tNode.flags & (isClassBased ? 8 /* TNodeFlags.hasClassInput */ : 16 /* TNodeFlags.hasStyleInput */)) !== 0;\n}\n\n/**\n *\n * Update an interpolated class on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate1('prefix', v0, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate1(prefix, v0, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate2('prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate2(prefix, v0, i0, v1, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate3(\n * 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate4(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate5(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate6(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate7(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate8(\n *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n * Update an interpolated class on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolateV(\n *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *.\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolateV(values) {\n    const lView = getLView();\n    const interpolatedValue = interpolationV(lView, values);\n    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/*!\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Instruction that returns the component instance in which the current instruction is executing.\n * This is a constant-time version of `nextContent` for the case where we know that we need the\n * component instance specifically, rather than the context of a particular template.\n *\n * @codeGenApi\n */\nfunction ɵɵcomponentInstance() {\n    const instance = getLView()[DECLARATION_COMPONENT_VIEW][CONTEXT];\n    ngDevMode && assertDefined(instance, 'Expected component instance to be defined');\n    return instance;\n}\n\nconst AT_THIS_LOCATION = '<-- AT THIS LOCATION';\n/**\n * Retrieves a user friendly string for a given TNodeType for use in\n * friendly error messages\n *\n * @param tNodeType\n * @returns\n */\nfunction getFriendlyStringFromTNodeType(tNodeType) {\n    switch (tNodeType) {\n        case 4 /* TNodeType.Container */:\n            return 'view container';\n        case 2 /* TNodeType.Element */:\n            return 'element';\n        case 8 /* TNodeType.ElementContainer */:\n            return 'ng-container';\n        case 32 /* TNodeType.Icu */:\n            return 'icu';\n        case 64 /* TNodeType.Placeholder */:\n            return 'i18n';\n        case 16 /* TNodeType.Projection */:\n            return 'projection';\n        case 1 /* TNodeType.Text */:\n            return 'text';\n        default:\n            // This should not happen as we cover all possible TNode types above.\n            return '<unknown>';\n    }\n}\n/**\n * Validates that provided nodes match during the hydration process.\n */\nfunction validateMatchingNode(node, nodeType, tagName, lView, tNode, isViewContainerAnchor = false) {\n    if (!node ||\n        (node.nodeType !== nodeType ||\n            (node.nodeType === Node.ELEMENT_NODE &&\n                node.tagName.toLowerCase() !== tagName?.toLowerCase()))) {\n        const expectedNode = shortRNodeDescription(nodeType, tagName, null);\n        let header = `During hydration Angular expected ${expectedNode} but `;\n        const hostComponentDef = getDeclarationComponentDef(lView);\n        const componentClassName = hostComponentDef?.type?.name;\n        const expected = `Angular expected this DOM:\\n\\n${describeExpectedDom(lView, tNode, isViewContainerAnchor)}\\n\\n`;\n        let actual = '';\n        if (!node) {\n            // No node found during hydration.\n            header += `the node was not found.\\n\\n`;\n        }\n        else {\n            const actualNode = shortRNodeDescription(node.nodeType, node.tagName ?? null, node.textContent ?? null);\n            header += `found ${actualNode}.\\n\\n`;\n            actual = `Actual DOM is:\\n\\n${describeDomFromNode(node)}\\n\\n`;\n        }\n        const footer = getHydrationErrorFooter(componentClassName);\n        const message = header + expected + actual + getHydrationAttributeNote() + footer;\n        throw new RuntimeError(-500 /* RuntimeErrorCode.HYDRATION_NODE_MISMATCH */, message);\n    }\n}\n/**\n * Validates that a given node has sibling nodes\n */\nfunction validateSiblingNodeExists(node) {\n    validateNodeExists(node);\n    if (!node.nextSibling) {\n        const header = 'During hydration Angular expected more sibling nodes to be present.\\n\\n';\n        const actual = `Actual DOM is:\\n\\n${describeDomFromNode(node)}\\n\\n`;\n        const footer = getHydrationErrorFooter();\n        const message = header + actual + footer;\n        throw new RuntimeError(-501 /* RuntimeErrorCode.HYDRATION_MISSING_SIBLINGS */, message);\n    }\n}\n/**\n * Validates that a node exists or throws\n */\nfunction validateNodeExists(node, lView = null, tNode = null) {\n    if (!node) {\n        const header = 'During hydration, Angular expected an element to be present at this location.\\n\\n';\n        let expected = '';\n        let footer = '';\n        if (lView !== null && tNode !== null) {\n            expected = `${describeExpectedDom(lView, tNode, false)}\\n\\n`;\n            footer = getHydrationErrorFooter();\n        }\n        throw new RuntimeError(-502 /* RuntimeErrorCode.HYDRATION_MISSING_NODE */, header + expected + footer);\n    }\n}\n/**\n * Builds the hydration error message when a node is not found\n *\n * @param lView the LView where the node exists\n * @param tNode the TNode\n */\nfunction nodeNotFoundError(lView, tNode) {\n    const header = 'During serialization, Angular was unable to find an element in the DOM:\\n\\n';\n    const expected = `${describeExpectedDom(lView, tNode, false)}\\n\\n`;\n    const footer = getHydrationErrorFooter();\n    throw new RuntimeError(-502 /* RuntimeErrorCode.HYDRATION_MISSING_NODE */, header + expected + footer);\n}\n/**\n * Builds a hydration error message when a node is not found at a path location\n *\n * @param host the Host Node\n * @param path the path to the node\n */\nfunction nodeNotFoundAtPathError(host, path) {\n    const header = `During hydration Angular was unable to locate a node ` +\n        `using the \"${path}\" path, starting from the ${describeRNode(host)} node.\\n\\n`;\n    const footer = getHydrationErrorFooter();\n    throw new RuntimeError(-502 /* RuntimeErrorCode.HYDRATION_MISSING_NODE */, header + footer);\n}\n/**\n * Builds the hydration error message in the case that dom nodes are created outside of\n * the Angular context and are being used as projected nodes\n *\n * @param lView the LView\n * @param tNode the TNode\n * @returns an error\n */\nfunction unsupportedProjectionOfDomNodes(rNode) {\n    const header = 'During serialization, Angular detected DOM nodes ' +\n        'that were created outside of Angular context and provided as projectable nodes ' +\n        '(likely via `ViewContainerRef.createComponent` or `createComponent` APIs). ' +\n        'Hydration is not supported for such cases, consider refactoring the code to avoid ' +\n        'this pattern or using `ngSkipHydration` on the host element of the component.\\n\\n';\n    const actual = `${describeDomFromNode(rNode)}\\n\\n`;\n    const message = header + actual + getHydrationAttributeNote();\n    return new RuntimeError(-503 /* RuntimeErrorCode.UNSUPPORTED_PROJECTION_DOM_NODES */, message);\n}\n/**\n * Builds the hydration error message in the case that ngSkipHydration was used on a\n * node that is not a component host element or host binding\n *\n * @param rNode the HTML Element\n * @returns an error\n */\nfunction invalidSkipHydrationHost(rNode) {\n    const header = 'The `ngSkipHydration` flag is applied on a node ' +\n        'that doesn\\'t act as a component host. Hydration can be ' +\n        'skipped only on per-component basis.\\n\\n';\n    const actual = `${describeDomFromNode(rNode)}\\n\\n`;\n    const footer = 'Please move the `ngSkipHydration` attribute to the component host element.\\n\\n';\n    const message = header + actual + footer;\n    return new RuntimeError(-504 /* RuntimeErrorCode.INVALID_SKIP_HYDRATION_HOST */, message);\n}\n// Stringification methods\n/**\n * Stringifies a given TNode's attributes\n *\n * @param tNode a provided TNode\n * @returns string\n */\nfunction stringifyTNodeAttrs(tNode) {\n    const results = [];\n    if (tNode.attrs) {\n        for (let i = 0; i < tNode.attrs.length;) {\n            const attrName = tNode.attrs[i++];\n            // Once we reach the first flag, we know that the list of\n            // attributes is over.\n            if (typeof attrName == 'number') {\n                break;\n            }\n            const attrValue = tNode.attrs[i++];\n            results.push(`${attrName}=\"${shorten(attrValue)}\"`);\n        }\n    }\n    return results.join(' ');\n}\n/**\n * The list of internal attributes that should be filtered out while\n * producing an error message.\n */\nconst internalAttrs = new Set(['ngh', 'ng-version', 'ng-server-context']);\n/**\n * Stringifies an HTML Element's attributes\n *\n * @param rNode an HTML Element\n * @returns string\n */\nfunction stringifyRNodeAttrs(rNode) {\n    const results = [];\n    for (let i = 0; i < rNode.attributes.length; i++) {\n        const attr = rNode.attributes[i];\n        if (internalAttrs.has(attr.name))\n            continue;\n        results.push(`${attr.name}=\"${shorten(attr.value)}\"`);\n    }\n    return results.join(' ');\n}\n// Methods for Describing the DOM\n/**\n * Converts a tNode to a helpful readable string value for use in error messages\n *\n * @param tNode a given TNode\n * @param innerContent the content of the node\n * @returns string\n */\nfunction describeTNode(tNode, innerContent = '…') {\n    switch (tNode.type) {\n        case 1 /* TNodeType.Text */:\n            const content = tNode.value ? `(${tNode.value})` : '';\n            return `#text${content}`;\n        case 2 /* TNodeType.Element */:\n            const attrs = stringifyTNodeAttrs(tNode);\n            const tag = tNode.value.toLowerCase();\n            return `<${tag}${attrs ? ' ' + attrs : ''}>${innerContent}</${tag}>`;\n        case 8 /* TNodeType.ElementContainer */:\n            return '<!-- ng-container -->';\n        case 4 /* TNodeType.Container */:\n            return '<!-- container -->';\n        default:\n            const typeAsString = getFriendlyStringFromTNodeType(tNode.type);\n            return `#node(${typeAsString})`;\n    }\n}\n/**\n * Converts an RNode to a helpful readable string value for use in error messages\n *\n * @param rNode a given RNode\n * @param innerContent the content of the node\n * @returns string\n */\nfunction describeRNode(rNode, innerContent = '…') {\n    const node = rNode;\n    switch (node.nodeType) {\n        case Node.ELEMENT_NODE:\n            const tag = node.tagName.toLowerCase();\n            const attrs = stringifyRNodeAttrs(node);\n            return `<${tag}${attrs ? ' ' + attrs : ''}>${innerContent}</${tag}>`;\n        case Node.TEXT_NODE:\n            const content = node.textContent ? shorten(node.textContent) : '';\n            return `#text${content ? `(${content})` : ''}`;\n        case Node.COMMENT_NODE:\n            return `<!-- ${shorten(node.textContent ?? '')} -->`;\n        default:\n            return `#node(${node.nodeType})`;\n    }\n}\n/**\n * Builds the string containing the expected DOM present given the LView and TNode\n * values for a readable error message\n *\n * @param lView the lView containing the DOM\n * @param tNode the tNode\n * @param isViewContainerAnchor boolean\n * @returns string\n */\nfunction describeExpectedDom(lView, tNode, isViewContainerAnchor) {\n    const spacer = '  ';\n    let content = '';\n    if (tNode.prev) {\n        content += spacer + '…\\n';\n        content += spacer + describeTNode(tNode.prev) + '\\n';\n    }\n    else if (tNode.type && tNode.type & 12 /* TNodeType.AnyContainer */) {\n        content += spacer + '…\\n';\n    }\n    if (isViewContainerAnchor) {\n        content += spacer + describeTNode(tNode) + '\\n';\n        content += spacer + `<!-- container -->  ${AT_THIS_LOCATION}\\n`;\n    }\n    else {\n        content += spacer + describeTNode(tNode) + `  ${AT_THIS_LOCATION}\\n`;\n    }\n    content += spacer + '…\\n';\n    const parentRNode = tNode.type ? getParentRElement(lView[TVIEW], tNode, lView) : null;\n    if (parentRNode) {\n        content = describeRNode(parentRNode, '\\n' + content);\n    }\n    return content;\n}\n/**\n * Builds the string containing the DOM present around a given RNode for a\n * readable error message\n *\n * @param node the RNode\n * @returns string\n */\nfunction describeDomFromNode(node) {\n    const spacer = '  ';\n    let content = '';\n    const currentNode = node;\n    if (currentNode.previousSibling) {\n        content += spacer + '…\\n';\n        content += spacer + describeRNode(currentNode.previousSibling) + '\\n';\n    }\n    content += spacer + describeRNode(currentNode) + `  ${AT_THIS_LOCATION}\\n`;\n    if (node.nextSibling) {\n        content += spacer + '…\\n';\n    }\n    if (node.parentNode) {\n        content = describeRNode(currentNode.parentNode, '\\n' + content);\n    }\n    return content;\n}\n/**\n * Shortens the description of a given RNode by its type for readability\n *\n * @param nodeType the type of node\n * @param tagName the node tag name\n * @param textContent the text content in the node\n * @returns string\n */\nfunction shortRNodeDescription(nodeType, tagName, textContent) {\n    switch (nodeType) {\n        case Node.ELEMENT_NODE:\n            return `<${tagName.toLowerCase()}>`;\n        case Node.TEXT_NODE:\n            const content = textContent ? ` (with the \"${shorten(textContent)}\" content)` : '';\n            return `a text node${content}`;\n        case Node.COMMENT_NODE:\n            return 'a comment node';\n        default:\n            return `#node(nodeType=${nodeType})`;\n    }\n}\n/**\n * Builds the footer hydration error message\n *\n * @param componentClassName the name of the component class\n * @returns string\n */\nfunction getHydrationErrorFooter(componentClassName) {\n    const componentInfo = componentClassName ? `the \"${componentClassName}\"` : 'corresponding';\n    return `To fix this problem:\\n` +\n        `  * check ${componentInfo} component for hydration-related issues\\n` +\n        `  * check to see if your template has valid HTML structure\\n` +\n        `  * or skip hydration by adding the \\`ngSkipHydration\\` attribute ` +\n        `to its host node in a template\\n\\n`;\n}\n/**\n * An attribute related note for hydration errors\n */\nfunction getHydrationAttributeNote() {\n    return 'Note: attributes are only displayed to better represent the DOM' +\n        ' but have no effect on hydration mismatches.\\n\\n';\n}\n// Node string utility functions\n/**\n * Strips all newlines out of a given string\n *\n * @param input a string to be cleared of new line characters\n * @returns\n */\nfunction stripNewlines(input) {\n    return input.replace(/\\s+/gm, '');\n}\n/**\n * Reduces a string down to a maximum length of characters with ellipsis for readability\n *\n * @param input a string input\n * @param maxLength a maximum length in characters\n * @returns string\n */\nfunction shorten(input, maxLength = 50) {\n    if (!input) {\n        return '';\n    }\n    input = stripNewlines(input);\n    return input.length > maxLength ? `${input.substring(0, maxLength - 1)}…` : input;\n}\n\n/**\n * Removes all dehydrated views from a given LContainer:\n * both in internal data structure, as well as removing\n * corresponding DOM nodes that belong to that dehydrated view.\n */\nfunction removeDehydratedViews(lContainer) {\n    const views = lContainer[DEHYDRATED_VIEWS] ?? [];\n    const parentLView = lContainer[PARENT];\n    const renderer = parentLView[RENDERER];\n    for (const view of views) {\n        removeDehydratedView(view, renderer);\n        ngDevMode && ngDevMode.dehydratedViewsRemoved++;\n    }\n    // Reset the value to an empty array to indicate that no\n    // further processing of dehydrated views is needed for\n    // this view container (i.e. do not trigger the lookup process\n    // once again in case a `ViewContainerRef` is created later).\n    lContainer[DEHYDRATED_VIEWS] = EMPTY_ARRAY;\n}\n/**\n * Helper function to remove all nodes from a dehydrated view.\n */\nfunction removeDehydratedView(dehydratedView, renderer) {\n    let nodesRemoved = 0;\n    let currentRNode = dehydratedView.firstChild;\n    if (currentRNode) {\n        const numNodes = dehydratedView.data[NUM_ROOT_NODES];\n        while (nodesRemoved < numNodes) {\n            ngDevMode && validateSiblingNodeExists(currentRNode);\n            const nextSibling = currentRNode.nextSibling;\n            nativeRemoveNode(renderer, currentRNode, false);\n            currentRNode = nextSibling;\n            nodesRemoved++;\n        }\n    }\n}\n/**\n * Walks over all views within this LContainer invokes dehydrated views\n * cleanup function for each one.\n */\nfunction cleanupLContainer(lContainer) {\n    removeDehydratedViews(lContainer);\n    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n        cleanupLView(lContainer[i]);\n    }\n}\n/**\n * Walks over `LContainer`s and components registered within\n * this LView and invokes dehydrated views cleanup function for each one.\n */\nfunction cleanupLView(lView) {\n    const tView = lView[TVIEW];\n    for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {\n        if (isLContainer(lView[i])) {\n            const lContainer = lView[i];\n            cleanupLContainer(lContainer);\n        }\n        else if (isLView(lView[i])) {\n            // This is a component, enter the `cleanupLView` recursively.\n            cleanupLView(lView[i]);\n        }\n    }\n}\n/**\n * Walks over all views registered within the ApplicationRef and removes\n * all dehydrated views from all `LContainer`s along the way.\n */\nfunction cleanupDehydratedViews(appRef) {\n    const viewRefs = appRef._views;\n    for (const viewRef of viewRefs) {\n        const lNode = getLNodeForHydration(viewRef);\n        // An `lView` might be `null` if a `ViewRef` represents\n        // an embedded view (not a component view).\n        if (lNode !== null && lNode[HOST] !== null) {\n            if (isLView(lNode)) {\n                cleanupLView(lNode);\n            }\n            else {\n                // Cleanup in the root component view\n                const componentLView = lNode[HOST];\n                cleanupLView(componentLView);\n                // Cleanup in all views within this view container\n                cleanupLContainer(lNode);\n            }\n            ngDevMode && ngDevMode.dehydratedViewsCleanupRuns++;\n        }\n    }\n}\n\n/**\n * Regexp that extracts a reference node information from the compressed node location.\n * The reference node is represented as either:\n *  - a number which points to an LView slot\n *  - the `b` char which indicates that the lookup should start from the `document.body`\n *  - the `h` char to start lookup from the component host node (`lView[HOST]`)\n */\nconst REF_EXTRACTOR_REGEXP = new RegExp(`^(\\\\d+)*(${REFERENCE_NODE_BODY}|${REFERENCE_NODE_HOST})*(.*)`);\n/**\n * Helper function that takes a reference node location and a set of navigation steps\n * (from the reference node) to a target node and outputs a string that represents\n * a location.\n *\n * For example, given: referenceNode = 'b' (body) and path = ['firstChild', 'firstChild',\n * 'nextSibling'], the function returns: `bf2n`.\n */\nfunction compressNodeLocation(referenceNode, path) {\n    const result = [referenceNode];\n    for (const segment of path) {\n        const lastIdx = result.length - 1;\n        if (lastIdx > 0 && result[lastIdx - 1] === segment) {\n            // An empty string in a count slot represents 1 occurrence of an instruction.\n            const value = (result[lastIdx] || 1);\n            result[lastIdx] = value + 1;\n        }\n        else {\n            // Adding a new segment to the path.\n            // Using an empty string in a counter field to avoid encoding `1`s\n            // into the path, since they are implicit (e.g. `f1n1` vs `fn`), so\n            // it's enough to have a single char in this case.\n            result.push(segment, '');\n        }\n    }\n    return result.join('');\n}\n/**\n * Helper function that reverts the `compressNodeLocation` and transforms a given\n * string into an array where at 0th position there is a reference node info and\n * after that it contains information (in pairs) about a navigation step and the\n * number of repetitions.\n *\n * For example, the path like 'bf2n' will be transformed to:\n * ['b', 'firstChild', 2, 'nextSibling', 1].\n *\n * This information is later consumed by the code that navigates the DOM to find\n * a given node by its location.\n */\nfunction decompressNodeLocation(path) {\n    const matches = path.match(REF_EXTRACTOR_REGEXP);\n    const [_, refNodeId, refNodeName, rest] = matches;\n    // If a reference node is represented by an index, transform it to a number.\n    const ref = refNodeId ? parseInt(refNodeId, 10) : refNodeName;\n    const steps = [];\n    // Match all segments in a path.\n    for (const [_, step, count] of rest.matchAll(/(f|n)(\\d*)/g)) {\n        const repeat = parseInt(count, 10) || 1;\n        steps.push(step, repeat);\n    }\n    return [ref, ...steps];\n}\n\n/** Whether current TNode is a first node in an <ng-container>. */\nfunction isFirstElementInNgContainer(tNode) {\n    return !tNode.prev && tNode.parent?.type === 8 /* TNodeType.ElementContainer */;\n}\n/** Returns an instruction index (subtracting HEADER_OFFSET). */\nfunction getNoOffsetIndex(tNode) {\n    return tNode.index - HEADER_OFFSET;\n}\n/**\n * Check whether a given node exists, but is disconnected from the DOM.\n *\n * Note: we leverage the fact that we have this information available in the DOM emulation\n * layer (in Domino) for now. Longer-term solution should not rely on the DOM emulation and\n * only use internal data structures and state to compute this information.\n */\nfunction isDisconnectedNode(tNode, lView) {\n    return !(tNode.type & 16 /* TNodeType.Projection */) && !!lView[tNode.index] &&\n        !unwrapRNode(lView[tNode.index])?.isConnected;\n}\n/**\n * Locate a node in DOM tree that corresponds to a given TNode.\n *\n * @param hydrationInfo The hydration annotation data\n * @param tView the current tView\n * @param lView the current lView\n * @param tNode the current tNode\n * @returns an RNode that represents a given tNode\n */\nfunction locateNextRNode(hydrationInfo, tView, lView, tNode) {\n    let native = null;\n    const noOffsetIndex = getNoOffsetIndex(tNode);\n    const nodes = hydrationInfo.data[NODES];\n    if (nodes?.[noOffsetIndex]) {\n        // We know the exact location of the node.\n        native = locateRNodeByPath(nodes[noOffsetIndex], lView);\n    }\n    else if (tView.firstChild === tNode) {\n        // We create a first node in this view, so we use a reference\n        // to the first child in this DOM segment.\n        native = hydrationInfo.firstChild;\n    }\n    else {\n        // Locate a node based on a previous sibling or a parent node.\n        const previousTNodeParent = tNode.prev === null;\n        const previousTNode = (tNode.prev ?? tNode.parent);\n        ngDevMode &&\n            assertDefined(previousTNode, 'Unexpected state: current TNode does not have a connection ' +\n                'to the previous node or a parent node.');\n        if (isFirstElementInNgContainer(tNode)) {\n            const noOffsetParentIndex = getNoOffsetIndex(tNode.parent);\n            native = getSegmentHead(hydrationInfo, noOffsetParentIndex);\n        }\n        else {\n            let previousRElement = getNativeByTNode(previousTNode, lView);\n            if (previousTNodeParent) {\n                native = previousRElement.firstChild;\n            }\n            else {\n                // If the previous node is an element, but it also has container info,\n                // this means that we are processing a node like `<div #vcrTarget>`, which is\n                // represented in the DOM as `<div></div>...<!--container-->`.\n                // In this case, there are nodes *after* this element and we need to skip\n                // all of them to reach an element that we are looking for.\n                const noOffsetPrevSiblingIndex = getNoOffsetIndex(previousTNode);\n                const segmentHead = getSegmentHead(hydrationInfo, noOffsetPrevSiblingIndex);\n                if (previousTNode.type === 2 /* TNodeType.Element */ && segmentHead) {\n                    const numRootNodesToSkip = calcSerializedContainerSize(hydrationInfo, noOffsetPrevSiblingIndex);\n                    // `+1` stands for an anchor comment node after all the views in this container.\n                    const nodesToSkip = numRootNodesToSkip + 1;\n                    // First node after this segment.\n                    native = siblingAfter(nodesToSkip, segmentHead);\n                }\n                else {\n                    native = previousRElement.nextSibling;\n                }\n            }\n        }\n    }\n    return native;\n}\n/**\n * Skips over a specified number of nodes and returns the next sibling node after that.\n */\nfunction siblingAfter(skip, from) {\n    let currentNode = from;\n    for (let i = 0; i < skip; i++) {\n        ngDevMode && validateSiblingNodeExists(currentNode);\n        currentNode = currentNode.nextSibling;\n    }\n    return currentNode;\n}\n/**\n * Helper function to produce a string representation of the navigation steps\n * (in terms of `nextSibling` and `firstChild` navigations). Used in error\n * messages in dev mode.\n */\nfunction stringifyNavigationInstructions(instructions) {\n    const container = [];\n    for (let i = 0; i < instructions.length; i += 2) {\n        const step = instructions[i];\n        const repeat = instructions[i + 1];\n        for (let r = 0; r < repeat; r++) {\n            container.push(step === NodeNavigationStep.FirstChild ? 'firstChild' : 'nextSibling');\n        }\n    }\n    return container.join('.');\n}\n/**\n * Helper function that navigates from a starting point node (the `from` node)\n * using provided set of navigation instructions (within `path` argument).\n */\nfunction navigateToNode(from, instructions) {\n    let node = from;\n    for (let i = 0; i < instructions.length; i += 2) {\n        const step = instructions[i];\n        const repeat = instructions[i + 1];\n        for (let r = 0; r < repeat; r++) {\n            if (ngDevMode && !node) {\n                throw nodeNotFoundAtPathError(from, stringifyNavigationInstructions(instructions));\n            }\n            switch (step) {\n                case NodeNavigationStep.FirstChild:\n                    node = node.firstChild;\n                    break;\n                case NodeNavigationStep.NextSibling:\n                    node = node.nextSibling;\n                    break;\n            }\n        }\n    }\n    if (ngDevMode && !node) {\n        throw nodeNotFoundAtPathError(from, stringifyNavigationInstructions(instructions));\n    }\n    return node;\n}\n/**\n * Locates an RNode given a set of navigation instructions (which also contains\n * a starting point node info).\n */\nfunction locateRNodeByPath(path, lView) {\n    const [referenceNode, ...navigationInstructions] = decompressNodeLocation(path);\n    let ref;\n    if (referenceNode === REFERENCE_NODE_HOST) {\n        ref = lView[DECLARATION_COMPONENT_VIEW][HOST];\n    }\n    else if (referenceNode === REFERENCE_NODE_BODY) {\n        ref = ɵɵresolveBody(lView[DECLARATION_COMPONENT_VIEW][HOST]);\n    }\n    else {\n        const parentElementId = Number(referenceNode);\n        ref = unwrapRNode(lView[parentElementId + HEADER_OFFSET]);\n    }\n    return navigateToNode(ref, navigationInstructions);\n}\n/**\n * Generate a list of DOM navigation operations to get from node `start` to node `finish`.\n *\n * Note: assumes that node `start` occurs before node `finish` in an in-order traversal of the DOM\n * tree. That is, we should be able to get from `start` to `finish` purely by using `.firstChild`\n * and `.nextSibling` operations.\n */\nfunction navigateBetween(start, finish) {\n    if (start === finish) {\n        return [];\n    }\n    else if (start.parentElement == null || finish.parentElement == null) {\n        return null;\n    }\n    else if (start.parentElement === finish.parentElement) {\n        return navigateBetweenSiblings(start, finish);\n    }\n    else {\n        // `finish` is a child of its parent, so the parent will always have a child.\n        const parent = finish.parentElement;\n        const parentPath = navigateBetween(start, parent);\n        const childPath = navigateBetween(parent.firstChild, finish);\n        if (!parentPath || !childPath)\n            return null;\n        return [\n            // First navigate to `finish`'s parent\n            ...parentPath,\n            // Then to its first child.\n            NodeNavigationStep.FirstChild,\n            // And finally from that node to `finish` (maybe a no-op if we're already there).\n            ...childPath,\n        ];\n    }\n}\n/**\n * Calculates a path between 2 sibling nodes (generates a number of `NextSibling` navigations).\n * Returns `null` if no such path exists between the given nodes.\n */\nfunction navigateBetweenSiblings(start, finish) {\n    const nav = [];\n    let node = null;\n    for (node = start; node != null && node !== finish; node = node.nextSibling) {\n        nav.push(NodeNavigationStep.NextSibling);\n    }\n    // If the `node` becomes `null` or `undefined` at the end, that means that we\n    // didn't find the `end` node, thus return `null` (which would trigger serialization\n    // error to be produced).\n    return node == null ? null : nav;\n}\n/**\n * Calculates a path between 2 nodes in terms of `nextSibling` and `firstChild`\n * navigations:\n * - the `from` node is a known node, used as an starting point for the lookup\n *   (the `fromNodeName` argument is a string representation of the node).\n * - the `to` node is a node that the runtime logic would be looking up,\n *   using the path generated by this function.\n */\nfunction calcPathBetween(from, to, fromNodeName) {\n    const path = navigateBetween(from, to);\n    return path === null ? null : compressNodeLocation(fromNodeName, path);\n}\n/**\n * Invoked at serialization time (on the server) when a set of navigation\n * instructions needs to be generated for a TNode.\n */\nfunction calcPathForNode(tNode, lView) {\n    let parentTNode = tNode.parent;\n    let parentIndex;\n    let parentRNode;\n    let referenceNodeName;\n    // Skip over all parent nodes that are disconnected from the DOM, such nodes\n    // can not be used as anchors.\n    //\n    // This might happen in certain content projection-based use-cases, where\n    // a content of an element is projected and used, when a parent element\n    // itself remains detached from DOM. In this scenario we try to find a parent\n    // element that is attached to DOM and can act as an anchor instead.\n    while (parentTNode !== null && isDisconnectedNode(parentTNode, lView)) {\n        parentTNode = parentTNode.parent;\n    }\n    if (parentTNode === null || !(parentTNode.type & 3 /* TNodeType.AnyRNode */)) {\n        // If there is no parent TNode or a parent TNode does not represent an RNode\n        // (i.e. not a DOM node), use component host element as a reference node.\n        parentIndex = referenceNodeName = REFERENCE_NODE_HOST;\n        parentRNode = lView[DECLARATION_COMPONENT_VIEW][HOST];\n    }\n    else {\n        // Use parent TNode as a reference node.\n        parentIndex = parentTNode.index;\n        parentRNode = unwrapRNode(lView[parentIndex]);\n        referenceNodeName = renderStringify(parentIndex - HEADER_OFFSET);\n    }\n    let rNode = unwrapRNode(lView[tNode.index]);\n    if (tNode.type & 12 /* TNodeType.AnyContainer */) {\n        // For <ng-container> nodes, instead of serializing a reference\n        // to the anchor comment node, serialize a location of the first\n        // DOM element. Paired with the container size (serialized as a part\n        // of `ngh.containers`), it should give enough information for runtime\n        // to hydrate nodes in this container.\n        const firstRNode = getFirstNativeNode(lView, tNode);\n        // If container is not empty, use a reference to the first element,\n        // otherwise, rNode would point to an anchor comment node.\n        if (firstRNode) {\n            rNode = firstRNode;\n        }\n    }\n    let path = calcPathBetween(parentRNode, rNode, referenceNodeName);\n    if (path === null && parentRNode !== rNode) {\n        // Searching for a path between elements within a host node failed.\n        // Trying to find a path to an element starting from the `document.body` instead.\n        //\n        // Important note: this type of reference is relatively unstable, since Angular\n        // may not be able to control parts of the page that the runtime logic navigates\n        // through. This is mostly needed to cover \"portals\" use-case (like menus, dialog boxes,\n        // etc), where nodes are content-projected (including direct DOM manipulations) outside\n        // of the host node. The better solution is to provide APIs to work with \"portals\",\n        // at which point this code path would not be needed.\n        const body = parentRNode.ownerDocument.body;\n        path = calcPathBetween(body, rNode, REFERENCE_NODE_BODY);\n        if (path === null) {\n            // If the path is still empty, it's likely that this node is detached and\n            // won't be found during hydration.\n            throw nodeNotFoundError(lView, tNode);\n        }\n    }\n    return path;\n}\n\n/**\n * Given a current DOM node and a serialized information about the views\n * in a container, walks over the DOM structure, collecting the list of\n * dehydrated views.\n */\nfunction locateDehydratedViewsInContainer(currentRNode, serializedViews) {\n    const dehydratedViews = [];\n    for (const serializedView of serializedViews) {\n        // Repeats a view multiple times as needed, based on the serialized information\n        // (for example, for *ngFor-produced views).\n        for (let i = 0; i < (serializedView[MULTIPLIER] ?? 1); i++) {\n            const view = {\n                data: serializedView,\n                firstChild: null,\n            };\n            if (serializedView[NUM_ROOT_NODES] > 0) {\n                // Keep reference to the first node in this view,\n                // so it can be accessed while invoking template instructions.\n                view.firstChild = currentRNode;\n                // Move over to the next node after this view, which can\n                // either be a first node of the next view or an anchor comment\n                // node after the last view in a container.\n                currentRNode = siblingAfter(serializedView[NUM_ROOT_NODES], currentRNode);\n            }\n            dehydratedViews.push(view);\n        }\n    }\n    return [currentRNode, dehydratedViews];\n}\n/**\n * Reference to a function that searches for a matching dehydrated views\n * stored on a given lContainer.\n * Returns `null` by default, when hydration is not enabled.\n */\nlet _findMatchingDehydratedViewImpl = (lContainer, template) => null;\n/**\n * Retrieves the next dehydrated view from the LContainer and verifies that\n * it matches a given template id (from the TView that was used to create this\n * instance of a view). If the id doesn't match, that means that we are in an\n * unexpected state and can not complete the reconciliation process. Thus,\n * all dehydrated views from this LContainer are removed (including corresponding\n * DOM nodes) and the rendering is performed as if there were no dehydrated views\n * in this container.\n */\nfunction findMatchingDehydratedViewImpl(lContainer, template) {\n    const views = lContainer[DEHYDRATED_VIEWS];\n    if (!template || views === null || views.length === 0) {\n        return null;\n    }\n    const view = views[0];\n    // Verify whether the first dehydrated view in the container matches\n    // the template id passed to this function (that originated from a TView\n    // that was used to create an instance of an embedded or component views.\n    if (view.data[TEMPLATE_ID] === template) {\n        // If the template id matches - extract the first view and return it.\n        return views.shift();\n    }\n    else {\n        // Otherwise, we are at the state when reconciliation can not be completed,\n        // thus we remove all dehydrated views within this container (remove them\n        // from internal data structures as well as delete associated elements from\n        // the DOM tree).\n        removeDehydratedViews(lContainer);\n        return null;\n    }\n}\nfunction enableFindMatchingDehydratedViewImpl() {\n    _findMatchingDehydratedViewImpl = findMatchingDehydratedViewImpl;\n}\nfunction findMatchingDehydratedView(lContainer, template) {\n    return _findMatchingDehydratedViewImpl(lContainer, template);\n}\n\n/**\n * A type representing the live collection to be reconciled with any new (incoming) collection. This\n * is an adapter class that makes it possible to work with different internal data structures,\n * regardless of the actual values of the incoming collection.\n */\nclass LiveCollection {\n    destroy(item) {\n        // noop by default\n    }\n    updateValue(index, value) {\n        // noop by default\n    }\n    // operations below could be implemented on top of the operations defined so far, but having\n    // them explicitly allow clear expression of intent and potentially more performant\n    // implementations\n    swap(index1, index2) {\n        const startIdx = Math.min(index1, index2);\n        const endIdx = Math.max(index1, index2);\n        const endItem = this.detach(endIdx);\n        if (endIdx - startIdx > 1) {\n            const startItem = this.detach(startIdx);\n            this.attach(startIdx, endItem);\n            this.attach(endIdx, startItem);\n        }\n        else {\n            this.attach(startIdx, endItem);\n        }\n    }\n    move(prevIndex, newIdx) {\n        this.attach(newIdx, this.detach(prevIndex));\n    }\n}\nfunction valuesMatching(liveIdx, liveValue, newIdx, newValue, trackBy) {\n    if (liveIdx === newIdx && Object.is(liveValue, newValue)) {\n        // matching and no value identity to update\n        return 1;\n    }\n    else if (Object.is(trackBy(liveIdx, liveValue), trackBy(newIdx, newValue))) {\n        // matching but requires value identity update\n        return -1;\n    }\n    return 0;\n}\n/**\n * The live collection reconciliation algorithm that perform various in-place operations, so it\n * reflects the content of the new (incoming) collection.\n *\n * The reconciliation algorithm has 2 code paths:\n * - \"fast\" path that don't require any memory allocation;\n * - \"slow\" path that requires additional memory allocation for intermediate data structures used to\n * collect additional information about the live collection.\n * It might happen that the algorithm switches between the two modes in question in a single\n * reconciliation path - generally it tries to stay on the \"fast\" path as much as possible.\n *\n * The overall complexity of the algorithm is O(n + m) for speed and O(n) for memory (where n is the\n * length of the live collection and m is the length of the incoming collection). Given the problem\n * at hand the complexity / performance constraints makes it impossible to perform the absolute\n * minimum of operation to reconcile the 2 collections. The algorithm makes different tradeoffs to\n * stay within reasonable performance bounds and may apply sub-optimal number of operations in\n * certain situations.\n *\n * @param liveCollection the current, live collection;\n * @param newCollection the new, incoming collection;\n * @param trackByFn key generation function that determines equality between items in the life and\n *     incoming collection;\n */\nfunction reconcile(liveCollection, newCollection, trackByFn) {\n    let detachedItems = undefined;\n    let liveKeysInTheFuture = undefined;\n    let liveStartIdx = 0;\n    let liveEndIdx = liveCollection.length - 1;\n    if (Array.isArray(newCollection)) {\n        let newEndIdx = newCollection.length - 1;\n        while (liveStartIdx <= liveEndIdx && liveStartIdx <= newEndIdx) {\n            // compare from the beginning\n            const liveStartValue = liveCollection.at(liveStartIdx);\n            const newStartValue = newCollection[liveStartIdx];\n            const isStartMatching = valuesMatching(liveStartIdx, liveStartValue, liveStartIdx, newStartValue, trackByFn);\n            if (isStartMatching !== 0) {\n                if (isStartMatching < 0) {\n                    liveCollection.updateValue(liveStartIdx, newStartValue);\n                }\n                liveStartIdx++;\n                continue;\n            }\n            // compare from the end\n            // TODO(perf): do _all_ the matching from the end\n            const liveEndValue = liveCollection.at(liveEndIdx);\n            const newEndValue = newCollection[newEndIdx];\n            const isEndMatching = valuesMatching(liveEndIdx, liveEndValue, newEndIdx, newEndValue, trackByFn);\n            if (isEndMatching !== 0) {\n                if (isEndMatching < 0) {\n                    liveCollection.updateValue(liveEndIdx, newEndValue);\n                }\n                liveEndIdx--;\n                newEndIdx--;\n                continue;\n            }\n            // Detect swap and moves:\n            const liveStartKey = trackByFn(liveStartIdx, liveStartValue);\n            const liveEndKey = trackByFn(liveEndIdx, liveEndValue);\n            const newStartKey = trackByFn(liveStartIdx, newStartValue);\n            if (Object.is(newStartKey, liveEndKey)) {\n                const newEndKey = trackByFn(newEndIdx, newEndValue);\n                // detect swap on both ends;\n                if (Object.is(newEndKey, liveStartKey)) {\n                    liveCollection.swap(liveStartIdx, liveEndIdx);\n                    liveCollection.updateValue(liveEndIdx, newEndValue);\n                    newEndIdx--;\n                    liveEndIdx--;\n                }\n                else {\n                    // the new item is the same as the live item with the end pointer - this is a move forward\n                    // to an earlier index;\n                    liveCollection.move(liveEndIdx, liveStartIdx);\n                }\n                liveCollection.updateValue(liveStartIdx, newStartValue);\n                liveStartIdx++;\n                continue;\n            }\n            // Fallback to the slow path: we need to learn more about the content of the live and new\n            // collections.\n            detachedItems ??= new UniqueValueMultiKeyMap();\n            liveKeysInTheFuture ??=\n                initLiveItemsInTheFuture(liveCollection, liveStartIdx, liveEndIdx, trackByFn);\n            // Check if I'm inserting a previously detached item: if so, attach it here\n            if (attachPreviouslyDetached(liveCollection, detachedItems, liveStartIdx, newStartKey)) {\n                liveCollection.updateValue(liveStartIdx, newStartValue);\n                liveStartIdx++;\n                liveEndIdx++;\n            }\n            else if (!liveKeysInTheFuture.has(newStartKey)) {\n                // Check if we seen a new item that doesn't exist in the old collection and must be INSERTED\n                const newItem = liveCollection.create(liveStartIdx, newCollection[liveStartIdx]);\n                liveCollection.attach(liveStartIdx, newItem);\n                liveStartIdx++;\n                liveEndIdx++;\n            }\n            else {\n                // We know that the new item exists later on in old collection but we don't know its index\n                // and as the consequence can't move it (don't know where to find it). Detach the old item,\n                // hoping that it unlocks the fast path again.\n                detachedItems.set(liveStartKey, liveCollection.detach(liveStartIdx));\n                liveEndIdx--;\n            }\n        }\n        // Final cleanup steps:\n        // - more items in the new collection => insert\n        while (liveStartIdx <= newEndIdx) {\n            createOrAttach(liveCollection, detachedItems, trackByFn, liveStartIdx, newCollection[liveStartIdx]);\n            liveStartIdx++;\n        }\n    }\n    else if (newCollection != null) {\n        // iterable - immediately fallback to the slow path\n        const newCollectionIterator = newCollection[Symbol.iterator]();\n        let newIterationResult = newCollectionIterator.next();\n        while (!newIterationResult.done && liveStartIdx <= liveEndIdx) {\n            const liveValue = liveCollection.at(liveStartIdx);\n            const newValue = newIterationResult.value;\n            const isStartMatching = valuesMatching(liveStartIdx, liveValue, liveStartIdx, newValue, trackByFn);\n            if (isStartMatching !== 0) {\n                // found a match - move on, but update value\n                if (isStartMatching < 0) {\n                    liveCollection.updateValue(liveStartIdx, newValue);\n                }\n                liveStartIdx++;\n                newIterationResult = newCollectionIterator.next();\n            }\n            else {\n                detachedItems ??= new UniqueValueMultiKeyMap();\n                liveKeysInTheFuture ??=\n                    initLiveItemsInTheFuture(liveCollection, liveStartIdx, liveEndIdx, trackByFn);\n                // Check if I'm inserting a previously detached item: if so, attach it here\n                const newKey = trackByFn(liveStartIdx, newValue);\n                if (attachPreviouslyDetached(liveCollection, detachedItems, liveStartIdx, newKey)) {\n                    liveCollection.updateValue(liveStartIdx, newValue);\n                    liveStartIdx++;\n                    liveEndIdx++;\n                    newIterationResult = newCollectionIterator.next();\n                }\n                else if (!liveKeysInTheFuture.has(newKey)) {\n                    liveCollection.attach(liveStartIdx, liveCollection.create(liveStartIdx, newValue));\n                    liveStartIdx++;\n                    liveEndIdx++;\n                    newIterationResult = newCollectionIterator.next();\n                }\n                else {\n                    // it is a move forward - detach the current item without advancing in collections\n                    const liveKey = trackByFn(liveStartIdx, liveValue);\n                    detachedItems.set(liveKey, liveCollection.detach(liveStartIdx));\n                    liveEndIdx--;\n                }\n            }\n        }\n        // this is a new item as we run out of the items in the old collection - create or attach a\n        // previously detached one\n        while (!newIterationResult.done) {\n            createOrAttach(liveCollection, detachedItems, trackByFn, liveCollection.length, newIterationResult.value);\n            newIterationResult = newCollectionIterator.next();\n        }\n    }\n    // Cleanups common to the array and iterable:\n    // - more items in the live collection => delete starting from the end;\n    while (liveStartIdx <= liveEndIdx) {\n        liveCollection.destroy(liveCollection.detach(liveEndIdx--));\n    }\n    // - destroy items that were detached but never attached again.\n    detachedItems?.forEach(item => {\n        liveCollection.destroy(item);\n    });\n}\nfunction attachPreviouslyDetached(prevCollection, detachedItems, index, key) {\n    if (detachedItems !== undefined && detachedItems.has(key)) {\n        prevCollection.attach(index, detachedItems.get(key));\n        detachedItems.delete(key);\n        return true;\n    }\n    return false;\n}\nfunction createOrAttach(liveCollection, detachedItems, trackByFn, index, value) {\n    if (!attachPreviouslyDetached(liveCollection, detachedItems, index, trackByFn(index, value))) {\n        const newItem = liveCollection.create(index, value);\n        liveCollection.attach(index, newItem);\n    }\n    else {\n        liveCollection.updateValue(index, value);\n    }\n}\nfunction initLiveItemsInTheFuture(liveCollection, start, end, trackByFn) {\n    const keys = new Set();\n    for (let i = start; i <= end; i++) {\n        keys.add(trackByFn(i, liveCollection.at(i)));\n    }\n    return keys;\n}\n/**\n * A specific, partial implementation of the Map interface with the following characteristics:\n * - allows multiple values for a given key;\n * - maintain FIFO order for multiple values corresponding to a given key;\n * - assumes that all values are unique.\n *\n * The implementation aims at having the minimal overhead for cases where keys are _not_ duplicated\n * (the most common case in the list reconciliation algorithm). To achieve this, the first value for\n * a given key is stored in a regular map. Then, when more values are set for a given key, we\n * maintain a form of linked list in a separate map. To maintain this linked list we assume that all\n * values (in the entire collection) are unique.\n */\nclass UniqueValueMultiKeyMap {\n    constructor() {\n        // A map from a key to the first value corresponding to this key.\n        this.kvMap = new Map();\n        // A map that acts as a linked list of values - each value maps to the next value in this \"linked\n        // list\" (this only works if values are unique). Allocated lazily to avoid memory consumption when\n        // there are no duplicated values.\n        this._vMap = undefined;\n    }\n    has(key) {\n        return this.kvMap.has(key);\n    }\n    delete(key) {\n        if (!this.has(key))\n            return false;\n        const value = this.kvMap.get(key);\n        if (this._vMap !== undefined && this._vMap.has(value)) {\n            this.kvMap.set(key, this._vMap.get(value));\n            this._vMap.delete(value);\n        }\n        else {\n            this.kvMap.delete(key);\n        }\n        return true;\n    }\n    get(key) {\n        return this.kvMap.get(key);\n    }\n    set(key, value) {\n        if (this.kvMap.has(key)) {\n            let prevValue = this.kvMap.get(key);\n            ngDevMode &&\n                assertNotSame(prevValue, value, `Detected a duplicated value ${value} for the key ${key}`);\n            if (this._vMap === undefined) {\n                this._vMap = new Map();\n            }\n            const vMap = this._vMap;\n            while (vMap.has(prevValue)) {\n                prevValue = vMap.get(prevValue);\n            }\n            vMap.set(prevValue, value);\n        }\n        else {\n            this.kvMap.set(key, value);\n        }\n    }\n    forEach(cb) {\n        for (let [key, value] of this.kvMap) {\n            cb(value, key);\n            if (this._vMap !== undefined) {\n                const vMap = this._vMap;\n                while (vMap.has(value)) {\n                    value = vMap.get(value);\n                    cb(value, key);\n                }\n            }\n        }\n    }\n}\n\nfunction createAndRenderEmbeddedLView(declarationLView, templateTNode, context, options) {\n    const embeddedTView = templateTNode.tView;\n    ngDevMode && assertDefined(embeddedTView, 'TView must be defined for a template node.');\n    ngDevMode && assertTNodeForLView(templateTNode, declarationLView);\n    // Embedded views follow the change detection strategy of the view they're declared in.\n    const isSignalView = declarationLView[FLAGS] & 4096 /* LViewFlags.SignalView */;\n    const viewFlags = isSignalView ? 4096 /* LViewFlags.SignalView */ : 16 /* LViewFlags.CheckAlways */;\n    const embeddedLView = createLView(declarationLView, embeddedTView, context, viewFlags, null, templateTNode, null, null, null, options?.injector ?? null, options?.dehydratedView ?? null);\n    const declarationLContainer = declarationLView[templateTNode.index];\n    ngDevMode && assertLContainer(declarationLContainer);\n    embeddedLView[DECLARATION_LCONTAINER] = declarationLContainer;\n    const declarationViewLQueries = declarationLView[QUERIES];\n    if (declarationViewLQueries !== null) {\n        embeddedLView[QUERIES] = declarationViewLQueries.createEmbeddedView(embeddedTView);\n    }\n    // execute creation mode of a view\n    renderView(embeddedTView, embeddedLView, context);\n    return embeddedLView;\n}\nfunction getLViewFromLContainer(lContainer, index) {\n    const adjustedIndex = CONTAINER_HEADER_OFFSET + index;\n    // avoid reading past the array boundaries\n    if (adjustedIndex < lContainer.length) {\n        const lView = lContainer[adjustedIndex];\n        ngDevMode && assertLView(lView);\n        return lView;\n    }\n    return undefined;\n}\n/**\n * Returns whether an elements that belong to a view should be\n * inserted into the DOM. For client-only cases, DOM elements are\n * always inserted. For hydration cases, we check whether serialized\n * info is available for a view and the view is not in a \"skip hydration\"\n * block (in which case view contents was re-created, thus needing insertion).\n */\nfunction shouldAddViewToDom(tNode, dehydratedView) {\n    return !dehydratedView || dehydratedView.firstChild === null ||\n        hasInSkipHydrationBlockFlag(tNode);\n}\nfunction addLViewToLContainer(lContainer, lView, index, addToDOM = true) {\n    const tView = lView[TVIEW];\n    // Insert into the view tree so the new view can be change-detected\n    insertView(tView, lView, lContainer, index);\n    // Insert elements that belong to this view into the DOM tree\n    if (addToDOM) {\n        const beforeNode = getBeforeNodeForView(index, lContainer);\n        const renderer = lView[RENDERER];\n        const parentRNode = nativeParentNode(renderer, lContainer[NATIVE]);\n        if (parentRNode !== null) {\n            addViewToDOM(tView, lContainer[T_HOST], renderer, lView, parentRNode, beforeNode);\n        }\n    }\n    // When in hydration mode, reset the pointer to the first child in\n    // the dehydrated view. This indicates that the view was hydrated and\n    // further attaching/detaching should work with this view as normal.\n    const hydrationInfo = lView[HYDRATION];\n    if (hydrationInfo !== null && hydrationInfo.firstChild !== null) {\n        hydrationInfo.firstChild = null;\n    }\n}\nfunction removeLViewFromLContainer(lContainer, index) {\n    const lView = detachView(lContainer, index);\n    if (lView !== undefined) {\n        destroyLView(lView[TVIEW], lView);\n    }\n    return lView;\n}\n\n/**\n * Represents a container where one or more views can be attached to a component.\n *\n * Can contain *host views* (created by instantiating a\n * component with the `createComponent()` method), and *embedded views*\n * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).\n *\n * A view container instance can contain other view containers,\n * creating a [view hierarchy](guide/glossary#view-hierarchy).\n *\n * @usageNotes\n *\n * The example below demonstrates how the `createComponent` function can be used\n * to create an instance of a ComponentRef dynamically and attach it to an ApplicationRef,\n * so that it gets included into change detection cycles.\n *\n * Note: the example uses standalone components, but the function can also be used for\n * non-standalone components (declared in an NgModule) as well.\n *\n * ```typescript\n * @Component({\n *   standalone: true,\n *   selector: 'dynamic',\n *   template: `<span>This is a content of a dynamic component.</span>`,\n * })\n * class DynamicComponent {\n *   vcr = inject(ViewContainerRef);\n * }\n *\n * @Component({\n *   standalone: true,\n *   selector: 'app',\n *   template: `<main>Hi! This is the main content.</main>`,\n * })\n * class AppComponent {\n *   vcr = inject(ViewContainerRef);\n *\n *   ngAfterViewInit() {\n *     const compRef = this.vcr.createComponent(DynamicComponent);\n *     compRef.changeDetectorRef.detectChanges();\n *   }\n * }\n * ```\n *\n * @see {@link ComponentRef}\n * @see {@link EmbeddedViewRef}\n *\n * @publicApi\n */\nclass ViewContainerRef {\n    /**\n     * @internal\n     * @nocollapse\n     */\n    static { this.__NG_ELEMENT_ID__ = injectViewContainerRef; }\n}\n/**\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n * already exists, retrieves the existing ViewContainerRef.\n *\n * @returns The ViewContainerRef instance to use\n */\nfunction injectViewContainerRef() {\n    const previousTNode = getCurrentTNode();\n    return createContainerRef(previousTNode, getLView());\n}\nconst VE_ViewContainerRef = ViewContainerRef;\n// TODO(alxhub): cleaning up this indirection triggers a subtle bug in Closure in g3. Once the fix\n// for that lands, this can be cleaned up.\nconst R3ViewContainerRef = class ViewContainerRef extends VE_ViewContainerRef {\n    constructor(_lContainer, _hostTNode, _hostLView) {\n        super();\n        this._lContainer = _lContainer;\n        this._hostTNode = _hostTNode;\n        this._hostLView = _hostLView;\n    }\n    get element() {\n        return createElementRef(this._hostTNode, this._hostLView);\n    }\n    get injector() {\n        return new NodeInjector(this._hostTNode, this._hostLView);\n    }\n    /** @deprecated No replacement */\n    get parentInjector() {\n        const parentLocation = getParentInjectorLocation(this._hostTNode, this._hostLView);\n        if (hasParentInjector(parentLocation)) {\n            const parentView = getParentInjectorView(parentLocation, this._hostLView);\n            const injectorIndex = getParentInjectorIndex(parentLocation);\n            ngDevMode && assertNodeInjector(parentView, injectorIndex);\n            const parentTNode = parentView[TVIEW].data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */];\n            return new NodeInjector(parentTNode, parentView);\n        }\n        else {\n            return new NodeInjector(null, this._hostLView);\n        }\n    }\n    clear() {\n        while (this.length > 0) {\n            this.remove(this.length - 1);\n        }\n    }\n    get(index) {\n        const viewRefs = getViewRefs(this._lContainer);\n        return viewRefs !== null && viewRefs[index] || null;\n    }\n    get length() {\n        return this._lContainer.length - CONTAINER_HEADER_OFFSET;\n    }\n    createEmbeddedView(templateRef, context, indexOrOptions) {\n        let index;\n        let injector;\n        if (typeof indexOrOptions === 'number') {\n            index = indexOrOptions;\n        }\n        else if (indexOrOptions != null) {\n            index = indexOrOptions.index;\n            injector = indexOrOptions.injector;\n        }\n        const dehydratedView = findMatchingDehydratedView(this._lContainer, templateRef.ssrId);\n        const viewRef = templateRef.createEmbeddedViewImpl(context || {}, injector, dehydratedView);\n        this.insertImpl(viewRef, index, shouldAddViewToDom(this._hostTNode, dehydratedView));\n        return viewRef;\n    }\n    createComponent(componentFactoryOrType, indexOrOptions, injector, projectableNodes, environmentInjector) {\n        const isComponentFactory = componentFactoryOrType && !isType(componentFactoryOrType);\n        let index;\n        // This function supports 2 signatures and we need to handle options correctly for both:\n        //   1. When first argument is a Component type. This signature also requires extra\n        //      options to be provided as object (more ergonomic option).\n        //   2. First argument is a Component factory. In this case extra options are represented as\n        //      positional arguments. This signature is less ergonomic and will be deprecated.\n        if (isComponentFactory) {\n            if (ngDevMode) {\n                assertEqual(typeof indexOrOptions !== 'object', true, 'It looks like Component factory was provided as the first argument ' +\n                    'and an options object as the second argument. This combination of arguments ' +\n                    'is incompatible. You can either change the first argument to provide Component ' +\n                    'type or change the second argument to be a number (representing an index at ' +\n                    'which to insert the new component\\'s host view into this container)');\n            }\n            index = indexOrOptions;\n        }\n        else {\n            if (ngDevMode) {\n                assertDefined(getComponentDef(componentFactoryOrType), `Provided Component class doesn't contain Component definition. ` +\n                    `Please check whether provided class has @Component decorator.`);\n                assertEqual(typeof indexOrOptions !== 'number', true, 'It looks like Component type was provided as the first argument ' +\n                    'and a number (representing an index at which to insert the new component\\'s ' +\n                    'host view into this container as the second argument. This combination of arguments ' +\n                    'is incompatible. Please use an object as the second argument instead.');\n            }\n            const options = (indexOrOptions || {});\n            if (ngDevMode && options.environmentInjector && options.ngModuleRef) {\n                throwError(`Cannot pass both environmentInjector and ngModuleRef options to createComponent().`);\n            }\n            index = options.index;\n            injector = options.injector;\n            projectableNodes = options.projectableNodes;\n            environmentInjector = options.environmentInjector || options.ngModuleRef;\n        }\n        const componentFactory = isComponentFactory ?\n            componentFactoryOrType :\n            new ComponentFactory(getComponentDef(componentFactoryOrType));\n        const contextInjector = injector || this.parentInjector;\n        // If an `NgModuleRef` is not provided explicitly, try retrieving it from the DI tree.\n        if (!environmentInjector && componentFactory.ngModule == null) {\n            // For the `ComponentFactory` case, entering this logic is very unlikely, since we expect that\n            // an instance of a `ComponentFactory`, resolved via `ComponentFactoryResolver` would have an\n            // `ngModule` field. This is possible in some test scenarios and potentially in some JIT-based\n            // use-cases. For the `ComponentFactory` case we preserve backwards-compatibility and try\n            // using a provided injector first, then fall back to the parent injector of this\n            // `ViewContainerRef` instance.\n            //\n            // For the factory-less case, it's critical to establish a connection with the module\n            // injector tree (by retrieving an instance of an `NgModuleRef` and accessing its injector),\n            // so that a component can use DI tokens provided in MgModules. For this reason, we can not\n            // rely on the provided injector, since it might be detached from the DI tree (for example, if\n            // it was created via `Injector.create` without specifying a parent injector, or if an\n            // injector is retrieved from an `NgModuleRef` created via `createNgModule` using an\n            // NgModule outside of a module tree). Instead, we always use `ViewContainerRef`'s parent\n            // injector, which is normally connected to the DI tree, which includes module injector\n            // subtree.\n            const _injector = isComponentFactory ? contextInjector : this.parentInjector;\n            // DO NOT REFACTOR. The code here used to have a `injector.get(NgModuleRef, null) ||\n            // undefined` expression which seems to cause internal google apps to fail. This is documented\n            // in the following internal bug issue: go/b/142967802\n            const result = _injector.get(EnvironmentInjector, null);\n            if (result) {\n                environmentInjector = result;\n            }\n        }\n        const componentDef = getComponentDef(componentFactory.componentType ?? {});\n        const dehydratedView = findMatchingDehydratedView(this._lContainer, componentDef?.id ?? null);\n        const rNode = dehydratedView?.firstChild ?? null;\n        const componentRef = componentFactory.create(contextInjector, projectableNodes, rNode, environmentInjector);\n        this.insertImpl(componentRef.hostView, index, shouldAddViewToDom(this._hostTNode, dehydratedView));\n        return componentRef;\n    }\n    insert(viewRef, index) {\n        return this.insertImpl(viewRef, index, true);\n    }\n    insertImpl(viewRef, index, addToDOM) {\n        const lView = viewRef._lView;\n        if (ngDevMode && viewRef.destroyed) {\n            throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n        }\n        if (viewAttachedToContainer(lView)) {\n            // If view is already attached, detach it first so we clean up references appropriately.\n            const prevIdx = this.indexOf(viewRef);\n            // A view might be attached either to this or a different container. The `prevIdx` for\n            // those cases will be:\n            // equal to -1 for views attached to this ViewContainerRef\n            // >= 0 for views attached to a different ViewContainerRef\n            if (prevIdx !== -1) {\n                this.detach(prevIdx);\n            }\n            else {\n                const prevLContainer = lView[PARENT];\n                ngDevMode &&\n                    assertEqual(isLContainer(prevLContainer), true, 'An attached view should have its PARENT point to a container.');\n                // We need to re-create a R3ViewContainerRef instance since those are not stored on\n                // LView (nor anywhere else).\n                const prevVCRef = new R3ViewContainerRef(prevLContainer, prevLContainer[T_HOST], prevLContainer[PARENT]);\n                prevVCRef.detach(prevVCRef.indexOf(viewRef));\n            }\n        }\n        // Logical operation of adding `LView` to `LContainer`\n        const adjustedIdx = this._adjustIndex(index);\n        const lContainer = this._lContainer;\n        addLViewToLContainer(lContainer, lView, adjustedIdx, addToDOM);\n        viewRef.attachToViewContainerRef();\n        addToArray(getOrCreateViewRefs(lContainer), adjustedIdx, viewRef);\n        return viewRef;\n    }\n    move(viewRef, newIndex) {\n        if (ngDevMode && viewRef.destroyed) {\n            throw new Error('Cannot move a destroyed View in a ViewContainer!');\n        }\n        return this.insert(viewRef, newIndex);\n    }\n    indexOf(viewRef) {\n        const viewRefsArr = getViewRefs(this._lContainer);\n        return viewRefsArr !== null ? viewRefsArr.indexOf(viewRef) : -1;\n    }\n    remove(index) {\n        const adjustedIdx = this._adjustIndex(index, -1);\n        const detachedView = detachView(this._lContainer, adjustedIdx);\n        if (detachedView) {\n            // Before destroying the view, remove it from the container's array of `ViewRef`s.\n            // This ensures the view container length is updated before calling\n            // `destroyLView`, which could recursively call view container methods that\n            // rely on an accurate container length.\n            // (e.g. a method on this view container being called by a child directive's OnDestroy\n            // lifecycle hook)\n            removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx);\n            destroyLView(detachedView[TVIEW], detachedView);\n        }\n    }\n    detach(index) {\n        const adjustedIdx = this._adjustIndex(index, -1);\n        const view = detachView(this._lContainer, adjustedIdx);\n        const wasDetached = view && removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx) != null;\n        return wasDetached ? new ViewRef$1(view) : null;\n    }\n    _adjustIndex(index, shift = 0) {\n        if (index == null) {\n            return this.length + shift;\n        }\n        if (ngDevMode) {\n            assertGreaterThan(index, -1, `ViewRef index must be positive, got ${index}`);\n            // +1 because it's legal to insert at the end.\n            assertLessThan(index, this.length + 1 + shift, 'index');\n        }\n        return index;\n    }\n};\nfunction getViewRefs(lContainer) {\n    return lContainer[VIEW_REFS];\n}\nfunction getOrCreateViewRefs(lContainer) {\n    return (lContainer[VIEW_REFS] || (lContainer[VIEW_REFS] = []));\n}\n/**\n * Creates a ViewContainerRef and stores it on the injector.\n *\n * @param hostTNode The node that is requesting a ViewContainerRef\n * @param hostLView The view to which the node belongs\n * @returns The ViewContainerRef instance to use\n */\nfunction createContainerRef(hostTNode, hostLView) {\n    ngDevMode && assertTNodeType(hostTNode, 12 /* TNodeType.AnyContainer */ | 3 /* TNodeType.AnyRNode */);\n    let lContainer;\n    const slotValue = hostLView[hostTNode.index];\n    if (isLContainer(slotValue)) {\n        // If the host is a container, we don't need to create a new LContainer\n        lContainer = slotValue;\n    }\n    else {\n        // An LContainer anchor can not be `null`, but we set it here temporarily\n        // and update to the actual value later in this function (see\n        // `_locateOrCreateAnchorNode`).\n        lContainer = createLContainer(slotValue, hostLView, null, hostTNode);\n        hostLView[hostTNode.index] = lContainer;\n        addToViewTree(hostLView, lContainer);\n    }\n    _locateOrCreateAnchorNode(lContainer, hostLView, hostTNode, slotValue);\n    return new R3ViewContainerRef(lContainer, hostTNode, hostLView);\n}\n/**\n * Creates and inserts a comment node that acts as an anchor for a view container.\n *\n * If the host is a regular element, we have to insert a comment node manually which will\n * be used as an anchor when inserting elements. In this specific case we use low-level DOM\n * manipulation to insert it.\n */\nfunction insertAnchorNode(hostLView, hostTNode) {\n    const renderer = hostLView[RENDERER];\n    ngDevMode && ngDevMode.rendererCreateComment++;\n    const commentNode = renderer.createComment(ngDevMode ? 'container' : '');\n    const hostNative = getNativeByTNode(hostTNode, hostLView);\n    const parentOfHostNative = nativeParentNode(renderer, hostNative);\n    nativeInsertBefore(renderer, parentOfHostNative, commentNode, nativeNextSibling(renderer, hostNative), false);\n    return commentNode;\n}\nlet _locateOrCreateAnchorNode = createAnchorNode;\nlet _populateDehydratedViewsInLContainer = (lContainer, tNode, hostLView) => false; // noop by default\n/**\n * Looks up dehydrated views that belong to a given LContainer and populates\n * this information into the `LContainer[DEHYDRATED_VIEWS]` slot. When running\n * in client-only mode, this function is a noop.\n *\n * @param lContainer LContainer that should be populated.\n * @param tNode Corresponding TNode.\n * @param hostLView LView that hosts LContainer.\n * @returns a boolean flag that indicates whether a populating operation\n *   was successful. The operation might be unsuccessful in case is has completed\n *   previously, we are rendering in client-only mode or this content is located\n *   in a skip hydration section.\n */\nfunction populateDehydratedViewsInLContainer(lContainer, tNode, hostLView) {\n    return _populateDehydratedViewsInLContainer(lContainer, tNode, hostLView);\n}\n/**\n * Regular creation mode: an anchor is created and\n * assigned to the `lContainer[NATIVE]` slot.\n */\nfunction createAnchorNode(lContainer, hostLView, hostTNode, slotValue) {\n    // We already have a native element (anchor) set, return.\n    if (lContainer[NATIVE])\n        return;\n    let commentNode;\n    // If the host is an element container, the native host element is guaranteed to be a\n    // comment and we can reuse that comment as anchor element for the new LContainer.\n    // The comment node in question is already part of the DOM structure so we don't need to append\n    // it again.\n    if (hostTNode.type & 8 /* TNodeType.ElementContainer */) {\n        commentNode = unwrapRNode(slotValue);\n    }\n    else {\n        commentNode = insertAnchorNode(hostLView, hostTNode);\n    }\n    lContainer[NATIVE] = commentNode;\n}\n/**\n * Hydration logic that looks up all dehydrated views in this container\n * and puts them into `lContainer[DEHYDRATED_VIEWS]` slot.\n *\n * @returns a boolean flag that indicates whether a populating operation\n *   was successful. The operation might be unsuccessful in case is has completed\n *   previously, we are rendering in client-only mode or this content is located\n *   in a skip hydration section.\n */\nfunction populateDehydratedViewsInLContainerImpl(lContainer, tNode, hostLView) {\n    // We already have a native element (anchor) set and the process\n    // of finding dehydrated views happened (so the `lContainer[DEHYDRATED_VIEWS]`\n    // is not null), exit early.\n    if (lContainer[NATIVE] && lContainer[DEHYDRATED_VIEWS]) {\n        return true;\n    }\n    const hydrationInfo = hostLView[HYDRATION];\n    const noOffsetIndex = tNode.index - HEADER_OFFSET;\n    const isNodeCreationMode = !hydrationInfo || isInSkipHydrationBlock(tNode) ||\n        isDisconnectedNode$1(hydrationInfo, noOffsetIndex);\n    // Regular creation mode.\n    if (isNodeCreationMode) {\n        return false;\n    }\n    // Hydration mode, looking up an anchor node and dehydrated views in DOM.\n    const currentRNode = getSegmentHead(hydrationInfo, noOffsetIndex);\n    const serializedViews = hydrationInfo.data[CONTAINERS]?.[noOffsetIndex];\n    ngDevMode &&\n        assertDefined(serializedViews, 'Unexpected state: no hydration info available for a given TNode, ' +\n            'which represents a view container.');\n    const [commentNode, dehydratedViews] = locateDehydratedViewsInContainer(currentRNode, serializedViews);\n    if (ngDevMode) {\n        validateMatchingNode(commentNode, Node.COMMENT_NODE, null, hostLView, tNode, true);\n        // Do not throw in case this node is already claimed (thus `false` as a second\n        // argument). If this container is created based on an `<ng-template>`, the comment\n        // node would be already claimed from the `template` instruction. If an element acts\n        // as an anchor (e.g. <div #vcRef>), a separate comment node would be created/located,\n        // so we need to claim it here.\n        markRNodeAsClaimedByHydration(commentNode, false);\n    }\n    lContainer[NATIVE] = commentNode;\n    lContainer[DEHYDRATED_VIEWS] = dehydratedViews;\n    return true;\n}\nfunction locateOrCreateAnchorNode(lContainer, hostLView, hostTNode, slotValue) {\n    if (!_populateDehydratedViewsInLContainer(lContainer, hostTNode, hostLView)) {\n        // Populating dehydrated views operation returned `false`, which indicates\n        // that the logic was running in client-only mode, this an anchor comment\n        // node should be created for this container.\n        createAnchorNode(lContainer, hostLView, hostTNode, slotValue);\n    }\n}\nfunction enableLocateOrCreateContainerRefImpl() {\n    _locateOrCreateAnchorNode = locateOrCreateAnchorNode;\n    _populateDehydratedViewsInLContainer = populateDehydratedViewsInLContainerImpl;\n}\n\nfunction templateFirstCreatePass(index, tView, lView, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex) {\n    ngDevMode && assertFirstCreatePass(tView);\n    ngDevMode && ngDevMode.firstCreatePass++;\n    const tViewConsts = tView.consts;\n    // TODO(pk): refactor getOrCreateTNode to have the \"create\" only version\n    const tNode = getOrCreateTNode(tView, index, 4 /* TNodeType.Container */, tagName || null, getConstant(tViewConsts, attrsIndex));\n    resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex));\n    registerPostOrderHooks(tView, tNode);\n    const embeddedTView = tNode.tView = createTView(2 /* TViewType.Embedded */, tNode, templateFn, decls, vars, tView.directiveRegistry, tView.pipeRegistry, null, tView.schemas, tViewConsts, null /* ssrId */);\n    if (tView.queries !== null) {\n        tView.queries.template(tView, tNode);\n        embeddedTView.queries = tView.queries.embeddedTView(tNode);\n    }\n    return tNode;\n}\n/**\n * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.\n *\n * <ng-template #foo>\n *    <div></div>\n * </ng-template>\n *\n * @param index The index of the container in the data array\n * @param templateFn Inline template\n * @param decls The number of nodes, local refs, and pipes for this template\n * @param vars The number of bindings for this template\n * @param tagName The name of the container element, if applicable\n * @param attrsIndex Index of template attributes in the `consts` array.\n * @param localRefs Index of the local references in the `consts` array.\n * @param localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n *\n * @codeGenApi\n */\nfunction ɵɵtemplate(index, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex, localRefExtractor) {\n    const lView = getLView();\n    const tView = getTView();\n    const adjustedIndex = index + HEADER_OFFSET;\n    const tNode = tView.firstCreatePass ? templateFirstCreatePass(adjustedIndex, tView, lView, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex) :\n        tView.data[adjustedIndex];\n    setCurrentTNode(tNode, false);\n    const comment = _locateOrCreateContainerAnchor(tView, lView, tNode, index);\n    if (wasLastNodeCreated()) {\n        appendChild(tView, lView, comment, tNode);\n    }\n    attachPatchData(comment, lView);\n    const lContainer = createLContainer(comment, lView, comment, tNode);\n    lView[adjustedIndex] = lContainer;\n    addToViewTree(lView, lContainer);\n    // If hydration is enabled, looks up dehydrated views in the DOM\n    // using hydration annotation info and stores those views on LContainer.\n    // In client-only mode, this function is a noop.\n    populateDehydratedViewsInLContainer(lContainer, tNode, lView);\n    if (isDirectiveHost(tNode)) {\n        createDirectivesInstances(tView, lView, tNode);\n    }\n    if (localRefsIndex != null) {\n        saveResolvedLocalsInData(lView, tNode, localRefExtractor);\n    }\n    return ɵɵtemplate;\n}\nlet _locateOrCreateContainerAnchor = createContainerAnchorImpl;\n/**\n * Regular creation mode for LContainers and their anchor (comment) nodes.\n */\nfunction createContainerAnchorImpl(tView, lView, tNode, index) {\n    lastNodeWasCreated(true);\n    return lView[RENDERER].createComment(ngDevMode ? 'container' : '');\n}\n/**\n * Enables hydration code path (to lookup existing elements in DOM)\n * in addition to the regular creation mode for LContainers and their\n * anchor (comment) nodes.\n */\nfunction locateOrCreateContainerAnchorImpl(tView, lView, tNode, index) {\n    const hydrationInfo = lView[HYDRATION];\n    const isNodeCreationMode = !hydrationInfo || isInSkipHydrationBlock$1() || isDisconnectedNode$1(hydrationInfo, index);\n    lastNodeWasCreated(isNodeCreationMode);\n    // Regular creation mode.\n    if (isNodeCreationMode) {\n        return createContainerAnchorImpl(tView, lView, tNode, index);\n    }\n    const ssrId = hydrationInfo.data[TEMPLATES]?.[index] ?? null;\n    // Apply `ssrId` value to the underlying TView if it was not previously set.\n    //\n    // There might be situations when the same component is present in a template\n    // multiple times and some instances are opted-out of using hydration via\n    // `ngSkipHydration` attribute. In this scenario, at the time a TView is created,\n    // the `ssrId` might be `null` (if the first component is opted-out of hydration).\n    // The code below makes sure that the `ssrId` is applied to the TView if it's still\n    // `null` and verifies we never try to override it with a different value.\n    if (ssrId !== null && tNode.tView !== null) {\n        if (tNode.tView.ssrId === null) {\n            tNode.tView.ssrId = ssrId;\n        }\n        else {\n            ngDevMode &&\n                assertEqual(tNode.tView.ssrId, ssrId, 'Unexpected value of the `ssrId` for this TView');\n        }\n    }\n    // Hydration mode, looking up existing elements in DOM.\n    const currentRNode = locateNextRNode(hydrationInfo, tView, lView, tNode);\n    ngDevMode && validateNodeExists(currentRNode, lView, tNode);\n    setSegmentHead(hydrationInfo, index, currentRNode);\n    const viewContainerSize = calcSerializedContainerSize(hydrationInfo, index);\n    const comment = siblingAfter(viewContainerSize, currentRNode);\n    if (ngDevMode) {\n        validateMatchingNode(comment, Node.COMMENT_NODE, null, lView, tNode);\n        markRNodeAsClaimedByHydration(comment);\n    }\n    return comment;\n}\nfunction enableLocateOrCreateContainerAnchorImpl() {\n    _locateOrCreateContainerAnchor = locateOrCreateContainerAnchorImpl;\n}\n\n/**\n * The conditional instruction represents the basic building block on the runtime side to support\n * built-in \"if\" and \"switch\". On the high level this instruction is responsible for adding and\n * removing views selected by a conditional expression.\n *\n * @param containerIndex index of a container in a host view (indexed from HEADER_OFFSET) where\n *     conditional views should be inserted.\n * @param matchingTemplateIndex index of a template TNode representing a conditional view to be\n *     inserted; -1 represents a special case when there is no view to insert.\n * @codeGenApi\n */\nfunction ɵɵconditional(containerIndex, matchingTemplateIndex, value) {\n    performanceMarkFeature('NgControlFlow');\n    const hostLView = getLView();\n    const bindingIndex = nextBindingIndex();\n    const lContainer = getLContainer(hostLView, HEADER_OFFSET + containerIndex);\n    const viewInContainerIdx = 0;\n    if (bindingUpdated(hostLView, bindingIndex, matchingTemplateIndex)) {\n        const prevConsumer = setActiveConsumer$1(null);\n        try {\n            // The index of the view to show changed - remove the previously displayed one\n            // (it is a noop if there are no active views in a container).\n            removeLViewFromLContainer(lContainer, viewInContainerIdx);\n            // Index -1 is a special case where none of the conditions evaluates to\n            // a truthy value and as the consequence we've got no view to show.\n            if (matchingTemplateIndex !== -1) {\n                const templateTNode = getExistingTNode(hostLView[TVIEW], HEADER_OFFSET + matchingTemplateIndex);\n                const dehydratedView = findMatchingDehydratedView(lContainer, templateTNode.tView.ssrId);\n                const embeddedLView = createAndRenderEmbeddedLView(hostLView, templateTNode, value, { dehydratedView });\n                addLViewToLContainer(lContainer, embeddedLView, viewInContainerIdx, shouldAddViewToDom(templateTNode, dehydratedView));\n            }\n        }\n        finally {\n            setActiveConsumer$1(prevConsumer);\n        }\n    }\n    else {\n        // We might keep displaying the same template but the actual value of the expression could have\n        // changed - re-bind in context.\n        const lView = getLViewFromLContainer(lContainer, viewInContainerIdx);\n        if (lView !== undefined) {\n            lView[CONTEXT] = value;\n        }\n    }\n}\nclass RepeaterContext {\n    constructor(lContainer, $implicit, $index) {\n        this.lContainer = lContainer;\n        this.$implicit = $implicit;\n        this.$index = $index;\n    }\n    get $count() {\n        return this.lContainer.length - CONTAINER_HEADER_OFFSET;\n    }\n}\n/**\n * A built-in trackBy function used for situations where users specified collection index as a\n * tracking expression. Having this function body in the runtime avoids unnecessary code generation.\n *\n * @param index\n * @returns\n */\nfunction ɵɵrepeaterTrackByIndex(index) {\n    return index;\n}\n/**\n * A built-in trackBy function used for situations where users specified collection item reference\n * as a tracking expression. Having this function body in the runtime avoids unnecessary code\n * generation.\n *\n * @param index\n * @returns\n */\nfunction ɵɵrepeaterTrackByIdentity(_, value) {\n    return value;\n}\nclass RepeaterMetadata {\n    constructor(hasEmptyBlock, trackByFn, liveCollection) {\n        this.hasEmptyBlock = hasEmptyBlock;\n        this.trackByFn = trackByFn;\n        this.liveCollection = liveCollection;\n    }\n}\n/**\n * The repeaterCreate instruction runs in the creation part of the template pass and initializes\n * internal data structures required by the update pass of the built-in repeater logic. Repeater\n * metadata are allocated in the data part of LView with the following layout:\n * - LView[HEADER_OFFSET + index] - metadata\n * - LView[HEADER_OFFSET + index + 1] - reference to a template function rendering an item\n * - LView[HEADER_OFFSET + index + 2] - optional reference to a template function rendering an empty\n * block\n *\n * @param index Index at which to store the metadata of the repeater.\n * @param templateFn Reference to the template of the main repeater block.\n * @param decls The number of nodes, local refs, and pipes for the main block.\n * @param vars The number of bindings for the main block.\n * @param tagName The name of the container element, if applicable\n * @param attrsIndex Index of template attributes in the `consts` array.\n * @param trackByFn Reference to the tracking function.\n * @param trackByUsesComponentInstance Whether the tracking function has any references to the\n *  component instance. If it doesn't, we can avoid rebinding it.\n * @param emptyTemplateFn Reference to the template function of the empty block.\n * @param emptyDecls The number of nodes, local refs, and pipes for the empty block.\n * @param emptyVars The number of bindings for the empty block.\n *\n * @codeGenApi\n */\nfunction ɵɵrepeaterCreate(index, templateFn, decls, vars, tagName, attrsIndex, trackByFn, trackByUsesComponentInstance, emptyTemplateFn, emptyDecls, emptyVars) {\n    performanceMarkFeature('NgControlFlow');\n    const hasEmptyBlock = emptyTemplateFn !== undefined;\n    const hostLView = getLView();\n    const boundTrackBy = trackByUsesComponentInstance ?\n        // We only want to bind when necessary, because it produces a\n        // new function. For pure functions it's not necessary.\n        trackByFn.bind(hostLView[DECLARATION_COMPONENT_VIEW][CONTEXT]) :\n        trackByFn;\n    const metadata = new RepeaterMetadata(hasEmptyBlock, boundTrackBy);\n    hostLView[HEADER_OFFSET + index] = metadata;\n    ɵɵtemplate(index + 1, templateFn, decls, vars, tagName, attrsIndex);\n    if (hasEmptyBlock) {\n        ngDevMode &&\n            assertDefined(emptyDecls, 'Missing number of declarations for the empty repeater block.');\n        ngDevMode &&\n            assertDefined(emptyVars, 'Missing number of bindings for the empty repeater block.');\n        ɵɵtemplate(index + 2, emptyTemplateFn, emptyDecls, emptyVars);\n    }\n}\nclass LiveCollectionLContainerImpl extends LiveCollection {\n    constructor(lContainer, hostLView, templateTNode) {\n        super();\n        this.lContainer = lContainer;\n        this.hostLView = hostLView;\n        this.templateTNode = templateTNode;\n        /**\n         Property indicating if indexes in the repeater context need to be updated following the live\n         collection changes. Index updates are necessary if and only if views are inserted / removed in\n         the middle of LContainer. Adds and removals at the end don't require index updates.\n       */\n        this.needsIndexUpdate = false;\n    }\n    get length() {\n        return this.lContainer.length - CONTAINER_HEADER_OFFSET;\n    }\n    at(index) {\n        return this.getLView(index)[CONTEXT].$implicit;\n    }\n    attach(index, lView) {\n        const dehydratedView = lView[HYDRATION];\n        this.needsIndexUpdate ||= index !== this.length;\n        addLViewToLContainer(this.lContainer, lView, index, shouldAddViewToDom(this.templateTNode, dehydratedView));\n    }\n    detach(index) {\n        this.needsIndexUpdate ||= index !== this.length - 1;\n        return detachExistingView(this.lContainer, index);\n    }\n    create(index, value) {\n        const dehydratedView = findMatchingDehydratedView(this.lContainer, this.templateTNode.tView.ssrId);\n        const embeddedLView = createAndRenderEmbeddedLView(this.hostLView, this.templateTNode, new RepeaterContext(this.lContainer, value, index), { dehydratedView });\n        return embeddedLView;\n    }\n    destroy(lView) {\n        destroyLView(lView[TVIEW], lView);\n    }\n    updateValue(index, value) {\n        this.getLView(index)[CONTEXT].$implicit = value;\n    }\n    reset() {\n        this.needsIndexUpdate = false;\n    }\n    updateIndexes() {\n        if (this.needsIndexUpdate) {\n            for (let i = 0; i < this.length; i++) {\n                this.getLView(i)[CONTEXT].$index = i;\n            }\n        }\n    }\n    getLView(index) {\n        return getExistingLViewFromLContainer(this.lContainer, index);\n    }\n}\n/**\n * The repeater instruction does update-time diffing of a provided collection (against the\n * collection seen previously) and maps changes in the collection to views structure (by adding,\n * removing or moving views as needed).\n * @param collection - the collection instance to be checked for changes\n * @codeGenApi\n */\nfunction ɵɵrepeater(collection) {\n    const prevConsumer = setActiveConsumer$1(null);\n    const metadataSlotIdx = getSelectedIndex();\n    try {\n        const hostLView = getLView();\n        const hostTView = hostLView[TVIEW];\n        const metadata = hostLView[metadataSlotIdx];\n        if (metadata.liveCollection === undefined) {\n            const containerIndex = metadataSlotIdx + 1;\n            const lContainer = getLContainer(hostLView, containerIndex);\n            const itemTemplateTNode = getExistingTNode(hostTView, containerIndex);\n            metadata.liveCollection =\n                new LiveCollectionLContainerImpl(lContainer, hostLView, itemTemplateTNode);\n        }\n        else {\n            metadata.liveCollection.reset();\n        }\n        const liveCollection = metadata.liveCollection;\n        reconcile(liveCollection, collection, metadata.trackByFn);\n        // moves in the container might caused context's index to get out of order, re-adjust if needed\n        liveCollection.updateIndexes();\n        // handle empty blocks\n        if (metadata.hasEmptyBlock) {\n            const bindingIndex = nextBindingIndex();\n            const isCollectionEmpty = liveCollection.length === 0;\n            if (bindingUpdated(hostLView, bindingIndex, isCollectionEmpty)) {\n                const emptyTemplateIndex = metadataSlotIdx + 2;\n                const lContainerForEmpty = getLContainer(hostLView, emptyTemplateIndex);\n                if (isCollectionEmpty) {\n                    const emptyTemplateTNode = getExistingTNode(hostTView, emptyTemplateIndex);\n                    const dehydratedView = findMatchingDehydratedView(lContainerForEmpty, emptyTemplateTNode.tView.ssrId);\n                    const embeddedLView = createAndRenderEmbeddedLView(hostLView, emptyTemplateTNode, undefined, { dehydratedView });\n                    addLViewToLContainer(lContainerForEmpty, embeddedLView, 0, shouldAddViewToDom(emptyTemplateTNode, dehydratedView));\n                }\n                else {\n                    removeLViewFromLContainer(lContainerForEmpty, 0);\n                }\n            }\n        }\n    }\n    finally {\n        setActiveConsumer$1(prevConsumer);\n    }\n}\nfunction getLContainer(lView, index) {\n    const lContainer = lView[index];\n    ngDevMode && assertLContainer(lContainer);\n    return lContainer;\n}\nfunction detachExistingView(lContainer, index) {\n    const existingLView = detachView(lContainer, index);\n    ngDevMode && assertLView(existingLView);\n    return existingLView;\n}\nfunction getExistingLViewFromLContainer(lContainer, index) {\n    const existingLView = getLViewFromLContainer(lContainer, index);\n    ngDevMode && assertLView(existingLView);\n    return existingLView;\n}\nfunction getExistingTNode(tView, index) {\n    const tNode = getTNode(tView, index);\n    ngDevMode && assertTNode(tNode);\n    return tNode;\n}\n\n/**\n * Describes the state of defer block dependency loading.\n */\nvar DeferDependenciesLoadingState;\n(function (DeferDependenciesLoadingState) {\n    /** Initial state, dependency loading is not yet triggered */\n    DeferDependenciesLoadingState[DeferDependenciesLoadingState[\"NOT_STARTED\"] = 0] = \"NOT_STARTED\";\n    /** Dependency loading is in progress */\n    DeferDependenciesLoadingState[DeferDependenciesLoadingState[\"IN_PROGRESS\"] = 1] = \"IN_PROGRESS\";\n    /** Dependency loading has completed successfully */\n    DeferDependenciesLoadingState[DeferDependenciesLoadingState[\"COMPLETE\"] = 2] = \"COMPLETE\";\n    /** Dependency loading has failed */\n    DeferDependenciesLoadingState[DeferDependenciesLoadingState[\"FAILED\"] = 3] = \"FAILED\";\n})(DeferDependenciesLoadingState || (DeferDependenciesLoadingState = {}));\n/** Slot index where `minimum` parameter value is stored. */\nconst MINIMUM_SLOT = 0;\n/** Slot index where `after` parameter value is stored. */\nconst LOADING_AFTER_SLOT = 1;\n/**\n * Describes the current state of this defer block instance.\n *\n * @publicApi\n * @developerPreview\n */\nvar DeferBlockState;\n(function (DeferBlockState) {\n    /** The placeholder block content is rendered */\n    DeferBlockState[DeferBlockState[\"Placeholder\"] = 0] = \"Placeholder\";\n    /** The loading block content is rendered */\n    DeferBlockState[DeferBlockState[\"Loading\"] = 1] = \"Loading\";\n    /** The main content block content is rendered */\n    DeferBlockState[DeferBlockState[\"Complete\"] = 2] = \"Complete\";\n    /** The error block content is rendered */\n    DeferBlockState[DeferBlockState[\"Error\"] = 3] = \"Error\";\n})(DeferBlockState || (DeferBlockState = {}));\n/**\n * Describes the initial state of this defer block instance.\n *\n * Note: this state is internal only and *must* be represented\n * with a number lower than any value in the `DeferBlockState` enum.\n */\nvar DeferBlockInternalState;\n(function (DeferBlockInternalState) {\n    /** Initial state. Nothing is rendered yet. */\n    DeferBlockInternalState[DeferBlockInternalState[\"Initial\"] = -1] = \"Initial\";\n})(DeferBlockInternalState || (DeferBlockInternalState = {}));\nconst NEXT_DEFER_BLOCK_STATE = 0;\n// Note: it's *important* to keep the state in this slot, because this slot\n// is used by runtime logic to differentiate between LViews, LContainers and\n// other types (see `isLView` and `isLContainer` functions). In case of defer\n// blocks, this slot would always be a number.\nconst DEFER_BLOCK_STATE = 1;\nconst STATE_IS_FROZEN_UNTIL = 2;\nconst LOADING_AFTER_CLEANUP_FN = 3;\nconst TRIGGER_CLEANUP_FNS = 4;\nconst PREFETCH_TRIGGER_CLEANUP_FNS = 5;\n/**\n * Options for configuring defer blocks behavior.\n * @publicApi\n * @developerPreview\n */\nvar DeferBlockBehavior;\n(function (DeferBlockBehavior) {\n    /**\n     * Manual triggering mode for defer blocks. Provides control over when defer blocks render\n     * and which state they render. This is the default behavior in test environments.\n     */\n    DeferBlockBehavior[DeferBlockBehavior[\"Manual\"] = 0] = \"Manual\";\n    /**\n     * Playthrough mode for defer blocks. This mode behaves like defer blocks would in a browser.\n     */\n    DeferBlockBehavior[DeferBlockBehavior[\"Playthrough\"] = 1] = \"Playthrough\";\n})(DeferBlockBehavior || (DeferBlockBehavior = {}));\n\n/*!\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Registers a cleanup function associated with a prefetching trigger\n * or a regular trigger of a defer block.\n */\nfunction storeTriggerCleanupFn(type, lDetails, cleanupFn) {\n    const key = type === 1 /* TriggerType.Prefetch */ ? PREFETCH_TRIGGER_CLEANUP_FNS : TRIGGER_CLEANUP_FNS;\n    if (lDetails[key] === null) {\n        lDetails[key] = [];\n    }\n    lDetails[key].push(cleanupFn);\n}\n/**\n * Invokes registered cleanup functions either for prefetch or for regular triggers.\n */\nfunction invokeTriggerCleanupFns(type, lDetails) {\n    const key = type === 1 /* TriggerType.Prefetch */ ? PREFETCH_TRIGGER_CLEANUP_FNS : TRIGGER_CLEANUP_FNS;\n    const cleanupFns = lDetails[key];\n    if (cleanupFns !== null) {\n        for (const cleanupFn of cleanupFns) {\n            cleanupFn();\n        }\n        lDetails[key] = null;\n    }\n}\n/**\n * Invokes registered cleanup functions for both prefetch and regular triggers.\n */\nfunction invokeAllTriggerCleanupFns(lDetails) {\n    invokeTriggerCleanupFns(1 /* TriggerType.Prefetch */, lDetails);\n    invokeTriggerCleanupFns(0 /* TriggerType.Regular */, lDetails);\n}\n\n// Public API for Zone\n\n/**\n * Calculates a data slot index for defer block info (either static or\n * instance-specific), given an index of a defer instruction.\n */\nfunction getDeferBlockDataIndex(deferBlockIndex) {\n    // Instance state is located at the *next* position\n    // after the defer block slot in an LView or TView.data.\n    return deferBlockIndex + 1;\n}\n/** Retrieves a defer block state from an LView, given a TNode that represents a block. */\nfunction getLDeferBlockDetails(lView, tNode) {\n    const tView = lView[TVIEW];\n    const slotIndex = getDeferBlockDataIndex(tNode.index);\n    ngDevMode && assertIndexInDeclRange(tView, slotIndex);\n    return lView[slotIndex];\n}\n/** Stores a defer block instance state in LView. */\nfunction setLDeferBlockDetails(lView, deferBlockIndex, lDetails) {\n    const tView = lView[TVIEW];\n    const slotIndex = getDeferBlockDataIndex(deferBlockIndex);\n    ngDevMode && assertIndexInDeclRange(tView, slotIndex);\n    lView[slotIndex] = lDetails;\n}\n/** Retrieves static info about a defer block, given a TView and a TNode that represents a block. */\nfunction getTDeferBlockDetails(tView, tNode) {\n    const slotIndex = getDeferBlockDataIndex(tNode.index);\n    ngDevMode && assertIndexInDeclRange(tView, slotIndex);\n    return tView.data[slotIndex];\n}\n/** Stores a defer block static info in `TView.data`. */\nfunction setTDeferBlockDetails(tView, deferBlockIndex, deferBlockConfig) {\n    const slotIndex = getDeferBlockDataIndex(deferBlockIndex);\n    ngDevMode && assertIndexInDeclRange(tView, slotIndex);\n    tView.data[slotIndex] = deferBlockConfig;\n}\nfunction getTemplateIndexForState(newState, hostLView, tNode) {\n    const tView = hostLView[TVIEW];\n    const tDetails = getTDeferBlockDetails(tView, tNode);\n    switch (newState) {\n        case DeferBlockState.Complete:\n            return tDetails.primaryTmplIndex;\n        case DeferBlockState.Loading:\n            return tDetails.loadingTmplIndex;\n        case DeferBlockState.Error:\n            return tDetails.errorTmplIndex;\n        case DeferBlockState.Placeholder:\n            return tDetails.placeholderTmplIndex;\n        default:\n            ngDevMode && throwError(`Unexpected defer block state: ${newState}`);\n            return null;\n    }\n}\n/**\n * Returns a minimum amount of time that a given state should be rendered for,\n * taking into account `minimum` parameter value. If the `minimum` value is\n * not specified - returns `null`.\n */\nfunction getMinimumDurationForState(tDetails, currentState) {\n    if (currentState === DeferBlockState.Placeholder) {\n        return tDetails.placeholderBlockConfig?.[MINIMUM_SLOT] ?? null;\n    }\n    else if (currentState === DeferBlockState.Loading) {\n        return tDetails.loadingBlockConfig?.[MINIMUM_SLOT] ?? null;\n    }\n    return null;\n}\n/** Retrieves the value of the `after` parameter on the @loading block. */\nfunction getLoadingBlockAfter(tDetails) {\n    return tDetails.loadingBlockConfig?.[LOADING_AFTER_SLOT] ?? null;\n}\n/**\n * Adds downloaded dependencies into a directive or a pipe registry,\n * making sure that a dependency doesn't yet exist in the registry.\n */\nfunction addDepsToRegistry(currentDeps, newDeps) {\n    if (!currentDeps || currentDeps.length === 0) {\n        return newDeps;\n    }\n    const currentDepSet = new Set(currentDeps);\n    for (const dep of newDeps) {\n        currentDepSet.add(dep);\n    }\n    // If `currentDeps` is the same length, there were no new deps and can\n    // return the original array.\n    return (currentDeps.length === currentDepSet.size) ? currentDeps : Array.from(currentDepSet);\n}\n/** Retrieves a TNode that represents main content of a defer block. */\nfunction getPrimaryBlockTNode(tView, tDetails) {\n    const adjustedIndex = tDetails.primaryTmplIndex + HEADER_OFFSET;\n    return getTNode(tView, adjustedIndex);\n}\n/**\n * Asserts whether all dependencies for a defer block are loaded.\n * Always run this function (in dev mode) before rendering a defer\n * block in completed state.\n */\nfunction assertDeferredDependenciesLoaded(tDetails) {\n    assertEqual(tDetails.loadingState, DeferDependenciesLoadingState.COMPLETE, 'Expecting all deferred dependencies to be loaded.');\n}\n/**\n * Determines if a given value matches the expected structure of a defer block\n *\n * We can safely rely on the primaryTmplIndex because every defer block requires\n * that a primary template exists. All the other template options are optional.\n */\nfunction isTDeferBlockDetails(value) {\n    return value !== null && (typeof value === 'object') &&\n        (typeof value.primaryTmplIndex === 'number');\n}\n\n/*!\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Configuration object used to register passive and capturing events. */\nconst eventListenerOptions = {\n    passive: true,\n    capture: true\n};\n/** Keeps track of the currently-registered `on hover` triggers. */\nconst hoverTriggers = new WeakMap();\n/** Keeps track of the currently-registered `on interaction` triggers. */\nconst interactionTriggers = new WeakMap();\n/** Currently-registered `viewport` triggers. */\nconst viewportTriggers = new WeakMap();\n/** Names of the events considered as interaction events. */\nconst interactionEventNames = ['click', 'keydown'];\n/** Names of the events considered as hover events. */\nconst hoverEventNames = ['mouseenter', 'focusin'];\n/** `IntersectionObserver` used to observe `viewport` triggers. */\nlet intersectionObserver = null;\n/** Number of elements currently observed with `viewport` triggers. */\nlet observedViewportElements = 0;\n/** Object keeping track of registered callbacks for a deferred block trigger. */\nclass DeferEventEntry {\n    constructor() {\n        this.callbacks = new Set();\n        this.listener = () => {\n            for (const callback of this.callbacks) {\n                callback();\n            }\n        };\n    }\n}\n/**\n * Registers an interaction trigger.\n * @param trigger Element that is the trigger.\n * @param callback Callback to be invoked when the trigger is interacted with.\n */\nfunction onInteraction(trigger, callback) {\n    let entry = interactionTriggers.get(trigger);\n    // If this is the first entry for this element, add the listeners.\n    if (!entry) {\n        // Note that managing events centrally like this lends itself well to using global\n        // event delegation. It currently does delegation at the element level, rather than the\n        // document level, because:\n        // 1. Global delegation is the most effective when there are a lot of events being registered\n        // at the same time. Deferred blocks are unlikely to be used in such a way.\n        // 2. Matching events to their target isn't free. For each `click` and `keydown` event we\n        // would have look through all the triggers and check if the target either is the element\n        // itself or it's contained within the element. Given that `click` and `keydown` are some\n        // of the most common events, this may end up introducing a lot of runtime overhead.\n        // 3. We're still registering only two events per element, no matter how many deferred blocks\n        // are referencing it.\n        entry = new DeferEventEntry();\n        interactionTriggers.set(trigger, entry);\n        // Ensure that the handler runs in the NgZone\n        ngDevMode && NgZone.assertInAngularZone();\n        for (const name of interactionEventNames) {\n            trigger.addEventListener(name, entry.listener, eventListenerOptions);\n        }\n    }\n    entry.callbacks.add(callback);\n    return () => {\n        const { callbacks, listener } = entry;\n        callbacks.delete(callback);\n        if (callbacks.size === 0) {\n            interactionTriggers.delete(trigger);\n            for (const name of interactionEventNames) {\n                trigger.removeEventListener(name, listener, eventListenerOptions);\n            }\n        }\n    };\n}\n/**\n * Registers a hover trigger.\n * @param trigger Element that is the trigger.\n * @param callback Callback to be invoked when the trigger is hovered over.\n */\nfunction onHover(trigger, callback) {\n    let entry = hoverTriggers.get(trigger);\n    // If this is the first entry for this element, add the listener.\n    if (!entry) {\n        entry = new DeferEventEntry();\n        hoverTriggers.set(trigger, entry);\n        // Ensure that the handler runs in the NgZone\n        ngDevMode && NgZone.assertInAngularZone();\n        for (const name of hoverEventNames) {\n            trigger.addEventListener(name, entry.listener, eventListenerOptions);\n        }\n    }\n    entry.callbacks.add(callback);\n    return () => {\n        const { callbacks, listener } = entry;\n        callbacks.delete(callback);\n        if (callbacks.size === 0) {\n            for (const name of hoverEventNames) {\n                trigger.removeEventListener(name, listener, eventListenerOptions);\n            }\n            hoverTriggers.delete(trigger);\n        }\n    };\n}\n/**\n * Registers a viewport trigger.\n * @param trigger Element that is the trigger.\n * @param callback Callback to be invoked when the trigger comes into the viewport.\n * @param injector Injector that can be used by the trigger to resolve DI tokens.\n */\nfunction onViewport(trigger, callback, injector) {\n    const ngZone = injector.get(NgZone);\n    let entry = viewportTriggers.get(trigger);\n    intersectionObserver = intersectionObserver || ngZone.runOutsideAngular(() => {\n        return new IntersectionObserver(entries => {\n            for (const current of entries) {\n                // Only invoke the callbacks if the specific element is intersecting.\n                if (current.isIntersecting && viewportTriggers.has(current.target)) {\n                    ngZone.run(viewportTriggers.get(current.target).listener);\n                }\n            }\n        });\n    });\n    if (!entry) {\n        entry = new DeferEventEntry();\n        ngZone.runOutsideAngular(() => intersectionObserver.observe(trigger));\n        viewportTriggers.set(trigger, entry);\n        observedViewportElements++;\n    }\n    entry.callbacks.add(callback);\n    return () => {\n        // It's possible that a different cleanup callback fully removed this element already.\n        if (!viewportTriggers.has(trigger)) {\n            return;\n        }\n        entry.callbacks.delete(callback);\n        if (entry.callbacks.size === 0) {\n            intersectionObserver?.unobserve(trigger);\n            viewportTriggers.delete(trigger);\n            observedViewportElements--;\n        }\n        if (observedViewportElements === 0) {\n            intersectionObserver?.disconnect();\n            intersectionObserver = null;\n        }\n    };\n}\n/**\n * Helper function to get the LView in which a deferred block's trigger is rendered.\n * @param deferredHostLView LView in which the deferred block is defined.\n * @param deferredTNode TNode defining the deferred block.\n * @param walkUpTimes Number of times to go up in the view hierarchy to find the trigger's view.\n *   A negative value means that the trigger is inside the block's placeholder, while an undefined\n *   value means that the trigger is in the same LView as the deferred block.\n */\nfunction getTriggerLView(deferredHostLView, deferredTNode, walkUpTimes) {\n    // The trigger is in the same view, we don't need to traverse.\n    if (walkUpTimes == null) {\n        return deferredHostLView;\n    }\n    // A positive value or zero means that the trigger is in a parent view.\n    if (walkUpTimes >= 0) {\n        return walkUpViews(walkUpTimes, deferredHostLView);\n    }\n    // If the value is negative, it means that the trigger is inside the placeholder.\n    const deferredContainer = deferredHostLView[deferredTNode.index];\n    ngDevMode && assertLContainer(deferredContainer);\n    const triggerLView = deferredContainer[CONTAINER_HEADER_OFFSET] ?? null;\n    // We need to null check, because the placeholder might not have been rendered yet.\n    if (ngDevMode && triggerLView !== null) {\n        const lDetails = getLDeferBlockDetails(deferredHostLView, deferredTNode);\n        const renderedState = lDetails[DEFER_BLOCK_STATE];\n        assertEqual(renderedState, DeferBlockState.Placeholder, 'Expected a placeholder to be rendered in this defer block.');\n        assertLView(triggerLView);\n    }\n    return triggerLView;\n}\n/**\n * Gets the element that a deferred block's trigger is pointing to.\n * @param triggerLView LView in which the trigger is defined.\n * @param triggerIndex Index at which the trigger element should've been rendered.\n */\nfunction getTriggerElement(triggerLView, triggerIndex) {\n    const element = getNativeByIndex(HEADER_OFFSET + triggerIndex, triggerLView);\n    ngDevMode && assertElement(element);\n    return element;\n}\n/**\n * Registers a DOM-node based trigger.\n * @param initialLView LView in which the defer block is rendered.\n * @param tNode TNode representing the defer block.\n * @param triggerIndex Index at which to find the trigger element.\n * @param walkUpTimes Number of times to go up/down in the view hierarchy to find the trigger.\n * @param registerFn Function that will register the DOM events.\n * @param callback Callback to be invoked when the trigger receives the event that should render\n *     the deferred block.\n * @param type Trigger type to distinguish between regular and prefetch triggers.\n */\nfunction registerDomTrigger(initialLView, tNode, triggerIndex, walkUpTimes, registerFn, callback, type) {\n    const injector = initialLView[INJECTOR$1];\n    function pollDomTrigger() {\n        // If the initial view was destroyed, we don't need to do anything.\n        if (isDestroyed(initialLView)) {\n            return;\n        }\n        const lDetails = getLDeferBlockDetails(initialLView, tNode);\n        const renderedState = lDetails[DEFER_BLOCK_STATE];\n        // If the block was loaded before the trigger was resolved, we don't need to do anything.\n        if (renderedState !== DeferBlockInternalState.Initial &&\n            renderedState !== DeferBlockState.Placeholder) {\n            return;\n        }\n        const triggerLView = getTriggerLView(initialLView, tNode, walkUpTimes);\n        // Keep polling until we resolve the trigger's LView.\n        if (!triggerLView) {\n            internalAfterNextRender(pollDomTrigger, { injector });\n            return;\n        }\n        // It's possible that the trigger's view was destroyed before we resolved the trigger element.\n        if (isDestroyed(triggerLView)) {\n            return;\n        }\n        const element = getTriggerElement(triggerLView, triggerIndex);\n        const cleanup = registerFn(element, () => {\n            if (initialLView !== triggerLView) {\n                removeLViewOnDestroy(triggerLView, cleanup);\n            }\n            callback();\n        }, injector);\n        // The trigger and deferred block might be in different LViews.\n        // For the main LView the cleanup would happen as a part of\n        // `storeTriggerCleanupFn` logic. For trigger LView we register\n        // a cleanup function there to remove event handlers in case an\n        // LView gets destroyed before a trigger is invoked.\n        if (initialLView !== triggerLView) {\n            storeLViewOnDestroy(triggerLView, cleanup);\n        }\n        storeTriggerCleanupFn(type, lDetails, cleanup);\n    }\n    // Begin polling for the trigger.\n    internalAfterNextRender(pollDomTrigger, { injector });\n}\n\n/**\n * Helper function to schedule a callback to be invoked when a browser becomes idle.\n *\n * @param callback A function to be invoked when a browser becomes idle.\n * @param lView LView that hosts an instance of a defer block.\n */\nfunction onIdle(callback, lView) {\n    const injector = lView[INJECTOR$1];\n    const scheduler = injector.get(IdleScheduler);\n    const cleanupFn = () => scheduler.remove(callback);\n    scheduler.add(callback);\n    return cleanupFn;\n}\n/**\n * Use shims for the `requestIdleCallback` and `cancelIdleCallback` functions for\n * environments where those functions are not available (e.g. Node.js and Safari).\n *\n * Note: we wrap the `requestIdleCallback` call into a function, so that it can be\n * overridden/mocked in test environment and picked up by the runtime code.\n */\nconst _requestIdleCallback = () => typeof requestIdleCallback !== 'undefined' ? requestIdleCallback : setTimeout;\nconst _cancelIdleCallback = () => typeof requestIdleCallback !== 'undefined' ? cancelIdleCallback : clearTimeout;\n/**\n * Helper service to schedule `requestIdleCallback`s for batches of defer blocks,\n * to avoid calling `requestIdleCallback` for each defer block (e.g. if\n * defer blocks are defined inside a for loop).\n */\nclass IdleScheduler {\n    constructor() {\n        // Indicates whether current callbacks are being invoked.\n        this.executingCallbacks = false;\n        // Currently scheduled idle callback id.\n        this.idleId = null;\n        // Set of callbacks to be invoked next.\n        this.current = new Set();\n        // Set of callbacks collected while invoking current set of callbacks.\n        // Those callbacks are scheduled for the next idle period.\n        this.deferred = new Set();\n        this.ngZone = inject(NgZone);\n        this.requestIdleCallbackFn = _requestIdleCallback().bind(globalThis);\n        this.cancelIdleCallbackFn = _cancelIdleCallback().bind(globalThis);\n    }\n    add(callback) {\n        const target = this.executingCallbacks ? this.deferred : this.current;\n        target.add(callback);\n        if (this.idleId === null) {\n            this.scheduleIdleCallback();\n        }\n    }\n    remove(callback) {\n        const { current, deferred } = this;\n        current.delete(callback);\n        deferred.delete(callback);\n        // If the last callback was removed and there is a pending\n        // idle callback - cancel it.\n        if (current.size === 0 && deferred.size === 0) {\n            this.cancelIdleCallback();\n        }\n    }\n    scheduleIdleCallback() {\n        const callback = () => {\n            this.cancelIdleCallback();\n            this.executingCallbacks = true;\n            for (const callback of this.current) {\n                callback();\n            }\n            this.current.clear();\n            this.executingCallbacks = false;\n            // If there are any callbacks added during an invocation\n            // of the current ones - make them \"current\" and schedule\n            // a new idle callback.\n            if (this.deferred.size > 0) {\n                for (const callback of this.deferred) {\n                    this.current.add(callback);\n                }\n                this.deferred.clear();\n                this.scheduleIdleCallback();\n            }\n        };\n        // Ensure that the callback runs in the NgZone since\n        // the `requestIdleCallback` is not currently patched by Zone.js.\n        this.idleId = this.requestIdleCallbackFn(() => this.ngZone.run(callback));\n    }\n    cancelIdleCallback() {\n        if (this.idleId !== null) {\n            this.cancelIdleCallbackFn(this.idleId);\n            this.idleId = null;\n        }\n    }\n    ngOnDestroy() {\n        this.cancelIdleCallback();\n        this.current.clear();\n        this.deferred.clear();\n    }\n    /** @nocollapse */\n    static { this.ɵprov = ɵɵdefineInjectable({\n        token: IdleScheduler,\n        providedIn: 'root',\n        factory: () => new IdleScheduler(),\n    }); }\n}\n\n/**\n * Returns a function that captures a provided delay.\n * Invoking the returned function schedules a trigger.\n */\nfunction onTimer(delay) {\n    return (callback, lView) => scheduleTimerTrigger(delay, callback, lView);\n}\n/**\n * Schedules a callback to be invoked after a given timeout.\n *\n * @param delay A number of ms to wait until firing a callback.\n * @param callback A function to be invoked after a timeout.\n * @param lView LView that hosts an instance of a defer block.\n */\nfunction scheduleTimerTrigger(delay, callback, lView) {\n    const injector = lView[INJECTOR$1];\n    const scheduler = injector.get(TimerScheduler);\n    const cleanupFn = () => scheduler.remove(callback);\n    scheduler.add(delay, callback);\n    return cleanupFn;\n}\n/**\n * Helper service to schedule `setTimeout`s for batches of defer blocks,\n * to avoid calling `setTimeout` for each defer block (e.g. if defer blocks\n * are created inside a for loop).\n */\nclass TimerScheduler {\n    constructor() {\n        // Indicates whether current callbacks are being invoked.\n        this.executingCallbacks = false;\n        // Currently scheduled `setTimeout` id.\n        this.timeoutId = null;\n        // When currently scheduled timer would fire.\n        this.invokeTimerAt = null;\n        // List of callbacks to be invoked.\n        // For each callback we also store a timestamp on when the callback\n        // should be invoked. We store timestamps and callback functions\n        // in a flat array to avoid creating new objects for each entry.\n        // [timestamp1, callback1, timestamp2, callback2, ...]\n        this.current = [];\n        // List of callbacks collected while invoking current set of callbacks.\n        // Those callbacks are added to the \"current\" queue at the end of\n        // the current callback invocation. The shape of this list is the same\n        // as the shape of the `current` list.\n        this.deferred = [];\n    }\n    add(delay, callback) {\n        const target = this.executingCallbacks ? this.deferred : this.current;\n        this.addToQueue(target, Date.now() + delay, callback);\n        this.scheduleTimer();\n    }\n    remove(callback) {\n        const { current, deferred } = this;\n        const callbackIndex = this.removeFromQueue(current, callback);\n        if (callbackIndex === -1) {\n            // Try cleaning up deferred queue only in case\n            // we didn't find a callback in the \"current\" queue.\n            this.removeFromQueue(deferred, callback);\n        }\n        // If the last callback was removed and there is a pending timeout - cancel it.\n        if (current.length === 0 && deferred.length === 0) {\n            this.clearTimeout();\n        }\n    }\n    addToQueue(target, invokeAt, callback) {\n        let insertAtIndex = target.length;\n        for (let i = 0; i < target.length; i += 2) {\n            const invokeQueuedCallbackAt = target[i];\n            if (invokeQueuedCallbackAt > invokeAt) {\n                // We've reached a first timer that is scheduled\n                // for a later time than what we are trying to insert.\n                // This is the location at which we need to insert,\n                // no need to iterate further.\n                insertAtIndex = i;\n                break;\n            }\n        }\n        arrayInsert2(target, insertAtIndex, invokeAt, callback);\n    }\n    removeFromQueue(target, callback) {\n        let index = -1;\n        for (let i = 0; i < target.length; i += 2) {\n            const queuedCallback = target[i + 1];\n            if (queuedCallback === callback) {\n                index = i;\n                break;\n            }\n        }\n        if (index > -1) {\n            // Remove 2 elements: a timestamp slot and\n            // the following slot with a callback function.\n            arraySplice(target, index, 2);\n        }\n        return index;\n    }\n    scheduleTimer() {\n        const callback = () => {\n            this.clearTimeout();\n            this.executingCallbacks = true;\n            // Clone the current state of the queue, since it might be altered\n            // as we invoke callbacks.\n            const current = [...this.current];\n            // Invoke callbacks that were scheduled to run before the current time.\n            const now = Date.now();\n            for (let i = 0; i < current.length; i += 2) {\n                const invokeAt = current[i];\n                const callback = current[i + 1];\n                if (invokeAt <= now) {\n                    callback();\n                }\n                else {\n                    // We've reached a timer that should not be invoked yet.\n                    break;\n                }\n            }\n            // The state of the queue might've changed after callbacks invocation,\n            // run the cleanup logic based on the *current* state of the queue.\n            let lastCallbackIndex = -1;\n            for (let i = 0; i < this.current.length; i += 2) {\n                const invokeAt = this.current[i];\n                if (invokeAt <= now) {\n                    // Add +1 to account for a callback function that\n                    // goes after the timestamp in events array.\n                    lastCallbackIndex = i + 1;\n                }\n                else {\n                    // We've reached a timer that should not be invoked yet.\n                    break;\n                }\n            }\n            if (lastCallbackIndex >= 0) {\n                arraySplice(this.current, 0, lastCallbackIndex + 1);\n            }\n            this.executingCallbacks = false;\n            // If there are any callbacks added during an invocation\n            // of the current ones - move them over to the \"current\"\n            // queue.\n            if (this.deferred.length > 0) {\n                for (let i = 0; i < this.deferred.length; i += 2) {\n                    const invokeAt = this.deferred[i];\n                    const callback = this.deferred[i + 1];\n                    this.addToQueue(this.current, invokeAt, callback);\n                }\n                this.deferred.length = 0;\n            }\n            this.scheduleTimer();\n        };\n        // Avoid running timer callbacks more than once per\n        // average frame duration. This is needed for better\n        // batching and to avoid kicking off excessive change\n        // detection cycles.\n        const FRAME_DURATION_MS = 16; // 1000ms / 60fps\n        if (this.current.length > 0) {\n            const now = Date.now();\n            // First element in the queue points at the timestamp\n            // of the first (earliest) event.\n            const invokeAt = this.current[0];\n            if (this.timeoutId === null ||\n                // Reschedule a timer in case a queue contains an item with\n                // an earlier timestamp and the delta is more than an average\n                // frame duration.\n                (this.invokeTimerAt && (this.invokeTimerAt - invokeAt > FRAME_DURATION_MS))) {\n                // There was a timeout already, but an earlier event was added\n                // into the queue. In this case we drop an old timer and setup\n                // a new one with an updated (smaller) timeout.\n                this.clearTimeout();\n                const timeout = Math.max(invokeAt - now, FRAME_DURATION_MS);\n                this.invokeTimerAt = invokeAt;\n                this.timeoutId = setTimeout(callback, timeout);\n            }\n        }\n    }\n    clearTimeout() {\n        if (this.timeoutId !== null) {\n            clearTimeout(this.timeoutId);\n            this.timeoutId = null;\n        }\n    }\n    ngOnDestroy() {\n        this.clearTimeout();\n        this.current.length = 0;\n        this.deferred.length = 0;\n    }\n    /** @nocollapse */\n    static { this.ɵprov = ɵɵdefineInjectable({\n        token: TimerScheduler,\n        providedIn: 'root',\n        factory: () => new TimerScheduler(),\n    }); }\n}\n\n/**\n * **INTERNAL**, avoid referencing it in application code.\n *\n * Injector token that allows to provide `DeferBlockDependencyInterceptor` class\n * implementation.\n */\nconst DEFER_BLOCK_DEPENDENCY_INTERCEPTOR = new InjectionToken('DEFER_BLOCK_DEPENDENCY_INTERCEPTOR');\n/**\n * **INTERNAL**, token used for configuring defer block behavior.\n */\nconst DEFER_BLOCK_CONFIG = new InjectionToken(ngDevMode ? 'DEFER_BLOCK_CONFIG' : '');\n/**\n * Returns whether defer blocks should be triggered.\n *\n * Currently, defer blocks are not triggered on the server,\n * only placeholder content is rendered (if provided).\n */\nfunction shouldTriggerDeferBlock(injector) {\n    const config = injector.get(DEFER_BLOCK_CONFIG, null, { optional: true });\n    if (config?.behavior === DeferBlockBehavior.Manual) {\n        return false;\n    }\n    return isPlatformBrowser(injector);\n}\n/**\n * Reference to the timer-based scheduler implementation of defer block state\n * rendering method. It's used to make timer-based scheduling tree-shakable.\n * If `minimum` or `after` parameters are used, compiler generates an extra\n * argument for the `ɵɵdefer` instruction, which references a timer-based\n * implementation.\n */\nlet applyDeferBlockStateWithSchedulingImpl = null;\n/**\n * Enables timer-related scheduling if `after` or `minimum` parameters are setup\n * on the `@loading` or `@placeholder` blocks.\n */\nfunction ɵɵdeferEnableTimerScheduling(tView, tDetails, placeholderConfigIndex, loadingConfigIndex) {\n    const tViewConsts = tView.consts;\n    if (placeholderConfigIndex != null) {\n        tDetails.placeholderBlockConfig =\n            getConstant(tViewConsts, placeholderConfigIndex);\n    }\n    if (loadingConfigIndex != null) {\n        tDetails.loadingBlockConfig =\n            getConstant(tViewConsts, loadingConfigIndex);\n    }\n    // Enable implementation that supports timer-based scheduling.\n    if (applyDeferBlockStateWithSchedulingImpl === null) {\n        applyDeferBlockStateWithSchedulingImpl = applyDeferBlockStateWithScheduling;\n    }\n}\n/**\n * Creates runtime data structures for defer blocks.\n *\n * @param index Index of the `defer` instruction.\n * @param primaryTmplIndex Index of the template with the primary block content.\n * @param dependencyResolverFn Function that contains dependencies for this defer block.\n * @param loadingTmplIndex Index of the template with the loading block content.\n * @param placeholderTmplIndex Index of the template with the placeholder block content.\n * @param errorTmplIndex Index of the template with the error block content.\n * @param loadingConfigIndex Index in the constants array of the configuration of the loading.\n *     block.\n * @param placeholderConfigIndex Index in the constants array of the configuration of the\n *     placeholder block.\n * @param enableTimerScheduling Function that enables timer-related scheduling if `after`\n *     or `minimum` parameters are setup on the `@loading` or `@placeholder` blocks.\n *\n * @codeGenApi\n */\nfunction ɵɵdefer(index, primaryTmplIndex, dependencyResolverFn, loadingTmplIndex, placeholderTmplIndex, errorTmplIndex, loadingConfigIndex, placeholderConfigIndex, enableTimerScheduling) {\n    const lView = getLView();\n    const tView = getTView();\n    const adjustedIndex = index + HEADER_OFFSET;\n    ɵɵtemplate(index, null, 0, 0);\n    if (tView.firstCreatePass) {\n        performanceMarkFeature('NgDefer');\n        const tDetails = {\n            primaryTmplIndex,\n            loadingTmplIndex: loadingTmplIndex ?? null,\n            placeholderTmplIndex: placeholderTmplIndex ?? null,\n            errorTmplIndex: errorTmplIndex ?? null,\n            placeholderBlockConfig: null,\n            loadingBlockConfig: null,\n            dependencyResolverFn: dependencyResolverFn ?? null,\n            loadingState: DeferDependenciesLoadingState.NOT_STARTED,\n            loadingPromise: null,\n        };\n        enableTimerScheduling?.(tView, tDetails, placeholderConfigIndex, loadingConfigIndex);\n        setTDeferBlockDetails(tView, adjustedIndex, tDetails);\n    }\n    const tNode = getCurrentTNode();\n    const lContainer = lView[adjustedIndex];\n    // If hydration is enabled, looks up dehydrated views in the DOM\n    // using hydration annotation info and stores those views on LContainer.\n    // In client-only mode, this function is a noop.\n    populateDehydratedViewsInLContainer(lContainer, tNode, lView);\n    // Init instance-specific defer details and store it.\n    const lDetails = [\n        null,\n        DeferBlockInternalState.Initial,\n        null,\n        null,\n        null,\n        null // PREFETCH_TRIGGER_CLEANUP_FNS\n    ];\n    setLDeferBlockDetails(lView, adjustedIndex, lDetails);\n    const cleanupTriggersFn = () => invokeAllTriggerCleanupFns(lDetails);\n    // When defer block is triggered - unsubscribe from LView destroy cleanup.\n    storeTriggerCleanupFn(0 /* TriggerType.Regular */, lDetails, () => removeLViewOnDestroy(lView, cleanupTriggersFn));\n    storeLViewOnDestroy(lView, cleanupTriggersFn);\n}\n/**\n * Loads defer block dependencies when a trigger value becomes truthy.\n * @codeGenApi\n */\nfunction ɵɵdeferWhen(rawValue) {\n    const lView = getLView();\n    const bindingIndex = nextBindingIndex();\n    if (bindingUpdated(lView, bindingIndex, rawValue)) {\n        const prevConsumer = setActiveConsumer$1(null);\n        try {\n            const value = Boolean(rawValue); // handle truthy or falsy values\n            const tNode = getSelectedTNode();\n            const lDetails = getLDeferBlockDetails(lView, tNode);\n            const renderedState = lDetails[DEFER_BLOCK_STATE];\n            if (value === false && renderedState === DeferBlockInternalState.Initial) {\n                // If nothing is rendered yet, render a placeholder (if defined).\n                renderPlaceholder(lView, tNode);\n            }\n            else if (value === true &&\n                (renderedState === DeferBlockInternalState.Initial ||\n                    renderedState === DeferBlockState.Placeholder)) {\n                // The `when` condition has changed to `true`, trigger defer block loading\n                // if the block is either in initial (nothing is rendered) or a placeholder\n                // state.\n                triggerDeferBlock(lView, tNode);\n            }\n        }\n        finally {\n            setActiveConsumer$1(prevConsumer);\n        }\n    }\n}\n/**\n * Prefetches the deferred content when a value becomes truthy.\n * @codeGenApi\n */\nfunction ɵɵdeferPrefetchWhen(rawValue) {\n    const lView = getLView();\n    const bindingIndex = nextBindingIndex();\n    if (bindingUpdated(lView, bindingIndex, rawValue)) {\n        const prevConsumer = setActiveConsumer$1(null);\n        try {\n            const value = Boolean(rawValue); // handle truthy or falsy values\n            const tView = lView[TVIEW];\n            const tNode = getSelectedTNode();\n            const tDetails = getTDeferBlockDetails(tView, tNode);\n            if (value === true && tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\n                // If loading has not been started yet, trigger it now.\n                triggerPrefetching(tDetails, lView, tNode);\n            }\n        }\n        finally {\n            setActiveConsumer$1(prevConsumer);\n        }\n    }\n}\n/**\n * Sets up logic to handle the `on idle` deferred trigger.\n * @codeGenApi\n */\nfunction ɵɵdeferOnIdle() {\n    scheduleDelayedTrigger(onIdle);\n}\n/**\n * Sets up logic to handle the `prefetch on idle` deferred trigger.\n * @codeGenApi\n */\nfunction ɵɵdeferPrefetchOnIdle() {\n    scheduleDelayedPrefetching(onIdle);\n}\n/**\n * Sets up logic to handle the `on immediate` deferred trigger.\n * @codeGenApi\n */\nfunction ɵɵdeferOnImmediate() {\n    const lView = getLView();\n    const tNode = getCurrentTNode();\n    const tView = lView[TVIEW];\n    const tDetails = getTDeferBlockDetails(tView, tNode);\n    // Render placeholder block only if loading template is not present\n    // to avoid content flickering, since it would be immediately replaced\n    // by the loading block.\n    if (tDetails.loadingTmplIndex === null) {\n        renderPlaceholder(lView, tNode);\n    }\n    triggerDeferBlock(lView, tNode);\n}\n/**\n * Sets up logic to handle the `prefetch on immediate` deferred trigger.\n * @codeGenApi\n */\nfunction ɵɵdeferPrefetchOnImmediate() {\n    const lView = getLView();\n    const tNode = getCurrentTNode();\n    const tView = lView[TVIEW];\n    const tDetails = getTDeferBlockDetails(tView, tNode);\n    if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\n        triggerResourceLoading(tDetails, lView, tNode);\n    }\n}\n/**\n * Creates runtime data structures for the `on timer` deferred trigger.\n * @param delay Amount of time to wait before loading the content.\n * @codeGenApi\n */\nfunction ɵɵdeferOnTimer(delay) {\n    scheduleDelayedTrigger(onTimer(delay));\n}\n/**\n * Creates runtime data structures for the `prefetch on timer` deferred trigger.\n * @param delay Amount of time to wait before prefetching the content.\n * @codeGenApi\n */\nfunction ɵɵdeferPrefetchOnTimer(delay) {\n    scheduleDelayedPrefetching(onTimer(delay));\n}\n/**\n * Creates runtime data structures for the `on hover` deferred trigger.\n * @param triggerIndex Index at which to find the trigger element.\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\n * @codeGenApi\n */\nfunction ɵɵdeferOnHover(triggerIndex, walkUpTimes) {\n    const lView = getLView();\n    const tNode = getCurrentTNode();\n    renderPlaceholder(lView, tNode);\n    registerDomTrigger(lView, tNode, triggerIndex, walkUpTimes, onHover, () => triggerDeferBlock(lView, tNode), 0 /* TriggerType.Regular */);\n}\n/**\n * Creates runtime data structures for the `prefetch on hover` deferred trigger.\n * @param triggerIndex Index at which to find the trigger element.\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\n * @codeGenApi\n */\nfunction ɵɵdeferPrefetchOnHover(triggerIndex, walkUpTimes) {\n    const lView = getLView();\n    const tNode = getCurrentTNode();\n    const tView = lView[TVIEW];\n    const tDetails = getTDeferBlockDetails(tView, tNode);\n    if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\n        registerDomTrigger(lView, tNode, triggerIndex, walkUpTimes, onHover, () => triggerPrefetching(tDetails, lView, tNode), 1 /* TriggerType.Prefetch */);\n    }\n}\n/**\n * Creates runtime data structures for the `on interaction` deferred trigger.\n * @param triggerIndex Index at which to find the trigger element.\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\n * @codeGenApi\n */\nfunction ɵɵdeferOnInteraction(triggerIndex, walkUpTimes) {\n    const lView = getLView();\n    const tNode = getCurrentTNode();\n    renderPlaceholder(lView, tNode);\n    registerDomTrigger(lView, tNode, triggerIndex, walkUpTimes, onInteraction, () => triggerDeferBlock(lView, tNode), 0 /* TriggerType.Regular */);\n}\n/**\n * Creates runtime data structures for the `prefetch on interaction` deferred trigger.\n * @param triggerIndex Index at which to find the trigger element.\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\n * @codeGenApi\n */\nfunction ɵɵdeferPrefetchOnInteraction(triggerIndex, walkUpTimes) {\n    const lView = getLView();\n    const tNode = getCurrentTNode();\n    const tView = lView[TVIEW];\n    const tDetails = getTDeferBlockDetails(tView, tNode);\n    if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\n        registerDomTrigger(lView, tNode, triggerIndex, walkUpTimes, onInteraction, () => triggerPrefetching(tDetails, lView, tNode), 1 /* TriggerType.Prefetch */);\n    }\n}\n/**\n * Creates runtime data structures for the `on viewport` deferred trigger.\n * @param triggerIndex Index at which to find the trigger element.\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\n * @codeGenApi\n */\nfunction ɵɵdeferOnViewport(triggerIndex, walkUpTimes) {\n    const lView = getLView();\n    const tNode = getCurrentTNode();\n    renderPlaceholder(lView, tNode);\n    registerDomTrigger(lView, tNode, triggerIndex, walkUpTimes, onViewport, () => triggerDeferBlock(lView, tNode), 0 /* TriggerType.Regular */);\n}\n/**\n * Creates runtime data structures for the `prefetch on viewport` deferred trigger.\n * @param triggerIndex Index at which to find the trigger element.\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\n * @codeGenApi\n */\nfunction ɵɵdeferPrefetchOnViewport(triggerIndex, walkUpTimes) {\n    const lView = getLView();\n    const tNode = getCurrentTNode();\n    const tView = lView[TVIEW];\n    const tDetails = getTDeferBlockDetails(tView, tNode);\n    if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\n        registerDomTrigger(lView, tNode, triggerIndex, walkUpTimes, onViewport, () => triggerPrefetching(tDetails, lView, tNode), 1 /* TriggerType.Prefetch */);\n    }\n}\n/********** Helper functions **********/\n/**\n * Schedules triggering of a defer block for `on idle` and `on timer` conditions.\n */\nfunction scheduleDelayedTrigger(scheduleFn) {\n    const lView = getLView();\n    const tNode = getCurrentTNode();\n    renderPlaceholder(lView, tNode);\n    const cleanupFn = scheduleFn(() => triggerDeferBlock(lView, tNode), lView);\n    const lDetails = getLDeferBlockDetails(lView, tNode);\n    storeTriggerCleanupFn(0 /* TriggerType.Regular */, lDetails, cleanupFn);\n}\n/**\n * Schedules prefetching for `on idle` and `on timer` triggers.\n *\n * @param scheduleFn A function that does the scheduling.\n */\nfunction scheduleDelayedPrefetching(scheduleFn) {\n    const lView = getLView();\n    const tNode = getCurrentTNode();\n    const tView = lView[TVIEW];\n    const tDetails = getTDeferBlockDetails(tView, tNode);\n    if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\n        const lDetails = getLDeferBlockDetails(lView, tNode);\n        const prefetch = () => triggerPrefetching(tDetails, lView, tNode);\n        const cleanupFn = scheduleFn(prefetch, lView);\n        storeTriggerCleanupFn(1 /* TriggerType.Prefetch */, lDetails, cleanupFn);\n    }\n}\n/**\n * Transitions a defer block to the new state. Updates the  necessary\n * data structures and renders corresponding block.\n *\n * @param newState New state that should be applied to the defer block.\n * @param tNode TNode that represents a defer block.\n * @param lContainer Represents an instance of a defer block.\n * @param skipTimerScheduling Indicates that `@loading` and `@placeholder` block\n *   should be rendered immediately, even if they have `after` or `minimum` config\n *   options setup. This flag to needed for testing APIs to transition defer block\n *   between states via `DeferFixture.render` method.\n */\nfunction renderDeferBlockState(newState, tNode, lContainer, skipTimerScheduling = false) {\n    const hostLView = lContainer[PARENT];\n    const hostTView = hostLView[TVIEW];\n    // Check if this view is not destroyed. Since the loading process was async,\n    // the view might end up being destroyed by the time rendering happens.\n    if (isDestroyed(hostLView))\n        return;\n    // Make sure this TNode belongs to TView that represents host LView.\n    ngDevMode && assertTNodeForLView(tNode, hostLView);\n    const lDetails = getLDeferBlockDetails(hostLView, tNode);\n    ngDevMode && assertDefined(lDetails, 'Expected a defer block state defined');\n    const currentState = lDetails[DEFER_BLOCK_STATE];\n    if (isValidStateChange(currentState, newState) &&\n        isValidStateChange(lDetails[NEXT_DEFER_BLOCK_STATE] ?? -1, newState)) {\n        const tDetails = getTDeferBlockDetails(hostTView, tNode);\n        const needsScheduling = !skipTimerScheduling &&\n            (getLoadingBlockAfter(tDetails) !== null ||\n                getMinimumDurationForState(tDetails, DeferBlockState.Loading) !== null ||\n                getMinimumDurationForState(tDetails, DeferBlockState.Placeholder));\n        if (ngDevMode && needsScheduling) {\n            assertDefined(applyDeferBlockStateWithSchedulingImpl, 'Expected scheduling function to be defined');\n        }\n        const applyStateFn = needsScheduling ? applyDeferBlockStateWithSchedulingImpl : applyDeferBlockState;\n        try {\n            applyStateFn(newState, lDetails, lContainer, tNode, hostLView);\n        }\n        catch (error) {\n            handleError(hostLView, error);\n        }\n    }\n}\n/**\n * Applies changes to the DOM to reflect a given state.\n */\nfunction applyDeferBlockState(newState, lDetails, lContainer, tNode, hostLView) {\n    const stateTmplIndex = getTemplateIndexForState(newState, hostLView, tNode);\n    if (stateTmplIndex !== null) {\n        lDetails[DEFER_BLOCK_STATE] = newState;\n        const hostTView = hostLView[TVIEW];\n        const adjustedIndex = stateTmplIndex + HEADER_OFFSET;\n        const tNode = getTNode(hostTView, adjustedIndex);\n        // There is only 1 view that can be present in an LContainer that\n        // represents a defer block, so always refer to the first one.\n        const viewIndex = 0;\n        removeLViewFromLContainer(lContainer, viewIndex);\n        const dehydratedView = findMatchingDehydratedView(lContainer, tNode.tView.ssrId);\n        const embeddedLView = createAndRenderEmbeddedLView(hostLView, tNode, null, { dehydratedView });\n        addLViewToLContainer(lContainer, embeddedLView, viewIndex, shouldAddViewToDom(tNode, dehydratedView));\n        markViewDirty(embeddedLView);\n    }\n}\n/**\n * Extends the `applyDeferBlockState` with timer-based scheduling.\n * This function becomes available on a page if there are defer blocks\n * that use `after` or `minimum` parameters in the `@loading` or\n * `@placeholder` blocks.\n */\nfunction applyDeferBlockStateWithScheduling(newState, lDetails, lContainer, tNode, hostLView) {\n    const now = Date.now();\n    const hostTView = hostLView[TVIEW];\n    const tDetails = getTDeferBlockDetails(hostTView, tNode);\n    if (lDetails[STATE_IS_FROZEN_UNTIL] === null || lDetails[STATE_IS_FROZEN_UNTIL] <= now) {\n        lDetails[STATE_IS_FROZEN_UNTIL] = null;\n        const loadingAfter = getLoadingBlockAfter(tDetails);\n        const inLoadingAfterPhase = lDetails[LOADING_AFTER_CLEANUP_FN] !== null;\n        if (newState === DeferBlockState.Loading && loadingAfter !== null && !inLoadingAfterPhase) {\n            // Trying to render loading, but it has an `after` config,\n            // so schedule an update action after a timeout.\n            lDetails[NEXT_DEFER_BLOCK_STATE] = newState;\n            const cleanupFn = scheduleDeferBlockUpdate(loadingAfter, lDetails, tNode, lContainer, hostLView);\n            lDetails[LOADING_AFTER_CLEANUP_FN] = cleanupFn;\n        }\n        else {\n            // If we transition to a complete or an error state and there is a pending\n            // operation to render loading after a timeout - invoke a cleanup operation,\n            // which stops the timer.\n            if (newState > DeferBlockState.Loading && inLoadingAfterPhase) {\n                lDetails[LOADING_AFTER_CLEANUP_FN]();\n                lDetails[LOADING_AFTER_CLEANUP_FN] = null;\n                lDetails[NEXT_DEFER_BLOCK_STATE] = null;\n            }\n            applyDeferBlockState(newState, lDetails, lContainer, tNode, hostLView);\n            const duration = getMinimumDurationForState(tDetails, newState);\n            if (duration !== null) {\n                lDetails[STATE_IS_FROZEN_UNTIL] = now + duration;\n                scheduleDeferBlockUpdate(duration, lDetails, tNode, lContainer, hostLView);\n            }\n        }\n    }\n    else {\n        // We are still rendering the previous state.\n        // Update the `NEXT_DEFER_BLOCK_STATE`, which would be\n        // picked up once it's time to transition to the next state.\n        lDetails[NEXT_DEFER_BLOCK_STATE] = newState;\n    }\n}\n/**\n * Schedules an update operation after a specified timeout.\n */\nfunction scheduleDeferBlockUpdate(timeout, lDetails, tNode, lContainer, hostLView) {\n    const callback = () => {\n        const nextState = lDetails[NEXT_DEFER_BLOCK_STATE];\n        lDetails[STATE_IS_FROZEN_UNTIL] = null;\n        lDetails[NEXT_DEFER_BLOCK_STATE] = null;\n        if (nextState !== null) {\n            renderDeferBlockState(nextState, tNode, lContainer);\n        }\n    };\n    return scheduleTimerTrigger(timeout, callback, hostLView);\n}\n/**\n * Checks whether we can transition to the next state.\n *\n * We transition to the next state if the previous state was represented\n * with a number that is less than the next state. For example, if the current\n * state is \"loading\" (represented as `1`), we should not show a placeholder\n * (represented as `0`), but we can show a completed state (represented as `2`)\n * or an error state (represented as `3`).\n */\nfunction isValidStateChange(currentState, newState) {\n    return currentState < newState;\n}\n/**\n * Trigger prefetching of dependencies for a defer block.\n *\n * @param tDetails Static information about this defer block.\n * @param lView LView of a host view.\n */\nfunction triggerPrefetching(tDetails, lView, tNode) {\n    if (lView[INJECTOR$1] && shouldTriggerDeferBlock(lView[INJECTOR$1])) {\n        triggerResourceLoading(tDetails, lView, tNode);\n    }\n}\n/**\n * Trigger loading of defer block dependencies if the process hasn't started yet.\n *\n * @param tDetails Static information about this defer block.\n * @param lView LView of a host view.\n */\nfunction triggerResourceLoading(tDetails, lView, tNode) {\n    const injector = lView[INJECTOR$1];\n    const tView = lView[TVIEW];\n    if (tDetails.loadingState !== DeferDependenciesLoadingState.NOT_STARTED) {\n        // If the loading status is different from initial one, it means that\n        // the loading of dependencies is in progress and there is nothing to do\n        // in this function. All details can be obtained from the `tDetails` object.\n        return;\n    }\n    const lDetails = getLDeferBlockDetails(lView, tNode);\n    const primaryBlockTNode = getPrimaryBlockTNode(tView, tDetails);\n    // Switch from NOT_STARTED -> IN_PROGRESS state.\n    tDetails.loadingState = DeferDependenciesLoadingState.IN_PROGRESS;\n    // Prefetching is triggered, cleanup all registered prefetch triggers.\n    invokeTriggerCleanupFns(1 /* TriggerType.Prefetch */, lDetails);\n    let dependenciesFn = tDetails.dependencyResolverFn;\n    if (ngDevMode) {\n        // Check if dependency function interceptor is configured.\n        const deferDependencyInterceptor = injector.get(DEFER_BLOCK_DEPENDENCY_INTERCEPTOR, null, { optional: true });\n        if (deferDependencyInterceptor) {\n            dependenciesFn = deferDependencyInterceptor.intercept(dependenciesFn);\n        }\n    }\n    // The `dependenciesFn` might be `null` when all dependencies within\n    // a given defer block were eagerly referenced elsewhere in a file,\n    // thus no dynamic `import()`s were produced.\n    if (!dependenciesFn) {\n        tDetails.loadingPromise = Promise.resolve().then(() => {\n            tDetails.loadingPromise = null;\n            tDetails.loadingState = DeferDependenciesLoadingState.COMPLETE;\n        });\n        return;\n    }\n    // Start downloading of defer block dependencies.\n    tDetails.loadingPromise = Promise.allSettled(dependenciesFn()).then(results => {\n        let failed = false;\n        const directiveDefs = [];\n        const pipeDefs = [];\n        for (const result of results) {\n            if (result.status === 'fulfilled') {\n                const dependency = result.value;\n                const directiveDef = getComponentDef(dependency) || getDirectiveDef(dependency);\n                if (directiveDef) {\n                    directiveDefs.push(directiveDef);\n                }\n                else {\n                    const pipeDef = getPipeDef$1(dependency);\n                    if (pipeDef) {\n                        pipeDefs.push(pipeDef);\n                    }\n                }\n            }\n            else {\n                failed = true;\n                break;\n            }\n        }\n        // Loading is completed, we no longer need this Promise.\n        tDetails.loadingPromise = null;\n        if (failed) {\n            tDetails.loadingState = DeferDependenciesLoadingState.FAILED;\n            if (tDetails.errorTmplIndex === null) {\n                const templateLocation = getTemplateLocationDetails(lView);\n                const error = new RuntimeError(750 /* RuntimeErrorCode.DEFER_LOADING_FAILED */, ngDevMode &&\n                    'Loading dependencies for `@defer` block failed, ' +\n                        `but no \\`@error\\` block was configured${templateLocation}. ` +\n                        'Consider using the `@error` block to render an error state.');\n                handleError(lView, error);\n            }\n        }\n        else {\n            tDetails.loadingState = DeferDependenciesLoadingState.COMPLETE;\n            // Update directive and pipe registries to add newly downloaded dependencies.\n            const primaryBlockTView = primaryBlockTNode.tView;\n            if (directiveDefs.length > 0) {\n                primaryBlockTView.directiveRegistry =\n                    addDepsToRegistry(primaryBlockTView.directiveRegistry, directiveDefs);\n            }\n            if (pipeDefs.length > 0) {\n                primaryBlockTView.pipeRegistry =\n                    addDepsToRegistry(primaryBlockTView.pipeRegistry, pipeDefs);\n            }\n        }\n    });\n}\n/** Utility function to render placeholder content (if present) */\nfunction renderPlaceholder(lView, tNode) {\n    const lContainer = lView[tNode.index];\n    ngDevMode && assertLContainer(lContainer);\n    renderDeferBlockState(DeferBlockState.Placeholder, tNode, lContainer);\n}\n/**\n * Subscribes to the \"loading\" Promise and renders corresponding defer sub-block,\n * based on the loading results.\n *\n * @param lContainer Represents an instance of a defer block.\n * @param tNode Represents defer block info shared across all instances.\n */\nfunction renderDeferStateAfterResourceLoading(tDetails, tNode, lContainer) {\n    ngDevMode &&\n        assertDefined(tDetails.loadingPromise, 'Expected loading Promise to exist on this defer block');\n    tDetails.loadingPromise.then(() => {\n        if (tDetails.loadingState === DeferDependenciesLoadingState.COMPLETE) {\n            ngDevMode && assertDeferredDependenciesLoaded(tDetails);\n            // Everything is loaded, show the primary block content\n            renderDeferBlockState(DeferBlockState.Complete, tNode, lContainer);\n        }\n        else if (tDetails.loadingState === DeferDependenciesLoadingState.FAILED) {\n            renderDeferBlockState(DeferBlockState.Error, tNode, lContainer);\n        }\n    });\n}\n/**\n * Attempts to trigger loading of defer block dependencies.\n * If the block is already in a loading, completed or an error state -\n * no additional actions are taken.\n */\nfunction triggerDeferBlock(lView, tNode) {\n    const tView = lView[TVIEW];\n    const lContainer = lView[tNode.index];\n    const injector = lView[INJECTOR$1];\n    ngDevMode && assertLContainer(lContainer);\n    if (!shouldTriggerDeferBlock(injector))\n        return;\n    const lDetails = getLDeferBlockDetails(lView, tNode);\n    const tDetails = getTDeferBlockDetails(tView, tNode);\n    // Defer block is triggered, cleanup all registered trigger functions.\n    invokeAllTriggerCleanupFns(lDetails);\n    switch (tDetails.loadingState) {\n        case DeferDependenciesLoadingState.NOT_STARTED:\n            renderDeferBlockState(DeferBlockState.Loading, tNode, lContainer);\n            triggerResourceLoading(tDetails, lView, tNode);\n            // The `loadingState` might have changed to \"loading\".\n            if (tDetails.loadingState ===\n                DeferDependenciesLoadingState.IN_PROGRESS) {\n                renderDeferStateAfterResourceLoading(tDetails, tNode, lContainer);\n            }\n            break;\n        case DeferDependenciesLoadingState.IN_PROGRESS:\n            renderDeferBlockState(DeferBlockState.Loading, tNode, lContainer);\n            renderDeferStateAfterResourceLoading(tDetails, tNode, lContainer);\n            break;\n        case DeferDependenciesLoadingState.COMPLETE:\n            ngDevMode && assertDeferredDependenciesLoaded(tDetails);\n            renderDeferBlockState(DeferBlockState.Complete, tNode, lContainer);\n            break;\n        case DeferDependenciesLoadingState.FAILED:\n            renderDeferBlockState(DeferBlockState.Error, tNode, lContainer);\n            break;\n        default:\n            if (ngDevMode) {\n                throwError('Unknown defer block state');\n            }\n    }\n}\n\nfunction elementStartFirstCreatePass(index, tView, lView, name, attrsIndex, localRefsIndex) {\n    ngDevMode && assertFirstCreatePass(tView);\n    ngDevMode && ngDevMode.firstCreatePass++;\n    const tViewConsts = tView.consts;\n    const attrs = getConstant(tViewConsts, attrsIndex);\n    const tNode = getOrCreateTNode(tView, index, 2 /* TNodeType.Element */, name, attrs);\n    resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex));\n    if (tNode.attrs !== null) {\n        computeStaticStyling(tNode, tNode.attrs, false);\n    }\n    if (tNode.mergedAttrs !== null) {\n        computeStaticStyling(tNode, tNode.mergedAttrs, true);\n    }\n    if (tView.queries !== null) {\n        tView.queries.elementStart(tView, tNode);\n    }\n    return tNode;\n}\n/**\n * Create DOM element. The instruction must later be followed by `elementEnd()` call.\n *\n * @param index Index of the element in the LView array\n * @param name Name of the DOM Node\n * @param attrsIndex Index of the element's attributes in the `consts` array.\n * @param localRefsIndex Index of the element's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * Attributes and localRefs are passed as an array of strings where elements with an even index\n * hold an attribute name and elements with an odd index hold an attribute value, ex.:\n * ['id', 'warning5', 'class', 'alert']\n *\n * @codeGenApi\n */\nfunction ɵɵelementStart(index, name, attrsIndex, localRefsIndex) {\n    const lView = getLView();\n    const tView = getTView();\n    const adjustedIndex = HEADER_OFFSET + index;\n    ngDevMode &&\n        assertEqual(getBindingIndex(), tView.bindingStartIndex, 'elements should be created before any bindings');\n    ngDevMode && assertIndexInRange(lView, adjustedIndex);\n    const renderer = lView[RENDERER];\n    const tNode = tView.firstCreatePass ?\n        elementStartFirstCreatePass(adjustedIndex, tView, lView, name, attrsIndex, localRefsIndex) :\n        tView.data[adjustedIndex];\n    const native = _locateOrCreateElementNode(tView, lView, tNode, renderer, name, index);\n    lView[adjustedIndex] = native;\n    const hasDirectives = isDirectiveHost(tNode);\n    if (ngDevMode && tView.firstCreatePass) {\n        validateElementIsKnown(native, lView, tNode.value, tView.schemas, hasDirectives);\n    }\n    setCurrentTNode(tNode, true);\n    setupStaticAttributes(renderer, native, tNode);\n    if ((tNode.flags & 32 /* TNodeFlags.isDetached */) !== 32 /* TNodeFlags.isDetached */ && wasLastNodeCreated()) {\n        // In the i18n case, the translation may have removed this element, so only add it if it is not\n        // detached. See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.\n        appendChild(tView, lView, native, tNode);\n    }\n    // any immediate children of a component or template container must be pre-emptively\n    // monkey-patched with the component view data so that the element can be inspected\n    // later on using any element discovery utility methods (see `element_discovery.ts`)\n    if (getElementDepthCount() === 0) {\n        attachPatchData(native, lView);\n    }\n    increaseElementDepthCount();\n    if (hasDirectives) {\n        createDirectivesInstances(tView, lView, tNode);\n        executeContentQueries(tView, tNode, lView);\n    }\n    if (localRefsIndex !== null) {\n        saveResolvedLocalsInData(lView, tNode);\n    }\n    return ɵɵelementStart;\n}\n/**\n * Mark the end of the element.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nfunction ɵɵelementEnd() {\n    let currentTNode = getCurrentTNode();\n    ngDevMode && assertDefined(currentTNode, 'No parent node to close.');\n    if (isCurrentTNodeParent()) {\n        setCurrentTNodeAsNotParent();\n    }\n    else {\n        ngDevMode && assertHasParent(getCurrentTNode());\n        currentTNode = currentTNode.parent;\n        setCurrentTNode(currentTNode, false);\n    }\n    const tNode = currentTNode;\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */);\n    if (isSkipHydrationRootTNode(tNode)) {\n        leaveSkipHydrationBlock();\n    }\n    decreaseElementDepthCount();\n    const tView = getTView();\n    if (tView.firstCreatePass) {\n        registerPostOrderHooks(tView, currentTNode);\n        if (isContentQueryHost(currentTNode)) {\n            tView.queries.elementEnd(currentTNode);\n        }\n    }\n    if (tNode.classesWithoutHost != null && hasClassInput(tNode)) {\n        setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.classesWithoutHost, true);\n    }\n    if (tNode.stylesWithoutHost != null && hasStyleInput(tNode)) {\n        setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.stylesWithoutHost, false);\n    }\n    return ɵɵelementEnd;\n}\n/**\n * Creates an empty element using {@link elementStart} and {@link elementEnd}\n *\n * @param index Index of the element in the data array\n * @param name Name of the DOM Node\n * @param attrsIndex Index of the element's attributes in the `consts` array.\n * @param localRefsIndex Index of the element's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nfunction ɵɵelement(index, name, attrsIndex, localRefsIndex) {\n    ɵɵelementStart(index, name, attrsIndex, localRefsIndex);\n    ɵɵelementEnd();\n    return ɵɵelement;\n}\nlet _locateOrCreateElementNode = (tView, lView, tNode, renderer, name, index) => {\n    lastNodeWasCreated(true);\n    return createElementNode(renderer, name, getNamespace$1());\n};\n/**\n * Enables hydration code path (to lookup existing elements in DOM)\n * in addition to the regular creation mode of element nodes.\n */\nfunction locateOrCreateElementNodeImpl(tView, lView, tNode, renderer, name, index) {\n    const hydrationInfo = lView[HYDRATION];\n    const isNodeCreationMode = !hydrationInfo || isInSkipHydrationBlock$1() || isDisconnectedNode$1(hydrationInfo, index);\n    lastNodeWasCreated(isNodeCreationMode);\n    // Regular creation mode.\n    if (isNodeCreationMode) {\n        return createElementNode(renderer, name, getNamespace$1());\n    }\n    // Hydration mode, looking up an existing element in DOM.\n    const native = locateNextRNode(hydrationInfo, tView, lView, tNode);\n    ngDevMode && validateMatchingNode(native, Node.ELEMENT_NODE, name, lView, tNode);\n    ngDevMode && markRNodeAsClaimedByHydration(native);\n    // This element might also be an anchor of a view container.\n    if (getSerializedContainerViews(hydrationInfo, index)) {\n        // Important note: this element acts as an anchor, but it's **not** a part\n        // of the embedded view, so we start the segment **after** this element, taking\n        // a reference to the next sibling. For example, the following template:\n        // `<div #vcrTarget>` is represented in the DOM as `<div></div>...<!--container-->`,\n        // so while processing a `<div>` instruction, point to the next sibling as a\n        // start of a segment.\n        ngDevMode && validateNodeExists(native.nextSibling, lView, tNode);\n        setSegmentHead(hydrationInfo, index, native.nextSibling);\n    }\n    // Checks if the skip hydration attribute is present during hydration so we know to\n    // skip attempting to hydrate this block. We check both TNode and RElement for an\n    // attribute: the RElement case is needed for i18n cases, when we add it to host\n    // elements during the annotation phase (after all internal data structures are setup).\n    if (hydrationInfo &&\n        (hasSkipHydrationAttrOnTNode(tNode) || hasSkipHydrationAttrOnRElement(native))) {\n        if (isComponentHost(tNode)) {\n            enterSkipHydrationBlock(tNode);\n            // Since this isn't hydratable, we need to empty the node\n            // so there's no duplicate content after render\n            clearElementContents(native);\n            ngDevMode && ngDevMode.componentsSkippedHydration++;\n        }\n        else if (ngDevMode) {\n            // If this is not a component host, throw an error.\n            // Hydration can be skipped on per-component basis only.\n            throw invalidSkipHydrationHost(native);\n        }\n    }\n    return native;\n}\nfunction enableLocateOrCreateElementNodeImpl() {\n    _locateOrCreateElementNode = locateOrCreateElementNodeImpl;\n}\n\nfunction elementContainerStartFirstCreatePass(index, tView, lView, attrsIndex, localRefsIndex) {\n    ngDevMode && ngDevMode.firstCreatePass++;\n    const tViewConsts = tView.consts;\n    const attrs = getConstant(tViewConsts, attrsIndex);\n    const tNode = getOrCreateTNode(tView, index, 8 /* TNodeType.ElementContainer */, 'ng-container', attrs);\n    // While ng-container doesn't necessarily support styling, we use the style context to identify\n    // and execute directives on the ng-container.\n    if (attrs !== null) {\n        computeStaticStyling(tNode, attrs, true);\n    }\n    const localRefs = getConstant(tViewConsts, localRefsIndex);\n    resolveDirectives(tView, lView, tNode, localRefs);\n    if (tView.queries !== null) {\n        tView.queries.elementStart(tView, tNode);\n    }\n    return tNode;\n}\n/**\n * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.\n * The instruction must later be followed by `elementContainerEnd()` call.\n *\n * @param index Index of the element in the LView array\n * @param attrsIndex Index of the container attributes in the `consts` array.\n * @param localRefsIndex Index of the container's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * Even if this instruction accepts a set of attributes no actual attribute values are propagated to\n * the DOM (as a comment node can't have attributes). Attributes are here only for directive\n * matching purposes and setting initial inputs of directives.\n *\n * @codeGenApi\n */\nfunction ɵɵelementContainerStart(index, attrsIndex, localRefsIndex) {\n    const lView = getLView();\n    const tView = getTView();\n    const adjustedIndex = index + HEADER_OFFSET;\n    ngDevMode && assertIndexInRange(lView, adjustedIndex);\n    ngDevMode &&\n        assertEqual(getBindingIndex(), tView.bindingStartIndex, 'element containers should be created before any bindings');\n    const tNode = tView.firstCreatePass ?\n        elementContainerStartFirstCreatePass(adjustedIndex, tView, lView, attrsIndex, localRefsIndex) :\n        tView.data[adjustedIndex];\n    setCurrentTNode(tNode, true);\n    const comment = _locateOrCreateElementContainerNode(tView, lView, tNode, index);\n    lView[adjustedIndex] = comment;\n    if (wasLastNodeCreated()) {\n        appendChild(tView, lView, comment, tNode);\n    }\n    attachPatchData(comment, lView);\n    if (isDirectiveHost(tNode)) {\n        createDirectivesInstances(tView, lView, tNode);\n        executeContentQueries(tView, tNode, lView);\n    }\n    if (localRefsIndex != null) {\n        saveResolvedLocalsInData(lView, tNode);\n    }\n    return ɵɵelementContainerStart;\n}\n/**\n * Mark the end of the <ng-container>.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nfunction ɵɵelementContainerEnd() {\n    let currentTNode = getCurrentTNode();\n    const tView = getTView();\n    if (isCurrentTNodeParent()) {\n        setCurrentTNodeAsNotParent();\n    }\n    else {\n        ngDevMode && assertHasParent(currentTNode);\n        currentTNode = currentTNode.parent;\n        setCurrentTNode(currentTNode, false);\n    }\n    ngDevMode && assertTNodeType(currentTNode, 8 /* TNodeType.ElementContainer */);\n    if (tView.firstCreatePass) {\n        registerPostOrderHooks(tView, currentTNode);\n        if (isContentQueryHost(currentTNode)) {\n            tView.queries.elementEnd(currentTNode);\n        }\n    }\n    return ɵɵelementContainerEnd;\n}\n/**\n * Creates an empty logical container using {@link elementContainerStart}\n * and {@link elementContainerEnd}\n *\n * @param index Index of the element in the LView array\n * @param attrsIndex Index of the container attributes in the `consts` array.\n * @param localRefsIndex Index of the container's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nfunction ɵɵelementContainer(index, attrsIndex, localRefsIndex) {\n    ɵɵelementContainerStart(index, attrsIndex, localRefsIndex);\n    ɵɵelementContainerEnd();\n    return ɵɵelementContainer;\n}\nlet _locateOrCreateElementContainerNode = (tView, lView, tNode, index) => {\n    lastNodeWasCreated(true);\n    return createCommentNode(lView[RENDERER], ngDevMode ? 'ng-container' : '');\n};\n/**\n * Enables hydration code path (to lookup existing elements in DOM)\n * in addition to the regular creation mode of comment nodes that\n * represent <ng-container>'s anchor.\n */\nfunction locateOrCreateElementContainerNode(tView, lView, tNode, index) {\n    let comment;\n    const hydrationInfo = lView[HYDRATION];\n    const isNodeCreationMode = !hydrationInfo || isInSkipHydrationBlock$1();\n    lastNodeWasCreated(isNodeCreationMode);\n    // Regular creation mode.\n    if (isNodeCreationMode) {\n        return createCommentNode(lView[RENDERER], ngDevMode ? 'ng-container' : '');\n    }\n    // Hydration mode, looking up existing elements in DOM.\n    const currentRNode = locateNextRNode(hydrationInfo, tView, lView, tNode);\n    ngDevMode && validateNodeExists(currentRNode, lView, tNode);\n    const ngContainerSize = getNgContainerSize(hydrationInfo, index);\n    ngDevMode &&\n        assertNumber(ngContainerSize, 'Unexpected state: hydrating an <ng-container>, ' +\n            'but no hydration info is available.');\n    setSegmentHead(hydrationInfo, index, currentRNode);\n    comment = siblingAfter(ngContainerSize, currentRNode);\n    if (ngDevMode) {\n        validateMatchingNode(comment, Node.COMMENT_NODE, null, lView, tNode);\n        markRNodeAsClaimedByHydration(comment);\n    }\n    return comment;\n}\nfunction enableLocateOrCreateElementContainerNodeImpl() {\n    _locateOrCreateElementContainerNode = locateOrCreateElementContainerNode;\n}\n\n/**\n * Returns the current OpaqueViewState instance.\n *\n * Used in conjunction with the restoreView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @codeGenApi\n */\nfunction ɵɵgetCurrentView() {\n    return getLView();\n}\n\n/**\n * Update a property on a host element. Only applies to native node properties, not inputs.\n *\n * Operates on the element selected by index via the {@link select} instruction.\n *\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n * @returns This function returns itself so that it may be chained\n * (e.g. `property('name', ctx.name)('title', ctx.title)`)\n *\n * @codeGenApi\n */\nfunction ɵɵhostProperty(propName, value, sanitizer) {\n    const lView = getLView();\n    const bindingIndex = nextBindingIndex();\n    if (bindingUpdated(lView, bindingIndex, value)) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, true);\n        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n    }\n    return ɵɵhostProperty;\n}\n/**\n * Updates a synthetic host binding (e.g. `[@foo]`) on a component or directive.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host binding (e.g. `@HostBinding('@foo')`) properly gets rendered in\n * the component's renderer. Normally all host bindings are evaluated with the parent\n * component's renderer, but, in the case of animation @triggers, they need to be\n * evaluated with the sub component's renderer (because that's where the animation\n * triggers are defined).\n *\n * Do not use this instruction as a replacement for `elementProperty`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * @param index The index of the element to update in the data array\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n *\n * @codeGenApi\n */\nfunction ɵɵsyntheticHostProperty(propName, value, sanitizer) {\n    const lView = getLView();\n    const bindingIndex = nextBindingIndex();\n    if (bindingUpdated(lView, bindingIndex, value)) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        const currentDef = getCurrentDirectiveDef(tView.data);\n        const renderer = loadComponentRenderer(currentDef, tNode, lView);\n        elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, true);\n        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n    }\n    return ɵɵsyntheticHostProperty;\n}\n\n/**\n * NOTE: changes to the `ngI18nClosureMode` name must be synced with `compiler-cli/src/tooling.ts`.\n */\nif (typeof ngI18nClosureMode === 'undefined') {\n    // These property accesses can be ignored because ngI18nClosureMode will be set to false\n    // when optimizing code and the whole if statement will be dropped.\n    // Make sure to refer to ngI18nClosureMode as ['ngI18nClosureMode'] for closure.\n    // NOTE: we need to have it in IIFE so that the tree-shaker is happy.\n    (function () {\n        // tslint:disable-next-line:no-toplevel-property-access\n        _global['ngI18nClosureMode'] =\n            // TODO(FW-1250): validate that this actually, you know, works.\n            // tslint:disable-next-line:no-toplevel-property-access\n            typeof goog !== 'undefined' && typeof goog.getMsg === 'function';\n    })();\n}\n\n// THIS CODE IS GENERATED - DO NOT MODIFY.\nconst u = undefined;\nfunction plural(val) {\n    const n = val, i = Math.floor(Math.abs(val)), v = val.toString().replace(/^[^.]*\\.?/, '').length;\n    if (i === 1 && v === 0)\n        return 1;\n    return 5;\n}\nvar localeEn = [\"en\", [[\"a\", \"p\"], [\"AM\", \"PM\"], u], [[\"AM\", \"PM\"], u, u], [[\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"], [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"], [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"], [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"]], u, [[\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"], [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"], [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]], u, [[\"B\", \"A\"], [\"BC\", \"AD\"], [\"Before Christ\", \"Anno Domini\"]], 0, [6, 0], [\"M/d/yy\", \"MMM d, y\", \"MMMM d, y\", \"EEEE, MMMM d, y\"], [\"h:mm a\", \"h:mm:ss a\", \"h:mm:ss a z\", \"h:mm:ss a zzzz\"], [\"{1}, {0}\", u, \"{1} 'at' {0}\", u], [\".\", \",\", \";\", \"%\", \"+\", \"-\", \"E\", \"×\", \"‰\", \"∞\", \"NaN\", \":\"], [\"#,##0.###\", \"#,##0%\", \"¤#,##0.00\", \"#E0\"], \"USD\", \"$\", \"US Dollar\", {}, \"ltr\", plural];\n\n/**\n * This const is used to store the locale data registered with `registerLocaleData`\n */\nlet LOCALE_DATA = {};\n/**\n * Register locale data to be used internally by Angular. See the\n * [\"I18n guide\"](guide/i18n-common-format-data-locale) to know how to import additional locale\n * data.\n *\n * The signature `registerLocaleData(data: any, extraData?: any)` is deprecated since v5.1\n */\nfunction registerLocaleData(data, localeId, extraData) {\n    if (typeof localeId !== 'string') {\n        extraData = localeId;\n        localeId = data[LocaleDataIndex.LocaleId];\n    }\n    localeId = localeId.toLowerCase().replace(/_/g, '-');\n    LOCALE_DATA[localeId] = data;\n    if (extraData) {\n        LOCALE_DATA[localeId][LocaleDataIndex.ExtraData] = extraData;\n    }\n}\n/**\n * Finds the locale data for a given locale.\n *\n * @param locale The locale code.\n * @returns The locale data.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n */\nfunction findLocaleData(locale) {\n    const normalizedLocale = normalizeLocale(locale);\n    let match = getLocaleData(normalizedLocale);\n    if (match) {\n        return match;\n    }\n    // let's try to find a parent locale\n    const parentLocale = normalizedLocale.split('-')[0];\n    match = getLocaleData(parentLocale);\n    if (match) {\n        return match;\n    }\n    if (parentLocale === 'en') {\n        return localeEn;\n    }\n    throw new RuntimeError(701 /* RuntimeErrorCode.MISSING_LOCALE_DATA */, ngDevMode && `Missing locale data for the locale \"${locale}\".`);\n}\n/**\n * Retrieves the default currency code for the given locale.\n *\n * The default is defined as the first currency which is still in use.\n *\n * @param locale The code of the locale whose currency code we want.\n * @returns The code of the default currency for the given locale.\n *\n */\nfunction getLocaleCurrencyCode(locale) {\n    const data = findLocaleData(locale);\n    return data[LocaleDataIndex.CurrencyCode] || null;\n}\n/**\n * Retrieves the plural function used by ICU expressions to determine the plural case to use\n * for a given locale.\n * @param locale A locale code for the locale format rules to use.\n * @returns The plural function for the locale.\n * @see {@link NgPlural}\n * @see [Internationalization (i18n) Guide](/guide/i18n-overview)\n */\nfunction getLocalePluralCase(locale) {\n    const data = findLocaleData(locale);\n    return data[LocaleDataIndex.PluralCase];\n}\n/**\n * Helper function to get the given `normalizedLocale` from `LOCALE_DATA`\n * or from the global `ng.common.locale`.\n */\nfunction getLocaleData(normalizedLocale) {\n    if (!(normalizedLocale in LOCALE_DATA)) {\n        LOCALE_DATA[normalizedLocale] = _global.ng && _global.ng.common && _global.ng.common.locales &&\n            _global.ng.common.locales[normalizedLocale];\n    }\n    return LOCALE_DATA[normalizedLocale];\n}\n/**\n * Helper function to remove all the locale data from `LOCALE_DATA`.\n */\nfunction unregisterAllLocaleData() {\n    LOCALE_DATA = {};\n}\n/**\n * Index of each type of locale data from the locale data array\n */\nvar LocaleDataIndex;\n(function (LocaleDataIndex) {\n    LocaleDataIndex[LocaleDataIndex[\"LocaleId\"] = 0] = \"LocaleId\";\n    LocaleDataIndex[LocaleDataIndex[\"DayPeriodsFormat\"] = 1] = \"DayPeriodsFormat\";\n    LocaleDataIndex[LocaleDataIndex[\"DayPeriodsStandalone\"] = 2] = \"DayPeriodsStandalone\";\n    LocaleDataIndex[LocaleDataIndex[\"DaysFormat\"] = 3] = \"DaysFormat\";\n    LocaleDataIndex[LocaleDataIndex[\"DaysStandalone\"] = 4] = \"DaysStandalone\";\n    LocaleDataIndex[LocaleDataIndex[\"MonthsFormat\"] = 5] = \"MonthsFormat\";\n    LocaleDataIndex[LocaleDataIndex[\"MonthsStandalone\"] = 6] = \"MonthsStandalone\";\n    LocaleDataIndex[LocaleDataIndex[\"Eras\"] = 7] = \"Eras\";\n    LocaleDataIndex[LocaleDataIndex[\"FirstDayOfWeek\"] = 8] = \"FirstDayOfWeek\";\n    LocaleDataIndex[LocaleDataIndex[\"WeekendRange\"] = 9] = \"WeekendRange\";\n    LocaleDataIndex[LocaleDataIndex[\"DateFormat\"] = 10] = \"DateFormat\";\n    LocaleDataIndex[LocaleDataIndex[\"TimeFormat\"] = 11] = \"TimeFormat\";\n    LocaleDataIndex[LocaleDataIndex[\"DateTimeFormat\"] = 12] = \"DateTimeFormat\";\n    LocaleDataIndex[LocaleDataIndex[\"NumberSymbols\"] = 13] = \"NumberSymbols\";\n    LocaleDataIndex[LocaleDataIndex[\"NumberFormats\"] = 14] = \"NumberFormats\";\n    LocaleDataIndex[LocaleDataIndex[\"CurrencyCode\"] = 15] = \"CurrencyCode\";\n    LocaleDataIndex[LocaleDataIndex[\"CurrencySymbol\"] = 16] = \"CurrencySymbol\";\n    LocaleDataIndex[LocaleDataIndex[\"CurrencyName\"] = 17] = \"CurrencyName\";\n    LocaleDataIndex[LocaleDataIndex[\"Currencies\"] = 18] = \"Currencies\";\n    LocaleDataIndex[LocaleDataIndex[\"Directionality\"] = 19] = \"Directionality\";\n    LocaleDataIndex[LocaleDataIndex[\"PluralCase\"] = 20] = \"PluralCase\";\n    LocaleDataIndex[LocaleDataIndex[\"ExtraData\"] = 21] = \"ExtraData\";\n})(LocaleDataIndex || (LocaleDataIndex = {}));\n/**\n * Returns the canonical form of a locale name - lowercase with `_` replaced with `-`.\n */\nfunction normalizeLocale(locale) {\n    return locale.toLowerCase().replace(/_/g, '-');\n}\n\nconst pluralMapping = ['zero', 'one', 'two', 'few', 'many'];\n/**\n * Returns the plural case based on the locale\n */\nfunction getPluralCase(value, locale) {\n    const plural = getLocalePluralCase(locale)(parseInt(value, 10));\n    const result = pluralMapping[plural];\n    return (result !== undefined) ? result : 'other';\n}\n/**\n * The locale id that the application is using by default (for translations and ICU expressions).\n */\nconst DEFAULT_LOCALE_ID = 'en-US';\n/**\n * USD currency code that the application uses by default for CurrencyPipe when no\n * DEFAULT_CURRENCY_CODE is provided.\n */\nconst USD_CURRENCY_CODE = 'USD';\n\n/**\n * Marks that the next string is an element name.\n *\n * See `I18nMutateOpCodes` documentation.\n */\nconst ELEMENT_MARKER = {\n    marker: 'element'\n};\n/**\n * Marks that the next string is comment text need for ICU.\n *\n * See `I18nMutateOpCodes` documentation.\n */\nconst ICU_MARKER = {\n    marker: 'ICU'\n};\n/**\n * See `I18nCreateOpCodes`\n */\nvar I18nCreateOpCode;\n(function (I18nCreateOpCode) {\n    /**\n     * Number of bits to shift index so that it can be combined with the `APPEND_EAGERLY` and\n     * `COMMENT`.\n     */\n    I18nCreateOpCode[I18nCreateOpCode[\"SHIFT\"] = 2] = \"SHIFT\";\n    /**\n     * Should the node be appended to parent immediately after creation.\n     */\n    I18nCreateOpCode[I18nCreateOpCode[\"APPEND_EAGERLY\"] = 1] = \"APPEND_EAGERLY\";\n    /**\n     * If set the node should be comment (rather than a text) node.\n     */\n    I18nCreateOpCode[I18nCreateOpCode[\"COMMENT\"] = 2] = \"COMMENT\";\n})(I18nCreateOpCode || (I18nCreateOpCode = {}));\n\n/**\n * The locale id that the application is currently using (for translations and ICU expressions).\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n */\nlet LOCALE_ID$1 = DEFAULT_LOCALE_ID;\n/**\n * Sets the locale id that will be used for translations and ICU expressions.\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n *\n * @param localeId\n */\nfunction setLocaleId(localeId) {\n    assertDefined(localeId, `Expected localeId to be defined`);\n    if (typeof localeId === 'string') {\n        LOCALE_ID$1 = localeId.toLowerCase().replace(/_/g, '-');\n    }\n}\n/**\n * Gets the locale id that will be used for translations and ICU expressions.\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n */\nfunction getLocaleId() {\n    return LOCALE_ID$1;\n}\n\n/**\n * Find a node in front of which `currentTNode` should be inserted (takes i18n into account).\n *\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\n * takes `TNode.insertBeforeIndex` into account.\n *\n * @param parentTNode parent `TNode`\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\n * @param lView current `LView`\n */\nfunction getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView) {\n    const tNodeInsertBeforeIndex = currentTNode.insertBeforeIndex;\n    const insertBeforeIndex = Array.isArray(tNodeInsertBeforeIndex) ? tNodeInsertBeforeIndex[0] : tNodeInsertBeforeIndex;\n    if (insertBeforeIndex === null) {\n        return getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView);\n    }\n    else {\n        ngDevMode && assertIndexInRange(lView, insertBeforeIndex);\n        return unwrapRNode(lView[insertBeforeIndex]);\n    }\n}\n/**\n * Process `TNode.insertBeforeIndex` by adding i18n text nodes.\n *\n * See `TNode.insertBeforeIndex`\n */\nfunction processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRElement) {\n    const tNodeInsertBeforeIndex = childTNode.insertBeforeIndex;\n    if (Array.isArray(tNodeInsertBeforeIndex)) {\n        // An array indicates that there are i18n nodes that need to be added as children of this\n        // `childRNode`. These i18n nodes were created before this `childRNode` was available and so\n        // only now can be added. The first element of the array is the normal index where we should\n        // insert the `childRNode`. Additional elements are the extra nodes to be added as children of\n        // `childRNode`.\n        ngDevMode && assertDomNode(childRNode);\n        let i18nParent = childRNode;\n        let anchorRNode = null;\n        if (!(childTNode.type & 3 /* TNodeType.AnyRNode */)) {\n            anchorRNode = i18nParent;\n            i18nParent = parentRElement;\n        }\n        if (i18nParent !== null && childTNode.componentOffset === -1) {\n            for (let i = 1; i < tNodeInsertBeforeIndex.length; i++) {\n                // No need to `unwrapRNode` because all of the indexes point to i18n text nodes.\n                // see `assertDomNode` below.\n                const i18nChild = lView[tNodeInsertBeforeIndex[i]];\n                nativeInsertBefore(renderer, i18nParent, i18nChild, anchorRNode, false);\n            }\n        }\n    }\n}\n\n/**\n * Add `tNode` to `previousTNodes` list and update relevant `TNode`s in `previousTNodes` list\n * `tNode.insertBeforeIndex`.\n *\n * Things to keep in mind:\n * 1. All i18n text nodes are encoded as `TNodeType.Element` and are created eagerly by the\n *    `ɵɵi18nStart` instruction.\n * 2. All `TNodeType.Placeholder` `TNodes` are elements which will be created later by\n *    `ɵɵelementStart` instruction.\n * 3. `ɵɵelementStart` instruction will create `TNode`s in the ascending `TNode.index` order. (So a\n *    smaller index `TNode` is guaranteed to be created before a larger one)\n *\n * We use the above three invariants to determine `TNode.insertBeforeIndex`.\n *\n * In an ideal world `TNode.insertBeforeIndex` would always be `TNode.next.index`. However,\n * this will not work because `TNode.next.index` may be larger than `TNode.index` which means that\n * the next node is not yet created and therefore we can't insert in front of it.\n *\n * Rule1: `TNode.insertBeforeIndex = null` if `TNode.next === null` (Initial condition, as we don't\n *        know if there will be further `TNode`s inserted after.)\n * Rule2: If `previousTNode` is created after the `tNode` being inserted, then\n *        `previousTNode.insertBeforeNode = tNode.index` (So when a new `tNode` is added we check\n *        previous to see if we can update its `insertBeforeTNode`)\n *\n * See `TNode.insertBeforeIndex` for more context.\n *\n * @param previousTNodes A list of previous TNodes so that we can easily traverse `TNode`s in\n *     reverse order. (If `TNode` would have `previous` this would not be necessary.)\n * @param newTNode A TNode to add to the `previousTNodes` list.\n */\nfunction addTNodeAndUpdateInsertBeforeIndex(previousTNodes, newTNode) {\n    // Start with Rule1\n    ngDevMode &&\n        assertEqual(newTNode.insertBeforeIndex, null, 'We expect that insertBeforeIndex is not set');\n    previousTNodes.push(newTNode);\n    if (previousTNodes.length > 1) {\n        for (let i = previousTNodes.length - 2; i >= 0; i--) {\n            const existingTNode = previousTNodes[i];\n            // Text nodes are created eagerly and so they don't need their `indexBeforeIndex` updated.\n            // It is safe to ignore them.\n            if (!isI18nText(existingTNode)) {\n                if (isNewTNodeCreatedBefore(existingTNode, newTNode) &&\n                    getInsertBeforeIndex(existingTNode) === null) {\n                    // If it was created before us in time, (and it does not yet have `insertBeforeIndex`)\n                    // then add the `insertBeforeIndex`.\n                    setInsertBeforeIndex(existingTNode, newTNode.index);\n                }\n            }\n        }\n    }\n}\nfunction isI18nText(tNode) {\n    return !(tNode.type & 64 /* TNodeType.Placeholder */);\n}\nfunction isNewTNodeCreatedBefore(existingTNode, newTNode) {\n    return isI18nText(newTNode) || existingTNode.index > newTNode.index;\n}\nfunction getInsertBeforeIndex(tNode) {\n    const index = tNode.insertBeforeIndex;\n    return Array.isArray(index) ? index[0] : index;\n}\nfunction setInsertBeforeIndex(tNode, value) {\n    const index = tNode.insertBeforeIndex;\n    if (Array.isArray(index)) {\n        // Array is stored if we have to insert child nodes. See `TNode.insertBeforeIndex`\n        index[0] = value;\n    }\n    else {\n        setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);\n        tNode.insertBeforeIndex = value;\n    }\n}\n\n/**\n * Retrieve `TIcu` at a given `index`.\n *\n * The `TIcu` can be stored either directly (if it is nested ICU) OR\n * it is stored inside tho `TIcuContainer` if it is top level ICU.\n *\n * The reason for this is that the top level ICU need a `TNode` so that they are part of the render\n * tree, but nested ICU's have no TNode, because we don't know ahead of time if the nested ICU is\n * expressed (parent ICU may have selected a case which does not contain it.)\n *\n * @param tView Current `TView`.\n * @param index Index where the value should be read from.\n */\nfunction getTIcu(tView, index) {\n    const value = tView.data[index];\n    if (value === null || typeof value === 'string')\n        return null;\n    if (ngDevMode &&\n        !(value.hasOwnProperty('tView') || value.hasOwnProperty('currentCaseLViewIndex'))) {\n        throwError('We expect to get \\'null\\'|\\'TIcu\\'|\\'TIcuContainer\\', but got: ' + value);\n    }\n    // Here the `value.hasOwnProperty('currentCaseLViewIndex')` is a polymorphic read as it can be\n    // either TIcu or TIcuContainerNode. This is not ideal, but we still think it is OK because it\n    // will be just two cases which fits into the browser inline cache (inline cache can take up to\n    // 4)\n    const tIcu = value.hasOwnProperty('currentCaseLViewIndex') ? value :\n        value.value;\n    ngDevMode && assertTIcu(tIcu);\n    return tIcu;\n}\n/**\n * Store `TIcu` at a give `index`.\n *\n * The `TIcu` can be stored either directly (if it is nested ICU) OR\n * it is stored inside tho `TIcuContainer` if it is top level ICU.\n *\n * The reason for this is that the top level ICU need a `TNode` so that they are part of the render\n * tree, but nested ICU's have no TNode, because we don't know ahead of time if the nested ICU is\n * expressed (parent ICU may have selected a case which does not contain it.)\n *\n * @param tView Current `TView`.\n * @param index Index where the value should be stored at in `Tview.data`\n * @param tIcu The TIcu to store.\n */\nfunction setTIcu(tView, index, tIcu) {\n    const tNode = tView.data[index];\n    ngDevMode &&\n        assertEqual(tNode === null || tNode.hasOwnProperty('tView'), true, 'We expect to get \\'null\\'|\\'TIcuContainer\\'');\n    if (tNode === null) {\n        tView.data[index] = tIcu;\n    }\n    else {\n        ngDevMode && assertTNodeType(tNode, 32 /* TNodeType.Icu */);\n        tNode.value = tIcu;\n    }\n}\n/**\n * Set `TNode.insertBeforeIndex` taking the `Array` into account.\n *\n * See `TNode.insertBeforeIndex`\n */\nfunction setTNodeInsertBeforeIndex(tNode, index) {\n    ngDevMode && assertTNode(tNode);\n    let insertBeforeIndex = tNode.insertBeforeIndex;\n    if (insertBeforeIndex === null) {\n        setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);\n        insertBeforeIndex = tNode.insertBeforeIndex =\n            [null /* may be updated to number later */, index];\n    }\n    else {\n        assertEqual(Array.isArray(insertBeforeIndex), true, 'Expecting array here');\n        insertBeforeIndex.push(index);\n    }\n}\n/**\n * Create `TNode.type=TNodeType.Placeholder` node.\n *\n * See `TNodeType.Placeholder` for more information.\n */\nfunction createTNodePlaceholder(tView, previousTNodes, index) {\n    const tNode = createTNodeAtIndex(tView, index, 64 /* TNodeType.Placeholder */, null, null);\n    addTNodeAndUpdateInsertBeforeIndex(previousTNodes, tNode);\n    return tNode;\n}\n/**\n * Returns current ICU case.\n *\n * ICU cases are stored as index into the `TIcu.cases`.\n * At times it is necessary to communicate that the ICU case just switched and that next ICU update\n * should update all bindings regardless of the mask. In such a case the we store negative numbers\n * for cases which have just been switched. This function removes the negative flag.\n */\nfunction getCurrentICUCaseIndex(tIcu, lView) {\n    const currentCase = lView[tIcu.currentCaseLViewIndex];\n    return currentCase === null ? currentCase : (currentCase < 0 ? ~currentCase : currentCase);\n}\nfunction getParentFromIcuCreateOpCode(mergedCode) {\n    return mergedCode >>> 17 /* IcuCreateOpCode.SHIFT_PARENT */;\n}\nfunction getRefFromIcuCreateOpCode(mergedCode) {\n    return (mergedCode & 131070 /* IcuCreateOpCode.MASK_REF */) >>> 1 /* IcuCreateOpCode.SHIFT_REF */;\n}\nfunction getInstructionFromIcuCreateOpCode(mergedCode) {\n    return mergedCode & 1 /* IcuCreateOpCode.MASK_INSTRUCTION */;\n}\nfunction icuCreateOpCode(opCode, parentIdx, refIdx) {\n    ngDevMode && assertGreaterThanOrEqual(parentIdx, 0, 'Missing parent index');\n    ngDevMode && assertGreaterThan(refIdx, 0, 'Missing ref index');\n    return opCode | parentIdx << 17 /* IcuCreateOpCode.SHIFT_PARENT */ | refIdx << 1 /* IcuCreateOpCode.SHIFT_REF */;\n}\n\n/**\n * Keep track of which input bindings in `ɵɵi18nExp` have changed.\n *\n * This is used to efficiently update expressions in i18n only when the corresponding input has\n * changed.\n *\n * 1) Each bit represents which of the `ɵɵi18nExp` has changed.\n * 2) There are 32 bits allowed in JS.\n * 3) Bit 32 is special as it is shared for all changes past 32. (In other words if you have more\n * than 32 `ɵɵi18nExp` then all changes past 32nd `ɵɵi18nExp` will be mapped to same bit. This means\n * that we may end up changing more than we need to. But i18n expressions with 32 bindings is rare\n * so in practice it should not be an issue.)\n */\nlet changeMask = 0b0;\n/**\n * Keeps track of which bit needs to be updated in `changeMask`\n *\n * This value gets incremented on every call to `ɵɵi18nExp`\n */\nlet changeMaskCounter = 0;\n/**\n * Keep track of which input bindings in `ɵɵi18nExp` have changed.\n *\n * `setMaskBit` gets invoked by each call to `ɵɵi18nExp`.\n *\n * @param hasChange did `ɵɵi18nExp` detect a change.\n */\nfunction setMaskBit(hasChange) {\n    if (hasChange) {\n        changeMask = changeMask | (1 << Math.min(changeMaskCounter, 31));\n    }\n    changeMaskCounter++;\n}\nfunction applyI18n(tView, lView, index) {\n    if (changeMaskCounter > 0) {\n        ngDevMode && assertDefined(tView, `tView should be defined`);\n        const tI18n = tView.data[index];\n        // When `index` points to an `ɵɵi18nAttributes` then we have an array otherwise `TI18n`\n        const updateOpCodes = Array.isArray(tI18n) ? tI18n : tI18n.update;\n        const bindingsStartIndex = getBindingIndex() - changeMaskCounter - 1;\n        applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask);\n    }\n    // Reset changeMask & maskBit to default for the next update cycle\n    changeMask = 0b0;\n    changeMaskCounter = 0;\n}\n/**\n * Apply `I18nCreateOpCodes` op-codes as stored in `TI18n.create`.\n *\n * Creates text (and comment) nodes which are internationalized.\n *\n * @param lView Current lView\n * @param createOpCodes Set of op-codes to apply\n * @param parentRNode Parent node (so that direct children can be added eagerly) or `null` if it is\n *     a root node.\n * @param insertInFrontOf DOM node that should be used as an anchor.\n */\nfunction applyCreateOpCodes(lView, createOpCodes, parentRNode, insertInFrontOf) {\n    const renderer = lView[RENDERER];\n    for (let i = 0; i < createOpCodes.length; i++) {\n        const opCode = createOpCodes[i++];\n        const text = createOpCodes[i];\n        const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;\n        const appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;\n        const index = opCode >>> I18nCreateOpCode.SHIFT;\n        let rNode = lView[index];\n        if (rNode === null) {\n            // We only create new DOM nodes if they don't already exist: If ICU switches case back to a\n            // case which was already instantiated, no need to create new DOM nodes.\n            rNode = lView[index] =\n                isComment ? renderer.createComment(text) : createTextNode(renderer, text);\n        }\n        if (appendNow && parentRNode !== null) {\n            nativeInsertBefore(renderer, parentRNode, rNode, insertInFrontOf, false);\n        }\n    }\n}\n/**\n * Apply `I18nMutateOpCodes` OpCodes.\n *\n * @param tView Current `TView`\n * @param mutableOpCodes Mutable OpCodes to process\n * @param lView Current `LView`\n * @param anchorRNode place where the i18n node should be inserted.\n */\nfunction applyMutableOpCodes(tView, mutableOpCodes, lView, anchorRNode) {\n    ngDevMode && assertDomNode(anchorRNode);\n    const renderer = lView[RENDERER];\n    // `rootIdx` represents the node into which all inserts happen.\n    let rootIdx = null;\n    // `rootRNode` represents the real node into which we insert. This can be different from\n    // `lView[rootIdx]` if we have projection.\n    //  - null we don't have a parent (as can be the case in when we are inserting into a root of\n    //    LView which has no parent.)\n    //  - `RElement` The element representing the root after taking projection into account.\n    let rootRNode;\n    for (let i = 0; i < mutableOpCodes.length; i++) {\n        const opCode = mutableOpCodes[i];\n        if (typeof opCode == 'string') {\n            const textNodeIndex = mutableOpCodes[++i];\n            if (lView[textNodeIndex] === null) {\n                ngDevMode && ngDevMode.rendererCreateTextNode++;\n                ngDevMode && assertIndexInRange(lView, textNodeIndex);\n                lView[textNodeIndex] = createTextNode(renderer, opCode);\n            }\n        }\n        else if (typeof opCode == 'number') {\n            switch (opCode & 1 /* IcuCreateOpCode.MASK_INSTRUCTION */) {\n                case 0 /* IcuCreateOpCode.AppendChild */:\n                    const parentIdx = getParentFromIcuCreateOpCode(opCode);\n                    if (rootIdx === null) {\n                        // The first operation should save the `rootIdx` because the first operation\n                        // must insert into the root. (Only subsequent operations can insert into a dynamic\n                        // parent)\n                        rootIdx = parentIdx;\n                        rootRNode = nativeParentNode(renderer, anchorRNode);\n                    }\n                    let insertInFrontOf;\n                    let parentRNode;\n                    if (parentIdx === rootIdx) {\n                        insertInFrontOf = anchorRNode;\n                        parentRNode = rootRNode;\n                    }\n                    else {\n                        insertInFrontOf = null;\n                        parentRNode = unwrapRNode(lView[parentIdx]);\n                    }\n                    // FIXME(misko): Refactor with `processI18nText`\n                    if (parentRNode !== null) {\n                        // This can happen if the `LView` we are adding to is not attached to a parent `LView`.\n                        // In such a case there is no \"root\" we can attach to. This is fine, as we still need to\n                        // create the elements. When the `LView` gets later added to a parent these \"root\" nodes\n                        // get picked up and added.\n                        ngDevMode && assertDomNode(parentRNode);\n                        const refIdx = getRefFromIcuCreateOpCode(opCode);\n                        ngDevMode && assertGreaterThan(refIdx, HEADER_OFFSET, 'Missing ref');\n                        // `unwrapRNode` is not needed here as all of these point to RNodes as part of the i18n\n                        // which can't have components.\n                        const child = lView[refIdx];\n                        ngDevMode && assertDomNode(child);\n                        nativeInsertBefore(renderer, parentRNode, child, insertInFrontOf, false);\n                        const tIcu = getTIcu(tView, refIdx);\n                        if (tIcu !== null && typeof tIcu === 'object') {\n                            // If we just added a comment node which has ICU then that ICU may have already been\n                            // rendered and therefore we need to re-add it here.\n                            ngDevMode && assertTIcu(tIcu);\n                            const caseIndex = getCurrentICUCaseIndex(tIcu, lView);\n                            if (caseIndex !== null) {\n                                applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, lView[tIcu.anchorIdx]);\n                            }\n                        }\n                    }\n                    break;\n                case 1 /* IcuCreateOpCode.Attr */:\n                    const elementNodeIndex = opCode >>> 1 /* IcuCreateOpCode.SHIFT_REF */;\n                    const attrName = mutableOpCodes[++i];\n                    const attrValue = mutableOpCodes[++i];\n                    // This code is used for ICU expressions only, since we don't support\n                    // directives/components in ICUs, we don't need to worry about inputs here\n                    setElementAttribute(renderer, getNativeByIndex(elementNodeIndex, lView), null, null, attrName, attrValue, null);\n                    break;\n                default:\n                    if (ngDevMode) {\n                        throw new RuntimeError(700 /* RuntimeErrorCode.INVALID_I18N_STRUCTURE */, `Unable to determine the type of mutate operation for \"${opCode}\"`);\n                    }\n            }\n        }\n        else {\n            switch (opCode) {\n                case ICU_MARKER:\n                    const commentValue = mutableOpCodes[++i];\n                    const commentNodeIndex = mutableOpCodes[++i];\n                    if (lView[commentNodeIndex] === null) {\n                        ngDevMode &&\n                            assertEqual(typeof commentValue, 'string', `Expected \"${commentValue}\" to be a comment node value`);\n                        ngDevMode && ngDevMode.rendererCreateComment++;\n                        ngDevMode && assertIndexInExpandoRange(lView, commentNodeIndex);\n                        const commentRNode = lView[commentNodeIndex] =\n                            createCommentNode(renderer, commentValue);\n                        // FIXME(misko): Attaching patch data is only needed for the root (Also add tests)\n                        attachPatchData(commentRNode, lView);\n                    }\n                    break;\n                case ELEMENT_MARKER:\n                    const tagName = mutableOpCodes[++i];\n                    const elementNodeIndex = mutableOpCodes[++i];\n                    if (lView[elementNodeIndex] === null) {\n                        ngDevMode &&\n                            assertEqual(typeof tagName, 'string', `Expected \"${tagName}\" to be an element node tag name`);\n                        ngDevMode && ngDevMode.rendererCreateElement++;\n                        ngDevMode && assertIndexInExpandoRange(lView, elementNodeIndex);\n                        const elementRNode = lView[elementNodeIndex] =\n                            createElementNode(renderer, tagName, null);\n                        // FIXME(misko): Attaching patch data is only needed for the root (Also add tests)\n                        attachPatchData(elementRNode, lView);\n                    }\n                    break;\n                default:\n                    ngDevMode &&\n                        throwError(`Unable to determine the type of mutate operation for \"${opCode}\"`);\n            }\n        }\n    }\n}\n/**\n * Apply `I18nUpdateOpCodes` OpCodes\n *\n * @param tView Current `TView`\n * @param lView Current `LView`\n * @param updateOpCodes OpCodes to process\n * @param bindingsStartIndex Location of the first `ɵɵi18nApply`\n * @param changeMask Each bit corresponds to a `ɵɵi18nExp` (Counting backwards from\n *     `bindingsStartIndex`)\n */\nfunction applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask) {\n    for (let i = 0; i < updateOpCodes.length; i++) {\n        // bit code to check if we should apply the next update\n        const checkBit = updateOpCodes[i];\n        // Number of opCodes to skip until next set of update codes\n        const skipCodes = updateOpCodes[++i];\n        if (checkBit & changeMask) {\n            // The value has been updated since last checked\n            let value = '';\n            for (let j = i + 1; j <= (i + skipCodes); j++) {\n                const opCode = updateOpCodes[j];\n                if (typeof opCode == 'string') {\n                    value += opCode;\n                }\n                else if (typeof opCode == 'number') {\n                    if (opCode < 0) {\n                        // Negative opCode represent `i18nExp` values offset.\n                        value += renderStringify(lView[bindingsStartIndex - opCode]);\n                    }\n                    else {\n                        const nodeIndex = (opCode >>> 2 /* I18nUpdateOpCode.SHIFT_REF */);\n                        switch (opCode & 3 /* I18nUpdateOpCode.MASK_OPCODE */) {\n                            case 1 /* I18nUpdateOpCode.Attr */:\n                                const propName = updateOpCodes[++j];\n                                const sanitizeFn = updateOpCodes[++j];\n                                const tNodeOrTagName = tView.data[nodeIndex];\n                                ngDevMode && assertDefined(tNodeOrTagName, 'Experting TNode or string');\n                                if (typeof tNodeOrTagName === 'string') {\n                                    // IF we don't have a `TNode`, then we are an element in ICU (as ICU content does\n                                    // not have TNode), in which case we know that there are no directives, and hence\n                                    // we use attribute setting.\n                                    setElementAttribute(lView[RENDERER], lView[nodeIndex], null, tNodeOrTagName, propName, value, sanitizeFn);\n                                }\n                                else {\n                                    elementPropertyInternal(tView, tNodeOrTagName, lView, propName, value, lView[RENDERER], sanitizeFn, false);\n                                }\n                                break;\n                            case 0 /* I18nUpdateOpCode.Text */:\n                                const rText = lView[nodeIndex];\n                                rText !== null && updateTextNode(lView[RENDERER], rText, value);\n                                break;\n                            case 2 /* I18nUpdateOpCode.IcuSwitch */:\n                                applyIcuSwitchCase(tView, getTIcu(tView, nodeIndex), lView, value);\n                                break;\n                            case 3 /* I18nUpdateOpCode.IcuUpdate */:\n                                applyIcuUpdateCase(tView, getTIcu(tView, nodeIndex), bindingsStartIndex, lView);\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            const opCode = updateOpCodes[i + 1];\n            if (opCode > 0 && (opCode & 3 /* I18nUpdateOpCode.MASK_OPCODE */) === 3 /* I18nUpdateOpCode.IcuUpdate */) {\n                // Special case for the `icuUpdateCase`. It could be that the mask did not match, but\n                // we still need to execute `icuUpdateCase` because the case has changed recently due to\n                // previous `icuSwitchCase` instruction. (`icuSwitchCase` and `icuUpdateCase` always come in\n                // pairs.)\n                const nodeIndex = (opCode >>> 2 /* I18nUpdateOpCode.SHIFT_REF */);\n                const tIcu = getTIcu(tView, nodeIndex);\n                const currentIndex = lView[tIcu.currentCaseLViewIndex];\n                if (currentIndex < 0) {\n                    applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView);\n                }\n            }\n        }\n        i += skipCodes;\n    }\n}\n/**\n * Apply OpCodes associated with updating an existing ICU.\n *\n * @param tView Current `TView`\n * @param tIcu Current `TIcu`\n * @param bindingsStartIndex Location of the first `ɵɵi18nApply`\n * @param lView Current `LView`\n */\nfunction applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView) {\n    ngDevMode && assertIndexInRange(lView, tIcu.currentCaseLViewIndex);\n    let activeCaseIndex = lView[tIcu.currentCaseLViewIndex];\n    if (activeCaseIndex !== null) {\n        let mask = changeMask;\n        if (activeCaseIndex < 0) {\n            // Clear the flag.\n            // Negative number means that the ICU was freshly created and we need to force the update.\n            activeCaseIndex = lView[tIcu.currentCaseLViewIndex] = ~activeCaseIndex;\n            // -1 is same as all bits on, which simulates creation since it marks all bits dirty\n            mask = -1;\n        }\n        applyUpdateOpCodes(tView, lView, tIcu.update[activeCaseIndex], bindingsStartIndex, mask);\n    }\n}\n/**\n * Apply OpCodes associated with switching a case on ICU.\n *\n * This involves tearing down existing case and than building up a new case.\n *\n * @param tView Current `TView`\n * @param tIcu Current `TIcu`\n * @param lView Current `LView`\n * @param value Value of the case to update to.\n */\nfunction applyIcuSwitchCase(tView, tIcu, lView, value) {\n    // Rebuild a new case for this ICU\n    const caseIndex = getCaseIndex(tIcu, value);\n    let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);\n    if (activeCaseIndex !== caseIndex) {\n        applyIcuSwitchCaseRemove(tView, tIcu, lView);\n        lView[tIcu.currentCaseLViewIndex] = caseIndex === null ? null : ~caseIndex;\n        if (caseIndex !== null) {\n            // Add the nodes for the new case\n            const anchorRNode = lView[tIcu.anchorIdx];\n            if (anchorRNode) {\n                ngDevMode && assertDomNode(anchorRNode);\n                applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, anchorRNode);\n            }\n        }\n    }\n}\n/**\n * Apply OpCodes associated with tearing ICU case.\n *\n * This involves tearing down existing case and than building up a new case.\n *\n * @param tView Current `TView`\n * @param tIcu Current `TIcu`\n * @param lView Current `LView`\n */\nfunction applyIcuSwitchCaseRemove(tView, tIcu, lView) {\n    let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);\n    if (activeCaseIndex !== null) {\n        const removeCodes = tIcu.remove[activeCaseIndex];\n        for (let i = 0; i < removeCodes.length; i++) {\n            const nodeOrIcuIndex = removeCodes[i];\n            if (nodeOrIcuIndex > 0) {\n                // Positive numbers are `RNode`s.\n                const rNode = getNativeByIndex(nodeOrIcuIndex, lView);\n                rNode !== null && nativeRemoveNode(lView[RENDERER], rNode);\n            }\n            else {\n                // Negative numbers are ICUs\n                applyIcuSwitchCaseRemove(tView, getTIcu(tView, ~nodeOrIcuIndex), lView);\n            }\n        }\n    }\n}\n/**\n * Returns the index of the current case of an ICU expression depending on the main binding value\n *\n * @param icuExpression\n * @param bindingValue The value of the main binding used by this ICU expression\n */\nfunction getCaseIndex(icuExpression, bindingValue) {\n    let index = icuExpression.cases.indexOf(bindingValue);\n    if (index === -1) {\n        switch (icuExpression.type) {\n            case 1 /* IcuType.plural */: {\n                const resolvedCase = getPluralCase(bindingValue, getLocaleId());\n                index = icuExpression.cases.indexOf(resolvedCase);\n                if (index === -1 && resolvedCase !== 'other') {\n                    index = icuExpression.cases.indexOf('other');\n                }\n                break;\n            }\n            case 0 /* IcuType.select */: {\n                index = icuExpression.cases.indexOf('other');\n                break;\n            }\n        }\n    }\n    return index === -1 ? null : index;\n}\n\nfunction loadIcuContainerVisitor() {\n    const _stack = [];\n    let _index = -1;\n    let _lView;\n    let _removes;\n    /**\n     * Retrieves a set of root nodes from `TIcu.remove`. Used by `TNodeType.ICUContainer`\n     * to determine which root belong to the ICU.\n     *\n     * Example of usage.\n     * ```\n     * const nextRNode = icuContainerIteratorStart(tIcuContainerNode, lView);\n     * let rNode: RNode|null;\n     * while(rNode = nextRNode()) {\n     *   console.log(rNode);\n     * }\n     * ```\n     *\n     * @param tIcuContainerNode Current `TIcuContainerNode`\n     * @param lView `LView` where the `RNode`s should be looked up.\n     */\n    function icuContainerIteratorStart(tIcuContainerNode, lView) {\n        _lView = lView;\n        while (_stack.length)\n            _stack.pop();\n        ngDevMode && assertTNodeForLView(tIcuContainerNode, lView);\n        enterIcu(tIcuContainerNode.value, lView);\n        return icuContainerIteratorNext;\n    }\n    function enterIcu(tIcu, lView) {\n        _index = 0;\n        const currentCase = getCurrentICUCaseIndex(tIcu, lView);\n        if (currentCase !== null) {\n            ngDevMode && assertNumberInRange(currentCase, 0, tIcu.cases.length - 1);\n            _removes = tIcu.remove[currentCase];\n        }\n        else {\n            _removes = EMPTY_ARRAY;\n        }\n    }\n    function icuContainerIteratorNext() {\n        if (_index < _removes.length) {\n            const removeOpCode = _removes[_index++];\n            ngDevMode && assertNumber(removeOpCode, 'Expecting OpCode number');\n            if (removeOpCode > 0) {\n                const rNode = _lView[removeOpCode];\n                ngDevMode && assertDomNode(rNode);\n                return rNode;\n            }\n            else {\n                _stack.push(_index, _removes);\n                // ICUs are represented by negative indices\n                const tIcuIndex = ~removeOpCode;\n                const tIcu = _lView[TVIEW].data[tIcuIndex];\n                ngDevMode && assertTIcu(tIcu);\n                enterIcu(tIcu, _lView);\n                return icuContainerIteratorNext();\n            }\n        }\n        else {\n            if (_stack.length === 0) {\n                return null;\n            }\n            else {\n                _removes = _stack.pop();\n                _index = _stack.pop();\n                return icuContainerIteratorNext();\n            }\n        }\n    }\n    return icuContainerIteratorStart;\n}\n\n/**\n * Converts `I18nCreateOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nCreateOpCodes.debug` property if `ngDevMode` is enabled.\n * This function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nCreateOpCodes` if attached as a method.\n * @param opcodes `I18nCreateOpCodes` if invoked as a function.\n */\nfunction i18nCreateOpCodesToString(opcodes) {\n    const createOpCodes = opcodes || (Array.isArray(this) ? this : []);\n    let lines = [];\n    for (let i = 0; i < createOpCodes.length; i++) {\n        const opCode = createOpCodes[i++];\n        const text = createOpCodes[i];\n        const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;\n        const appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;\n        const index = opCode >>> I18nCreateOpCode.SHIFT;\n        lines.push(`lView[${index}] = document.${isComment ? 'createComment' : 'createText'}(${JSON.stringify(text)});`);\n        if (appendNow) {\n            lines.push(`parent.appendChild(lView[${index}]);`);\n        }\n    }\n    return lines;\n}\n/**\n * Converts `I18nUpdateOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nUpdateOpCodes.debug` property if `ngDevMode` is enabled.\n * This function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nUpdateOpCodes` if attached as a method.\n * @param opcodes `I18nUpdateOpCodes` if invoked as a function.\n */\nfunction i18nUpdateOpCodesToString(opcodes) {\n    const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));\n    let lines = [];\n    function consumeOpCode(value) {\n        const ref = value >>> 2 /* I18nUpdateOpCode.SHIFT_REF */;\n        const opCode = value & 3 /* I18nUpdateOpCode.MASK_OPCODE */;\n        switch (opCode) {\n            case 0 /* I18nUpdateOpCode.Text */:\n                return `(lView[${ref}] as Text).textContent = $$$`;\n            case 1 /* I18nUpdateOpCode.Attr */:\n                const attrName = parser.consumeString();\n                const sanitizationFn = parser.consumeFunction();\n                const value = sanitizationFn ? `(${sanitizationFn})($$$)` : '$$$';\n                return `(lView[${ref}] as Element).setAttribute('${attrName}', ${value})`;\n            case 2 /* I18nUpdateOpCode.IcuSwitch */:\n                return `icuSwitchCase(${ref}, $$$)`;\n            case 3 /* I18nUpdateOpCode.IcuUpdate */:\n                return `icuUpdateCase(${ref})`;\n        }\n        throw new Error('unexpected OpCode');\n    }\n    while (parser.hasMore()) {\n        let mask = parser.consumeNumber();\n        let size = parser.consumeNumber();\n        const end = parser.i + size;\n        const statements = [];\n        let statement = '';\n        while (parser.i < end) {\n            let value = parser.consumeNumberOrString();\n            if (typeof value === 'string') {\n                statement += value;\n            }\n            else if (value < 0) {\n                // Negative numbers are ref indexes\n                // Here `i` refers to current binding index. It is to signify that the value is relative,\n                // rather than absolute.\n                statement += '${lView[i' + value + ']}';\n            }\n            else {\n                // Positive numbers are operations.\n                const opCodeText = consumeOpCode(value);\n                statements.push(opCodeText.replace('$$$', '`' + statement + '`') + ';');\n                statement = '';\n            }\n        }\n        lines.push(`if (mask & 0b${mask.toString(2)}) { ${statements.join(' ')} }`);\n    }\n    return lines;\n}\n/**\n * Converts `I18nCreateOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nCreateOpCodes.debug` if `ngDevMode` is enabled. This\n * function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nCreateOpCodes` if attached as a method.\n * @param opcodes `I18nCreateOpCodes` if invoked as a function.\n */\nfunction icuCreateOpCodesToString(opcodes) {\n    const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));\n    let lines = [];\n    function consumeOpCode(opCode) {\n        const parent = getParentFromIcuCreateOpCode(opCode);\n        const ref = getRefFromIcuCreateOpCode(opCode);\n        switch (getInstructionFromIcuCreateOpCode(opCode)) {\n            case 0 /* IcuCreateOpCode.AppendChild */:\n                return `(lView[${parent}] as Element).appendChild(lView[${lastRef}])`;\n            case 1 /* IcuCreateOpCode.Attr */:\n                return `(lView[${ref}] as Element).setAttribute(\"${parser.consumeString()}\", \"${parser.consumeString()}\")`;\n        }\n        throw new Error('Unexpected OpCode: ' + getInstructionFromIcuCreateOpCode(opCode));\n    }\n    let lastRef = -1;\n    while (parser.hasMore()) {\n        let value = parser.consumeNumberStringOrMarker();\n        if (value === ICU_MARKER) {\n            const text = parser.consumeString();\n            lastRef = parser.consumeNumber();\n            lines.push(`lView[${lastRef}] = document.createComment(\"${text}\")`);\n        }\n        else if (value === ELEMENT_MARKER) {\n            const text = parser.consumeString();\n            lastRef = parser.consumeNumber();\n            lines.push(`lView[${lastRef}] = document.createElement(\"${text}\")`);\n        }\n        else if (typeof value === 'string') {\n            lastRef = parser.consumeNumber();\n            lines.push(`lView[${lastRef}] = document.createTextNode(\"${value}\")`);\n        }\n        else if (typeof value === 'number') {\n            const line = consumeOpCode(value);\n            line && lines.push(line);\n        }\n        else {\n            throw new Error('Unexpected value');\n        }\n    }\n    return lines;\n}\n/**\n * Converts `I18nRemoveOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nRemoveOpCodes.debug` if `ngDevMode` is enabled. This\n * function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nRemoveOpCodes` if attached as a method.\n * @param opcodes `I18nRemoveOpCodes` if invoked as a function.\n */\nfunction i18nRemoveOpCodesToString(opcodes) {\n    const removeCodes = opcodes || (Array.isArray(this) ? this : []);\n    let lines = [];\n    for (let i = 0; i < removeCodes.length; i++) {\n        const nodeOrIcuIndex = removeCodes[i];\n        if (nodeOrIcuIndex > 0) {\n            // Positive numbers are `RNode`s.\n            lines.push(`remove(lView[${nodeOrIcuIndex}])`);\n        }\n        else {\n            // Negative numbers are ICUs\n            lines.push(`removeNestedICU(${~nodeOrIcuIndex})`);\n        }\n    }\n    return lines;\n}\nclass OpCodeParser {\n    constructor(codes) {\n        this.i = 0;\n        this.codes = codes;\n    }\n    hasMore() {\n        return this.i < this.codes.length;\n    }\n    consumeNumber() {\n        let value = this.codes[this.i++];\n        assertNumber(value, 'expecting number in OpCode');\n        return value;\n    }\n    consumeString() {\n        let value = this.codes[this.i++];\n        assertString(value, 'expecting string in OpCode');\n        return value;\n    }\n    consumeFunction() {\n        let value = this.codes[this.i++];\n        if (value === null || typeof value === 'function') {\n            return value;\n        }\n        throw new Error('expecting function in OpCode');\n    }\n    consumeNumberOrString() {\n        let value = this.codes[this.i++];\n        if (typeof value === 'string') {\n            return value;\n        }\n        assertNumber(value, 'expecting number or string in OpCode');\n        return value;\n    }\n    consumeNumberStringOrMarker() {\n        let value = this.codes[this.i++];\n        if (typeof value === 'string' || typeof value === 'number' || value == ICU_MARKER ||\n            value == ELEMENT_MARKER) {\n            return value;\n        }\n        assertNumber(value, 'expecting number, string, ICU_MARKER or ELEMENT_MARKER in OpCode');\n        return value;\n    }\n}\n\nconst BINDING_REGEXP = /�(\\d+):?\\d*�/gi;\nconst ICU_REGEXP = /({\\s*�\\d+:?\\d*�\\s*,\\s*\\S{6}\\s*,[\\s\\S]*})/gi;\nconst NESTED_ICU = /�(\\d+)�/;\nconst ICU_BLOCK_REGEXP = /^\\s*(�\\d+:?\\d*�)\\s*,\\s*(select|plural)\\s*,/;\nconst MARKER = `�`;\nconst SUBTEMPLATE_REGEXP = /�\\/?\\*(\\d+:\\d+)�/gi;\nconst PH_REGEXP = /�(\\/?[#*]\\d+):?\\d*�/gi;\n/**\n * Angular uses the special entity &ngsp; as a placeholder for non-removable space.\n * It's replaced by the 0xE500 PUA (Private Use Areas) unicode character and later on replaced by a\n * space.\n * We are re-implementing the same idea since translations might contain this special character.\n */\nconst NGSP_UNICODE_REGEXP = /\\uE500/g;\nfunction replaceNgsp(value) {\n    return value.replace(NGSP_UNICODE_REGEXP, ' ');\n}\n/**\n * Patch a `debug` property getter on top of the existing object.\n *\n * NOTE: always call this method with `ngDevMode && attachDebugObject(...)`\n *\n * @param obj Object to patch\n * @param debugGetter Getter returning a value to patch\n */\nfunction attachDebugGetter(obj, debugGetter) {\n    if (ngDevMode) {\n        Object.defineProperty(obj, 'debug', { get: debugGetter, enumerable: false });\n    }\n    else {\n        throw new Error('This method should be guarded with `ngDevMode` so that it can be tree shaken in production!');\n    }\n}\n/**\n * Create dynamic nodes from i18n translation block.\n *\n * - Text nodes are created synchronously\n * - TNodes are linked into tree lazily\n *\n * @param tView Current `TView`\n * @parentTNodeIndex index to the parent TNode of this i18n block\n * @param lView Current `LView`\n * @param index Index of `ɵɵi18nStart` instruction.\n * @param message Message to translate.\n * @param subTemplateIndex Index into the sub template of message translation. (ie in case of\n *     `ngIf`) (-1 otherwise)\n */\nfunction i18nStartFirstCreatePass(tView, parentTNodeIndex, lView, index, message, subTemplateIndex) {\n    const rootTNode = getCurrentParentTNode();\n    const createOpCodes = [];\n    const updateOpCodes = [];\n    const existingTNodeStack = [[]];\n    if (ngDevMode) {\n        attachDebugGetter(createOpCodes, i18nCreateOpCodesToString);\n        attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\n    }\n    message = getTranslationForTemplate(message, subTemplateIndex);\n    const msgParts = replaceNgsp(message).split(PH_REGEXP);\n    for (let i = 0; i < msgParts.length; i++) {\n        let value = msgParts[i];\n        if ((i & 1) === 0) {\n            // Even indexes are text (including bindings & ICU expressions)\n            const parts = i18nParseTextIntoPartsAndICU(value);\n            for (let j = 0; j < parts.length; j++) {\n                let part = parts[j];\n                if ((j & 1) === 0) {\n                    // `j` is odd therefore `part` is string\n                    const text = part;\n                    ngDevMode && assertString(text, 'Parsed ICU part should be string');\n                    if (text !== '') {\n                        i18nStartFirstCreatePassProcessTextNode(tView, rootTNode, existingTNodeStack[0], createOpCodes, updateOpCodes, lView, text);\n                    }\n                }\n                else {\n                    // `j` is Even therefor `part` is an `ICUExpression`\n                    const icuExpression = part;\n                    // Verify that ICU expression has the right shape. Translations might contain invalid\n                    // constructions (while original messages were correct), so ICU parsing at runtime may\n                    // not succeed (thus `icuExpression` remains a string).\n                    // Note: we intentionally retain the error here by not using `ngDevMode`, because\n                    // the value can change based on the locale and users aren't guaranteed to hit\n                    // an invalid string while they're developing.\n                    if (typeof icuExpression !== 'object') {\n                        throw new Error(`Unable to parse ICU expression in \"${message}\" message.`);\n                    }\n                    const icuContainerTNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodeStack[0], lView, createOpCodes, ngDevMode ? `ICU ${index}:${icuExpression.mainBinding}` : '', true);\n                    const icuNodeIndex = icuContainerTNode.index;\n                    ngDevMode &&\n                        assertGreaterThanOrEqual(icuNodeIndex, HEADER_OFFSET, 'Index must be in absolute LView offset');\n                    icuStart(tView, lView, updateOpCodes, parentTNodeIndex, icuExpression, icuNodeIndex);\n                }\n            }\n        }\n        else {\n            // Odd indexes are placeholders (elements and sub-templates)\n            // At this point value is something like: '/#1:2' (originally coming from '�/#1:2�')\n            const isClosing = value.charCodeAt(0) === 47 /* CharCode.SLASH */;\n            const type = value.charCodeAt(isClosing ? 1 : 0);\n            ngDevMode && assertOneOf(type, 42 /* CharCode.STAR */, 35 /* CharCode.HASH */);\n            const index = HEADER_OFFSET + Number.parseInt(value.substring((isClosing ? 2 : 1)));\n            if (isClosing) {\n                existingTNodeStack.shift();\n                setCurrentTNode(getCurrentParentTNode(), false);\n            }\n            else {\n                const tNode = createTNodePlaceholder(tView, existingTNodeStack[0], index);\n                existingTNodeStack.unshift([]);\n                setCurrentTNode(tNode, true);\n            }\n        }\n    }\n    tView.data[index] = {\n        create: createOpCodes,\n        update: updateOpCodes,\n    };\n}\n/**\n * Allocate space in i18n Range add create OpCode instruction to create a text or comment node.\n *\n * @param tView Current `TView` needed to allocate space in i18n range.\n * @param rootTNode Root `TNode` of the i18n block. This node determines if the new TNode will be\n *     added as part of the `i18nStart` instruction or as part of the `TNode.insertBeforeIndex`.\n * @param existingTNodes internal state for `addTNodeAndUpdateInsertBeforeIndex`.\n * @param lView Current `LView` needed to allocate space in i18n range.\n * @param createOpCodes Array storing `I18nCreateOpCodes` where new opCodes will be added.\n * @param text Text to be added when the `Text` or `Comment` node will be created.\n * @param isICU true if a `Comment` node for ICU (instead of `Text`) node should be created.\n */\nfunction createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, text, isICU) {\n    const i18nNodeIdx = allocExpando(tView, lView, 1, null);\n    let opCode = i18nNodeIdx << I18nCreateOpCode.SHIFT;\n    let parentTNode = getCurrentParentTNode();\n    if (rootTNode === parentTNode) {\n        // FIXME(misko): A null `parentTNode` should represent when we fall of the `LView` boundary.\n        // (there is no parent), but in some circumstances (because we are inconsistent about how we set\n        // `previousOrParentTNode`) it could point to `rootTNode` So this is a work around.\n        parentTNode = null;\n    }\n    if (parentTNode === null) {\n        // If we don't have a parent that means that we can eagerly add nodes.\n        // If we have a parent than these nodes can't be added now (as the parent has not been created\n        // yet) and instead the `parentTNode` is responsible for adding it. See\n        // `TNode.insertBeforeIndex`\n        opCode |= I18nCreateOpCode.APPEND_EAGERLY;\n    }\n    if (isICU) {\n        opCode |= I18nCreateOpCode.COMMENT;\n        ensureIcuContainerVisitorLoaded(loadIcuContainerVisitor);\n    }\n    createOpCodes.push(opCode, text === null ? '' : text);\n    // We store `{{?}}` so that when looking at debug `TNodeType.template` we can see where the\n    // bindings are.\n    const tNode = createTNodeAtIndex(tView, i18nNodeIdx, isICU ? 32 /* TNodeType.Icu */ : 1 /* TNodeType.Text */, text === null ? (ngDevMode ? '{{?}}' : '') : text, null);\n    addTNodeAndUpdateInsertBeforeIndex(existingTNodes, tNode);\n    const tNodeIdx = tNode.index;\n    setCurrentTNode(tNode, false /* Text nodes are self closing */);\n    if (parentTNode !== null && rootTNode !== parentTNode) {\n        // We are a child of deeper node (rather than a direct child of `i18nStart` instruction.)\n        // We have to make sure to add ourselves to the parent.\n        setTNodeInsertBeforeIndex(parentTNode, tNodeIdx);\n    }\n    return tNode;\n}\n/**\n * Processes text node in i18n block.\n *\n * Text nodes can have:\n * - Create instruction in `createOpCodes` for creating the text node.\n * - Allocate spec for text node in i18n range of `LView`\n * - If contains binding:\n *    - bindings => allocate space in i18n range of `LView` to store the binding value.\n *    - populate `updateOpCodes` with update instructions.\n *\n * @param tView Current `TView`\n * @param rootTNode Root `TNode` of the i18n block. This node determines if the new TNode will\n *     be added as part of the `i18nStart` instruction or as part of the\n *     `TNode.insertBeforeIndex`.\n * @param existingTNodes internal state for `addTNodeAndUpdateInsertBeforeIndex`.\n * @param createOpCodes Location where the creation OpCodes will be stored.\n * @param lView Current `LView`\n * @param text The translated text (which may contain binding)\n */\nfunction i18nStartFirstCreatePassProcessTextNode(tView, rootTNode, existingTNodes, createOpCodes, updateOpCodes, lView, text) {\n    const hasBinding = text.match(BINDING_REGEXP);\n    const tNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, hasBinding ? null : text, false);\n    if (hasBinding) {\n        generateBindingUpdateOpCodes(updateOpCodes, text, tNode.index, null, 0, null);\n    }\n}\n/**\n * See `i18nAttributes` above.\n */\nfunction i18nAttributesFirstPass(tView, index, values) {\n    const previousElement = getCurrentTNode();\n    const previousElementIndex = previousElement.index;\n    const updateOpCodes = [];\n    if (ngDevMode) {\n        attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\n    }\n    if (tView.firstCreatePass && tView.data[index] === null) {\n        for (let i = 0; i < values.length; i += 2) {\n            const attrName = values[i];\n            const message = values[i + 1];\n            if (message !== '') {\n                // Check if attribute value contains an ICU and throw an error if that's the case.\n                // ICUs in element attributes are not supported.\n                // Note: we intentionally retain the error here by not using `ngDevMode`, because\n                // the `value` can change based on the locale and users aren't guaranteed to hit\n                // an invalid string while they're developing.\n                if (ICU_REGEXP.test(message)) {\n                    throw new Error(`ICU expressions are not supported in attributes. Message: \"${message}\".`);\n                }\n                // i18n attributes that hit this code path are guaranteed to have bindings, because\n                // the compiler treats static i18n attributes as regular attribute bindings.\n                // Since this may not be the first i18n attribute on this element we need to pass in how\n                // many previous bindings there have already been.\n                generateBindingUpdateOpCodes(updateOpCodes, message, previousElementIndex, attrName, countBindings(updateOpCodes), null);\n            }\n        }\n        tView.data[index] = updateOpCodes;\n    }\n}\n/**\n * Generate the OpCodes to update the bindings of a string.\n *\n * @param updateOpCodes Place where the update opcodes will be stored.\n * @param str The string containing the bindings.\n * @param destinationNode Index of the destination node which will receive the binding.\n * @param attrName Name of the attribute, if the string belongs to an attribute.\n * @param sanitizeFn Sanitization function used to sanitize the string after update, if necessary.\n * @param bindingStart The lView index of the next expression that can be bound via an opCode.\n * @returns The mask value for these bindings\n */\nfunction generateBindingUpdateOpCodes(updateOpCodes, str, destinationNode, attrName, bindingStart, sanitizeFn) {\n    ngDevMode &&\n        assertGreaterThanOrEqual(destinationNode, HEADER_OFFSET, 'Index must be in absolute LView offset');\n    const maskIndex = updateOpCodes.length; // Location of mask\n    const sizeIndex = maskIndex + 1; // location of size for skipping\n    updateOpCodes.push(null, null); // Alloc space for mask and size\n    const startIndex = maskIndex + 2; // location of first allocation.\n    if (ngDevMode) {\n        attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\n    }\n    const textParts = str.split(BINDING_REGEXP);\n    let mask = 0;\n    for (let j = 0; j < textParts.length; j++) {\n        const textValue = textParts[j];\n        if (j & 1) {\n            // Odd indexes are bindings\n            const bindingIndex = bindingStart + parseInt(textValue, 10);\n            updateOpCodes.push(-1 - bindingIndex);\n            mask = mask | toMaskBit(bindingIndex);\n        }\n        else if (textValue !== '') {\n            // Even indexes are text\n            updateOpCodes.push(textValue);\n        }\n    }\n    updateOpCodes.push(destinationNode << 2 /* I18nUpdateOpCode.SHIFT_REF */ |\n        (attrName ? 1 /* I18nUpdateOpCode.Attr */ : 0 /* I18nUpdateOpCode.Text */));\n    if (attrName) {\n        updateOpCodes.push(attrName, sanitizeFn);\n    }\n    updateOpCodes[maskIndex] = mask;\n    updateOpCodes[sizeIndex] = updateOpCodes.length - startIndex;\n    return mask;\n}\n/**\n * Count the number of bindings in the given `opCodes`.\n *\n * It could be possible to speed this up, by passing the number of bindings found back from\n * `generateBindingUpdateOpCodes()` to `i18nAttributesFirstPass()` but this would then require more\n * complexity in the code and/or transient objects to be created.\n *\n * Since this function is only called once when the template is instantiated, is trivial in the\n * first instance (since `opCodes` will be an empty array), and it is not common for elements to\n * contain multiple i18n bound attributes, it seems like this is a reasonable compromise.\n */\nfunction countBindings(opCodes) {\n    let count = 0;\n    for (let i = 0; i < opCodes.length; i++) {\n        const opCode = opCodes[i];\n        // Bindings are negative numbers.\n        if (typeof opCode === 'number' && opCode < 0) {\n            count++;\n        }\n    }\n    return count;\n}\n/**\n * Convert binding index to mask bit.\n *\n * Each index represents a single bit on the bit-mask. Because bit-mask only has 32 bits, we make\n * the 32nd bit share all masks for all bindings higher than 32. Since it is extremely rare to\n * have more than 32 bindings this will be hit very rarely. The downside of hitting this corner\n * case is that we will execute binding code more often than necessary. (penalty of performance)\n */\nfunction toMaskBit(bindingIndex) {\n    return 1 << Math.min(bindingIndex, 31);\n}\nfunction isRootTemplateMessage(subTemplateIndex) {\n    return subTemplateIndex === -1;\n}\n/**\n * Removes everything inside the sub-templates of a message.\n */\nfunction removeInnerTemplateTranslation(message) {\n    let match;\n    let res = '';\n    let index = 0;\n    let inTemplate = false;\n    let tagMatched;\n    while ((match = SUBTEMPLATE_REGEXP.exec(message)) !== null) {\n        if (!inTemplate) {\n            res += message.substring(index, match.index + match[0].length);\n            tagMatched = match[1];\n            inTemplate = true;\n        }\n        else {\n            if (match[0] === `${MARKER}/*${tagMatched}${MARKER}`) {\n                index = match.index;\n                inTemplate = false;\n            }\n        }\n    }\n    ngDevMode &&\n        assertEqual(inTemplate, false, `Tag mismatch: unable to find the end of the sub-template in the translation \"${message}\"`);\n    res += message.slice(index);\n    return res;\n}\n/**\n * Extracts a part of a message and removes the rest.\n *\n * This method is used for extracting a part of the message associated with a template. A\n * translated message can span multiple templates.\n *\n * Example:\n * ```\n * <div i18n>Translate <span *ngIf>me</span>!</div>\n * ```\n *\n * @param message The message to crop\n * @param subTemplateIndex Index of the sub-template to extract. If undefined it returns the\n * external template and removes all sub-templates.\n */\nfunction getTranslationForTemplate(message, subTemplateIndex) {\n    if (isRootTemplateMessage(subTemplateIndex)) {\n        // We want the root template message, ignore all sub-templates\n        return removeInnerTemplateTranslation(message);\n    }\n    else {\n        // We want a specific sub-template\n        const start = message.indexOf(`:${subTemplateIndex}${MARKER}`) + 2 + subTemplateIndex.toString().length;\n        const end = message.search(new RegExp(`${MARKER}\\\\/\\\\*\\\\d+:${subTemplateIndex}${MARKER}`));\n        return removeInnerTemplateTranslation(message.substring(start, end));\n    }\n}\n/**\n * Generate the OpCodes for ICU expressions.\n *\n * @param icuExpression\n * @param index Index where the anchor is stored and an optional `TIcuContainerNode`\n *   - `lView[anchorIdx]` points to a `Comment` node representing the anchor for the ICU.\n *   - `tView.data[anchorIdx]` points to the `TIcuContainerNode` if ICU is root (`null` otherwise)\n */\nfunction icuStart(tView, lView, updateOpCodes, parentIdx, icuExpression, anchorIdx) {\n    ngDevMode && assertDefined(icuExpression, 'ICU expression must be defined');\n    let bindingMask = 0;\n    const tIcu = {\n        type: icuExpression.type,\n        currentCaseLViewIndex: allocExpando(tView, lView, 1, null),\n        anchorIdx,\n        cases: [],\n        create: [],\n        remove: [],\n        update: []\n    };\n    addUpdateIcuSwitch(updateOpCodes, icuExpression, anchorIdx);\n    setTIcu(tView, anchorIdx, tIcu);\n    const values = icuExpression.values;\n    for (let i = 0; i < values.length; i++) {\n        // Each value is an array of strings & other ICU expressions\n        const valueArr = values[i];\n        const nestedIcus = [];\n        for (let j = 0; j < valueArr.length; j++) {\n            const value = valueArr[j];\n            if (typeof value !== 'string') {\n                // It is an nested ICU expression\n                const icuIndex = nestedIcus.push(value) - 1;\n                // Replace nested ICU expression by a comment node\n                valueArr[j] = `<!--�${icuIndex}�-->`;\n            }\n        }\n        bindingMask = parseIcuCase(tView, tIcu, lView, updateOpCodes, parentIdx, icuExpression.cases[i], valueArr.join(''), nestedIcus) |\n            bindingMask;\n    }\n    if (bindingMask) {\n        addUpdateIcuUpdate(updateOpCodes, bindingMask, anchorIdx);\n    }\n}\n/**\n * Parses text containing an ICU expression and produces a JSON object for it.\n * Original code from closure library, modified for Angular.\n *\n * @param pattern Text containing an ICU expression that needs to be parsed.\n *\n */\nfunction parseICUBlock(pattern) {\n    const cases = [];\n    const values = [];\n    let icuType = 1 /* IcuType.plural */;\n    let mainBinding = 0;\n    pattern = pattern.replace(ICU_BLOCK_REGEXP, function (str, binding, type) {\n        if (type === 'select') {\n            icuType = 0 /* IcuType.select */;\n        }\n        else {\n            icuType = 1 /* IcuType.plural */;\n        }\n        mainBinding = parseInt(binding.slice(1), 10);\n        return '';\n    });\n    const parts = i18nParseTextIntoPartsAndICU(pattern);\n    // Looking for (key block)+ sequence. One of the keys has to be \"other\".\n    for (let pos = 0; pos < parts.length;) {\n        let key = parts[pos++].trim();\n        if (icuType === 1 /* IcuType.plural */) {\n            // Key can be \"=x\", we just want \"x\"\n            key = key.replace(/\\s*(?:=)?(\\w+)\\s*/, '$1');\n        }\n        if (key.length) {\n            cases.push(key);\n        }\n        const blocks = i18nParseTextIntoPartsAndICU(parts[pos++]);\n        if (cases.length > values.length) {\n            values.push(blocks);\n        }\n    }\n    // TODO(ocombe): support ICU expressions in attributes, see #21615\n    return { type: icuType, mainBinding: mainBinding, cases, values };\n}\n/**\n * Breaks pattern into strings and top level {...} blocks.\n * Can be used to break a message into text and ICU expressions, or to break an ICU expression\n * into keys and cases. Original code from closure library, modified for Angular.\n *\n * @param pattern (sub)Pattern to be broken.\n * @returns An `Array<string|IcuExpression>` where:\n *   - odd positions: `string` => text between ICU expressions\n *   - even positions: `ICUExpression` => ICU expression parsed into `ICUExpression` record.\n */\nfunction i18nParseTextIntoPartsAndICU(pattern) {\n    if (!pattern) {\n        return [];\n    }\n    let prevPos = 0;\n    const braceStack = [];\n    const results = [];\n    const braces = /[{}]/g;\n    // lastIndex doesn't get set to 0 so we have to.\n    braces.lastIndex = 0;\n    let match;\n    while (match = braces.exec(pattern)) {\n        const pos = match.index;\n        if (match[0] == '}') {\n            braceStack.pop();\n            if (braceStack.length == 0) {\n                // End of the block.\n                const block = pattern.substring(prevPos, pos);\n                if (ICU_BLOCK_REGEXP.test(block)) {\n                    results.push(parseICUBlock(block));\n                }\n                else {\n                    results.push(block);\n                }\n                prevPos = pos + 1;\n            }\n        }\n        else {\n            if (braceStack.length == 0) {\n                const substring = pattern.substring(prevPos, pos);\n                results.push(substring);\n                prevPos = pos + 1;\n            }\n            braceStack.push('{');\n        }\n    }\n    const substring = pattern.substring(prevPos);\n    results.push(substring);\n    return results;\n}\n/**\n * Parses a node, its children and its siblings, and generates the mutate & update OpCodes.\n *\n */\nfunction parseIcuCase(tView, tIcu, lView, updateOpCodes, parentIdx, caseName, unsafeCaseHtml, nestedIcus) {\n    const create = [];\n    const remove = [];\n    const update = [];\n    if (ngDevMode) {\n        attachDebugGetter(create, icuCreateOpCodesToString);\n        attachDebugGetter(remove, i18nRemoveOpCodesToString);\n        attachDebugGetter(update, i18nUpdateOpCodesToString);\n    }\n    tIcu.cases.push(caseName);\n    tIcu.create.push(create);\n    tIcu.remove.push(remove);\n    tIcu.update.push(update);\n    const inertBodyHelper = getInertBodyHelper(getDocument());\n    const inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeCaseHtml);\n    ngDevMode && assertDefined(inertBodyElement, 'Unable to generate inert body element');\n    const inertRootNode = getTemplateContent(inertBodyElement) || inertBodyElement;\n    if (inertRootNode) {\n        return walkIcuTree(tView, tIcu, lView, updateOpCodes, create, remove, update, inertRootNode, parentIdx, nestedIcus, 0);\n    }\n    else {\n        return 0;\n    }\n}\nfunction walkIcuTree(tView, tIcu, lView, sharedUpdateOpCodes, create, remove, update, parentNode, parentIdx, nestedIcus, depth) {\n    let bindingMask = 0;\n    let currentNode = parentNode.firstChild;\n    while (currentNode) {\n        const newIndex = allocExpando(tView, lView, 1, null);\n        switch (currentNode.nodeType) {\n            case Node.ELEMENT_NODE:\n                const element = currentNode;\n                const tagName = element.tagName.toLowerCase();\n                if (VALID_ELEMENTS.hasOwnProperty(tagName)) {\n                    addCreateNodeAndAppend(create, ELEMENT_MARKER, tagName, parentIdx, newIndex);\n                    tView.data[newIndex] = tagName;\n                    const elAttrs = element.attributes;\n                    for (let i = 0; i < elAttrs.length; i++) {\n                        const attr = elAttrs.item(i);\n                        const lowerAttrName = attr.name.toLowerCase();\n                        const hasBinding = !!attr.value.match(BINDING_REGEXP);\n                        // we assume the input string is safe, unless it's using a binding\n                        if (hasBinding) {\n                            if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {\n                                if (URI_ATTRS[lowerAttrName]) {\n                                    generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, _sanitizeUrl);\n                                }\n                                else {\n                                    generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, null);\n                                }\n                            }\n                            else {\n                                ngDevMode &&\n                                    console.warn(`WARNING: ignoring unsafe attribute value ` +\n                                        `${lowerAttrName} on element ${tagName} ` +\n                                        `(see ${XSS_SECURITY_URL})`);\n                            }\n                        }\n                        else {\n                            addCreateAttribute(create, newIndex, attr);\n                        }\n                    }\n                    // Parse the children of this node (if any)\n                    bindingMask = walkIcuTree(tView, tIcu, lView, sharedUpdateOpCodes, create, remove, update, currentNode, newIndex, nestedIcus, depth + 1) |\n                        bindingMask;\n                    addRemoveNode(remove, newIndex, depth);\n                }\n                break;\n            case Node.TEXT_NODE:\n                const value = currentNode.textContent || '';\n                const hasBinding = value.match(BINDING_REGEXP);\n                addCreateNodeAndAppend(create, null, hasBinding ? '' : value, parentIdx, newIndex);\n                addRemoveNode(remove, newIndex, depth);\n                if (hasBinding) {\n                    bindingMask =\n                        generateBindingUpdateOpCodes(update, value, newIndex, null, 0, null) | bindingMask;\n                }\n                break;\n            case Node.COMMENT_NODE:\n                // Check if the comment node is a placeholder for a nested ICU\n                const isNestedIcu = NESTED_ICU.exec(currentNode.textContent || '');\n                if (isNestedIcu) {\n                    const nestedIcuIndex = parseInt(isNestedIcu[1], 10);\n                    const icuExpression = nestedIcus[nestedIcuIndex];\n                    // Create the comment node that will anchor the ICU expression\n                    addCreateNodeAndAppend(create, ICU_MARKER, ngDevMode ? `nested ICU ${nestedIcuIndex}` : '', parentIdx, newIndex);\n                    icuStart(tView, lView, sharedUpdateOpCodes, parentIdx, icuExpression, newIndex);\n                    addRemoveNestedIcu(remove, newIndex, depth);\n                }\n                break;\n        }\n        currentNode = currentNode.nextSibling;\n    }\n    return bindingMask;\n}\nfunction addRemoveNode(remove, index, depth) {\n    if (depth === 0) {\n        remove.push(index);\n    }\n}\nfunction addRemoveNestedIcu(remove, index, depth) {\n    if (depth === 0) {\n        remove.push(~index); // remove ICU at `index`\n        remove.push(index); // remove ICU comment at `index`\n    }\n}\nfunction addUpdateIcuSwitch(update, icuExpression, index) {\n    update.push(toMaskBit(icuExpression.mainBinding), 2, -1 - icuExpression.mainBinding, index << 2 /* I18nUpdateOpCode.SHIFT_REF */ | 2 /* I18nUpdateOpCode.IcuSwitch */);\n}\nfunction addUpdateIcuUpdate(update, bindingMask, index) {\n    update.push(bindingMask, 1, index << 2 /* I18nUpdateOpCode.SHIFT_REF */ | 3 /* I18nUpdateOpCode.IcuUpdate */);\n}\nfunction addCreateNodeAndAppend(create, marker, text, appendToParentIdx, createAtIdx) {\n    if (marker !== null) {\n        create.push(marker);\n    }\n    create.push(text, createAtIdx, icuCreateOpCode(0 /* IcuCreateOpCode.AppendChild */, appendToParentIdx, createAtIdx));\n}\nfunction addCreateAttribute(create, newIndex, attr) {\n    create.push(newIndex << 1 /* IcuCreateOpCode.SHIFT_REF */ | 1 /* IcuCreateOpCode.Attr */, attr.name, attr.value);\n}\n\n// i18nPostprocess consts\nconst ROOT_TEMPLATE_ID = 0;\nconst PP_MULTI_VALUE_PLACEHOLDERS_REGEXP = /\\[(�.+?�?)\\]/;\nconst PP_PLACEHOLDERS_REGEXP = /\\[(�.+?�?)\\]|(�\\/?\\*\\d+:\\d+�)/g;\nconst PP_ICU_VARS_REGEXP = /({\\s*)(VAR_(PLURAL|SELECT)(_\\d+)?)(\\s*,)/g;\nconst PP_ICU_PLACEHOLDERS_REGEXP = /{([A-Z0-9_]+)}/g;\nconst PP_ICUS_REGEXP = /�I18N_EXP_(ICU(_\\d+)?)�/g;\nconst PP_CLOSE_TEMPLATE_REGEXP = /\\/\\*/;\nconst PP_TEMPLATE_ID_REGEXP = /\\d+\\:(\\d+)/;\n/**\n * Handles message string post-processing for internationalization.\n *\n * Handles message string post-processing by transforming it from intermediate\n * format (that might contain some markers that we need to replace) to the final\n * form, consumable by i18nStart instruction. Post processing steps include:\n *\n * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n *    in case multiple ICUs have the same placeholder name\n *\n * @param message Raw translation string for post processing\n * @param replacements Set of replacements that should be applied\n *\n * @returns Transformed string that can be consumed by i18nStart instruction\n *\n * @codeGenApi\n */\nfunction i18nPostprocess(message, replacements = {}) {\n    /**\n     * Step 1: resolve all multi-value placeholders like [�#5�|�*1:1��#2:1�|�#4:1�]\n     *\n     * Note: due to the way we process nested templates (BFS), multi-value placeholders are typically\n     * grouped by templates, for example: [�#5�|�#6�|�#1:1�|�#3:2�] where �#5� and �#6� belong to root\n     * template, �#1:1� belong to nested template with index 1 and �#1:2� - nested template with index\n     * 3. However in real templates the order might be different: i.e. �#1:1� and/or �#3:2� may go in\n     * front of �#6�. The post processing step restores the right order by keeping track of the\n     * template id stack and looks for placeholders that belong to the currently active template.\n     */\n    let result = message;\n    if (PP_MULTI_VALUE_PLACEHOLDERS_REGEXP.test(message)) {\n        const matches = {};\n        const templateIdsStack = [ROOT_TEMPLATE_ID];\n        result = result.replace(PP_PLACEHOLDERS_REGEXP, (m, phs, tmpl) => {\n            const content = phs || tmpl;\n            const placeholders = matches[content] || [];\n            if (!placeholders.length) {\n                content.split('|').forEach((placeholder) => {\n                    const match = placeholder.match(PP_TEMPLATE_ID_REGEXP);\n                    const templateId = match ? parseInt(match[1], 10) : ROOT_TEMPLATE_ID;\n                    const isCloseTemplateTag = PP_CLOSE_TEMPLATE_REGEXP.test(placeholder);\n                    placeholders.push([templateId, isCloseTemplateTag, placeholder]);\n                });\n                matches[content] = placeholders;\n            }\n            if (!placeholders.length) {\n                throw new Error(`i18n postprocess: unmatched placeholder - ${content}`);\n            }\n            const currentTemplateId = templateIdsStack[templateIdsStack.length - 1];\n            let idx = 0;\n            // find placeholder index that matches current template id\n            for (let i = 0; i < placeholders.length; i++) {\n                if (placeholders[i][0] === currentTemplateId) {\n                    idx = i;\n                    break;\n                }\n            }\n            // update template id stack based on the current tag extracted\n            const [templateId, isCloseTemplateTag, placeholder] = placeholders[idx];\n            if (isCloseTemplateTag) {\n                templateIdsStack.pop();\n            }\n            else if (currentTemplateId !== templateId) {\n                templateIdsStack.push(templateId);\n            }\n            // remove processed tag from the list\n            placeholders.splice(idx, 1);\n            return placeholder;\n        });\n    }\n    // return current result if no replacements specified\n    if (!Object.keys(replacements).length) {\n        return result;\n    }\n    /**\n     * Step 2: replace all ICU vars (like \"VAR_PLURAL\")\n     */\n    result = result.replace(PP_ICU_VARS_REGEXP, (match, start, key, _type, _idx, end) => {\n        return replacements.hasOwnProperty(key) ? `${start}${replacements[key]}${end}` : match;\n    });\n    /**\n     * Step 3: replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n     */\n    result = result.replace(PP_ICU_PLACEHOLDERS_REGEXP, (match, key) => {\n        return replacements.hasOwnProperty(key) ? replacements[key] : match;\n    });\n    /**\n     * Step 4: replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�) in case\n     * multiple ICUs have the same placeholder name\n     */\n    result = result.replace(PP_ICUS_REGEXP, (match, key) => {\n        if (replacements.hasOwnProperty(key)) {\n            const list = replacements[key];\n            if (!list.length) {\n                throw new Error(`i18n postprocess: unmatched ICU - ${match} with key: ${key}`);\n            }\n            return list.shift();\n        }\n        return match;\n    });\n    return result;\n}\n\n/**\n * Marks a block of text as translatable.\n *\n * The instructions `i18nStart` and `i18nEnd` mark the translation block in the template.\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param index A unique index of the translation in the static block.\n * @param messageIndex An index of the translation message from the `def.consts` array.\n * @param subTemplateIndex Optional sub-template index in the `message`.\n *\n * @codeGenApi\n */\nfunction ɵɵi18nStart(index, messageIndex, subTemplateIndex = -1) {\n    const tView = getTView();\n    const lView = getLView();\n    const adjustedIndex = HEADER_OFFSET + index;\n    ngDevMode && assertDefined(tView, `tView should be defined`);\n    const message = getConstant(tView.consts, messageIndex);\n    const parentTNode = getCurrentParentTNode();\n    if (tView.firstCreatePass) {\n        i18nStartFirstCreatePass(tView, parentTNode === null ? 0 : parentTNode.index, lView, adjustedIndex, message, subTemplateIndex);\n    }\n    // Set a flag that this LView has i18n blocks.\n    // The flag is later used to determine whether this component should\n    // be hydrated (currently hydration is not supported for i18n blocks).\n    if (tView.type === 2 /* TViewType.Embedded */) {\n        // Annotate host component's LView (not embedded view's LView),\n        // since hydration can be skipped on per-component basis only.\n        const componentLView = lView[DECLARATION_COMPONENT_VIEW];\n        componentLView[FLAGS] |= 32 /* LViewFlags.HasI18n */;\n    }\n    else {\n        lView[FLAGS] |= 32 /* LViewFlags.HasI18n */;\n    }\n    const tI18n = tView.data[adjustedIndex];\n    const sameViewParentTNode = parentTNode === lView[T_HOST] ? null : parentTNode;\n    const parentRNode = getClosestRElement(tView, sameViewParentTNode, lView);\n    // If `parentTNode` is an `ElementContainer` than it has `<!--ng-container--->`.\n    // When we do inserts we have to make sure to insert in front of `<!--ng-container--->`.\n    const insertInFrontOf = parentTNode && (parentTNode.type & 8 /* TNodeType.ElementContainer */) ?\n        lView[parentTNode.index] :\n        null;\n    applyCreateOpCodes(lView, tI18n.create, parentRNode, insertInFrontOf);\n    setInI18nBlock(true);\n}\n/**\n * Translates a translation block marked by `i18nStart` and `i18nEnd`. It inserts the text/ICU nodes\n * into the render tree, moves the placeholder nodes and removes the deleted nodes.\n *\n * @codeGenApi\n */\nfunction ɵɵi18nEnd() {\n    setInI18nBlock(false);\n}\n/**\n *\n * Use this instruction to create a translation block that doesn't contain any placeholder.\n * It calls both {@link i18nStart} and {@link i18nEnd} in one instruction.\n *\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param index A unique index of the translation in the static block.\n * @param messageIndex An index of the translation message from the `def.consts` array.\n * @param subTemplateIndex Optional sub-template index in the `message`.\n *\n * @codeGenApi\n */\nfunction ɵɵi18n(index, messageIndex, subTemplateIndex) {\n    ɵɵi18nStart(index, messageIndex, subTemplateIndex);\n    ɵɵi18nEnd();\n}\n/**\n * Marks a list of attributes as translatable.\n *\n * @param index A unique index in the static block\n * @param values\n *\n * @codeGenApi\n */\nfunction ɵɵi18nAttributes(index, attrsIndex) {\n    const tView = getTView();\n    ngDevMode && assertDefined(tView, `tView should be defined`);\n    const attrs = getConstant(tView.consts, attrsIndex);\n    i18nAttributesFirstPass(tView, index + HEADER_OFFSET, attrs);\n}\n/**\n * Stores the values of the bindings during each update cycle in order to determine if we need to\n * update the translated nodes.\n *\n * @param value The binding's value\n * @returns This function returns itself so that it may be chained\n * (e.g. `i18nExp(ctx.name)(ctx.title)`)\n *\n * @codeGenApi\n */\nfunction ɵɵi18nExp(value) {\n    const lView = getLView();\n    setMaskBit(bindingUpdated(lView, nextBindingIndex(), value));\n    return ɵɵi18nExp;\n}\n/**\n * Updates a translation block or an i18n attribute when the bindings have changed.\n *\n * @param index Index of either {@link i18nStart} (translation block) or {@link i18nAttributes}\n * (i18n attribute) on which it should update the content.\n *\n * @codeGenApi\n */\nfunction ɵɵi18nApply(index) {\n    applyI18n(getTView(), getLView(), index + HEADER_OFFSET);\n}\n/**\n * Handles message string post-processing for internationalization.\n *\n * Handles message string post-processing by transforming it from intermediate\n * format (that might contain some markers that we need to replace) to the final\n * form, consumable by i18nStart instruction. Post processing steps include:\n *\n * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n *    in case multiple ICUs have the same placeholder name\n *\n * @param message Raw translation string for post processing\n * @param replacements Set of replacements that should be applied\n *\n * @returns Transformed string that can be consumed by i18nStart instruction\n *\n * @codeGenApi\n */\nfunction ɵɵi18nPostprocess(message, replacements = {}) {\n    return i18nPostprocess(message, replacements);\n}\n\n/**\n * Determine if the argument is shaped like a Promise\n */\nfunction isPromise(obj) {\n    // allow any Promise/A+ compliant thenable.\n    // It's up to the caller to ensure that obj.then conforms to the spec\n    return !!obj && typeof obj.then === 'function';\n}\n/**\n * Determine if the argument is a Subscribable\n */\nfunction isSubscribable(obj) {\n    return !!obj && typeof obj.subscribe === 'function';\n}\n\n/**\n * Adds an event listener to the current node.\n *\n * If an output exists on one of the node's directives, it also subscribes to the output\n * and saves the subscription for later cleanup.\n *\n * @param eventName Name of the event\n * @param listenerFn The function to be called when event emits\n * @param useCapture Whether or not to use capture in event listener - this argument is a reminder\n *     from the Renderer3 infrastructure and should be removed from the instruction arguments\n * @param eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n *\n * @codeGenApi\n */\nfunction ɵɵlistener(eventName, listenerFn, useCapture, eventTargetResolver) {\n    const lView = getLView();\n    const tView = getTView();\n    const tNode = getCurrentTNode();\n    listenerInternal(tView, lView, lView[RENDERER], tNode, eventName, listenerFn, eventTargetResolver);\n    return ɵɵlistener;\n}\n/**\n * Registers a synthetic host listener (e.g. `(@foo.start)`) on a component or directive.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host listener (e.g. `@HostListener('@foo.start')`) properly gets rendered\n * in the component's renderer. Normally all host listeners are evaluated with the\n * parent component's renderer, but, in the case of animation @triggers, they need\n * to be evaluated with the sub component's renderer (because that's where the\n * animation triggers are defined).\n *\n * Do not use this instruction as a replacement for `listener`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * @param eventName Name of the event\n * @param listenerFn The function to be called when event emits\n * @param useCapture Whether or not to use capture in event listener\n * @param eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n *\n * @codeGenApi\n */\nfunction ɵɵsyntheticHostListener(eventName, listenerFn) {\n    const tNode = getCurrentTNode();\n    const lView = getLView();\n    const tView = getTView();\n    const currentDef = getCurrentDirectiveDef(tView.data);\n    const renderer = loadComponentRenderer(currentDef, tNode, lView);\n    listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn);\n    return ɵɵsyntheticHostListener;\n}\n/**\n * A utility function that checks if a given element has already an event handler registered for an\n * event with a specified name. The TView.cleanup data structure is used to find out which events\n * are registered for a given element.\n */\nfunction findExistingListener(tView, lView, eventName, tNodeIdx) {\n    const tCleanup = tView.cleanup;\n    if (tCleanup != null) {\n        for (let i = 0; i < tCleanup.length - 1; i += 2) {\n            const cleanupEventName = tCleanup[i];\n            if (cleanupEventName === eventName && tCleanup[i + 1] === tNodeIdx) {\n                // We have found a matching event name on the same node but it might not have been\n                // registered yet, so we must explicitly verify entries in the LView cleanup data\n                // structures.\n                const lCleanup = lView[CLEANUP];\n                const listenerIdxInLCleanup = tCleanup[i + 2];\n                return lCleanup.length > listenerIdxInLCleanup ? lCleanup[listenerIdxInLCleanup] : null;\n            }\n            // TView.cleanup can have a mix of 4-elements entries (for event handler cleanups) or\n            // 2-element entries (for directive and queries destroy hooks). As such we can encounter\n            // blocks of 4 or 2 items in the tView.cleanup and this is why we iterate over 2 elements\n            // first and jump another 2 elements if we detect listeners cleanup (4 elements). Also check\n            // documentation of TView.cleanup for more details of this data structure layout.\n            if (typeof cleanupEventName === 'string') {\n                i += 2;\n            }\n        }\n    }\n    return null;\n}\nfunction listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn, eventTargetResolver) {\n    const isTNodeDirectiveHost = isDirectiveHost(tNode);\n    const firstCreatePass = tView.firstCreatePass;\n    const tCleanup = firstCreatePass && getOrCreateTViewCleanup(tView);\n    const context = lView[CONTEXT];\n    // When the ɵɵlistener instruction was generated and is executed we know that there is either a\n    // native listener or a directive output on this element. As such we we know that we will have to\n    // register a listener and store its cleanup function on LView.\n    const lCleanup = getOrCreateLViewCleanup(lView);\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */);\n    let processOutputs = true;\n    // Adding a native event listener is applicable when:\n    // - The corresponding TNode represents a DOM element.\n    // - The event target has a resolver (usually resulting in a global object,\n    //   such as `window` or `document`).\n    if ((tNode.type & 3 /* TNodeType.AnyRNode */) || eventTargetResolver) {\n        const native = getNativeByTNode(tNode, lView);\n        const target = eventTargetResolver ? eventTargetResolver(native) : native;\n        const lCleanupIndex = lCleanup.length;\n        const idxOrTargetGetter = eventTargetResolver ?\n            (_lView) => eventTargetResolver(unwrapRNode(_lView[tNode.index])) :\n            tNode.index;\n        // In order to match current behavior, native DOM event listeners must be added for all\n        // events (including outputs).\n        // There might be cases where multiple directives on the same element try to register an event\n        // handler function for the same event. In this situation we want to avoid registration of\n        // several native listeners as each registration would be intercepted by NgZone and\n        // trigger change detection. This would mean that a single user action would result in several\n        // change detections being invoked. To avoid this situation we want to have only one call to\n        // native handler registration (for the same element and same type of event).\n        //\n        // In order to have just one native event handler in presence of multiple handler functions,\n        // we just register a first handler function as a native event listener and then chain\n        // (coalesce) other handler functions on top of the first native handler function.\n        let existingListener = null;\n        // Please note that the coalescing described here doesn't happen for events specifying an\n        // alternative target (ex. (document:click)) - this is to keep backward compatibility with the\n        // view engine.\n        // Also, we don't have to search for existing listeners is there are no directives\n        // matching on a given node as we can't register multiple event handlers for the same event in\n        // a template (this would mean having duplicate attributes).\n        if (!eventTargetResolver && isTNodeDirectiveHost) {\n            existingListener = findExistingListener(tView, lView, eventName, tNode.index);\n        }\n        if (existingListener !== null) {\n            // Attach a new listener to coalesced listeners list, maintaining the order in which\n            // listeners are registered. For performance reasons, we keep a reference to the last\n            // listener in that list (in `__ngLastListenerFn__` field), so we can avoid going through\n            // the entire set each time we need to add a new listener.\n            const lastListenerFn = existingListener.__ngLastListenerFn__ || existingListener;\n            lastListenerFn.__ngNextListenerFn__ = listenerFn;\n            existingListener.__ngLastListenerFn__ = listenerFn;\n            processOutputs = false;\n        }\n        else {\n            listenerFn = wrapListener(tNode, lView, context, listenerFn, false /** preventDefault */);\n            const cleanupFn = renderer.listen(target, eventName, listenerFn);\n            ngDevMode && ngDevMode.rendererAddEventListener++;\n            lCleanup.push(listenerFn, cleanupFn);\n            tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, lCleanupIndex + 1);\n        }\n    }\n    else {\n        // Even if there is no native listener to add, we still need to wrap the listener so that OnPush\n        // ancestors are marked dirty when an event occurs.\n        listenerFn = wrapListener(tNode, lView, context, listenerFn, false /** preventDefault */);\n    }\n    // subscribe to directive outputs\n    const outputs = tNode.outputs;\n    let props;\n    if (processOutputs && outputs !== null && (props = outputs[eventName])) {\n        const propsLength = props.length;\n        if (propsLength) {\n            for (let i = 0; i < propsLength; i += 2) {\n                const index = props[i];\n                ngDevMode && assertIndexInRange(lView, index);\n                const minifiedName = props[i + 1];\n                const directiveInstance = lView[index];\n                const output = directiveInstance[minifiedName];\n                if (ngDevMode && !isSubscribable(output)) {\n                    throw new Error(`@Output ${minifiedName} not initialized in '${directiveInstance.constructor.name}'.`);\n                }\n                const subscription = output.subscribe(listenerFn);\n                const idx = lCleanup.length;\n                lCleanup.push(listenerFn, subscription);\n                tCleanup && tCleanup.push(eventName, tNode.index, idx, -(idx + 1));\n            }\n        }\n    }\n}\nfunction executeListenerWithErrorHandling(lView, context, listenerFn, e) {\n    try {\n        profiler(6 /* ProfilerEvent.OutputStart */, context, listenerFn);\n        // Only explicitly returning false from a listener should preventDefault\n        return listenerFn(e) !== false;\n    }\n    catch (error) {\n        handleError(lView, error);\n        return false;\n    }\n    finally {\n        profiler(7 /* ProfilerEvent.OutputEnd */, context, listenerFn);\n    }\n}\n/**\n * Wraps an event listener with a function that marks ancestors dirty and prevents default behavior,\n * if applicable.\n *\n * @param tNode The TNode associated with this listener\n * @param lView The LView that contains this listener\n * @param listenerFn The listener function to call\n * @param wrapWithPreventDefault Whether or not to prevent default behavior\n * (the procedural renderer does this already, so in those cases, we should skip)\n */\nfunction wrapListener(tNode, lView, context, listenerFn, wrapWithPreventDefault) {\n    // Note: we are performing most of the work in the listener function itself\n    // to optimize listener registration.\n    return function wrapListenerIn_markDirtyAndPreventDefault(e) {\n        // Ivy uses `Function` as a special token that allows us to unwrap the function\n        // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`.\n        if (e === Function) {\n            return listenerFn;\n        }\n        // In order to be backwards compatible with View Engine, events on component host nodes\n        // must also mark the component view itself dirty (i.e. the view that it owns).\n        const startView = tNode.componentOffset > -1 ? getComponentLViewByIndex(tNode.index, lView) : lView;\n        markViewDirty(startView);\n        let result = executeListenerWithErrorHandling(lView, context, listenerFn, e);\n        // A just-invoked listener function might have coalesced listeners so we need to check for\n        // their presence and invoke as needed.\n        let nextListenerFn = wrapListenerIn_markDirtyAndPreventDefault.__ngNextListenerFn__;\n        while (nextListenerFn) {\n            // We should prevent default if any of the listeners explicitly return false\n            result = executeListenerWithErrorHandling(lView, context, nextListenerFn, e) && result;\n            nextListenerFn = nextListenerFn.__ngNextListenerFn__;\n        }\n        if (wrapWithPreventDefault && result === false) {\n            e.preventDefault();\n        }\n        return result;\n    };\n}\n\n/**\n * Retrieves a context at the level specified and saves it as the global, contextViewData.\n * Will get the next level up if level is not specified.\n *\n * This is used to save contexts of parent views so they can be bound in embedded views, or\n * in conjunction with reference() to bind a ref from a parent view.\n *\n * @param level The relative level of the view from which to grab context compared to contextVewData\n * @returns context\n *\n * @codeGenApi\n */\nfunction ɵɵnextContext(level = 1) {\n    return nextContextImpl(level);\n}\n\n/**\n * Checks a given node against matching projection slots and returns the\n * determined slot index. Returns \"null\" if no slot matched the given node.\n *\n * This function takes into account the parsed ngProjectAs selector from the\n * node's attributes. If present, it will check whether the ngProjectAs selector\n * matches any of the projection slot selectors.\n */\nfunction matchingProjectionSlotIndex(tNode, projectionSlots) {\n    let wildcardNgContentIndex = null;\n    const ngProjectAsAttrVal = getProjectAsAttrValue(tNode);\n    for (let i = 0; i < projectionSlots.length; i++) {\n        const slotValue = projectionSlots[i];\n        // The last wildcard projection slot should match all nodes which aren't matching\n        // any selector. This is necessary to be backwards compatible with view engine.\n        if (slotValue === '*') {\n            wildcardNgContentIndex = i;\n            continue;\n        }\n        // If we ran into an `ngProjectAs` attribute, we should match its parsed selector\n        // to the list of selectors, otherwise we fall back to matching against the node.\n        if (ngProjectAsAttrVal === null ?\n            isNodeMatchingSelectorList(tNode, slotValue, /* isProjectionMode */ true) :\n            isSelectorInSelectorList(ngProjectAsAttrVal, slotValue)) {\n            return i; // first matching selector \"captures\" a given node\n        }\n    }\n    return wildcardNgContentIndex;\n}\n/**\n * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\n * It takes all the selectors from the entire component's template and decides where\n * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\n * backed by a selector).\n *\n * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\n * un-parsed form.\n *\n * The parsed form is needed for efficient matching of a node against a given CSS selector.\n * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\n *\n * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\n * drawbacks:\n * - having only a textual form would require runtime parsing of CSS selectors;\n * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\n * template author).\n *\n * @param projectionSlots? A collection of projection slots. A projection slot can be based\n *        on a parsed CSS selectors or set to the wildcard selector (\"*\") in order to match\n *        all nodes which do not match any selector. If not specified, a single wildcard\n *        selector projection slot will be defined.\n *\n * @codeGenApi\n */\nfunction ɵɵprojectionDef(projectionSlots) {\n    const componentNode = getLView()[DECLARATION_COMPONENT_VIEW][T_HOST];\n    if (!componentNode.projection) {\n        // If no explicit projection slots are defined, fall back to a single\n        // projection slot with the wildcard selector.\n        const numProjectionSlots = projectionSlots ? projectionSlots.length : 1;\n        const projectionHeads = componentNode.projection =\n            newArray(numProjectionSlots, null);\n        const tails = projectionHeads.slice();\n        let componentChild = componentNode.child;\n        while (componentChild !== null) {\n            const slotIndex = projectionSlots ? matchingProjectionSlotIndex(componentChild, projectionSlots) : 0;\n            if (slotIndex !== null) {\n                if (tails[slotIndex]) {\n                    tails[slotIndex].projectionNext = componentChild;\n                }\n                else {\n                    projectionHeads[slotIndex] = componentChild;\n                }\n                tails[slotIndex] = componentChild;\n            }\n            componentChild = componentChild.next;\n        }\n    }\n}\n/**\n * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\n * to the projectionDef instruction.\n *\n * @param nodeIndex\n * @param selectorIndex:\n *        - 0 when the selector is `*` (or unspecified as this is the default value),\n *        - 1 based index of the selector from the {@link projectionDef}\n *\n * @codeGenApi\n */\nfunction ɵɵprojection(nodeIndex, selectorIndex = 0, attrs) {\n    const lView = getLView();\n    const tView = getTView();\n    const tProjectionNode = getOrCreateTNode(tView, HEADER_OFFSET + nodeIndex, 16 /* TNodeType.Projection */, null, attrs || null);\n    // We can't use viewData[HOST_NODE] because projection nodes can be nested in embedded views.\n    if (tProjectionNode.projection === null)\n        tProjectionNode.projection = selectorIndex;\n    // `<ng-content>` has no content\n    setCurrentTNodeAsNotParent();\n    const hydrationInfo = lView[HYDRATION];\n    const isNodeCreationMode = !hydrationInfo || isInSkipHydrationBlock$1();\n    if (isNodeCreationMode &&\n        (tProjectionNode.flags & 32 /* TNodeFlags.isDetached */) !== 32 /* TNodeFlags.isDetached */) {\n        // re-distribution of projectable nodes is stored on a component's view level\n        applyProjection(tView, lView, tProjectionNode);\n    }\n}\n\n/**\n *\n * Update an interpolated property on an element with a lone bound value\n *\n * Used when the value passed to a property has 1 interpolated value in it, an no additional text\n * surrounds that interpolated value:\n *\n * ```html\n * <div title=\"{{v0}}\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate('title', v0);\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate(propName, v0, sanitizer) {\n    ɵɵpropertyInterpolate1(propName, '', v0, '', sanitizer);\n    return ɵɵpropertyInterpolate;\n}\n/**\n *\n * Update an interpolated property on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate1('title', 'prefix', v0, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate1(propName, prefix, v0, suffix, sanitizer) {\n    const lView = getLView();\n    const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n        ngDevMode &&\n            storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 1, prefix, suffix);\n    }\n    return ɵɵpropertyInterpolate1;\n}\n/**\n *\n * Update an interpolated property on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate2(propName, prefix, v0, i0, v1, suffix, sanitizer) {\n    const lView = getLView();\n    const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n        ngDevMode &&\n            storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 2, prefix, i0, suffix);\n    }\n    return ɵɵpropertyInterpolate2;\n}\n/**\n *\n * Update an interpolated property on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate3(\n * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate3(propName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer) {\n    const lView = getLView();\n    const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n        ngDevMode &&\n            storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 3, prefix, i0, i1, suffix);\n    }\n    return ɵɵpropertyInterpolate3;\n}\n/**\n *\n * Update an interpolated property on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate4(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate4(propName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer) {\n    const lView = getLView();\n    const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n        ngDevMode &&\n            storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);\n    }\n    return ɵɵpropertyInterpolate4;\n}\n/**\n *\n * Update an interpolated property on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate5(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate5(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer) {\n    const lView = getLView();\n    const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n        ngDevMode &&\n            storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);\n    }\n    return ɵɵpropertyInterpolate5;\n}\n/**\n *\n * Update an interpolated property on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate6(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate6(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer) {\n    const lView = getLView();\n    const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n        ngDevMode &&\n            storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);\n    }\n    return ɵɵpropertyInterpolate6;\n}\n/**\n *\n * Update an interpolated property on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate7(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate7(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer) {\n    const lView = getLView();\n    const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n        ngDevMode &&\n            storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);\n    }\n    return ɵɵpropertyInterpolate7;\n}\n/**\n *\n * Update an interpolated property on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate8(\n *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate8(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer) {\n    const lView = getLView();\n    const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n        ngDevMode &&\n            storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);\n    }\n    return ɵɵpropertyInterpolate8;\n}\n/**\n * Update an interpolated property on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolateV(\n *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update.\n * @param values The collection of values and the strings in between those values, beginning with a\n * string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolateV(propName, values, sanitizer) {\n    const lView = getLView();\n    const interpolatedValue = interpolationV(lView, values);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n        if (ngDevMode) {\n            const interpolationInBetween = [values[0]]; // prefix\n            for (let i = 2; i < values.length; i += 2) {\n                interpolationInBetween.push(values[i]);\n            }\n            storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - interpolationInBetween.length + 1, ...interpolationInBetween);\n        }\n    }\n    return ɵɵpropertyInterpolateV;\n}\n\n/** Store a value in the `data` at a given `index`. */\nfunction store(tView, lView, index, value) {\n    // We don't store any static data for local variables, so the first time\n    // we see the template, we should store as null to avoid a sparse array\n    if (index >= tView.data.length) {\n        tView.data[index] = null;\n        tView.blueprint[index] = null;\n    }\n    lView[index] = value;\n}\n/**\n * Retrieves a local reference from the current contextViewData.\n *\n * If the reference to retrieve is in a parent view, this instruction is used in conjunction\n * with a nextContext() call, which walks up the tree and updates the contextViewData instance.\n *\n * @param index The index of the local ref in contextViewData.\n *\n * @codeGenApi\n */\nfunction ɵɵreference(index) {\n    const contextLView = getContextLView();\n    return load(contextLView, HEADER_OFFSET + index);\n}\n\n/**\n *\n * Update an interpolated style on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div style=\"key: {{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate1('key: ', v0, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate1(prefix, v0, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n    ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate2('key: ', v0, '; key1: ', v1, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate2(prefix, v0, i0, v1, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n    ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key2: {{v1}}; key2: {{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate3(\n *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n    ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate4(\n *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n    ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate5(\n *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n    ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}};\n *             key5: {{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate6(\n *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *    'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n    ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};\n *             key6: {{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate7(\n *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *    '; key6: ', v6, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n    ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};\n *             key6: {{v6}}; key7: {{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate8(\n *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *    '; key6: ', v6, '; key7: ', v7, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n    ɵɵstyleMap(interpolatedValue);\n}\n/**\n * Update an interpolated style on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  class=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};\n *         key6: {{v6}}; key7: {{v7}}; key8: {{v8}}; key9: {{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolateV(\n *    ['key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *     '; key6: ', v6, '; key7: ', v7, '; key8: ', v8, '; key9: ', v9, 'suffix']);\n * ```\n *.\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '; key2: ', value1, '; key2: ', value2, ..., value99, 'suffix']`)\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolateV(values) {\n    const lView = getLView();\n    const interpolatedValue = interpolationV(lView, values);\n    ɵɵstyleMap(interpolatedValue);\n}\n\n/**\n *\n * Update an interpolated style property on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate1(0, 'prefix', v0, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate1(prop, prefix, v0, suffix, valueSuffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n    return ɵɵstylePropInterpolate1;\n}\n/**\n *\n * Update an interpolated style property on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate2(0, 'prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate2(prop, prefix, v0, i0, v1, suffix, valueSuffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n    return ɵɵstylePropInterpolate2;\n}\n/**\n *\n * Update an interpolated style property on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate3(0, 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate3(prop, prefix, v0, i0, v1, i1, v2, suffix, valueSuffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n    return ɵɵstylePropInterpolate3;\n}\n/**\n *\n * Update an interpolated style property on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate4(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate4(prop, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, valueSuffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n    return ɵɵstylePropInterpolate4;\n}\n/**\n *\n * Update an interpolated style property on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate5(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate5(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, valueSuffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n    return ɵɵstylePropInterpolate5;\n}\n/**\n *\n * Update an interpolated style property on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate6(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate6(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, valueSuffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n    return ɵɵstylePropInterpolate6;\n}\n/**\n *\n * Update an interpolated style property on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate7(\n *    0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate7(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, valueSuffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n    return ɵɵstylePropInterpolate7;\n}\n/**\n *\n * Update an interpolated style property on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate8(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6,\n * '-', v7, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate8(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, valueSuffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n    return ɵɵstylePropInterpolate8;\n}\n/**\n * Update an interpolated style property on an element with 9 or more bound values surrounded by\n * text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\">\n * </div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolateV(\n *  0, ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`..\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolateV(prop, values, valueSuffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolationV(lView, values);\n    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n    return ɵɵstylePropInterpolateV;\n}\n\n/**\n * Create static text node\n *\n * @param index Index of the node in the data array\n * @param value Static string value to write.\n *\n * @codeGenApi\n */\nfunction ɵɵtext(index, value = '') {\n    const lView = getLView();\n    const tView = getTView();\n    const adjustedIndex = index + HEADER_OFFSET;\n    ngDevMode &&\n        assertEqual(getBindingIndex(), tView.bindingStartIndex, 'text nodes should be created before any bindings');\n    ngDevMode && assertIndexInRange(lView, adjustedIndex);\n    const tNode = tView.firstCreatePass ?\n        getOrCreateTNode(tView, adjustedIndex, 1 /* TNodeType.Text */, value, null) :\n        tView.data[adjustedIndex];\n    const textNative = _locateOrCreateTextNode(tView, lView, tNode, value, index);\n    lView[adjustedIndex] = textNative;\n    if (wasLastNodeCreated()) {\n        appendChild(tView, lView, textNative, tNode);\n    }\n    // Text nodes are self closing.\n    setCurrentTNode(tNode, false);\n}\nlet _locateOrCreateTextNode = (tView, lView, tNode, value, index) => {\n    lastNodeWasCreated(true);\n    return createTextNode(lView[RENDERER], value);\n};\n/**\n * Enables hydration code path (to lookup existing elements in DOM)\n * in addition to the regular creation mode of text nodes.\n */\nfunction locateOrCreateTextNodeImpl(tView, lView, tNode, value, index) {\n    const hydrationInfo = lView[HYDRATION];\n    const isNodeCreationMode = !hydrationInfo || isInSkipHydrationBlock$1() || isDisconnectedNode$1(hydrationInfo, index);\n    lastNodeWasCreated(isNodeCreationMode);\n    // Regular creation mode.\n    if (isNodeCreationMode) {\n        return createTextNode(lView[RENDERER], value);\n    }\n    // Hydration mode, looking up an existing element in DOM.\n    const textNative = locateNextRNode(hydrationInfo, tView, lView, tNode);\n    ngDevMode && validateMatchingNode(textNative, Node.TEXT_NODE, null, lView, tNode);\n    ngDevMode && markRNodeAsClaimedByHydration(textNative);\n    return textNative;\n}\nfunction enableLocateOrCreateTextNodeImpl() {\n    _locateOrCreateTextNode = locateOrCreateTextNodeImpl;\n}\n\n/**\n *\n * Update text content with a lone bound value\n *\n * Used when a text node has 1 interpolated value in it, an no additional text\n * surrounds that interpolated value:\n *\n * ```html\n * <div>{{v0}}</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate(v0);\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate(v0) {\n    ɵɵtextInterpolate1('', v0, '');\n    return ɵɵtextInterpolate;\n}\n/**\n *\n * Update text content with single bound value surrounded by other text.\n *\n * Used when a text node has 1 interpolated value in it:\n *\n * ```html\n * <div>prefix{{v0}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate1('prefix', v0, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate1(prefix, v0, suffix) {\n    const lView = getLView();\n    const interpolated = interpolation1(lView, prefix, v0, suffix);\n    if (interpolated !== NO_CHANGE) {\n        textBindingInternal(lView, getSelectedIndex(), interpolated);\n    }\n    return ɵɵtextInterpolate1;\n}\n/**\n *\n * Update text content with 2 bound values surrounded by other text.\n *\n * Used when a text node has 2 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate2('prefix', v0, '-', v1, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate2(prefix, v0, i0, v1, suffix) {\n    const lView = getLView();\n    const interpolated = interpolation2(lView, prefix, v0, i0, v1, suffix);\n    if (interpolated !== NO_CHANGE) {\n        textBindingInternal(lView, getSelectedIndex(), interpolated);\n    }\n    return ɵɵtextInterpolate2;\n}\n/**\n *\n * Update text content with 3 bound values surrounded by other text.\n *\n * Used when a text node has 3 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate3(\n * 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {\n    const lView = getLView();\n    const interpolated = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n    if (interpolated !== NO_CHANGE) {\n        textBindingInternal(lView, getSelectedIndex(), interpolated);\n    }\n    return ɵɵtextInterpolate3;\n}\n/**\n *\n * Update text content with 4 bound values surrounded by other text.\n *\n * Used when a text node has 4 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate4(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see ɵɵtextInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n    const lView = getLView();\n    const interpolated = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n    if (interpolated !== NO_CHANGE) {\n        textBindingInternal(lView, getSelectedIndex(), interpolated);\n    }\n    return ɵɵtextInterpolate4;\n}\n/**\n *\n * Update text content with 5 bound values surrounded by other text.\n *\n * Used when a text node has 5 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate5(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n    const lView = getLView();\n    const interpolated = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n    if (interpolated !== NO_CHANGE) {\n        textBindingInternal(lView, getSelectedIndex(), interpolated);\n    }\n    return ɵɵtextInterpolate5;\n}\n/**\n *\n * Update text content with 6 bound values surrounded by other text.\n *\n * Used when a text node has 6 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate6(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change. @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n    const lView = getLView();\n    const interpolated = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n    if (interpolated !== NO_CHANGE) {\n        textBindingInternal(lView, getSelectedIndex(), interpolated);\n    }\n    return ɵɵtextInterpolate6;\n}\n/**\n *\n * Update text content with 7 bound values surrounded by other text.\n *\n * Used when a text node has 7 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate7(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n    const lView = getLView();\n    const interpolated = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n    if (interpolated !== NO_CHANGE) {\n        textBindingInternal(lView, getSelectedIndex(), interpolated);\n    }\n    return ɵɵtextInterpolate7;\n}\n/**\n *\n * Update text content with 8 bound values surrounded by other text.\n *\n * Used when a text node has 8 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate8(\n *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n    const lView = getLView();\n    const interpolated = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n    if (interpolated !== NO_CHANGE) {\n        textBindingInternal(lView, getSelectedIndex(), interpolated);\n    }\n    return ɵɵtextInterpolate8;\n}\n/**\n * Update text content with 9 or more bound values other surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolateV(\n *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *.\n * @param values The collection of values and the strings in between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n *\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵtextInterpolateV(values) {\n    const lView = getLView();\n    const interpolated = interpolationV(lView, values);\n    if (interpolated !== NO_CHANGE) {\n        textBindingInternal(lView, getSelectedIndex(), interpolated);\n    }\n    return ɵɵtextInterpolateV;\n}\n\n/*\n * This file re-exports all symbols contained in this directory.\n *\n * Why is this file not `index.ts`?\n *\n * There seems to be an inconsistent path resolution of an `index.ts` file\n * when only the parent directory is referenced. This could be due to the\n * node module resolution configuration differing from rollup and/or typescript.\n *\n * With commit\n * https://github.com/angular/angular/commit/d5e3f2c64bd13ce83e7c70788b7fc514ca4a9918\n * the `instructions.ts` file was moved to `instructions/instructions.ts` and an\n * `index.ts` file was used to re-export everything. Having had file names that were\n * importing from `instructions' directly (not the from the sub file or the `index.ts`\n * file) caused strange CI issues. `index.ts` had to be renamed to `all.ts` for this\n * to work.\n *\n * Jira Issue = FW-1184\n */\n\n/**\n * Resolves the providers which are defined in the DirectiveDef.\n *\n * When inserting the tokens and the factories in their respective arrays, we can assume that\n * this method is called first for the component (if any), and then for other directives on the same\n * node.\n * As a consequence,the providers are always processed in that order:\n * 1) The view providers of the component\n * 2) The providers of the component\n * 3) The providers of the other directives\n * This matches the structure of the injectables arrays of a view (for each node).\n * So the tokens and the factories can be pushed at the end of the arrays, except\n * in one case for multi providers.\n *\n * @param def the directive definition\n * @param providers: Array of `providers`.\n * @param viewProviders: Array of `viewProviders`.\n */\nfunction providersResolver(def, providers, viewProviders) {\n    const tView = getTView();\n    if (tView.firstCreatePass) {\n        const isComponent = isComponentDef(def);\n        // The list of view providers is processed first, and the flags are updated\n        resolveProvider(viewProviders, tView.data, tView.blueprint, isComponent, true);\n        // Then, the list of providers is processed, and the flags are updated\n        resolveProvider(providers, tView.data, tView.blueprint, isComponent, false);\n    }\n}\n/**\n * Resolves a provider and publishes it to the DI system.\n */\nfunction resolveProvider(provider, tInjectables, lInjectablesBlueprint, isComponent, isViewProvider) {\n    provider = resolveForwardRef(provider);\n    if (Array.isArray(provider)) {\n        // Recursively call `resolveProvider`\n        // Recursion is OK in this case because this code will not be in hot-path once we implement\n        // cloning of the initial state.\n        for (let i = 0; i < provider.length; i++) {\n            resolveProvider(provider[i], tInjectables, lInjectablesBlueprint, isComponent, isViewProvider);\n        }\n    }\n    else {\n        const tView = getTView();\n        const lView = getLView();\n        const tNode = getCurrentTNode();\n        let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);\n        const providerFactory = providerToFactory(provider);\n        if (ngDevMode) {\n            const injector = new NodeInjector(tNode, lView);\n            runInInjectorProfilerContext(injector, token, () => {\n                emitProviderConfiguredEvent(provider, isViewProvider);\n            });\n        }\n        const beginIndex = tNode.providerIndexes & 1048575 /* TNodeProviderIndexes.ProvidersStartIndexMask */;\n        const endIndex = tNode.directiveStart;\n        const cptViewProvidersCount = tNode.providerIndexes >> 20 /* TNodeProviderIndexes.CptViewProvidersCountShift */;\n        if (isTypeProvider(provider) || !provider.multi) {\n            // Single provider case: the factory is created and pushed immediately\n            const factory = new NodeInjectorFactory(providerFactory, isViewProvider, ɵɵdirectiveInject);\n            const existingFactoryIndex = indexOf(token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount, endIndex);\n            if (existingFactoryIndex === -1) {\n                diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);\n                registerDestroyHooksIfSupported(tView, provider, tInjectables.length);\n                tInjectables.push(token);\n                tNode.directiveStart++;\n                tNode.directiveEnd++;\n                if (isViewProvider) {\n                    tNode.providerIndexes += 1048576 /* TNodeProviderIndexes.CptViewProvidersCountShifter */;\n                }\n                lInjectablesBlueprint.push(factory);\n                lView.push(factory);\n            }\n            else {\n                lInjectablesBlueprint[existingFactoryIndex] = factory;\n                lView[existingFactoryIndex] = factory;\n            }\n        }\n        else {\n            // Multi provider case:\n            // We create a multi factory which is going to aggregate all the values.\n            // Since the output of such a factory depends on content or view injection,\n            // we create two of them, which are linked together.\n            //\n            // The first one (for view providers) is always in the first block of the injectables array,\n            // and the second one (for providers) is always in the second block.\n            // This is important because view providers have higher priority. When a multi token\n            // is being looked up, the view providers should be found first.\n            // Note that it is not possible to have a multi factory in the third block (directive block).\n            //\n            // The algorithm to process multi providers is as follows:\n            // 1) If the multi provider comes from the `viewProviders` of the component:\n            //   a) If the special view providers factory doesn't exist, it is created and pushed.\n            //   b) Else, the multi provider is added to the existing multi factory.\n            // 2) If the multi provider comes from the `providers` of the component or of another\n            // directive:\n            //   a) If the multi factory doesn't exist, it is created and provider pushed into it.\n            //      It is also linked to the multi factory for view providers, if it exists.\n            //   b) Else, the multi provider is added to the existing multi factory.\n            const existingProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);\n            const existingViewProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);\n            const doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 &&\n                lInjectablesBlueprint[existingProvidersFactoryIndex];\n            const doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 &&\n                lInjectablesBlueprint[existingViewProvidersFactoryIndex];\n            if (isViewProvider && !doesViewProvidersFactoryExist ||\n                !isViewProvider && !doesProvidersFactoryExist) {\n                // Cases 1.a and 2.a\n                diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);\n                const factory = multiFactory(isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver, lInjectablesBlueprint.length, isViewProvider, isComponent, providerFactory);\n                if (!isViewProvider && doesViewProvidersFactoryExist) {\n                    lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = factory;\n                }\n                registerDestroyHooksIfSupported(tView, provider, tInjectables.length, 0);\n                tInjectables.push(token);\n                tNode.directiveStart++;\n                tNode.directiveEnd++;\n                if (isViewProvider) {\n                    tNode.providerIndexes += 1048576 /* TNodeProviderIndexes.CptViewProvidersCountShifter */;\n                }\n                lInjectablesBlueprint.push(factory);\n                lView.push(factory);\n            }\n            else {\n                // Cases 1.b and 2.b\n                const indexInFactory = multiFactoryAdd(lInjectablesBlueprint[isViewProvider ? existingViewProvidersFactoryIndex :\n                    existingProvidersFactoryIndex], providerFactory, !isViewProvider && isComponent);\n                registerDestroyHooksIfSupported(tView, provider, existingProvidersFactoryIndex > -1 ? existingProvidersFactoryIndex :\n                    existingViewProvidersFactoryIndex, indexInFactory);\n            }\n            if (!isViewProvider && isComponent && doesViewProvidersFactoryExist) {\n                lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders++;\n            }\n        }\n    }\n}\n/**\n * Registers the `ngOnDestroy` hook of a provider, if the provider supports destroy hooks.\n * @param tView `TView` in which to register the hook.\n * @param provider Provider whose hook should be registered.\n * @param contextIndex Index under which to find the context for the hook when it's being invoked.\n * @param indexInFactory Only required for `multi` providers. Index of the provider in the multi\n * provider factory.\n */\nfunction registerDestroyHooksIfSupported(tView, provider, contextIndex, indexInFactory) {\n    const providerIsTypeProvider = isTypeProvider(provider);\n    const providerIsClassProvider = isClassProvider(provider);\n    if (providerIsTypeProvider || providerIsClassProvider) {\n        // Resolve forward references as `useClass` can hold a forward reference.\n        const classToken = providerIsClassProvider ? resolveForwardRef(provider.useClass) : provider;\n        const prototype = classToken.prototype;\n        const ngOnDestroy = prototype.ngOnDestroy;\n        if (ngOnDestroy) {\n            const hooks = tView.destroyHooks || (tView.destroyHooks = []);\n            if (!providerIsTypeProvider && provider.multi) {\n                ngDevMode &&\n                    assertDefined(indexInFactory, 'indexInFactory when registering multi factory destroy hook');\n                const existingCallbacksIndex = hooks.indexOf(contextIndex);\n                if (existingCallbacksIndex === -1) {\n                    hooks.push(contextIndex, [indexInFactory, ngOnDestroy]);\n                }\n                else {\n                    hooks[existingCallbacksIndex + 1].push(indexInFactory, ngOnDestroy);\n                }\n            }\n            else {\n                hooks.push(contextIndex, ngOnDestroy);\n            }\n        }\n    }\n}\n/**\n * Add a factory in a multi factory.\n * @returns Index at which the factory was inserted.\n */\nfunction multiFactoryAdd(multiFactory, factory, isComponentProvider) {\n    if (isComponentProvider) {\n        multiFactory.componentProviders++;\n    }\n    return multiFactory.multi.push(factory) - 1;\n}\n/**\n * Returns the index of item in the array, but only in the begin to end range.\n */\nfunction indexOf(item, arr, begin, end) {\n    for (let i = begin; i < end; i++) {\n        if (arr[i] === item)\n            return i;\n    }\n    return -1;\n}\n/**\n * Use this with `multi` `providers`.\n */\nfunction multiProvidersFactoryResolver(_, tData, lData, tNode) {\n    return multiResolve(this.multi, []);\n}\n/**\n * Use this with `multi` `viewProviders`.\n *\n * This factory knows how to concatenate itself with the existing `multi` `providers`.\n */\nfunction multiViewProvidersFactoryResolver(_, tData, lView, tNode) {\n    const factories = this.multi;\n    let result;\n    if (this.providerFactory) {\n        const componentCount = this.providerFactory.componentProviders;\n        const multiProviders = getNodeInjectable(lView, lView[TVIEW], this.providerFactory.index, tNode);\n        // Copy the section of the array which contains `multi` `providers` from the component\n        result = multiProviders.slice(0, componentCount);\n        // Insert the `viewProvider` instances.\n        multiResolve(factories, result);\n        // Copy the section of the array which contains `multi` `providers` from other directives\n        for (let i = componentCount; i < multiProviders.length; i++) {\n            result.push(multiProviders[i]);\n        }\n    }\n    else {\n        result = [];\n        // Insert the `viewProvider` instances.\n        multiResolve(factories, result);\n    }\n    return result;\n}\n/**\n * Maps an array of factories into an array of values.\n */\nfunction multiResolve(factories, result) {\n    for (let i = 0; i < factories.length; i++) {\n        const factory = factories[i];\n        result.push(factory());\n    }\n    return result;\n}\n/**\n * Creates a multi factory.\n */\nfunction multiFactory(factoryFn, index, isViewProvider, isComponent, f) {\n    const factory = new NodeInjectorFactory(factoryFn, isViewProvider, ɵɵdirectiveInject);\n    factory.multi = [];\n    factory.index = index;\n    factory.componentProviders = 0;\n    multiFactoryAdd(factory, f, isComponent && !isViewProvider);\n    return factory;\n}\n\n/**\n * This feature resolves the providers of a directive (or component),\n * and publish them into the DI system, making it visible to others for injection.\n *\n * For example:\n * ```ts\n * class ComponentWithProviders {\n *   constructor(private greeter: GreeterDE) {}\n *\n *   static ɵcmp = defineComponent({\n *     type: ComponentWithProviders,\n *     selectors: [['component-with-providers']],\n *    factory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),\n *    decls: 1,\n *    vars: 1,\n *    template: function(fs: RenderFlags, ctx: ComponentWithProviders) {\n *      if (fs & RenderFlags.Create) {\n *        ɵɵtext(0);\n *      }\n *      if (fs & RenderFlags.Update) {\n *        ɵɵtextInterpolate(ctx.greeter.greet());\n *      }\n *    },\n *    features: [ɵɵProvidersFeature([GreeterDE])]\n *  });\n * }\n * ```\n *\n * @param definition\n *\n * @codeGenApi\n */\nfunction ɵɵProvidersFeature(providers, viewProviders = []) {\n    return (definition) => {\n        definition.providersResolver =\n            (def, processProvidersFn) => {\n                return providersResolver(def, //\n                processProvidersFn ? processProvidersFn(providers) : providers, //\n                viewProviders);\n            };\n    };\n}\n\n/**\n * Represents an instance of an `NgModule` created by an `NgModuleFactory`.\n * Provides access to the `NgModule` instance and related objects.\n *\n * @publicApi\n */\nclass NgModuleRef$1 {\n}\n/**\n * @publicApi\n *\n * @deprecated\n * This class was mostly used as a part of ViewEngine-based JIT API and is no longer needed in Ivy\n * JIT mode. See [JIT API changes due to ViewEngine deprecation](guide/deprecations#jit-api-changes)\n * for additional context. Angular provides APIs that accept NgModule classes directly (such as\n * [PlatformRef.bootstrapModule](api/core/PlatformRef#bootstrapModule) and\n * [createNgModule](api/core/createNgModule)), consider switching to those APIs instead of\n * using factory-based ones.\n */\nclass NgModuleFactory$1 {\n}\n\n/**\n * Returns a new NgModuleRef instance based on the NgModule class and parent injector provided.\n *\n * @param ngModule NgModule class.\n * @param parentInjector Optional injector instance to use as a parent for the module injector. If\n *     not provided, `NullInjector` will be used instead.\n * @returns NgModuleRef that represents an NgModule instance.\n *\n * @publicApi\n */\nfunction createNgModule(ngModule, parentInjector) {\n    return new NgModuleRef(ngModule, parentInjector ?? null, []);\n}\n/**\n * The `createNgModule` function alias for backwards-compatibility.\n * Please avoid using it directly and use `createNgModule` instead.\n *\n * @deprecated Use `createNgModule` instead.\n */\nconst createNgModuleRef = createNgModule;\nclass NgModuleRef extends NgModuleRef$1 {\n    constructor(ngModuleType, _parent, additionalProviders) {\n        super();\n        this._parent = _parent;\n        // tslint:disable-next-line:require-internal-with-underscore\n        this._bootstrapComponents = [];\n        this.destroyCbs = [];\n        // When bootstrapping a module we have a dependency graph that looks like this:\n        // ApplicationRef -> ComponentFactoryResolver -> NgModuleRef. The problem is that if the\n        // module being resolved tries to inject the ComponentFactoryResolver, it'll create a\n        // circular dependency which will result in a runtime error, because the injector doesn't\n        // exist yet. We work around the issue by creating the ComponentFactoryResolver ourselves\n        // and providing it, rather than letting the injector resolve it.\n        this.componentFactoryResolver = new ComponentFactoryResolver(this);\n        const ngModuleDef = getNgModuleDef(ngModuleType);\n        ngDevMode &&\n            assertDefined(ngModuleDef, `NgModule '${stringify(ngModuleType)}' is not a subtype of 'NgModuleType'.`);\n        this._bootstrapComponents = maybeUnwrapFn(ngModuleDef.bootstrap);\n        this._r3Injector = createInjectorWithoutInjectorInstances(ngModuleType, _parent, [\n            { provide: NgModuleRef$1, useValue: this }, {\n                provide: ComponentFactoryResolver$1,\n                useValue: this.componentFactoryResolver\n            },\n            ...additionalProviders\n        ], stringify(ngModuleType), new Set(['environment']));\n        // We need to resolve the injector types separately from the injector creation, because\n        // the module might be trying to use this ref in its constructor for DI which will cause a\n        // circular error that will eventually error out, because the injector isn't created yet.\n        this._r3Injector.resolveInjectorInitializers();\n        this.instance = this._r3Injector.get(ngModuleType);\n    }\n    get injector() {\n        return this._r3Injector;\n    }\n    destroy() {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n        const injector = this._r3Injector;\n        !injector.destroyed && injector.destroy();\n        this.destroyCbs.forEach(fn => fn());\n        this.destroyCbs = null;\n    }\n    onDestroy(callback) {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n        this.destroyCbs.push(callback);\n    }\n}\nclass NgModuleFactory extends NgModuleFactory$1 {\n    constructor(moduleType) {\n        super();\n        this.moduleType = moduleType;\n    }\n    create(parentInjector) {\n        return new NgModuleRef(this.moduleType, parentInjector, []);\n    }\n}\nfunction createNgModuleRefWithProviders(moduleType, parentInjector, additionalProviders) {\n    return new NgModuleRef(moduleType, parentInjector, additionalProviders);\n}\nclass EnvironmentNgModuleRefAdapter extends NgModuleRef$1 {\n    constructor(config) {\n        super();\n        this.componentFactoryResolver = new ComponentFactoryResolver(this);\n        this.instance = null;\n        const injector = new R3Injector([\n            ...config.providers,\n            { provide: NgModuleRef$1, useValue: this },\n            { provide: ComponentFactoryResolver$1, useValue: this.componentFactoryResolver },\n        ], config.parent || getNullInjector(), config.debugName, new Set(['environment']));\n        this.injector = injector;\n        if (config.runEnvironmentInitializers) {\n            injector.resolveInjectorInitializers();\n        }\n    }\n    destroy() {\n        this.injector.destroy();\n    }\n    onDestroy(callback) {\n        this.injector.onDestroy(callback);\n    }\n}\n/**\n * Create a new environment injector.\n *\n * Learn more about environment injectors in\n * [this guide](guide/standalone-components#environment-injectors).\n *\n * @param providers An array of providers.\n * @param parent A parent environment injector.\n * @param debugName An optional name for this injector instance, which will be used in error\n *     messages.\n *\n * @publicApi\n */\nfunction createEnvironmentInjector(providers, parent, debugName = null) {\n    const adapter = new EnvironmentNgModuleRefAdapter({ providers, parent, debugName, runEnvironmentInitializers: true });\n    return adapter.injector;\n}\n\n/**\n * A service used by the framework to create instances of standalone injectors. Those injectors are\n * created on demand in case of dynamic component instantiation and contain ambient providers\n * collected from the imports graph rooted at a given standalone component.\n */\nclass StandaloneService {\n    constructor(_injector) {\n        this._injector = _injector;\n        this.cachedInjectors = new Map();\n    }\n    getOrCreateStandaloneInjector(componentDef) {\n        if (!componentDef.standalone) {\n            return null;\n        }\n        if (!this.cachedInjectors.has(componentDef)) {\n            const providers = internalImportProvidersFrom(false, componentDef.type);\n            const standaloneInjector = providers.length > 0 ?\n                createEnvironmentInjector([providers], this._injector, `Standalone[${componentDef.type.name}]`) :\n                null;\n            this.cachedInjectors.set(componentDef, standaloneInjector);\n        }\n        return this.cachedInjectors.get(componentDef);\n    }\n    ngOnDestroy() {\n        try {\n            for (const injector of this.cachedInjectors.values()) {\n                if (injector !== null) {\n                    injector.destroy();\n                }\n            }\n        }\n        finally {\n            this.cachedInjectors.clear();\n        }\n    }\n    /** @nocollapse */\n    static { this.ɵprov = ɵɵdefineInjectable({\n        token: StandaloneService,\n        providedIn: 'environment',\n        factory: () => new StandaloneService(ɵɵinject(EnvironmentInjector)),\n    }); }\n}\n/**\n * A feature that acts as a setup code for the {@link StandaloneService}.\n *\n * The most important responsibility of this feature is to expose the \"getStandaloneInjector\"\n * function (an entry points to a standalone injector creation) on a component definition object. We\n * go through the features infrastructure to make sure that the standalone injector creation logic\n * is tree-shakable and not included in applications that don't use standalone components.\n *\n * @codeGenApi\n */\nfunction ɵɵStandaloneFeature(definition) {\n    performanceMarkFeature('NgStandalone');\n    definition.getStandaloneInjector = (parentInjector) => {\n        return parentInjector.get(StandaloneService).getOrCreateStandaloneInjector(definition);\n    };\n}\n\n/**\n * Generated next to NgModules to monkey-patch directive and pipe references onto a component's\n * definition, when generating a direct reference in the component file would otherwise create an\n * import cycle.\n *\n * See [this explanation](https://hackmd.io/Odw80D0pR6yfsOjg_7XCJg?view) for more details.\n *\n * @codeGenApi\n */\nfunction ɵɵsetComponentScope(type, directives, pipes) {\n    const def = type.ɵcmp;\n    def.directiveDefs = extractDefListOrFactory(directives, /* pipeDef */ false);\n    def.pipeDefs = extractDefListOrFactory(pipes, /* pipeDef */ true);\n}\n/**\n * Adds the module metadata that is necessary to compute the module's transitive scope to an\n * existing module definition.\n *\n * Scope metadata of modules is not used in production builds, so calls to this function can be\n * marked pure to tree-shake it from the bundle, allowing for all referenced declarations\n * to become eligible for tree-shaking as well.\n *\n * @codeGenApi\n */\nfunction ɵɵsetNgModuleScope(type, scope) {\n    return noSideEffects(() => {\n        const ngModuleDef = getNgModuleDef(type, true);\n        ngModuleDef.declarations = convertToTypeArray(scope.declarations || EMPTY_ARRAY);\n        ngModuleDef.imports = convertToTypeArray(scope.imports || EMPTY_ARRAY);\n        ngModuleDef.exports = convertToTypeArray(scope.exports || EMPTY_ARRAY);\n        if (scope.bootstrap) {\n            // This only happens in local compilation mode.\n            ngModuleDef.bootstrap = convertToTypeArray(scope.bootstrap);\n        }\n        depsTracker.registerNgModule(type, scope);\n    });\n}\nfunction convertToTypeArray(values) {\n    if (typeof values === 'function') {\n        return values;\n    }\n    const flattenValues = flatten(values);\n    if (flattenValues.some(isForwardRef)) {\n        return () => flattenValues.map(resolveForwardRef).map(maybeUnwrapModuleWithProviders);\n    }\n    else {\n        return flattenValues.map(maybeUnwrapModuleWithProviders);\n    }\n}\nfunction maybeUnwrapModuleWithProviders(value) {\n    return isModuleWithProviders(value) ? value.ngModule : value;\n}\n\n/**\n * Retrieves the component instance associated with a given DOM element.\n *\n * @usageNotes\n * Given the following DOM structure:\n *\n * ```html\n * <app-root>\n *   <div>\n *     <child-comp></child-comp>\n *   </div>\n * </app-root>\n * ```\n *\n * Calling `getComponent` on `<child-comp>` will return the instance of `ChildComponent`\n * associated with this DOM element.\n *\n * Calling the function on `<app-root>` will return the `MyApp` instance.\n *\n *\n * @param element DOM element from which the component should be retrieved.\n * @returns Component instance associated with the element or `null` if there\n *    is no component associated with it.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getComponent(element) {\n    ngDevMode && assertDomElement(element);\n    const context = getLContext(element);\n    if (context === null)\n        return null;\n    if (context.component === undefined) {\n        const lView = context.lView;\n        if (lView === null) {\n            return null;\n        }\n        context.component = getComponentAtNodeIndex(context.nodeIndex, lView);\n    }\n    return context.component;\n}\n/**\n * If inside an embedded view (e.g. `*ngIf` or `*ngFor`), retrieves the context of the embedded\n * view that the element is part of. Otherwise retrieves the instance of the component whose view\n * owns the element (in this case, the result is the same as calling `getOwningComponent`).\n *\n * @param element Element for which to get the surrounding component instance.\n * @returns Instance of the component that is around the element or null if the element isn't\n *    inside any component.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getContext(element) {\n    assertDomElement(element);\n    const context = getLContext(element);\n    const lView = context ? context.lView : null;\n    return lView === null ? null : lView[CONTEXT];\n}\n/**\n * Retrieves the component instance whose view contains the DOM element.\n *\n * For example, if `<child-comp>` is used in the template of `<app-comp>`\n * (i.e. a `ViewChild` of `<app-comp>`), calling `getOwningComponent` on `<child-comp>`\n * would return `<app-comp>`.\n *\n * @param elementOrDir DOM element, component or directive instance\n *    for which to retrieve the root components.\n * @returns Component instance whose view owns the DOM element or null if the element is not\n *    part of a component view.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getOwningComponent(elementOrDir) {\n    const context = getLContext(elementOrDir);\n    let lView = context ? context.lView : null;\n    if (lView === null)\n        return null;\n    let parent;\n    while (lView[TVIEW].type === 2 /* TViewType.Embedded */ && (parent = getLViewParent(lView))) {\n        lView = parent;\n    }\n    return lView[FLAGS] & 512 /* LViewFlags.IsRoot */ ? null : lView[CONTEXT];\n}\n/**\n * Retrieves all root components associated with a DOM element, directive or component instance.\n * Root components are those which have been bootstrapped by Angular.\n *\n * @param elementOrDir DOM element, component or directive instance\n *    for which to retrieve the root components.\n * @returns Root components associated with the target object.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getRootComponents(elementOrDir) {\n    const lView = readPatchedLView(elementOrDir);\n    return lView !== null ? [getRootContext(lView)] : [];\n}\n/**\n * Retrieves an `Injector` associated with an element, component or directive instance.\n *\n * @param elementOrDir DOM element, component or directive instance for which to\n *    retrieve the injector.\n * @returns Injector associated with the element, component or directive instance.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getInjector(elementOrDir) {\n    const context = getLContext(elementOrDir);\n    const lView = context ? context.lView : null;\n    if (lView === null)\n        return Injector.NULL;\n    const tNode = lView[TVIEW].data[context.nodeIndex];\n    return new NodeInjector(tNode, lView);\n}\n/**\n * Retrieve a set of injection tokens at a given DOM node.\n *\n * @param element Element for which the injection tokens should be retrieved.\n */\nfunction getInjectionTokens(element) {\n    const context = getLContext(element);\n    const lView = context ? context.lView : null;\n    if (lView === null)\n        return [];\n    const tView = lView[TVIEW];\n    const tNode = tView.data[context.nodeIndex];\n    const providerTokens = [];\n    const startIndex = tNode.providerIndexes & 1048575 /* TNodeProviderIndexes.ProvidersStartIndexMask */;\n    const endIndex = tNode.directiveEnd;\n    for (let i = startIndex; i < endIndex; i++) {\n        let value = tView.data[i];\n        if (isDirectiveDefHack(value)) {\n            // The fact that we sometimes store Type and sometimes DirectiveDef in this location is a\n            // design flaw.  We should always store same type so that we can be monomorphic. The issue\n            // is that for Components/Directives we store the def instead the type. The correct behavior\n            // is that we should always be storing injectable type in this location.\n            value = value.type;\n        }\n        providerTokens.push(value);\n    }\n    return providerTokens;\n}\n/**\n * Retrieves directive instances associated with a given DOM node. Does not include\n * component instances.\n *\n * @usageNotes\n * Given the following DOM structure:\n *\n * ```html\n * <app-root>\n *   <button my-button></button>\n *   <my-comp></my-comp>\n * </app-root>\n * ```\n *\n * Calling `getDirectives` on `<button>` will return an array with an instance of the `MyButton`\n * directive that is associated with the DOM node.\n *\n * Calling `getDirectives` on `<my-comp>` will return an empty array.\n *\n * @param node DOM node for which to get the directives.\n * @returns Array of directives associated with the node.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getDirectives(node) {\n    // Skip text nodes because we can't have directives associated with them.\n    if (node instanceof Text) {\n        return [];\n    }\n    const context = getLContext(node);\n    const lView = context ? context.lView : null;\n    if (lView === null) {\n        return [];\n    }\n    const tView = lView[TVIEW];\n    const nodeIndex = context.nodeIndex;\n    if (!tView?.data[nodeIndex]) {\n        return [];\n    }\n    if (context.directives === undefined) {\n        context.directives = getDirectivesAtNodeIndex(nodeIndex, lView);\n    }\n    // The `directives` in this case are a named array called `LComponentView`. Clone the\n    // result so we don't expose an internal data structure in the user's console.\n    return context.directives === null ? [] : [...context.directives];\n}\n/**\n * Returns the debug (partial) metadata for a particular directive or component instance.\n * The function accepts an instance of a directive or component and returns the corresponding\n * metadata.\n *\n * @param directiveOrComponentInstance Instance of a directive or component\n * @returns metadata of the passed directive or component\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getDirectiveMetadata$1(directiveOrComponentInstance) {\n    const { constructor } = directiveOrComponentInstance;\n    if (!constructor) {\n        throw new Error('Unable to find the instance constructor');\n    }\n    // In case a component inherits from a directive, we may have component and directive metadata\n    // To ensure we don't get the metadata of the directive, we want to call `getComponentDef` first.\n    const componentDef = getComponentDef(constructor);\n    if (componentDef) {\n        return {\n            inputs: componentDef.inputs,\n            outputs: componentDef.outputs,\n            encapsulation: componentDef.encapsulation,\n            changeDetection: componentDef.onPush ? ChangeDetectionStrategy.OnPush :\n                ChangeDetectionStrategy.Default\n        };\n    }\n    const directiveDef = getDirectiveDef(constructor);\n    if (directiveDef) {\n        return { inputs: directiveDef.inputs, outputs: directiveDef.outputs };\n    }\n    return null;\n}\n/**\n * Retrieve map of local references.\n *\n * The references are retrieved as a map of local reference name to element or directive instance.\n *\n * @param target DOM element, component or directive instance for which to retrieve\n *    the local references.\n */\nfunction getLocalRefs(target) {\n    const context = getLContext(target);\n    if (context === null)\n        return {};\n    if (context.localRefs === undefined) {\n        const lView = context.lView;\n        if (lView === null) {\n            return {};\n        }\n        context.localRefs = discoverLocalRefs(lView, context.nodeIndex);\n    }\n    return context.localRefs || {};\n}\n/**\n * Retrieves the host element of a component or directive instance.\n * The host element is the DOM element that matched the selector of the directive.\n *\n * @param componentOrDirective Component or directive instance for which the host\n *     element should be retrieved.\n * @returns Host element of the target.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getHostElement(componentOrDirective) {\n    return getLContext(componentOrDirective).native;\n}\n/**\n * Retrieves the rendered text for a given component.\n *\n * This function retrieves the host element of a component and\n * and then returns the `textContent` for that element. This implies\n * that the text returned will include re-projected content of\n * the component as well.\n *\n * @param component The component to return the content text for.\n */\nfunction getRenderedText(component) {\n    const hostElement = getHostElement(component);\n    return hostElement.textContent || '';\n}\n/**\n * Retrieves a list of event listeners associated with a DOM element. The list does include host\n * listeners, but it does not include event listeners defined outside of the Angular context\n * (e.g. through `addEventListener`).\n *\n * @usageNotes\n * Given the following DOM structure:\n *\n * ```html\n * <app-root>\n *   <div (click)=\"doSomething()\"></div>\n * </app-root>\n * ```\n *\n * Calling `getListeners` on `<div>` will return an object that looks as follows:\n *\n * ```ts\n * {\n *   name: 'click',\n *   element: <div>,\n *   callback: () => doSomething(),\n *   useCapture: false\n * }\n * ```\n *\n * @param element Element for which the DOM listeners should be retrieved.\n * @returns Array of event listeners on the DOM element.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getListeners(element) {\n    ngDevMode && assertDomElement(element);\n    const lContext = getLContext(element);\n    const lView = lContext === null ? null : lContext.lView;\n    if (lView === null)\n        return [];\n    const tView = lView[TVIEW];\n    const lCleanup = lView[CLEANUP];\n    const tCleanup = tView.cleanup;\n    const listeners = [];\n    if (tCleanup && lCleanup) {\n        for (let i = 0; i < tCleanup.length;) {\n            const firstParam = tCleanup[i++];\n            const secondParam = tCleanup[i++];\n            if (typeof firstParam === 'string') {\n                const name = firstParam;\n                const listenerElement = unwrapRNode(lView[secondParam]);\n                const callback = lCleanup[tCleanup[i++]];\n                const useCaptureOrIndx = tCleanup[i++];\n                // if useCaptureOrIndx is boolean then report it as is.\n                // if useCaptureOrIndx is positive number then it in unsubscribe method\n                // if useCaptureOrIndx is negative number then it is a Subscription\n                const type = (typeof useCaptureOrIndx === 'boolean' || useCaptureOrIndx >= 0) ? 'dom' : 'output';\n                const useCapture = typeof useCaptureOrIndx === 'boolean' ? useCaptureOrIndx : false;\n                if (element == listenerElement) {\n                    listeners.push({ element, name, callback, useCapture, type });\n                }\n            }\n        }\n    }\n    listeners.sort(sortListeners);\n    return listeners;\n}\nfunction sortListeners(a, b) {\n    if (a.name == b.name)\n        return 0;\n    return a.name < b.name ? -1 : 1;\n}\n/**\n * This function should not exist because it is megamorphic and only mostly correct.\n *\n * See call site for more info.\n */\nfunction isDirectiveDefHack(obj) {\n    return obj.type !== undefined && obj.declaredInputs !== undefined &&\n        obj.findHostDirectiveDefs !== undefined;\n}\n/**\n * Retrieve the component `LView` from component/element.\n *\n * NOTE: `LView` is a private and should not be leaked outside.\n *       Don't export this method to `ng.*` on window.\n *\n * @param target DOM element or component instance for which to retrieve the LView.\n */\nfunction getComponentLView(target) {\n    const lContext = getLContext(target);\n    const nodeIndx = lContext.nodeIndex;\n    const lView = lContext.lView;\n    ngDevMode && assertLView(lView);\n    const componentLView = lView[nodeIndx];\n    ngDevMode && assertLView(componentLView);\n    return componentLView;\n}\n/** Asserts that a value is a DOM Element. */\nfunction assertDomElement(value) {\n    if (typeof Element !== 'undefined' && !(value instanceof Element)) {\n        throw new Error('Expecting instance of DOM Element');\n    }\n}\n\n/**\n * The name of a field that Angular monkey-patches onto a component\n * class to store a function that loads defer-loadable dependencies\n * and applies metadata to a class.\n */\nconst ASYNC_COMPONENT_METADATA_FN = '__ngAsyncComponentMetadataFn__';\n/**\n * If a given component has unresolved async metadata - returns a reference\n * to a function that applies component metadata after resolving defer-loadable\n * dependencies. Otherwise - this function returns `null`.\n */\nfunction getAsyncClassMetadataFn(type) {\n    const componentClass = type; // cast to `any`, so that we can read a monkey-patched field\n    return componentClass[ASYNC_COMPONENT_METADATA_FN] ?? null;\n}\n/**\n * Handles the process of applying metadata info to a component class in case\n * component template has defer blocks (thus some dependencies became deferrable).\n *\n * @param type Component class where metadata should be added\n * @param dependencyLoaderFn Function that loads dependencies\n * @param metadataSetterFn Function that forms a scope in which the `setClassMetadata` is invoked\n */\nfunction setClassMetadataAsync(type, dependencyLoaderFn, metadataSetterFn) {\n    const componentClass = type; // cast to `any`, so that we can monkey-patch it\n    componentClass[ASYNC_COMPONENT_METADATA_FN] = () => Promise.all(dependencyLoaderFn()).then(dependencies => {\n        metadataSetterFn(...dependencies);\n        // Metadata is now set, reset field value to indicate that this component\n        // can by used/compiled synchronously.\n        componentClass[ASYNC_COMPONENT_METADATA_FN] = null;\n        return dependencies;\n    });\n    return componentClass[ASYNC_COMPONENT_METADATA_FN];\n}\n/**\n * Adds decorator, constructor, and property metadata to a given type via static metadata fields\n * on the type.\n *\n * These metadata fields can later be read with Angular's `ReflectionCapabilities` API.\n *\n * Calls to `setClassMetadata` can be guarded by ngDevMode, resulting in the metadata assignments\n * being tree-shaken away during production builds.\n */\nfunction setClassMetadata(type, decorators, ctorParameters, propDecorators) {\n    return noSideEffects(() => {\n        const clazz = type;\n        if (decorators !== null) {\n            if (clazz.hasOwnProperty('decorators') && clazz.decorators !== undefined) {\n                clazz.decorators.push(...decorators);\n            }\n            else {\n                clazz.decorators = decorators;\n            }\n        }\n        if (ctorParameters !== null) {\n            // Rather than merging, clobber the existing parameters. If other projects exist which\n            // use tsickle-style annotations and reflect over them in the same way, this could\n            // cause issues, but that is vanishingly unlikely.\n            clazz.ctorParameters = ctorParameters;\n        }\n        if (propDecorators !== null) {\n            // The property decorator objects are merged as it is possible different fields have\n            // different decorator types. Decorators on individual fields are not merged, as it's\n            // also incredibly unlikely that a field will be decorated both with an Angular\n            // decorator and a non-Angular decorator that's also been downleveled.\n            if (clazz.hasOwnProperty('propDecorators') && clazz.propDecorators !== undefined) {\n                clazz.propDecorators = { ...clazz.propDecorators, ...propDecorators };\n            }\n            else {\n                clazz.propDecorators = propDecorators;\n            }\n        }\n    });\n}\n\n/**\n * Bindings for pure functions are stored after regular bindings.\n *\n * |-------decls------|---------vars---------|                 |----- hostVars (dir1) ------|\n * ------------------------------------------------------------------------------------------\n * | nodes/refs/pipes | bindings | fn slots  | injector | dir1 | host bindings | host slots |\n * ------------------------------------------------------------------------------------------\n *                    ^                      ^\n *      TView.bindingStartIndex      TView.expandoStartIndex\n *\n * Pure function instructions are given an offset from the binding root. Adding the offset to the\n * binding root gives the first index where the bindings are stored. In component views, the binding\n * root is the bindingStartIndex. In host bindings, the binding root is the expandoStartIndex +\n * any directive instances + any hostVars in directives evaluated before it.\n *\n * See VIEW_DATA.md for more information about host binding resolution.\n */\n/**\n * If the value hasn't been saved, calls the pure function to store and return the\n * value. If it has been saved, returns the saved value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns a value\n * @param thisArg Optional calling context of pureFn\n * @returns value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction0(slotOffset, pureFn, thisArg) {\n    const bindingIndex = getBindingRoot() + slotOffset;\n    const lView = getLView();\n    return lView[bindingIndex] === NO_CHANGE ?\n        updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) :\n        getBinding(lView, bindingIndex);\n}\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns an updated value\n * @param exp Updated expression value\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction1(slotOffset, pureFn, exp, thisArg) {\n    return pureFunction1Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp, thisArg);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction2(slotOffset, pureFn, exp1, exp2, thisArg) {\n    return pureFunction2Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, thisArg);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction3(slotOffset, pureFn, exp1, exp2, exp3, thisArg) {\n    return pureFunction3Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, thisArg);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction4(slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {\n    return pureFunction4Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction5(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {\n    const bindingIndex = getBindingRoot() + slotOffset;\n    const lView = getLView();\n    const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated(lView, bindingIndex + 4, exp5) || different ?\n        updateBinding(lView, bindingIndex + 5, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) :\n            pureFn(exp1, exp2, exp3, exp4, exp5)) :\n        getBinding(lView, bindingIndex + 5);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction6(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {\n    const bindingIndex = getBindingRoot() + slotOffset;\n    const lView = getLView();\n    const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different ?\n        updateBinding(lView, bindingIndex + 6, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) :\n        getBinding(lView, bindingIndex + 6);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param exp7\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction7(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {\n    const bindingIndex = getBindingRoot() + slotOffset;\n    const lView = getLView();\n    let different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different ?\n        updateBinding(lView, bindingIndex + 7, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) :\n        getBinding(lView, bindingIndex + 7);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param exp7\n * @param exp8\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction8(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {\n    const bindingIndex = getBindingRoot() + slotOffset;\n    const lView = getLView();\n    const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different ?\n        updateBinding(lView, bindingIndex + 8, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) :\n        getBinding(lView, bindingIndex + 8);\n}\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param exps An array of binding values\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunctionV(slotOffset, pureFn, exps, thisArg) {\n    return pureFunctionVInternal(getLView(), getBindingRoot(), slotOffset, pureFn, exps, thisArg);\n}\n/**\n * Results of a pure function invocation are stored in LView in a dedicated slot that is initialized\n * to NO_CHANGE. In rare situations a pure pipe might throw an exception on the very first\n * invocation and not produce any valid results. In this case LView would keep holding the NO_CHANGE\n * value. The NO_CHANGE is not something that we can use in expressions / bindings thus we convert\n * it to `undefined`.\n */\nfunction getPureFunctionReturnValue(lView, returnValueIndex) {\n    ngDevMode && assertIndexInRange(lView, returnValueIndex);\n    const lastReturnValue = lView[returnValueIndex];\n    return lastReturnValue === NO_CHANGE ? undefined : lastReturnValue;\n}\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns an updated value\n * @param exp Updated expression value\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunction1Internal(lView, bindingRoot, slotOffset, pureFn, exp, thisArg) {\n    const bindingIndex = bindingRoot + slotOffset;\n    return bindingUpdated(lView, bindingIndex, exp) ?\n        updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) :\n        getPureFunctionReturnValue(lView, bindingIndex + 1);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunction2Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, thisArg) {\n    const bindingIndex = bindingRoot + slotOffset;\n    return bindingUpdated2(lView, bindingIndex, exp1, exp2) ?\n        updateBinding(lView, bindingIndex + 2, thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) :\n        getPureFunctionReturnValue(lView, bindingIndex + 2);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunction3Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, thisArg) {\n    const bindingIndex = bindingRoot + slotOffset;\n    return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) ?\n        updateBinding(lView, bindingIndex + 3, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) :\n        getPureFunctionReturnValue(lView, bindingIndex + 3);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n */\nfunction pureFunction4Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {\n    const bindingIndex = bindingRoot + slotOffset;\n    return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) ?\n        updateBinding(lView, bindingIndex + 4, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) :\n        getPureFunctionReturnValue(lView, bindingIndex + 4);\n}\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param exps An array of binding values\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunctionVInternal(lView, bindingRoot, slotOffset, pureFn, exps, thisArg) {\n    let bindingIndex = bindingRoot + slotOffset;\n    let different = false;\n    for (let i = 0; i < exps.length; i++) {\n        bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);\n    }\n    return different ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps)) :\n        getPureFunctionReturnValue(lView, bindingIndex);\n}\n\n/**\n * Create a pipe.\n *\n * @param index Pipe index where the pipe will be stored.\n * @param pipeName The name of the pipe\n * @returns T the instance of the pipe.\n *\n * @codeGenApi\n */\nfunction ɵɵpipe(index, pipeName) {\n    const tView = getTView();\n    let pipeDef;\n    const adjustedIndex = index + HEADER_OFFSET;\n    if (tView.firstCreatePass) {\n        // The `getPipeDef` throws if a pipe with a given name is not found\n        // (so we use non-null assertion below).\n        pipeDef = getPipeDef(pipeName, tView.pipeRegistry);\n        tView.data[adjustedIndex] = pipeDef;\n        if (pipeDef.onDestroy) {\n            (tView.destroyHooks ??= []).push(adjustedIndex, pipeDef.onDestroy);\n        }\n    }\n    else {\n        pipeDef = tView.data[adjustedIndex];\n    }\n    const pipeFactory = pipeDef.factory || (pipeDef.factory = getFactoryDef(pipeDef.type, true));\n    let previousInjectorProfilerContext;\n    if (ngDevMode) {\n        previousInjectorProfilerContext = setInjectorProfilerContext({\n            injector: new NodeInjector(getCurrentTNode(), getLView()),\n            token: pipeDef.type\n        });\n    }\n    const previousInjectImplementation = setInjectImplementation(ɵɵdirectiveInject);\n    try {\n        // DI for pipes is supposed to behave like directives when placed on a component\n        // host node, which means that we have to disable access to `viewProviders`.\n        const previousIncludeViewProviders = setIncludeViewProviders(false);\n        const pipeInstance = pipeFactory();\n        setIncludeViewProviders(previousIncludeViewProviders);\n        store(tView, getLView(), adjustedIndex, pipeInstance);\n        return pipeInstance;\n    }\n    finally {\n        // we have to restore the injector implementation in finally, just in case the creation of the\n        // pipe throws an error.\n        setInjectImplementation(previousInjectImplementation);\n        ngDevMode && setInjectorProfilerContext(previousInjectorProfilerContext);\n    }\n}\n/**\n * Searches the pipe registry for a pipe with the given name. If one is found,\n * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.\n *\n * @param name Name of pipe to resolve\n * @param registry Full list of available pipes\n * @returns Matching PipeDef\n */\nfunction getPipeDef(name, registry) {\n    if (registry) {\n        if (ngDevMode) {\n            const pipes = registry.filter(pipe => pipe.name === name);\n            // TODO: Throw an error in the next major\n            if (pipes.length > 1) {\n                console.warn(formatRuntimeError(313 /* RuntimeErrorCode.MULTIPLE_MATCHING_PIPES */, getMultipleMatchingPipesMessage(name)));\n            }\n        }\n        for (let i = registry.length - 1; i >= 0; i--) {\n            const pipeDef = registry[i];\n            if (name === pipeDef.name) {\n                return pipeDef;\n            }\n        }\n    }\n    if (ngDevMode) {\n        throw new RuntimeError(-302 /* RuntimeErrorCode.PIPE_NOT_FOUND */, getPipeNotFoundErrorMessage(name));\n    }\n    return;\n}\n/**\n * Generates a helpful error message for the user when multiple pipes match the name.\n *\n * @param name Name of the pipe\n * @returns The error message\n */\nfunction getMultipleMatchingPipesMessage(name) {\n    const lView = getLView();\n    const declarationLView = lView[DECLARATION_COMPONENT_VIEW];\n    const context = declarationLView[CONTEXT];\n    const hostIsStandalone = isHostComponentStandalone(lView);\n    const componentInfoMessage = context ? ` in the '${context.constructor.name}' component` : '';\n    const verifyMessage = `check ${hostIsStandalone ? '\\'@Component.imports\\' of this component' :\n        'the imports of this module'}`;\n    const errorMessage = `Multiple pipes match the name \\`${name}\\`${componentInfoMessage}. ${verifyMessage}`;\n    return errorMessage;\n}\n/**\n * Generates a helpful error message for the user when a pipe is not found.\n *\n * @param name Name of the missing pipe\n * @returns The error message\n */\nfunction getPipeNotFoundErrorMessage(name) {\n    const lView = getLView();\n    const declarationLView = lView[DECLARATION_COMPONENT_VIEW];\n    const context = declarationLView[CONTEXT];\n    const hostIsStandalone = isHostComponentStandalone(lView);\n    const componentInfoMessage = context ? ` in the '${context.constructor.name}' component` : '';\n    const verifyMessage = `Verify that it is ${hostIsStandalone ? 'included in the \\'@Component.imports\\' of this component' :\n        'declared or imported in this module'}`;\n    const errorMessage = `The pipe '${name}' could not be found${componentInfoMessage}. ${verifyMessage}`;\n    return errorMessage;\n}\n/**\n * Invokes a pipe with 1 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param offset the binding offset\n * @param v1 1st argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nfunction ɵɵpipeBind1(index, offset, v1) {\n    const adjustedIndex = index + HEADER_OFFSET;\n    const lView = getLView();\n    const pipeInstance = load(lView, adjustedIndex);\n    return isPure(lView, adjustedIndex) ?\n        pureFunction1Internal(lView, getBindingRoot(), offset, pipeInstance.transform, v1, pipeInstance) :\n        pipeInstance.transform(v1);\n}\n/**\n * Invokes a pipe with 2 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nfunction ɵɵpipeBind2(index, slotOffset, v1, v2) {\n    const adjustedIndex = index + HEADER_OFFSET;\n    const lView = getLView();\n    const pipeInstance = load(lView, adjustedIndex);\n    return isPure(lView, adjustedIndex) ?\n        pureFunction2Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, pipeInstance) :\n        pipeInstance.transform(v1, v2);\n}\n/**\n * Invokes a pipe with 3 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n * @param v3 4rd argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nfunction ɵɵpipeBind3(index, slotOffset, v1, v2, v3) {\n    const adjustedIndex = index + HEADER_OFFSET;\n    const lView = getLView();\n    const pipeInstance = load(lView, adjustedIndex);\n    return isPure(lView, adjustedIndex) ?\n        pureFunction3Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) :\n        pipeInstance.transform(v1, v2, v3);\n}\n/**\n * Invokes a pipe with 4 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n * @param v3 3rd argument to {@link PipeTransform#transform}.\n * @param v4 4th argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nfunction ɵɵpipeBind4(index, slotOffset, v1, v2, v3, v4) {\n    const adjustedIndex = index + HEADER_OFFSET;\n    const lView = getLView();\n    const pipeInstance = load(lView, adjustedIndex);\n    return isPure(lView, adjustedIndex) ? pureFunction4Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, v4, pipeInstance) :\n        pipeInstance.transform(v1, v2, v3, v4);\n}\n/**\n * Invokes a pipe with variable number of arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param values Array of arguments to pass to {@link PipeTransform#transform} method.\n *\n * @codeGenApi\n */\nfunction ɵɵpipeBindV(index, slotOffset, values) {\n    const adjustedIndex = index + HEADER_OFFSET;\n    const lView = getLView();\n    const pipeInstance = load(lView, adjustedIndex);\n    return isPure(lView, adjustedIndex) ?\n        pureFunctionVInternal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, values, pipeInstance) :\n        pipeInstance.transform.apply(pipeInstance, values);\n}\nfunction isPure(lView, index) {\n    return lView[TVIEW].data[index].pure;\n}\n\nfunction symbolIterator() {\n    // @ts-expect-error accessing a private member\n    return this._results[Symbol.iterator]();\n}\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {@link ViewChildren}, {@link ContentChildren}, and {@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * @usageNotes\n * ### Example\n * ```typescript\n * @Component({...})\n * class Container {\n *   @ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n *\n * @publicApi\n */\nclass QueryList {\n    static { Symbol.iterator; }\n    /**\n     * Returns `Observable` of `QueryList` notifying the subscriber of changes.\n     */\n    get changes() {\n        return this._changes ??= new EventEmitter();\n    }\n    /**\n     * @param emitDistinctChangesOnly Whether `QueryList.changes` should fire only when actual change\n     *     has occurred. Or if it should fire when query is recomputed. (recomputing could resolve in\n     *     the same result)\n     */\n    constructor(_emitDistinctChangesOnly = false) {\n        this._emitDistinctChangesOnly = _emitDistinctChangesOnly;\n        this.dirty = true;\n        this._results = [];\n        this._changesDetected = false;\n        this._changes = undefined;\n        this.length = 0;\n        this.first = undefined;\n        this.last = undefined;\n        // This function should be declared on the prototype, but doing so there will cause the class\n        // declaration to have side-effects and become not tree-shakable. For this reason we do it in\n        // the constructor.\n        // [Symbol.iterator](): Iterator<T> { ... }\n        const proto = QueryList.prototype;\n        if (!proto[Symbol.iterator])\n            proto[Symbol.iterator] = symbolIterator;\n    }\n    /**\n     * Returns the QueryList entry at `index`.\n     */\n    get(index) {\n        return this._results[index];\n    }\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     */\n    map(fn) {\n        return this._results.map(fn);\n    }\n    filter(fn) {\n        return this._results.filter(fn);\n    }\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     */\n    find(fn) {\n        return this._results.find(fn);\n    }\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     */\n    reduce(fn, init) {\n        return this._results.reduce(fn, init);\n    }\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     */\n    forEach(fn) {\n        this._results.forEach(fn);\n    }\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     */\n    some(fn) {\n        return this._results.some(fn);\n    }\n    /**\n     * Returns a copy of the internal results list as an Array.\n     */\n    toArray() {\n        return this._results.slice();\n    }\n    toString() {\n        return this._results.toString();\n    }\n    /**\n     * Updates the stored data of the query list, and resets the `dirty` flag to `false`, so that\n     * on change detection, it will not notify of changes to the queries, unless a new change\n     * occurs.\n     *\n     * @param resultsTree The query results to store\n     * @param identityAccessor Optional function for extracting stable object identity from a value\n     *    in the array. This function is executed for each element of the query result list while\n     *    comparing current query list with the new one (provided as a first argument of the `reset`\n     *    function) to detect if the lists are different. If the function is not provided, elements\n     *    are compared as is (without any pre-processing).\n     */\n    reset(resultsTree, identityAccessor) {\n        this.dirty = false;\n        const newResultFlat = flatten(resultsTree);\n        if (this._changesDetected = !arrayEquals(this._results, newResultFlat, identityAccessor)) {\n            this._results = newResultFlat;\n            this.length = newResultFlat.length;\n            this.last = newResultFlat[this.length - 1];\n            this.first = newResultFlat[0];\n        }\n    }\n    /**\n     * Triggers a change event by emitting on the `changes` {@link EventEmitter}.\n     */\n    notifyOnChanges() {\n        if (this._changes !== undefined && (this._changesDetected || !this._emitDistinctChangesOnly))\n            this._changes.emit(this);\n    }\n    /** internal */\n    setDirty() {\n        this.dirty = true;\n    }\n    /** internal */\n    destroy() {\n        if (this._changes !== undefined) {\n            this._changes.complete();\n            this._changes.unsubscribe();\n        }\n    }\n}\n\n/**\n * Represents an embedded template that can be used to instantiate embedded views.\n * To instantiate embedded views based on a template, use the `ViewContainerRef`\n * method `createEmbeddedView()`.\n *\n * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`\n * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view\n * is injected into the constructor of the directive,\n * using the `TemplateRef` token.\n *\n * You can also use a `Query` to find a `TemplateRef` associated with\n * a component or a directive.\n *\n * @see {@link ViewContainerRef}\n * @see [Navigate the Component Tree with DI](guide/dependency-injection-navtree)\n *\n * @publicApi\n */\nclass TemplateRef {\n    /**\n     * @internal\n     * @nocollapse\n     */\n    static { this.__NG_ELEMENT_ID__ = injectTemplateRef; }\n}\nconst ViewEngineTemplateRef = TemplateRef;\n// TODO(alxhub): combine interface and implementation. Currently this is challenging since something\n// in g3 depends on them being separate.\nconst R3TemplateRef = class TemplateRef extends ViewEngineTemplateRef {\n    constructor(_declarationLView, _declarationTContainer, elementRef) {\n        super();\n        this._declarationLView = _declarationLView;\n        this._declarationTContainer = _declarationTContainer;\n        this.elementRef = elementRef;\n    }\n    /**\n     * Returns an `ssrId` associated with a TView, which was used to\n     * create this instance of the `TemplateRef`.\n     *\n     * @internal\n     */\n    get ssrId() {\n        return this._declarationTContainer.tView?.ssrId || null;\n    }\n    createEmbeddedView(context, injector) {\n        return this.createEmbeddedViewImpl(context, injector);\n    }\n    /**\n     * @internal\n     */\n    createEmbeddedViewImpl(context, injector, dehydratedView) {\n        const embeddedLView = createAndRenderEmbeddedLView(this._declarationLView, this._declarationTContainer, context, { injector, dehydratedView });\n        return new ViewRef$1(embeddedLView);\n    }\n};\n/**\n * Creates a TemplateRef given a node.\n *\n * @returns The TemplateRef instance to use\n */\nfunction injectTemplateRef() {\n    return createTemplateRef(getCurrentTNode(), getLView());\n}\n/**\n * Creates a TemplateRef and stores it on the injector.\n *\n * @param hostTNode The node on which a TemplateRef is requested\n * @param hostLView The `LView` to which the node belongs\n * @returns The TemplateRef instance or null if we can't create a TemplateRef on a given node type\n */\nfunction createTemplateRef(hostTNode, hostLView) {\n    if (hostTNode.type & 4 /* TNodeType.Container */) {\n        ngDevMode && assertDefined(hostTNode.tView, 'TView must be allocated');\n        return new R3TemplateRef(hostLView, hostTNode, createElementRef(hostTNode, hostLView));\n    }\n    return null;\n}\n\nclass LQuery_ {\n    constructor(queryList) {\n        this.queryList = queryList;\n        this.matches = null;\n    }\n    clone() {\n        return new LQuery_(this.queryList);\n    }\n    setDirty() {\n        this.queryList.setDirty();\n    }\n}\nclass LQueries_ {\n    constructor(queries = []) {\n        this.queries = queries;\n    }\n    createEmbeddedView(tView) {\n        const tQueries = tView.queries;\n        if (tQueries !== null) {\n            const noOfInheritedQueries = tView.contentQueries !== null ? tView.contentQueries[0] : tQueries.length;\n            const viewLQueries = [];\n            // An embedded view has queries propagated from a declaration view at the beginning of the\n            // TQueries collection and up until a first content query declared in the embedded view. Only\n            // propagated LQueries are created at this point (LQuery corresponding to declared content\n            // queries will be instantiated from the content query instructions for each directive).\n            for (let i = 0; i < noOfInheritedQueries; i++) {\n                const tQuery = tQueries.getByIndex(i);\n                const parentLQuery = this.queries[tQuery.indexInDeclarationView];\n                viewLQueries.push(parentLQuery.clone());\n            }\n            return new LQueries_(viewLQueries);\n        }\n        return null;\n    }\n    insertView(tView) {\n        this.dirtyQueriesWithMatches(tView);\n    }\n    detachView(tView) {\n        this.dirtyQueriesWithMatches(tView);\n    }\n    dirtyQueriesWithMatches(tView) {\n        for (let i = 0; i < this.queries.length; i++) {\n            if (getTQuery(tView, i).matches !== null) {\n                this.queries[i].setDirty();\n            }\n        }\n    }\n}\nclass TQueryMetadata_ {\n    constructor(predicate, flags, read = null) {\n        this.predicate = predicate;\n        this.flags = flags;\n        this.read = read;\n    }\n}\nclass TQueries_ {\n    constructor(queries = []) {\n        this.queries = queries;\n    }\n    elementStart(tView, tNode) {\n        ngDevMode &&\n            assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');\n        for (let i = 0; i < this.queries.length; i++) {\n            this.queries[i].elementStart(tView, tNode);\n        }\n    }\n    elementEnd(tNode) {\n        for (let i = 0; i < this.queries.length; i++) {\n            this.queries[i].elementEnd(tNode);\n        }\n    }\n    embeddedTView(tNode) {\n        let queriesForTemplateRef = null;\n        for (let i = 0; i < this.length; i++) {\n            const childQueryIndex = queriesForTemplateRef !== null ? queriesForTemplateRef.length : 0;\n            const tqueryClone = this.getByIndex(i).embeddedTView(tNode, childQueryIndex);\n            if (tqueryClone) {\n                tqueryClone.indexInDeclarationView = i;\n                if (queriesForTemplateRef !== null) {\n                    queriesForTemplateRef.push(tqueryClone);\n                }\n                else {\n                    queriesForTemplateRef = [tqueryClone];\n                }\n            }\n        }\n        return queriesForTemplateRef !== null ? new TQueries_(queriesForTemplateRef) : null;\n    }\n    template(tView, tNode) {\n        ngDevMode &&\n            assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');\n        for (let i = 0; i < this.queries.length; i++) {\n            this.queries[i].template(tView, tNode);\n        }\n    }\n    getByIndex(index) {\n        ngDevMode && assertIndexInRange(this.queries, index);\n        return this.queries[index];\n    }\n    get length() {\n        return this.queries.length;\n    }\n    track(tquery) {\n        this.queries.push(tquery);\n    }\n}\nclass TQuery_ {\n    constructor(metadata, nodeIndex = -1) {\n        this.metadata = metadata;\n        this.matches = null;\n        this.indexInDeclarationView = -1;\n        this.crossesNgTemplate = false;\n        /**\n         * A flag indicating if a given query still applies to nodes it is crossing. We use this flag\n         * (alongside with _declarationNodeIndex) to know when to stop applying content queries to\n         * elements in a template.\n         */\n        this._appliesToNextNode = true;\n        this._declarationNodeIndex = nodeIndex;\n    }\n    elementStart(tView, tNode) {\n        if (this.isApplyingToNode(tNode)) {\n            this.matchTNode(tView, tNode);\n        }\n    }\n    elementEnd(tNode) {\n        if (this._declarationNodeIndex === tNode.index) {\n            this._appliesToNextNode = false;\n        }\n    }\n    template(tView, tNode) {\n        this.elementStart(tView, tNode);\n    }\n    embeddedTView(tNode, childQueryIndex) {\n        if (this.isApplyingToNode(tNode)) {\n            this.crossesNgTemplate = true;\n            // A marker indicating a `<ng-template>` element (a placeholder for query results from\n            // embedded views created based on this `<ng-template>`).\n            this.addMatch(-tNode.index, childQueryIndex);\n            return new TQuery_(this.metadata);\n        }\n        return null;\n    }\n    isApplyingToNode(tNode) {\n        if (this._appliesToNextNode &&\n            (this.metadata.flags & 1 /* QueryFlags.descendants */) !== 1 /* QueryFlags.descendants */) {\n            const declarationNodeIdx = this._declarationNodeIndex;\n            let parent = tNode.parent;\n            // Determine if a given TNode is a \"direct\" child of a node on which a content query was\n            // declared (only direct children of query's host node can match with the descendants: false\n            // option). There are 3 main use-case / conditions to consider here:\n            // - <needs-target><i #target></i></needs-target>: here <i #target> parent node is a query\n            // host node;\n            // - <needs-target><ng-template [ngIf]=\"true\"><i #target></i></ng-template></needs-target>:\n            // here <i #target> parent node is null;\n            // - <needs-target><ng-container><i #target></i></ng-container></needs-target>: here we need\n            // to go past `<ng-container>` to determine <i #target> parent node (but we shouldn't traverse\n            // up past the query's host node!).\n            while (parent !== null && (parent.type & 8 /* TNodeType.ElementContainer */) &&\n                parent.index !== declarationNodeIdx) {\n                parent = parent.parent;\n            }\n            return declarationNodeIdx === (parent !== null ? parent.index : -1);\n        }\n        return this._appliesToNextNode;\n    }\n    matchTNode(tView, tNode) {\n        const predicate = this.metadata.predicate;\n        if (Array.isArray(predicate)) {\n            for (let i = 0; i < predicate.length; i++) {\n                const name = predicate[i];\n                this.matchTNodeWithReadOption(tView, tNode, getIdxOfMatchingSelector(tNode, name));\n                // Also try matching the name to a provider since strings can be used as DI tokens too.\n                this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, name, false, false));\n            }\n        }\n        else {\n            if (predicate === TemplateRef) {\n                if (tNode.type & 4 /* TNodeType.Container */) {\n                    this.matchTNodeWithReadOption(tView, tNode, -1);\n                }\n            }\n            else {\n                this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, predicate, false, false));\n            }\n        }\n    }\n    matchTNodeWithReadOption(tView, tNode, nodeMatchIdx) {\n        if (nodeMatchIdx !== null) {\n            const read = this.metadata.read;\n            if (read !== null) {\n                if (read === ElementRef || read === ViewContainerRef ||\n                    read === TemplateRef && (tNode.type & 4 /* TNodeType.Container */)) {\n                    this.addMatch(tNode.index, -2);\n                }\n                else {\n                    const directiveOrProviderIdx = locateDirectiveOrProvider(tNode, tView, read, false, false);\n                    if (directiveOrProviderIdx !== null) {\n                        this.addMatch(tNode.index, directiveOrProviderIdx);\n                    }\n                }\n            }\n            else {\n                this.addMatch(tNode.index, nodeMatchIdx);\n            }\n        }\n    }\n    addMatch(tNodeIdx, matchIdx) {\n        if (this.matches === null) {\n            this.matches = [tNodeIdx, matchIdx];\n        }\n        else {\n            this.matches.push(tNodeIdx, matchIdx);\n        }\n    }\n}\n/**\n * Iterates over local names for a given node and returns directive index\n * (or -1 if a local name points to an element).\n *\n * @param tNode static data of a node to check\n * @param selector selector to match\n * @returns directive index, -1 or null if a selector didn't match any of the local names\n */\nfunction getIdxOfMatchingSelector(tNode, selector) {\n    const localNames = tNode.localNames;\n    if (localNames !== null) {\n        for (let i = 0; i < localNames.length; i += 2) {\n            if (localNames[i] === selector) {\n                return localNames[i + 1];\n            }\n        }\n    }\n    return null;\n}\nfunction createResultByTNodeType(tNode, currentView) {\n    if (tNode.type & (3 /* TNodeType.AnyRNode */ | 8 /* TNodeType.ElementContainer */)) {\n        return createElementRef(tNode, currentView);\n    }\n    else if (tNode.type & 4 /* TNodeType.Container */) {\n        return createTemplateRef(tNode, currentView);\n    }\n    return null;\n}\nfunction createResultForNode(lView, tNode, matchingIdx, read) {\n    if (matchingIdx === -1) {\n        // if read token and / or strategy is not specified, detect it using appropriate tNode type\n        return createResultByTNodeType(tNode, lView);\n    }\n    else if (matchingIdx === -2) {\n        // read a special token from a node injector\n        return createSpecialToken(lView, tNode, read);\n    }\n    else {\n        // read a token\n        return getNodeInjectable(lView, lView[TVIEW], matchingIdx, tNode);\n    }\n}\nfunction createSpecialToken(lView, tNode, read) {\n    if (read === ElementRef) {\n        return createElementRef(tNode, lView);\n    }\n    else if (read === TemplateRef) {\n        return createTemplateRef(tNode, lView);\n    }\n    else if (read === ViewContainerRef) {\n        ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */);\n        return createContainerRef(tNode, lView);\n    }\n    else {\n        ngDevMode &&\n            throwError(`Special token to read should be one of ElementRef, TemplateRef or ViewContainerRef but got ${stringify(read)}.`);\n    }\n}\n/**\n * A helper function that creates query results for a given view. This function is meant to do the\n * processing once and only once for a given view instance (a set of results for a given view\n * doesn't change).\n */\nfunction materializeViewResults(tView, lView, tQuery, queryIndex) {\n    const lQuery = lView[QUERIES].queries[queryIndex];\n    if (lQuery.matches === null) {\n        const tViewData = tView.data;\n        const tQueryMatches = tQuery.matches;\n        const result = [];\n        for (let i = 0; i < tQueryMatches.length; i += 2) {\n            const matchedNodeIdx = tQueryMatches[i];\n            if (matchedNodeIdx < 0) {\n                // we at the <ng-template> marker which might have results in views created based on this\n                // <ng-template> - those results will be in separate views though, so here we just leave\n                // null as a placeholder\n                result.push(null);\n            }\n            else {\n                ngDevMode && assertIndexInRange(tViewData, matchedNodeIdx);\n                const tNode = tViewData[matchedNodeIdx];\n                result.push(createResultForNode(lView, tNode, tQueryMatches[i + 1], tQuery.metadata.read));\n            }\n        }\n        lQuery.matches = result;\n    }\n    return lQuery.matches;\n}\n/**\n * A helper function that collects (already materialized) query results from a tree of views,\n * starting with a provided LView.\n */\nfunction collectQueryResults(tView, lView, queryIndex, result) {\n    const tQuery = tView.queries.getByIndex(queryIndex);\n    const tQueryMatches = tQuery.matches;\n    if (tQueryMatches !== null) {\n        const lViewResults = materializeViewResults(tView, lView, tQuery, queryIndex);\n        for (let i = 0; i < tQueryMatches.length; i += 2) {\n            const tNodeIdx = tQueryMatches[i];\n            if (tNodeIdx > 0) {\n                result.push(lViewResults[i / 2]);\n            }\n            else {\n                const childQueryIndex = tQueryMatches[i + 1];\n                const declarationLContainer = lView[-tNodeIdx];\n                ngDevMode && assertLContainer(declarationLContainer);\n                // collect matches for views inserted in this container\n                for (let i = CONTAINER_HEADER_OFFSET; i < declarationLContainer.length; i++) {\n                    const embeddedLView = declarationLContainer[i];\n                    if (embeddedLView[DECLARATION_LCONTAINER] === embeddedLView[PARENT]) {\n                        collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);\n                    }\n                }\n                // collect matches for views created from this declaration container and inserted into\n                // different containers\n                if (declarationLContainer[MOVED_VIEWS] !== null) {\n                    const embeddedLViews = declarationLContainer[MOVED_VIEWS];\n                    for (let i = 0; i < embeddedLViews.length; i++) {\n                        const embeddedLView = embeddedLViews[i];\n                        collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);\n                    }\n                }\n            }\n        }\n    }\n    return result;\n}\n/**\n * Refreshes a query by combining matches from all active views and removing matches from deleted\n * views.\n *\n * @returns `true` if a query got dirty during change detection or if this is a static query\n * resolving in creation mode, `false` otherwise.\n *\n * @codeGenApi\n */\nfunction ɵɵqueryRefresh(queryList) {\n    const lView = getLView();\n    const tView = getTView();\n    const queryIndex = getCurrentQueryIndex();\n    setCurrentQueryIndex(queryIndex + 1);\n    const tQuery = getTQuery(tView, queryIndex);\n    if (queryList.dirty &&\n        (isCreationMode(lView) ===\n            ((tQuery.metadata.flags & 2 /* QueryFlags.isStatic */) === 2 /* QueryFlags.isStatic */))) {\n        if (tQuery.matches === null) {\n            queryList.reset([]);\n        }\n        else {\n            const result = tQuery.crossesNgTemplate ?\n                collectQueryResults(tView, lView, queryIndex, []) :\n                materializeViewResults(tView, lView, tQuery, queryIndex);\n            queryList.reset(result, unwrapElementRef);\n            queryList.notifyOnChanges();\n        }\n        return true;\n    }\n    return false;\n}\n/**\n * Creates new QueryList, stores the reference in LView and returns QueryList.\n *\n * @param predicate The type for which the query will search\n * @param flags Flags associated with the query\n * @param read What to save in the query\n *\n * @codeGenApi\n */\nfunction ɵɵviewQuery(predicate, flags, read) {\n    ngDevMode && assertNumber(flags, 'Expecting flags');\n    const tView = getTView();\n    if (tView.firstCreatePass) {\n        createTQuery(tView, new TQueryMetadata_(predicate, flags, read), -1);\n        if ((flags & 2 /* QueryFlags.isStatic */) === 2 /* QueryFlags.isStatic */) {\n            tView.staticViewQueries = true;\n        }\n    }\n    createLQuery(tView, getLView(), flags);\n}\n/**\n * Registers a QueryList, associated with a content query, for later refresh (part of a view\n * refresh).\n *\n * @param directiveIndex Current directive index\n * @param predicate The type for which the query will search\n * @param flags Flags associated with the query\n * @param read What to save in the query\n * @returns QueryList<T>\n *\n * @codeGenApi\n */\nfunction ɵɵcontentQuery(directiveIndex, predicate, flags, read) {\n    ngDevMode && assertNumber(flags, 'Expecting flags');\n    const tView = getTView();\n    if (tView.firstCreatePass) {\n        const tNode = getCurrentTNode();\n        createTQuery(tView, new TQueryMetadata_(predicate, flags, read), tNode.index);\n        saveContentQueryAndDirectiveIndex(tView, directiveIndex);\n        if ((flags & 2 /* QueryFlags.isStatic */) === 2 /* QueryFlags.isStatic */) {\n            tView.staticContentQueries = true;\n        }\n    }\n    createLQuery(tView, getLView(), flags);\n}\n/**\n * Loads a QueryList corresponding to the current view or content query.\n *\n * @codeGenApi\n */\nfunction ɵɵloadQuery() {\n    return loadQueryInternal(getLView(), getCurrentQueryIndex());\n}\nfunction loadQueryInternal(lView, queryIndex) {\n    ngDevMode &&\n        assertDefined(lView[QUERIES], 'LQueries should be defined when trying to load a query');\n    ngDevMode && assertIndexInRange(lView[QUERIES].queries, queryIndex);\n    return lView[QUERIES].queries[queryIndex].queryList;\n}\nfunction createLQuery(tView, lView, flags) {\n    const queryList = new QueryList((flags & 4 /* QueryFlags.emitDistinctChangesOnly */) === 4 /* QueryFlags.emitDistinctChangesOnly */);\n    storeCleanupWithContext(tView, lView, queryList, queryList.destroy);\n    if (lView[QUERIES] === null)\n        lView[QUERIES] = new LQueries_();\n    lView[QUERIES].queries.push(new LQuery_(queryList));\n}\nfunction createTQuery(tView, metadata, nodeIndex) {\n    if (tView.queries === null)\n        tView.queries = new TQueries_();\n    tView.queries.track(new TQuery_(metadata, nodeIndex));\n}\nfunction saveContentQueryAndDirectiveIndex(tView, directiveIndex) {\n    const tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);\n    const lastSavedDirectiveIndex = tViewContentQueries.length ? tViewContentQueries[tViewContentQueries.length - 1] : -1;\n    if (directiveIndex !== lastSavedDirectiveIndex) {\n        tViewContentQueries.push(tView.queries.length - 1, directiveIndex);\n    }\n}\nfunction getTQuery(tView, index) {\n    ngDevMode && assertDefined(tView.queries, 'TQueries must be defined to retrieve a TQuery');\n    return tView.queries.getByIndex(index);\n}\n\n/**\n * Retrieves `TemplateRef` instance from `Injector` when a local reference is placed on the\n * `<ng-template>` element.\n *\n * @codeGenApi\n */\nfunction ɵɵtemplateRefExtractor(tNode, lView) {\n    return createTemplateRef(tNode, lView);\n}\n\nfunction ɵɵgetComponentDepsFactory(type, rawImports) {\n    return () => {\n        try {\n            return depsTracker.getComponentDependencies(type, rawImports).dependencies;\n        }\n        catch (e) {\n            console.error(`Computing dependencies in local compilation mode for the component \"${type.name}\" failed with the exception:`, e);\n            throw e;\n        }\n    };\n}\n\n/**\n * Sets the debug info for an Angular class.\n *\n * This runtime is guarded by ngDevMode flag.\n */\nfunction ɵsetClassDebugInfo(type, debugInfo) {\n    const def = getComponentDef(type);\n    if (def !== null) {\n        def.debugInfo = debugInfo;\n    }\n}\n\n/**\n * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.\n *\n * This should be kept up to date with the public exports of @angular/core.\n */\nconst angularCoreEnv = (() => ({\n    'ɵɵattribute': ɵɵattribute,\n    'ɵɵattributeInterpolate1': ɵɵattributeInterpolate1,\n    'ɵɵattributeInterpolate2': ɵɵattributeInterpolate2,\n    'ɵɵattributeInterpolate3': ɵɵattributeInterpolate3,\n    'ɵɵattributeInterpolate4': ɵɵattributeInterpolate4,\n    'ɵɵattributeInterpolate5': ɵɵattributeInterpolate5,\n    'ɵɵattributeInterpolate6': ɵɵattributeInterpolate6,\n    'ɵɵattributeInterpolate7': ɵɵattributeInterpolate7,\n    'ɵɵattributeInterpolate8': ɵɵattributeInterpolate8,\n    'ɵɵattributeInterpolateV': ɵɵattributeInterpolateV,\n    'ɵɵdefineComponent': ɵɵdefineComponent,\n    'ɵɵdefineDirective': ɵɵdefineDirective,\n    'ɵɵdefineInjectable': ɵɵdefineInjectable,\n    'ɵɵdefineInjector': ɵɵdefineInjector,\n    'ɵɵdefineNgModule': ɵɵdefineNgModule,\n    'ɵɵdefinePipe': ɵɵdefinePipe,\n    'ɵɵdirectiveInject': ɵɵdirectiveInject,\n    'ɵɵgetInheritedFactory': ɵɵgetInheritedFactory,\n    'ɵɵinject': ɵɵinject,\n    'ɵɵinjectAttribute': ɵɵinjectAttribute,\n    'ɵɵinvalidFactory': ɵɵinvalidFactory,\n    'ɵɵinvalidFactoryDep': ɵɵinvalidFactoryDep,\n    'ɵɵtemplateRefExtractor': ɵɵtemplateRefExtractor,\n    'ɵɵresetView': ɵɵresetView,\n    'ɵɵHostDirectivesFeature': ɵɵHostDirectivesFeature,\n    'ɵɵNgOnChangesFeature': ɵɵNgOnChangesFeature,\n    'ɵɵProvidersFeature': ɵɵProvidersFeature,\n    'ɵɵCopyDefinitionFeature': ɵɵCopyDefinitionFeature,\n    'ɵɵInheritDefinitionFeature': ɵɵInheritDefinitionFeature,\n    'ɵɵInputTransformsFeature': ɵɵInputTransformsFeature,\n    'ɵɵStandaloneFeature': ɵɵStandaloneFeature,\n    'ɵɵnextContext': ɵɵnextContext,\n    'ɵɵnamespaceHTML': ɵɵnamespaceHTML,\n    'ɵɵnamespaceMathML': ɵɵnamespaceMathML,\n    'ɵɵnamespaceSVG': ɵɵnamespaceSVG,\n    'ɵɵenableBindings': ɵɵenableBindings,\n    'ɵɵdisableBindings': ɵɵdisableBindings,\n    'ɵɵelementStart': ɵɵelementStart,\n    'ɵɵelementEnd': ɵɵelementEnd,\n    'ɵɵelement': ɵɵelement,\n    'ɵɵelementContainerStart': ɵɵelementContainerStart,\n    'ɵɵelementContainerEnd': ɵɵelementContainerEnd,\n    'ɵɵelementContainer': ɵɵelementContainer,\n    'ɵɵpureFunction0': ɵɵpureFunction0,\n    'ɵɵpureFunction1': ɵɵpureFunction1,\n    'ɵɵpureFunction2': ɵɵpureFunction2,\n    'ɵɵpureFunction3': ɵɵpureFunction3,\n    'ɵɵpureFunction4': ɵɵpureFunction4,\n    'ɵɵpureFunction5': ɵɵpureFunction5,\n    'ɵɵpureFunction6': ɵɵpureFunction6,\n    'ɵɵpureFunction7': ɵɵpureFunction7,\n    'ɵɵpureFunction8': ɵɵpureFunction8,\n    'ɵɵpureFunctionV': ɵɵpureFunctionV,\n    'ɵɵgetCurrentView': ɵɵgetCurrentView,\n    'ɵɵrestoreView': ɵɵrestoreView,\n    'ɵɵlistener': ɵɵlistener,\n    'ɵɵprojection': ɵɵprojection,\n    'ɵɵsyntheticHostProperty': ɵɵsyntheticHostProperty,\n    'ɵɵsyntheticHostListener': ɵɵsyntheticHostListener,\n    'ɵɵpipeBind1': ɵɵpipeBind1,\n    'ɵɵpipeBind2': ɵɵpipeBind2,\n    'ɵɵpipeBind3': ɵɵpipeBind3,\n    'ɵɵpipeBind4': ɵɵpipeBind4,\n    'ɵɵpipeBindV': ɵɵpipeBindV,\n    'ɵɵprojectionDef': ɵɵprojectionDef,\n    'ɵɵhostProperty': ɵɵhostProperty,\n    'ɵɵproperty': ɵɵproperty,\n    'ɵɵpropertyInterpolate': ɵɵpropertyInterpolate,\n    'ɵɵpropertyInterpolate1': ɵɵpropertyInterpolate1,\n    'ɵɵpropertyInterpolate2': ɵɵpropertyInterpolate2,\n    'ɵɵpropertyInterpolate3': ɵɵpropertyInterpolate3,\n    'ɵɵpropertyInterpolate4': ɵɵpropertyInterpolate4,\n    'ɵɵpropertyInterpolate5': ɵɵpropertyInterpolate5,\n    'ɵɵpropertyInterpolate6': ɵɵpropertyInterpolate6,\n    'ɵɵpropertyInterpolate7': ɵɵpropertyInterpolate7,\n    'ɵɵpropertyInterpolate8': ɵɵpropertyInterpolate8,\n    'ɵɵpropertyInterpolateV': ɵɵpropertyInterpolateV,\n    'ɵɵpipe': ɵɵpipe,\n    'ɵɵqueryRefresh': ɵɵqueryRefresh,\n    'ɵɵviewQuery': ɵɵviewQuery,\n    'ɵɵloadQuery': ɵɵloadQuery,\n    'ɵɵcontentQuery': ɵɵcontentQuery,\n    'ɵɵreference': ɵɵreference,\n    'ɵɵclassMap': ɵɵclassMap,\n    'ɵɵclassMapInterpolate1': ɵɵclassMapInterpolate1,\n    'ɵɵclassMapInterpolate2': ɵɵclassMapInterpolate2,\n    'ɵɵclassMapInterpolate3': ɵɵclassMapInterpolate3,\n    'ɵɵclassMapInterpolate4': ɵɵclassMapInterpolate4,\n    'ɵɵclassMapInterpolate5': ɵɵclassMapInterpolate5,\n    'ɵɵclassMapInterpolate6': ɵɵclassMapInterpolate6,\n    'ɵɵclassMapInterpolate7': ɵɵclassMapInterpolate7,\n    'ɵɵclassMapInterpolate8': ɵɵclassMapInterpolate8,\n    'ɵɵclassMapInterpolateV': ɵɵclassMapInterpolateV,\n    'ɵɵstyleMap': ɵɵstyleMap,\n    'ɵɵstyleMapInterpolate1': ɵɵstyleMapInterpolate1,\n    'ɵɵstyleMapInterpolate2': ɵɵstyleMapInterpolate2,\n    'ɵɵstyleMapInterpolate3': ɵɵstyleMapInterpolate3,\n    'ɵɵstyleMapInterpolate4': ɵɵstyleMapInterpolate4,\n    'ɵɵstyleMapInterpolate5': ɵɵstyleMapInterpolate5,\n    'ɵɵstyleMapInterpolate6': ɵɵstyleMapInterpolate6,\n    'ɵɵstyleMapInterpolate7': ɵɵstyleMapInterpolate7,\n    'ɵɵstyleMapInterpolate8': ɵɵstyleMapInterpolate8,\n    'ɵɵstyleMapInterpolateV': ɵɵstyleMapInterpolateV,\n    'ɵɵstyleProp': ɵɵstyleProp,\n    'ɵɵstylePropInterpolate1': ɵɵstylePropInterpolate1,\n    'ɵɵstylePropInterpolate2': ɵɵstylePropInterpolate2,\n    'ɵɵstylePropInterpolate3': ɵɵstylePropInterpolate3,\n    'ɵɵstylePropInterpolate4': ɵɵstylePropInterpolate4,\n    'ɵɵstylePropInterpolate5': ɵɵstylePropInterpolate5,\n    'ɵɵstylePropInterpolate6': ɵɵstylePropInterpolate6,\n    'ɵɵstylePropInterpolate7': ɵɵstylePropInterpolate7,\n    'ɵɵstylePropInterpolate8': ɵɵstylePropInterpolate8,\n    'ɵɵstylePropInterpolateV': ɵɵstylePropInterpolateV,\n    'ɵɵclassProp': ɵɵclassProp,\n    'ɵɵadvance': ɵɵadvance,\n    'ɵɵtemplate': ɵɵtemplate,\n    'ɵɵconditional': ɵɵconditional,\n    'ɵɵdefer': ɵɵdefer,\n    'ɵɵdeferWhen': ɵɵdeferWhen,\n    'ɵɵdeferOnIdle': ɵɵdeferOnIdle,\n    'ɵɵdeferOnImmediate': ɵɵdeferOnImmediate,\n    'ɵɵdeferOnTimer': ɵɵdeferOnTimer,\n    'ɵɵdeferOnHover': ɵɵdeferOnHover,\n    'ɵɵdeferOnInteraction': ɵɵdeferOnInteraction,\n    'ɵɵdeferOnViewport': ɵɵdeferOnViewport,\n    'ɵɵdeferPrefetchWhen': ɵɵdeferPrefetchWhen,\n    'ɵɵdeferPrefetchOnIdle': ɵɵdeferPrefetchOnIdle,\n    'ɵɵdeferPrefetchOnImmediate': ɵɵdeferPrefetchOnImmediate,\n    'ɵɵdeferPrefetchOnTimer': ɵɵdeferPrefetchOnTimer,\n    'ɵɵdeferPrefetchOnHover': ɵɵdeferPrefetchOnHover,\n    'ɵɵdeferPrefetchOnInteraction': ɵɵdeferPrefetchOnInteraction,\n    'ɵɵdeferPrefetchOnViewport': ɵɵdeferPrefetchOnViewport,\n    'ɵɵdeferEnableTimerScheduling': ɵɵdeferEnableTimerScheduling,\n    'ɵɵrepeater': ɵɵrepeater,\n    'ɵɵrepeaterCreate': ɵɵrepeaterCreate,\n    'ɵɵrepeaterTrackByIndex': ɵɵrepeaterTrackByIndex,\n    'ɵɵrepeaterTrackByIdentity': ɵɵrepeaterTrackByIdentity,\n    'ɵɵcomponentInstance': ɵɵcomponentInstance,\n    'ɵɵtext': ɵɵtext,\n    'ɵɵtextInterpolate': ɵɵtextInterpolate,\n    'ɵɵtextInterpolate1': ɵɵtextInterpolate1,\n    'ɵɵtextInterpolate2': ɵɵtextInterpolate2,\n    'ɵɵtextInterpolate3': ɵɵtextInterpolate3,\n    'ɵɵtextInterpolate4': ɵɵtextInterpolate4,\n    'ɵɵtextInterpolate5': ɵɵtextInterpolate5,\n    'ɵɵtextInterpolate6': ɵɵtextInterpolate6,\n    'ɵɵtextInterpolate7': ɵɵtextInterpolate7,\n    'ɵɵtextInterpolate8': ɵɵtextInterpolate8,\n    'ɵɵtextInterpolateV': ɵɵtextInterpolateV,\n    'ɵɵi18n': ɵɵi18n,\n    'ɵɵi18nAttributes': ɵɵi18nAttributes,\n    'ɵɵi18nExp': ɵɵi18nExp,\n    'ɵɵi18nStart': ɵɵi18nStart,\n    'ɵɵi18nEnd': ɵɵi18nEnd,\n    'ɵɵi18nApply': ɵɵi18nApply,\n    'ɵɵi18nPostprocess': ɵɵi18nPostprocess,\n    'ɵɵresolveWindow': ɵɵresolveWindow,\n    'ɵɵresolveDocument': ɵɵresolveDocument,\n    'ɵɵresolveBody': ɵɵresolveBody,\n    'ɵɵsetComponentScope': ɵɵsetComponentScope,\n    'ɵɵsetNgModuleScope': ɵɵsetNgModuleScope,\n    'ɵɵregisterNgModuleType': registerNgModuleType,\n    'ɵɵgetComponentDepsFactory': ɵɵgetComponentDepsFactory,\n    'ɵsetClassDebugInfo': ɵsetClassDebugInfo,\n    'ɵɵsanitizeHtml': ɵɵsanitizeHtml,\n    'ɵɵsanitizeStyle': ɵɵsanitizeStyle,\n    'ɵɵsanitizeResourceUrl': ɵɵsanitizeResourceUrl,\n    'ɵɵsanitizeScript': ɵɵsanitizeScript,\n    'ɵɵsanitizeUrl': ɵɵsanitizeUrl,\n    'ɵɵsanitizeUrlOrResourceUrl': ɵɵsanitizeUrlOrResourceUrl,\n    'ɵɵtrustConstantHtml': ɵɵtrustConstantHtml,\n    'ɵɵtrustConstantResourceUrl': ɵɵtrustConstantResourceUrl,\n    'ɵɵvalidateIframeAttribute': ɵɵvalidateIframeAttribute,\n    'forwardRef': forwardRef,\n    'resolveForwardRef': resolveForwardRef,\n}))();\n\nlet jitOptions = null;\nfunction setJitOptions(options) {\n    if (jitOptions !== null) {\n        if (options.defaultEncapsulation !== jitOptions.defaultEncapsulation) {\n            ngDevMode &&\n                console.error('Provided value for `defaultEncapsulation` can not be changed once it has been set.');\n            return;\n        }\n        if (options.preserveWhitespaces !== jitOptions.preserveWhitespaces) {\n            ngDevMode &&\n                console.error('Provided value for `preserveWhitespaces` can not be changed once it has been set.');\n            return;\n        }\n    }\n    jitOptions = options;\n}\nfunction getJitOptions() {\n    return jitOptions;\n}\nfunction resetJitOptions() {\n    jitOptions = null;\n}\n\nfunction patchModuleCompilation() {\n    // Does nothing, but exists as a target for patching.\n}\n\nconst moduleQueue = [];\n/**\n * Enqueues moduleDef to be checked later to see if scope can be set on its\n * component declarations.\n */\nfunction enqueueModuleForDelayedScoping(moduleType, ngModule) {\n    moduleQueue.push({ moduleType, ngModule });\n}\nlet flushingModuleQueue = false;\n/**\n * Loops over queued module definitions, if a given module definition has all of its\n * declarations resolved, it dequeues that module definition and sets the scope on\n * its declarations.\n */\nfunction flushModuleScopingQueueAsMuchAsPossible() {\n    if (!flushingModuleQueue) {\n        flushingModuleQueue = true;\n        try {\n            for (let i = moduleQueue.length - 1; i >= 0; i--) {\n                const { moduleType, ngModule } = moduleQueue[i];\n                if (ngModule.declarations && ngModule.declarations.every(isResolvedDeclaration)) {\n                    // dequeue\n                    moduleQueue.splice(i, 1);\n                    setScopeOnDeclaredComponents(moduleType, ngModule);\n                }\n            }\n        }\n        finally {\n            flushingModuleQueue = false;\n        }\n    }\n}\n/**\n * Returns truthy if a declaration has resolved. If the declaration happens to be\n * an array of declarations, it will recurse to check each declaration in that array\n * (which may also be arrays).\n */\nfunction isResolvedDeclaration(declaration) {\n    if (Array.isArray(declaration)) {\n        return declaration.every(isResolvedDeclaration);\n    }\n    return !!resolveForwardRef(declaration);\n}\n/**\n * Compiles a module in JIT mode.\n *\n * This function automatically gets called when a class has a `@NgModule` decorator.\n */\nfunction compileNgModule(moduleType, ngModule = {}) {\n    patchModuleCompilation();\n    compileNgModuleDefs(moduleType, ngModule);\n    if (ngModule.id !== undefined) {\n        registerNgModuleType(moduleType, ngModule.id);\n    }\n    // Because we don't know if all declarations have resolved yet at the moment the\n    // NgModule decorator is executing, we're enqueueing the setting of module scope\n    // on its declarations to be run at a later time when all declarations for the module,\n    // including forward refs, have resolved.\n    enqueueModuleForDelayedScoping(moduleType, ngModule);\n}\n/**\n * Compiles and adds the `ɵmod`, `ɵfac` and `ɵinj` properties to the module class.\n *\n * It's possible to compile a module via this API which will allow duplicate declarations in its\n * root.\n */\nfunction compileNgModuleDefs(moduleType, ngModule, allowDuplicateDeclarationsInRoot = false) {\n    ngDevMode && assertDefined(moduleType, 'Required value moduleType');\n    ngDevMode && assertDefined(ngModule, 'Required value ngModule');\n    const declarations = flatten(ngModule.declarations || EMPTY_ARRAY);\n    let ngModuleDef = null;\n    Object.defineProperty(moduleType, NG_MOD_DEF, {\n        configurable: true,\n        get: () => {\n            if (ngModuleDef === null) {\n                if (ngDevMode && ngModule.imports && ngModule.imports.indexOf(moduleType) > -1) {\n                    // We need to assert this immediately, because allowing it to continue will cause it to\n                    // go into an infinite loop before we've reached the point where we throw all the errors.\n                    throw new Error(`'${stringifyForError(moduleType)}' module can't import itself`);\n                }\n                const compiler = getCompilerFacade({ usage: 0 /* JitCompilerUsage.Decorator */, kind: 'NgModule', type: moduleType });\n                ngModuleDef = compiler.compileNgModule(angularCoreEnv, `ng:///${moduleType.name}/ɵmod.js`, {\n                    type: moduleType,\n                    bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY).map(resolveForwardRef),\n                    declarations: declarations.map(resolveForwardRef),\n                    imports: flatten(ngModule.imports || EMPTY_ARRAY)\n                        .map(resolveForwardRef)\n                        .map(expandModuleWithProviders),\n                    exports: flatten(ngModule.exports || EMPTY_ARRAY)\n                        .map(resolveForwardRef)\n                        .map(expandModuleWithProviders),\n                    schemas: ngModule.schemas ? flatten(ngModule.schemas) : null,\n                    id: ngModule.id || null,\n                });\n                // Set `schemas` on ngModuleDef to an empty array in JIT mode to indicate that runtime\n                // should verify that there are no unknown elements in a template. In AOT mode, that check\n                // happens at compile time and `schemas` information is not present on Component and Module\n                // defs after compilation (so the check doesn't happen the second time at runtime).\n                if (!ngModuleDef.schemas) {\n                    ngModuleDef.schemas = [];\n                }\n            }\n            return ngModuleDef;\n        }\n    });\n    let ngFactoryDef = null;\n    Object.defineProperty(moduleType, NG_FACTORY_DEF, {\n        get: () => {\n            if (ngFactoryDef === null) {\n                const compiler = getCompilerFacade({ usage: 0 /* JitCompilerUsage.Decorator */, kind: 'NgModule', type: moduleType });\n                ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${moduleType.name}/ɵfac.js`, {\n                    name: moduleType.name,\n                    type: moduleType,\n                    deps: reflectDependencies(moduleType),\n                    target: compiler.FactoryTarget.NgModule,\n                    typeArgumentCount: 0,\n                });\n            }\n            return ngFactoryDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n    let ngInjectorDef = null;\n    Object.defineProperty(moduleType, NG_INJ_DEF, {\n        get: () => {\n            if (ngInjectorDef === null) {\n                ngDevMode && verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot);\n                const meta = {\n                    name: moduleType.name,\n                    type: moduleType,\n                    providers: ngModule.providers || EMPTY_ARRAY,\n                    imports: [\n                        (ngModule.imports || EMPTY_ARRAY).map(resolveForwardRef),\n                        (ngModule.exports || EMPTY_ARRAY).map(resolveForwardRef),\n                    ],\n                };\n                const compiler = getCompilerFacade({ usage: 0 /* JitCompilerUsage.Decorator */, kind: 'NgModule', type: moduleType });\n                ngInjectorDef =\n                    compiler.compileInjector(angularCoreEnv, `ng:///${moduleType.name}/ɵinj.js`, meta);\n            }\n            return ngInjectorDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\nfunction generateStandaloneInDeclarationsError(type, location) {\n    const prefix = `Unexpected \"${stringifyForError(type)}\" found in the \"declarations\" array of the`;\n    const suffix = `\"${stringifyForError(type)}\" is marked as standalone and can't be declared ` +\n        'in any NgModule - did you intend to import it instead (by adding it to the \"imports\" array)?';\n    return `${prefix} ${location}, ${suffix}`;\n}\nfunction verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot, importingModule) {\n    if (verifiedNgModule.get(moduleType))\n        return;\n    // skip verifications of standalone components, directives, and pipes\n    if (isStandalone(moduleType))\n        return;\n    verifiedNgModule.set(moduleType, true);\n    moduleType = resolveForwardRef(moduleType);\n    let ngModuleDef;\n    if (importingModule) {\n        ngModuleDef = getNgModuleDef(moduleType);\n        if (!ngModuleDef) {\n            throw new Error(`Unexpected value '${moduleType.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);\n        }\n    }\n    else {\n        ngModuleDef = getNgModuleDef(moduleType, true);\n    }\n    const errors = [];\n    const declarations = maybeUnwrapFn(ngModuleDef.declarations);\n    const imports = maybeUnwrapFn(ngModuleDef.imports);\n    flatten(imports).map(unwrapModuleWithProvidersImports).forEach(modOrStandaloneCmpt => {\n        verifySemanticsOfNgModuleImport(modOrStandaloneCmpt, moduleType);\n        verifySemanticsOfNgModuleDef(modOrStandaloneCmpt, false, moduleType);\n    });\n    const exports = maybeUnwrapFn(ngModuleDef.exports);\n    declarations.forEach(verifyDeclarationsHaveDefinitions);\n    declarations.forEach(verifyDirectivesHaveSelector);\n    declarations.forEach((declarationType) => verifyNotStandalone(declarationType, moduleType));\n    const combinedDeclarations = [\n        ...declarations.map(resolveForwardRef),\n        ...flatten(imports.map(computeCombinedExports)).map(resolveForwardRef),\n    ];\n    exports.forEach(verifyExportsAreDeclaredOrReExported);\n    declarations.forEach(decl => verifyDeclarationIsUnique(decl, allowDuplicateDeclarationsInRoot));\n    const ngModule = getAnnotation(moduleType, 'NgModule');\n    if (ngModule) {\n        ngModule.imports &&\n            flatten(ngModule.imports).map(unwrapModuleWithProvidersImports).forEach(mod => {\n                verifySemanticsOfNgModuleImport(mod, moduleType);\n                verifySemanticsOfNgModuleDef(mod, false, moduleType);\n            });\n        ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyCorrectBootstrapType);\n        ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyComponentIsPartOfNgModule);\n    }\n    // Throw Error if any errors were detected.\n    if (errors.length) {\n        throw new Error(errors.join('\\n'));\n    }\n    ////////////////////////////////////////////////////////////////////////////////////////////////\n    function verifyDeclarationsHaveDefinitions(type) {\n        type = resolveForwardRef(type);\n        const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef$1(type);\n        if (!def) {\n            errors.push(`Unexpected value '${stringifyForError(type)}' declared by the module '${stringifyForError(moduleType)}'. Please add a @Pipe/@Directive/@Component annotation.`);\n        }\n    }\n    function verifyDirectivesHaveSelector(type) {\n        type = resolveForwardRef(type);\n        const def = getDirectiveDef(type);\n        if (!getComponentDef(type) && def && def.selectors.length == 0) {\n            errors.push(`Directive ${stringifyForError(type)} has no selector, please add it!`);\n        }\n    }\n    function verifyNotStandalone(type, moduleType) {\n        type = resolveForwardRef(type);\n        const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef$1(type);\n        if (def?.standalone) {\n            const location = `\"${stringifyForError(moduleType)}\" NgModule`;\n            errors.push(generateStandaloneInDeclarationsError(type, location));\n        }\n    }\n    function verifyExportsAreDeclaredOrReExported(type) {\n        type = resolveForwardRef(type);\n        const kind = getComponentDef(type) && 'component' || getDirectiveDef(type) && 'directive' ||\n            getPipeDef$1(type) && 'pipe';\n        if (kind) {\n            // only checked if we are declared as Component, Directive, or Pipe\n            // Modules don't need to be declared or imported.\n            if (combinedDeclarations.lastIndexOf(type) === -1) {\n                // We are exporting something which we don't explicitly declare or import.\n                errors.push(`Can't export ${kind} ${stringifyForError(type)} from ${stringifyForError(moduleType)} as it was neither declared nor imported!`);\n            }\n        }\n    }\n    function verifyDeclarationIsUnique(type, suppressErrors) {\n        type = resolveForwardRef(type);\n        const existingModule = ownerNgModule.get(type);\n        if (existingModule && existingModule !== moduleType) {\n            if (!suppressErrors) {\n                const modules = [existingModule, moduleType].map(stringifyForError).sort();\n                errors.push(`Type ${stringifyForError(type)} is part of the declarations of 2 modules: ${modules[0]} and ${modules[1]}! ` +\n                    `Please consider moving ${stringifyForError(type)} to a higher module that imports ${modules[0]} and ${modules[1]}. ` +\n                    `You can also create a new NgModule that exports and includes ${stringifyForError(type)} then import that NgModule in ${modules[0]} and ${modules[1]}.`);\n            }\n        }\n        else {\n            // Mark type as having owner.\n            ownerNgModule.set(type, moduleType);\n        }\n    }\n    function verifyComponentIsPartOfNgModule(type) {\n        type = resolveForwardRef(type);\n        const existingModule = ownerNgModule.get(type);\n        if (!existingModule && !isStandalone(type)) {\n            errors.push(`Component ${stringifyForError(type)} is not part of any NgModule or the module has not been imported into your module.`);\n        }\n    }\n    function verifyCorrectBootstrapType(type) {\n        type = resolveForwardRef(type);\n        if (!getComponentDef(type)) {\n            errors.push(`${stringifyForError(type)} cannot be used as an entry component.`);\n        }\n        if (isStandalone(type)) {\n            // Note: this error should be the same as the\n            // `NGMODULE_BOOTSTRAP_IS_STANDALONE` one in AOT compiler.\n            errors.push(`The \\`${stringifyForError(type)}\\` class is a standalone component, which can ` +\n                `not be used in the \\`@NgModule.bootstrap\\` array. Use the \\`bootstrapApplication\\` ` +\n                `function for bootstrap instead.`);\n        }\n    }\n    function verifySemanticsOfNgModuleImport(type, importingModule) {\n        type = resolveForwardRef(type);\n        const directiveDef = getComponentDef(type) || getDirectiveDef(type);\n        if (directiveDef !== null && !directiveDef.standalone) {\n            throw new Error(`Unexpected directive '${type.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);\n        }\n        const pipeDef = getPipeDef$1(type);\n        if (pipeDef !== null && !pipeDef.standalone) {\n            throw new Error(`Unexpected pipe '${type.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);\n        }\n    }\n}\nfunction unwrapModuleWithProvidersImports(typeOrWithProviders) {\n    typeOrWithProviders = resolveForwardRef(typeOrWithProviders);\n    return typeOrWithProviders.ngModule || typeOrWithProviders;\n}\nfunction getAnnotation(type, name) {\n    let annotation = null;\n    collect(type.__annotations__);\n    collect(type.decorators);\n    return annotation;\n    function collect(annotations) {\n        if (annotations) {\n            annotations.forEach(readAnnotation);\n        }\n    }\n    function readAnnotation(decorator) {\n        if (!annotation) {\n            const proto = Object.getPrototypeOf(decorator);\n            if (proto.ngMetadataName == name) {\n                annotation = decorator;\n            }\n            else if (decorator.type) {\n                const proto = Object.getPrototypeOf(decorator.type);\n                if (proto.ngMetadataName == name) {\n                    annotation = decorator.args[0];\n                }\n            }\n        }\n    }\n}\n/**\n * Keep track of compiled components. This is needed because in tests we often want to compile the\n * same component with more than one NgModule. This would cause an error unless we reset which\n * NgModule the component belongs to. We keep the list of compiled components here so that the\n * TestBed can reset it later.\n */\nlet ownerNgModule = new WeakMap();\nlet verifiedNgModule = new WeakMap();\nfunction resetCompiledComponents() {\n    ownerNgModule = new WeakMap();\n    verifiedNgModule = new WeakMap();\n    moduleQueue.length = 0;\n    GENERATED_COMP_IDS.clear();\n}\n/**\n * Computes the combined declarations of explicit declarations, as well as declarations inherited by\n * traversing the exports of imported modules.\n * @param type\n */\nfunction computeCombinedExports(type) {\n    type = resolveForwardRef(type);\n    const ngModuleDef = getNgModuleDef(type);\n    // a standalone component, directive or pipe\n    if (ngModuleDef === null) {\n        return [type];\n    }\n    return flatten(maybeUnwrapFn(ngModuleDef.exports).map((type) => {\n        const ngModuleDef = getNgModuleDef(type);\n        if (ngModuleDef) {\n            verifySemanticsOfNgModuleDef(type, false);\n            return computeCombinedExports(type);\n        }\n        else {\n            return type;\n        }\n    }));\n}\n/**\n * Some declared components may be compiled asynchronously, and thus may not have their\n * ɵcmp set yet. If this is the case, then a reference to the module is written into\n * the `ngSelectorScope` property of the declared type.\n */\nfunction setScopeOnDeclaredComponents(moduleType, ngModule) {\n    const declarations = flatten(ngModule.declarations || EMPTY_ARRAY);\n    const transitiveScopes = transitiveScopesFor(moduleType);\n    declarations.forEach(declaration => {\n        declaration = resolveForwardRef(declaration);\n        if (declaration.hasOwnProperty(NG_COMP_DEF)) {\n            // A `ɵcmp` field exists - go ahead and patch the component directly.\n            const component = declaration;\n            const componentDef = getComponentDef(component);\n            patchComponentDefWithScope(componentDef, transitiveScopes);\n        }\n        else if (!declaration.hasOwnProperty(NG_DIR_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {\n            // Set `ngSelectorScope` for future reference when the component compilation finishes.\n            declaration.ngSelectorScope = moduleType;\n        }\n    });\n}\n/**\n * Patch the definition of a component with directives and pipes from the compilation scope of\n * a given module.\n */\nfunction patchComponentDefWithScope(componentDef, transitiveScopes) {\n    componentDef.directiveDefs = () => Array.from(transitiveScopes.compilation.directives)\n        .map(dir => dir.hasOwnProperty(NG_COMP_DEF) ? getComponentDef(dir) : getDirectiveDef(dir))\n        .filter(def => !!def);\n    componentDef.pipeDefs = () => Array.from(transitiveScopes.compilation.pipes).map(pipe => getPipeDef$1(pipe));\n    componentDef.schemas = transitiveScopes.schemas;\n    // Since we avoid Components/Directives/Pipes recompiling in case there are no overrides, we\n    // may face a problem where previously compiled defs available to a given Component/Directive\n    // are cached in TView and may become stale (in case any of these defs gets recompiled). In\n    // order to avoid this problem, we force fresh TView to be created.\n    componentDef.tView = null;\n}\n/**\n * Compute the pair of transitive scopes (compilation scope and exported scope) for a given type\n * (either a NgModule or a standalone component / directive / pipe).\n */\nfunction transitiveScopesFor(type) {\n    if (isNgModule(type)) {\n        if (USE_RUNTIME_DEPS_TRACKER_FOR_JIT) {\n            const scope = depsTracker.getNgModuleScope(type);\n            const def = getNgModuleDef(type, true);\n            return {\n                schemas: def.schemas || null,\n                ...scope,\n            };\n        }\n        else {\n            return transitiveScopesForNgModule(type);\n        }\n    }\n    else if (isStandalone(type)) {\n        const directiveDef = getComponentDef(type) || getDirectiveDef(type);\n        if (directiveDef !== null) {\n            return {\n                schemas: null,\n                compilation: {\n                    directives: new Set(),\n                    pipes: new Set(),\n                },\n                exported: {\n                    directives: new Set([type]),\n                    pipes: new Set(),\n                },\n            };\n        }\n        const pipeDef = getPipeDef$1(type);\n        if (pipeDef !== null) {\n            return {\n                schemas: null,\n                compilation: {\n                    directives: new Set(),\n                    pipes: new Set(),\n                },\n                exported: {\n                    directives: new Set(),\n                    pipes: new Set([type]),\n                },\n            };\n        }\n    }\n    // TODO: change the error message to be more user-facing and take standalone into account\n    throw new Error(`${type.name} does not have a module def (ɵmod property)`);\n}\n/**\n * Compute the pair of transitive scopes (compilation scope and exported scope) for a given module.\n *\n * This operation is memoized and the result is cached on the module's definition. This function can\n * be called on modules with components that have not fully compiled yet, but the result should not\n * be used until they have.\n *\n * @param moduleType module that transitive scope should be calculated for.\n */\nfunction transitiveScopesForNgModule(moduleType) {\n    const def = getNgModuleDef(moduleType, true);\n    if (def.transitiveCompileScopes !== null) {\n        return def.transitiveCompileScopes;\n    }\n    const scopes = {\n        schemas: def.schemas || null,\n        compilation: {\n            directives: new Set(),\n            pipes: new Set(),\n        },\n        exported: {\n            directives: new Set(),\n            pipes: new Set(),\n        },\n    };\n    maybeUnwrapFn(def.imports).forEach((imported) => {\n        // When this module imports another, the imported module's exported directives and pipes are\n        // added to the compilation scope of this module.\n        const importedScope = transitiveScopesFor(imported);\n        importedScope.exported.directives.forEach(entry => scopes.compilation.directives.add(entry));\n        importedScope.exported.pipes.forEach(entry => scopes.compilation.pipes.add(entry));\n    });\n    maybeUnwrapFn(def.declarations).forEach(declared => {\n        const declaredWithDefs = declared;\n        if (getPipeDef$1(declaredWithDefs)) {\n            scopes.compilation.pipes.add(declared);\n        }\n        else {\n            // Either declared has a ɵcmp or ɵdir, or it's a component which hasn't\n            // had its template compiled yet. In either case, it gets added to the compilation's\n            // directives.\n            scopes.compilation.directives.add(declared);\n        }\n    });\n    maybeUnwrapFn(def.exports).forEach((exported) => {\n        const exportedType = exported;\n        // Either the type is a module, a pipe, or a component/directive (which may not have a\n        // ɵcmp as it might be compiled asynchronously).\n        if (isNgModule(exportedType)) {\n            // When this module exports another, the exported module's exported directives and pipes are\n            // added to both the compilation and exported scopes of this module.\n            const exportedScope = transitiveScopesFor(exportedType);\n            exportedScope.exported.directives.forEach(entry => {\n                scopes.compilation.directives.add(entry);\n                scopes.exported.directives.add(entry);\n            });\n            exportedScope.exported.pipes.forEach(entry => {\n                scopes.compilation.pipes.add(entry);\n                scopes.exported.pipes.add(entry);\n            });\n        }\n        else if (getPipeDef$1(exportedType)) {\n            scopes.exported.pipes.add(exportedType);\n        }\n        else {\n            scopes.exported.directives.add(exportedType);\n        }\n    });\n    def.transitiveCompileScopes = scopes;\n    return scopes;\n}\nfunction expandModuleWithProviders(value) {\n    if (isModuleWithProviders(value)) {\n        return value.ngModule;\n    }\n    return value;\n}\n\n/**\n * Keep track of the compilation depth to avoid reentrancy issues during JIT compilation. This\n * matters in the following scenario:\n *\n * Consider a component 'A' that extends component 'B', both declared in module 'M'. During\n * the compilation of 'A' the definition of 'B' is requested to capture the inheritance chain,\n * potentially triggering compilation of 'B'. If this nested compilation were to trigger\n * `flushModuleScopingQueueAsMuchAsPossible` it may happen that module 'M' is still pending in the\n * queue, resulting in 'A' and 'B' to be patched with the NgModule scope. As the compilation of\n * 'A' is still in progress, this would introduce a circular dependency on its compilation. To avoid\n * this issue, the module scope queue is only flushed for compilations at the depth 0, to ensure\n * all compilations have finished.\n */\nlet compilationDepth = 0;\n/**\n * Compile an Angular component according to its decorator metadata, and patch the resulting\n * component def (ɵcmp) onto the component type.\n *\n * Compilation may be asynchronous (due to the need to resolve URLs for the component template or\n * other resources, for example). In the event that compilation is not immediate, `compileComponent`\n * will enqueue resource resolution into a global queue and will fail to return the `ɵcmp`\n * until the global queue has been resolved with a call to `resolveComponentResources`.\n */\nfunction compileComponent(type, metadata) {\n    // Initialize ngDevMode. This must be the first statement in compileComponent.\n    // See the `initNgDevMode` docstring for more information.\n    (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();\n    let ngComponentDef = null;\n    // Metadata may have resources which need to be resolved.\n    maybeQueueResolutionOfComponentResources(type, metadata);\n    // Note that we're using the same function as `Directive`, because that's only subset of metadata\n    // that we need to create the ngFactoryDef. We're avoiding using the component metadata\n    // because we'd have to resolve the asynchronous templates.\n    addDirectiveFactoryDef(type, metadata);\n    Object.defineProperty(type, NG_COMP_DEF, {\n        get: () => {\n            if (ngComponentDef === null) {\n                const compiler = getCompilerFacade({ usage: 0 /* JitCompilerUsage.Decorator */, kind: 'component', type: type });\n                if (componentNeedsResolution(metadata)) {\n                    const error = [`Component '${type.name}' is not resolved:`];\n                    if (metadata.templateUrl) {\n                        error.push(` - templateUrl: ${metadata.templateUrl}`);\n                    }\n                    if (metadata.styleUrls && metadata.styleUrls.length) {\n                        error.push(` - styleUrls: ${JSON.stringify(metadata.styleUrls)}`);\n                    }\n                    if (metadata.styleUrl) {\n                        error.push(` - styleUrl: ${metadata.styleUrl}`);\n                    }\n                    error.push(`Did you run and wait for 'resolveComponentResources()'?`);\n                    throw new Error(error.join('\\n'));\n                }\n                // This const was called `jitOptions` previously but had to be renamed to `options` because\n                // of a bug with Terser that caused optimized JIT builds to throw a `ReferenceError`.\n                // This bug was investigated in https://github.com/angular/angular-cli/issues/17264.\n                // We should not rename it back until https://github.com/terser/terser/issues/615 is fixed.\n                const options = getJitOptions();\n                let preserveWhitespaces = metadata.preserveWhitespaces;\n                if (preserveWhitespaces === undefined) {\n                    if (options !== null && options.preserveWhitespaces !== undefined) {\n                        preserveWhitespaces = options.preserveWhitespaces;\n                    }\n                    else {\n                        preserveWhitespaces = false;\n                    }\n                }\n                let encapsulation = metadata.encapsulation;\n                if (encapsulation === undefined) {\n                    if (options !== null && options.defaultEncapsulation !== undefined) {\n                        encapsulation = options.defaultEncapsulation;\n                    }\n                    else {\n                        encapsulation = ViewEncapsulation$1.Emulated;\n                    }\n                }\n                const templateUrl = metadata.templateUrl || `ng:///${type.name}/template.html`;\n                const meta = {\n                    ...directiveMetadata(type, metadata),\n                    typeSourceSpan: compiler.createParseSourceSpan('Component', type.name, templateUrl),\n                    template: metadata.template || '',\n                    preserveWhitespaces,\n                    styles: typeof metadata.styles === 'string' ? [metadata.styles] :\n                        (metadata.styles || EMPTY_ARRAY),\n                    animations: metadata.animations,\n                    // JIT components are always compiled against an empty set of `declarations`. Instead, the\n                    // `directiveDefs` and `pipeDefs` are updated at a later point:\n                    //  * for NgModule-based components, they're set when the NgModule which declares the\n                    //    component resolves in the module scoping queue\n                    //  * for standalone components, they're set just below, after `compileComponent`.\n                    declarations: [],\n                    changeDetection: metadata.changeDetection,\n                    encapsulation,\n                    interpolation: metadata.interpolation,\n                    viewProviders: metadata.viewProviders || null,\n                };\n                compilationDepth++;\n                try {\n                    if (meta.usesInheritance) {\n                        addDirectiveDefToUndecoratedParents(type);\n                    }\n                    ngComponentDef =\n                        compiler.compileComponent(angularCoreEnv, templateUrl, meta);\n                    if (metadata.standalone) {\n                        // Patch the component definition for standalone components with `directiveDefs` and\n                        // `pipeDefs` functions which lazily compute the directives/pipes available in the\n                        // standalone component. Also set `dependencies` to the lazily resolved list of imports.\n                        const imports = flatten(metadata.imports || EMPTY_ARRAY);\n                        const { directiveDefs, pipeDefs } = getStandaloneDefFunctions(type, imports);\n                        ngComponentDef.directiveDefs = directiveDefs;\n                        ngComponentDef.pipeDefs = pipeDefs;\n                        ngComponentDef.dependencies = () => imports.map(resolveForwardRef);\n                    }\n                }\n                finally {\n                    // Ensure that the compilation depth is decremented even when the compilation failed.\n                    compilationDepth--;\n                }\n                if (compilationDepth === 0) {\n                    // When NgModule decorator executed, we enqueued the module definition such that\n                    // it would only dequeue and add itself as module scope to all of its declarations,\n                    // but only if  if all of its declarations had resolved. This call runs the check\n                    // to see if any modules that are in the queue can be dequeued and add scope to\n                    // their declarations.\n                    flushModuleScopingQueueAsMuchAsPossible();\n                }\n                // If component compilation is async, then the @NgModule annotation which declares the\n                // component may execute and set an ngSelectorScope property on the component type. This\n                // allows the component to patch itself with directiveDefs from the module after it\n                // finishes compiling.\n                if (hasSelectorScope(type)) {\n                    const scopes = transitiveScopesFor(type.ngSelectorScope);\n                    patchComponentDefWithScope(ngComponentDef, scopes);\n                }\n                if (metadata.schemas) {\n                    if (metadata.standalone) {\n                        ngComponentDef.schemas = metadata.schemas;\n                    }\n                    else {\n                        throw new Error(`The 'schemas' was specified for the ${stringifyForError(type)} but is only valid on a component that is standalone.`);\n                    }\n                }\n                else if (metadata.standalone) {\n                    ngComponentDef.schemas = [];\n                }\n            }\n            return ngComponentDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\n/**\n * Build memoized `directiveDefs` and `pipeDefs` functions for the component definition of a\n * standalone component, which process `imports` and filter out directives and pipes. The use of\n * memoized functions here allows for the delayed resolution of any `forwardRef`s present in the\n * component's `imports`.\n */\nfunction getStandaloneDefFunctions(type, imports) {\n    let cachedDirectiveDefs = null;\n    let cachedPipeDefs = null;\n    const directiveDefs = () => {\n        if (!USE_RUNTIME_DEPS_TRACKER_FOR_JIT) {\n            if (cachedDirectiveDefs === null) {\n                // Standalone components are always able to self-reference, so include the component's own\n                // definition in its `directiveDefs`.\n                cachedDirectiveDefs = [getComponentDef(type)];\n                const seen = new Set([type]);\n                for (const rawDep of imports) {\n                    ngDevMode && verifyStandaloneImport(rawDep, type);\n                    const dep = resolveForwardRef(rawDep);\n                    if (seen.has(dep)) {\n                        continue;\n                    }\n                    seen.add(dep);\n                    if (!!getNgModuleDef(dep)) {\n                        const scope = transitiveScopesFor(dep);\n                        for (const dir of scope.exported.directives) {\n                            const def = getComponentDef(dir) || getDirectiveDef(dir);\n                            if (def && !seen.has(dir)) {\n                                seen.add(dir);\n                                cachedDirectiveDefs.push(def);\n                            }\n                        }\n                    }\n                    else {\n                        const def = getComponentDef(dep) || getDirectiveDef(dep);\n                        if (def) {\n                            cachedDirectiveDefs.push(def);\n                        }\n                    }\n                }\n            }\n            return cachedDirectiveDefs;\n        }\n        else {\n            if (ngDevMode) {\n                for (const rawDep of imports) {\n                    verifyStandaloneImport(rawDep, type);\n                }\n            }\n            if (!isComponent(type)) {\n                return [];\n            }\n            const scope = depsTracker.getStandaloneComponentScope(type, imports);\n            return [...scope.compilation.directives]\n                .map(p => (getComponentDef(p) || getDirectiveDef(p)))\n                .filter(d => d !== null);\n        }\n    };\n    const pipeDefs = () => {\n        if (!USE_RUNTIME_DEPS_TRACKER_FOR_JIT) {\n            if (cachedPipeDefs === null) {\n                cachedPipeDefs = [];\n                const seen = new Set();\n                for (const rawDep of imports) {\n                    const dep = resolveForwardRef(rawDep);\n                    if (seen.has(dep)) {\n                        continue;\n                    }\n                    seen.add(dep);\n                    if (!!getNgModuleDef(dep)) {\n                        const scope = transitiveScopesFor(dep);\n                        for (const pipe of scope.exported.pipes) {\n                            const def = getPipeDef$1(pipe);\n                            if (def && !seen.has(pipe)) {\n                                seen.add(pipe);\n                                cachedPipeDefs.push(def);\n                            }\n                        }\n                    }\n                    else {\n                        const def = getPipeDef$1(dep);\n                        if (def) {\n                            cachedPipeDefs.push(def);\n                        }\n                    }\n                }\n            }\n            return cachedPipeDefs;\n        }\n        else {\n            if (ngDevMode) {\n                for (const rawDep of imports) {\n                    verifyStandaloneImport(rawDep, type);\n                }\n            }\n            if (!isComponent(type)) {\n                return [];\n            }\n            const scope = depsTracker.getStandaloneComponentScope(type, imports);\n            return [...scope.compilation.pipes].map(p => getPipeDef$1(p)).filter(d => d !== null);\n        }\n    };\n    return {\n        directiveDefs,\n        pipeDefs,\n    };\n}\nfunction hasSelectorScope(component) {\n    return component.ngSelectorScope !== undefined;\n}\n/**\n * Compile an Angular directive according to its decorator metadata, and patch the resulting\n * directive def onto the component type.\n *\n * In the event that compilation is not immediate, `compileDirective` will return a `Promise` which\n * will resolve when compilation completes and the directive becomes usable.\n */\nfunction compileDirective(type, directive) {\n    let ngDirectiveDef = null;\n    addDirectiveFactoryDef(type, directive || {});\n    Object.defineProperty(type, NG_DIR_DEF, {\n        get: () => {\n            if (ngDirectiveDef === null) {\n                // `directive` can be null in the case of abstract directives as a base class\n                // that use `@Directive()` with no selector. In that case, pass empty object to the\n                // `directiveMetadata` function instead of null.\n                const meta = getDirectiveMetadata(type, directive || {});\n                const compiler = getCompilerFacade({ usage: 0 /* JitCompilerUsage.Decorator */, kind: 'directive', type });\n                ngDirectiveDef =\n                    compiler.compileDirective(angularCoreEnv, meta.sourceMapUrl, meta.metadata);\n            }\n            return ngDirectiveDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\nfunction getDirectiveMetadata(type, metadata) {\n    const name = type && type.name;\n    const sourceMapUrl = `ng:///${name}/ɵdir.js`;\n    const compiler = getCompilerFacade({ usage: 0 /* JitCompilerUsage.Decorator */, kind: 'directive', type });\n    const facade = directiveMetadata(type, metadata);\n    facade.typeSourceSpan = compiler.createParseSourceSpan('Directive', name, sourceMapUrl);\n    if (facade.usesInheritance) {\n        addDirectiveDefToUndecoratedParents(type);\n    }\n    return { metadata: facade, sourceMapUrl };\n}\nfunction addDirectiveFactoryDef(type, metadata) {\n    let ngFactoryDef = null;\n    Object.defineProperty(type, NG_FACTORY_DEF, {\n        get: () => {\n            if (ngFactoryDef === null) {\n                const meta = getDirectiveMetadata(type, metadata);\n                const compiler = getCompilerFacade({ usage: 0 /* JitCompilerUsage.Decorator */, kind: 'directive', type });\n                ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${type.name}/ɵfac.js`, {\n                    name: meta.metadata.name,\n                    type: meta.metadata.type,\n                    typeArgumentCount: 0,\n                    deps: reflectDependencies(type),\n                    target: compiler.FactoryTarget.Directive\n                });\n            }\n            return ngFactoryDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\nfunction extendsDirectlyFromObject(type) {\n    return Object.getPrototypeOf(type.prototype) === Object.prototype;\n}\n/**\n * Extract the `R3DirectiveMetadata` for a particular directive (either a `Directive` or a\n * `Component`).\n */\nfunction directiveMetadata(type, metadata) {\n    // Reflect inputs and outputs.\n    const reflect = getReflect();\n    const propMetadata = reflect.ownPropMetadata(type);\n    return {\n        name: type.name,\n        type: type,\n        selector: metadata.selector !== undefined ? metadata.selector : null,\n        host: metadata.host || EMPTY_OBJ,\n        propMetadata: propMetadata,\n        inputs: metadata.inputs || EMPTY_ARRAY,\n        outputs: metadata.outputs || EMPTY_ARRAY,\n        queries: extractQueriesMetadata(type, propMetadata, isContentQuery),\n        lifecycle: { usesOnChanges: reflect.hasLifecycleHook(type, 'ngOnChanges') },\n        typeSourceSpan: null,\n        usesInheritance: !extendsDirectlyFromObject(type),\n        exportAs: extractExportAs(metadata.exportAs),\n        providers: metadata.providers || null,\n        viewQueries: extractQueriesMetadata(type, propMetadata, isViewQuery),\n        isStandalone: !!metadata.standalone,\n        isSignal: !!metadata.signals,\n        hostDirectives: metadata.hostDirectives?.map(directive => typeof directive === 'function' ? { directive } : directive) ||\n            null\n    };\n}\n/**\n * Adds a directive definition to all parent classes of a type that don't have an Angular decorator.\n */\nfunction addDirectiveDefToUndecoratedParents(type) {\n    const objPrototype = Object.prototype;\n    let parent = Object.getPrototypeOf(type.prototype).constructor;\n    // Go up the prototype until we hit `Object`.\n    while (parent && parent !== objPrototype) {\n        // Since inheritance works if the class was annotated already, we only need to add\n        // the def if there are no annotations and the def hasn't been created already.\n        if (!getDirectiveDef(parent) && !getComponentDef(parent) &&\n            shouldAddAbstractDirective(parent)) {\n            compileDirective(parent, null);\n        }\n        parent = Object.getPrototypeOf(parent);\n    }\n}\nfunction convertToR3QueryPredicate(selector) {\n    return typeof selector === 'string' ? splitByComma(selector) : resolveForwardRef(selector);\n}\nfunction convertToR3QueryMetadata(propertyName, ann) {\n    return {\n        propertyName: propertyName,\n        predicate: convertToR3QueryPredicate(ann.selector),\n        descendants: ann.descendants,\n        first: ann.first,\n        read: ann.read ? ann.read : null,\n        static: !!ann.static,\n        emitDistinctChangesOnly: !!ann.emitDistinctChangesOnly,\n    };\n}\nfunction extractQueriesMetadata(type, propMetadata, isQueryAnn) {\n    const queriesMeta = [];\n    for (const field in propMetadata) {\n        if (propMetadata.hasOwnProperty(field)) {\n            const annotations = propMetadata[field];\n            annotations.forEach(ann => {\n                if (isQueryAnn(ann)) {\n                    if (!ann.selector) {\n                        throw new Error(`Can't construct a query for the property \"${field}\" of ` +\n                            `\"${stringifyForError(type)}\" since the query selector wasn't defined.`);\n                    }\n                    if (annotations.some(isInputAnnotation)) {\n                        throw new Error(`Cannot combine @Input decorators with query decorators`);\n                    }\n                    queriesMeta.push(convertToR3QueryMetadata(field, ann));\n                }\n            });\n        }\n    }\n    return queriesMeta;\n}\nfunction extractExportAs(exportAs) {\n    return exportAs === undefined ? null : splitByComma(exportAs);\n}\nfunction isContentQuery(value) {\n    const name = value.ngMetadataName;\n    return name === 'ContentChild' || name === 'ContentChildren';\n}\nfunction isViewQuery(value) {\n    const name = value.ngMetadataName;\n    return name === 'ViewChild' || name === 'ViewChildren';\n}\nfunction isInputAnnotation(value) {\n    return value.ngMetadataName === 'Input';\n}\nfunction splitByComma(value) {\n    return value.split(',').map(piece => piece.trim());\n}\nconst LIFECYCLE_HOOKS = [\n    'ngOnChanges', 'ngOnInit', 'ngOnDestroy', 'ngDoCheck', 'ngAfterViewInit', 'ngAfterViewChecked',\n    'ngAfterContentInit', 'ngAfterContentChecked'\n];\nfunction shouldAddAbstractDirective(type) {\n    const reflect = getReflect();\n    if (LIFECYCLE_HOOKS.some(hookName => reflect.hasLifecycleHook(type, hookName))) {\n        return true;\n    }\n    const propMetadata = reflect.propMetadata(type);\n    for (const field in propMetadata) {\n        const annotations = propMetadata[field];\n        for (let i = 0; i < annotations.length; i++) {\n            const current = annotations[i];\n            const metadataName = current.ngMetadataName;\n            if (isInputAnnotation(current) || isContentQuery(current) || isViewQuery(current) ||\n                metadataName === 'Output' || metadataName === 'HostBinding' ||\n                metadataName === 'HostListener') {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nfunction compilePipe(type, meta) {\n    let ngPipeDef = null;\n    let ngFactoryDef = null;\n    Object.defineProperty(type, NG_FACTORY_DEF, {\n        get: () => {\n            if (ngFactoryDef === null) {\n                const metadata = getPipeMetadata(type, meta);\n                const compiler = getCompilerFacade({ usage: 0 /* JitCompilerUsage.Decorator */, kind: 'pipe', type: metadata.type });\n                ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${metadata.name}/ɵfac.js`, {\n                    name: metadata.name,\n                    type: metadata.type,\n                    typeArgumentCount: 0,\n                    deps: reflectDependencies(type),\n                    target: compiler.FactoryTarget.Pipe\n                });\n            }\n            return ngFactoryDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n    Object.defineProperty(type, NG_PIPE_DEF, {\n        get: () => {\n            if (ngPipeDef === null) {\n                const metadata = getPipeMetadata(type, meta);\n                const compiler = getCompilerFacade({ usage: 0 /* JitCompilerUsage.Decorator */, kind: 'pipe', type: metadata.type });\n                ngPipeDef =\n                    compiler.compilePipe(angularCoreEnv, `ng:///${metadata.name}/ɵpipe.js`, metadata);\n            }\n            return ngPipeDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\nfunction getPipeMetadata(type, meta) {\n    return {\n        type: type,\n        name: type.name,\n        pipeName: meta.name,\n        pure: meta.pure !== undefined ? meta.pure : true,\n        isStandalone: !!meta.standalone,\n    };\n}\n\n/**\n * Type of the Directive metadata.\n *\n * @publicApi\n */\nconst Directive = makeDecorator('Directive', (dir = {}) => dir, undefined, undefined, (type, meta) => compileDirective(type, meta));\n/**\n * Component decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Component = makeDecorator('Component', (c = {}) => ({ changeDetection: ChangeDetectionStrategy.Default, ...c }), Directive, undefined, (type, meta) => compileComponent(type, meta));\n/**\n * @Annotation\n * @publicApi\n */\nconst Pipe = makeDecorator('Pipe', (p) => ({ pure: true, ...p }), undefined, undefined, (type, meta) => compilePipe(type, meta));\n/**\n * @Annotation\n * @publicApi\n */\nconst Input = makePropDecorator('Input', (arg) => {\n    if (!arg) {\n        return {};\n    }\n    return typeof arg === 'string' ? { alias: arg } : arg;\n});\n/**\n * @Annotation\n * @publicApi\n */\nconst Output = makePropDecorator('Output', (alias) => ({ alias }));\n/**\n * @Annotation\n * @publicApi\n */\nconst HostBinding = makePropDecorator('HostBinding', (hostPropertyName) => ({ hostPropertyName }));\n/**\n * Decorator that binds a DOM event to a host listener and supplies configuration metadata.\n * Angular invokes the supplied handler method when the host element emits the specified event,\n * and updates the bound element with the result.\n *\n * If the handler method returns false, applies `preventDefault` on the bound element.\n *\n * @usageNotes\n *\n * The following example declares a directive\n * that attaches a click listener to a button and counts clicks.\n *\n * ```ts\n * @Directive({selector: 'button[counting]'})\n * class CountClicks {\n *   numberOfClicks = 0;\n *\n *   @HostListener('click', ['$event.target'])\n *   onClick(btn) {\n *     console.log('button', btn, 'number of clicks:', this.numberOfClicks++);\n *   }\n * }\n *\n * @Component({\n *   selector: 'app',\n *   template: '<button counting>Increment</button>',\n * })\n * class App {}\n *\n * ```\n *\n * The following example registers another DOM event handler that listens for `Enter` key-press\n * events on the global `window`.\n * ``` ts\n * import { HostListener, Component } from \"@angular/core\";\n *\n * @Component({\n *   selector: 'app',\n *   template: `<h1>Hello, you have pressed enter {{counter}} number of times!</h1> Press enter key\n * to increment the counter.\n *   <button (click)=\"resetCounter()\">Reset Counter</button>`\n * })\n * class AppComponent {\n *   counter = 0;\n *   @HostListener('window:keydown.enter', ['$event'])\n *   handleKeyDown(event: KeyboardEvent) {\n *     this.counter++;\n *   }\n *   resetCounter() {\n *     this.counter = 0;\n *   }\n * }\n * ```\n * The list of valid key names for `keydown` and `keyup` events\n * can be found here:\n * https://www.w3.org/TR/DOM-Level-3-Events-key/#named-key-attribute-values\n *\n * Note that keys can also be combined, e.g. `@HostListener('keydown.shift.a')`.\n *\n * The global target names that can be used to prefix an event name are\n * `document:`, `window:` and `body:`.\n *\n * @Annotation\n * @publicApi\n */\nconst HostListener = makePropDecorator('HostListener', (eventName, args) => ({ eventName, args }));\n\n/**\n * @Annotation\n */\nconst NgModule = makeDecorator('NgModule', (ngModule) => ngModule, undefined, undefined, \n/**\n * Decorator that marks the following class as an NgModule, and supplies\n * configuration metadata for it.\n *\n * * The `declarations` option configures the compiler\n * with information about what belongs to the NgModule.\n * * The `providers` options configures the NgModule's injector to provide\n * dependencies the NgModule members.\n * * The `imports` and `exports` options bring in members from other modules, and make\n * this module's members available to others.\n */\n(type, meta) => compileNgModule(type, meta));\n\n/**\n * This indirection is needed to free up Component, etc symbols in the public API\n * to be used by the decorator versions of these annotations.\n */\n\n/**\n * @description Represents the version of Angular\n *\n * @publicApi\n */\nclass Version {\n    constructor(full) {\n        this.full = full;\n        const parts = full.split('.');\n        this.major = parts[0];\n        this.minor = parts[1];\n        this.patch = parts.slice(2).join('.');\n    }\n}\n/**\n * @publicApi\n */\nconst VERSION = new Version('17.0.8');\n\n/*\n * This file exists to support compilation of @angular/core in Ivy mode.\n *\n * When the Angular compiler processes a compilation unit, it normally writes imports to\n * @angular/core. When compiling the core package itself this strategy isn't usable. Instead, the\n * compiler writes imports to this file.\n *\n * Only a subset of such imports are supported - core is not allowed to declare components or pipes.\n * A check in ngtsc's `R3SymbolsImportRewriter` validates this condition. The rewriter is only used\n * when compiling @angular/core and is responsible for translating an external name (prefixed with\n * ɵ) to the internal symbol name as exported below.\n *\n * The below symbols are used for @Injectable and @NgModule compilation.\n */\n/**\n * The existence of this constant (in this particular file) informs the Angular compiler that the\n * current program is actually @angular/core, which needs to be compiled specially.\n */\nconst ITS_JUST_ANGULAR = true;\n\nclass Console {\n    log(message) {\n        // tslint:disable-next-line:no-console\n        console.log(message);\n    }\n    // Note: for reporting errors use `DOM.logError()` as it is platform specific\n    warn(message) {\n        // tslint:disable-next-line:no-console\n        console.warn(message);\n    }\n    static { this.ɵfac = function Console_Factory(t) { return new (t || Console)(); }; }\n    static { this.ɵprov = /*@__PURE__*/ ɵɵdefineInjectable({ token: Console, factory: Console.ɵfac, providedIn: 'platform' }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(Console, [{\n        type: Injectable,\n        args: [{ providedIn: 'platform' }]\n    }], null, null); })();\n\n/**\n * Combination of NgModuleFactory and ComponentFactories.\n *\n * @publicApi\n *\n * @deprecated\n * Ivy JIT mode doesn't require accessing this symbol.\n * See [JIT API changes due to ViewEngine deprecation](guide/deprecations#jit-api-changes) for\n * additional context.\n */\nclass ModuleWithComponentFactories {\n    constructor(ngModuleFactory, componentFactories) {\n        this.ngModuleFactory = ngModuleFactory;\n        this.componentFactories = componentFactories;\n    }\n}\n/**\n * Low-level service for running the angular compiler during runtime\n * to create {@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n *\n * Each `@NgModule` provides an own `Compiler` to its injector,\n * that will use the directives/pipes of the ng module for compilation\n * of components.\n *\n * @publicApi\n *\n * @deprecated\n * Ivy JIT mode doesn't require accessing this symbol.\n * See [JIT API changes due to ViewEngine deprecation](guide/deprecations#jit-api-changes) for\n * additional context.\n */\nclass Compiler {\n    /**\n     * Compiles the given NgModule and all of its components. All templates of the components\n     * have to be inlined.\n     */\n    compileModuleSync(moduleType) {\n        return new NgModuleFactory(moduleType);\n    }\n    /**\n     * Compiles the given NgModule and all of its components\n     */\n    compileModuleAsync(moduleType) {\n        return Promise.resolve(this.compileModuleSync(moduleType));\n    }\n    /**\n     * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.\n     */\n    compileModuleAndAllComponentsSync(moduleType) {\n        const ngModuleFactory = this.compileModuleSync(moduleType);\n        const moduleDef = getNgModuleDef(moduleType);\n        const componentFactories = maybeUnwrapFn(moduleDef.declarations)\n            .reduce((factories, declaration) => {\n            const componentDef = getComponentDef(declaration);\n            componentDef && factories.push(new ComponentFactory(componentDef));\n            return factories;\n        }, []);\n        return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n    }\n    /**\n     * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.\n     */\n    compileModuleAndAllComponentsAsync(moduleType) {\n        return Promise.resolve(this.compileModuleAndAllComponentsSync(moduleType));\n    }\n    /**\n     * Clears all caches.\n     */\n    clearCache() { }\n    /**\n     * Clears the cache for the given component/ngModule.\n     */\n    clearCacheFor(type) { }\n    /**\n     * Returns the id for a given NgModule, if one is defined and known to the compiler.\n     */\n    getModuleId(moduleType) {\n        return undefined;\n    }\n    static { this.ɵfac = function Compiler_Factory(t) { return new (t || Compiler)(); }; }\n    static { this.ɵprov = /*@__PURE__*/ ɵɵdefineInjectable({ token: Compiler, factory: Compiler.ɵfac, providedIn: 'root' }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(Compiler, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], null, null); })();\n/**\n * Token to provide CompilerOptions in the platform injector.\n *\n * @publicApi\n */\nconst COMPILER_OPTIONS = new InjectionToken('compilerOptions');\n/**\n * A factory for creating a Compiler\n *\n * @publicApi\n *\n * @deprecated\n * Ivy JIT mode doesn't require accessing this symbol.\n * See [JIT API changes due to ViewEngine deprecation](guide/deprecations#jit-api-changes) for\n * additional context.\n */\nclass CompilerFactory {\n}\n\n/**\n * *Internal* service that keeps track of pending tasks happening in the system.\n *\n * This information is needed to make sure that the serialization on the server\n * is delayed until all tasks in the queue (such as an initial navigation or a\n * pending HTTP request) are completed.\n *\n * Pending tasks continue to contribute to the stableness of `ApplicationRef`\n * throughout the lifetime of the application.\n */\nclass PendingTasks {\n    constructor() {\n        this.taskId = 0;\n        this.pendingTasks = new Set();\n        this.hasPendingTasks = new BehaviorSubject(false);\n    }\n    get _hasPendingTasks() {\n        return this.hasPendingTasks.value;\n    }\n    add() {\n        if (!this._hasPendingTasks) {\n            this.hasPendingTasks.next(true);\n        }\n        const taskId = this.taskId++;\n        this.pendingTasks.add(taskId);\n        return taskId;\n    }\n    remove(taskId) {\n        this.pendingTasks.delete(taskId);\n        if (this.pendingTasks.size === 0 && this._hasPendingTasks) {\n            this.hasPendingTasks.next(false);\n        }\n    }\n    ngOnDestroy() {\n        this.pendingTasks.clear();\n        if (this._hasPendingTasks) {\n            this.hasPendingTasks.next(false);\n        }\n    }\n    static { this.ɵfac = function PendingTasks_Factory(t) { return new (t || PendingTasks)(); }; }\n    static { this.ɵprov = /*@__PURE__*/ ɵɵdefineInjectable({ token: PendingTasks, factory: PendingTasks.ɵfac, providedIn: 'root' }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(PendingTasks, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], null, null); })();\n\n/**\n * These are the data structures that our framework injector profiler will fill with data in order\n * to support DI debugging APIs.\n *\n * resolverToTokenToDependencies: Maps an injector to a Map of tokens to an Array of\n * dependencies. Injector -> Token -> Dependencies This is used to support the\n * getDependenciesFromInjectable API, which takes in an injector and a token and returns it's\n * dependencies.\n *\n * resolverToProviders: Maps a DI resolver (an Injector or a TNode) to the providers configured\n * within it This is used to support the getInjectorProviders API, which takes in an injector and\n * returns the providers that it was configured with. Note that for the element injector case we\n * use the TNode instead of the LView as the DI resolver. This is because the registration of\n * providers happens only once per type of TNode. If an injector is created with an identical TNode,\n * the providers for that injector will not be reconfigured.\n *\n * standaloneInjectorToComponent: Maps the injector of a standalone component to the standalone\n * component that it is associated with. Used in the getInjectorProviders API, specificially in the\n * discovery of import paths for each provider. This is necessary because the imports array of a\n * standalone component is processed and configured in its standalone injector, but exists within\n * the component's definition. Because getInjectorProviders takes in an injector, if that injector\n * is the injector of a standalone component, we need to be able to discover the place where the\n * imports array is located (the component) in order to flatten the imports array within it to\n * discover all of it's providers.\n *\n *\n * All of these data structures are instantiated with WeakMaps. This will ensure that the presence\n * of any object in the keys of these maps does not prevent the garbage collector from collecting\n * those objects. Because of this property of WeakMaps, these data structures will never be the\n * source of a memory leak.\n *\n * An example of this advantage: When components are destroyed, we don't need to do\n * any additional work to remove that component from our mappings.\n *\n */\nclass DIDebugData {\n    constructor() {\n        this.resolverToTokenToDependencies = new WeakMap();\n        this.resolverToProviders = new WeakMap();\n        this.standaloneInjectorToComponent = new WeakMap();\n    }\n    reset() {\n        this.resolverToTokenToDependencies =\n            new WeakMap();\n        this.resolverToProviders = new WeakMap();\n        this.standaloneInjectorToComponent = new WeakMap();\n    }\n}\nlet frameworkDIDebugData = new DIDebugData();\nfunction getFrameworkDIDebugData() {\n    return frameworkDIDebugData;\n}\n/**\n * Initalize default handling of injector events. This handling parses events\n * as they are emitted and constructs the data structures necessary to support\n * some of debug APIs.\n *\n * See handleInjectEvent, handleCreateEvent and handleProviderConfiguredEvent\n * for descriptions of each handler\n *\n * Supported APIs:\n *               - getDependenciesFromInjectable\n *               - getInjectorProviders\n */\nfunction setupFrameworkInjectorProfiler() {\n    frameworkDIDebugData.reset();\n    setInjectorProfiler((injectorProfilerEvent) => handleInjectorProfilerEvent(injectorProfilerEvent));\n}\nfunction handleInjectorProfilerEvent(injectorProfilerEvent) {\n    const { context, type } = injectorProfilerEvent;\n    if (type === 0 /* InjectorProfilerEventType.Inject */) {\n        handleInjectEvent(context, injectorProfilerEvent.service);\n    }\n    else if (type === 1 /* InjectorProfilerEventType.InstanceCreatedByInjector */) {\n        handleInstanceCreatedByInjectorEvent(context, injectorProfilerEvent.instance);\n    }\n    else if (type === 2 /* InjectorProfilerEventType.ProviderConfigured */) {\n        handleProviderConfiguredEvent(context, injectorProfilerEvent.providerRecord);\n    }\n}\n/**\n *\n * Stores the injected service in frameworkDIDebugData.resolverToTokenToDependencies\n * based on it's injector and token.\n *\n * @param context InjectorProfilerContext the injection context that this event occurred in.\n * @param data InjectedService the service associated with this inject event.\n *\n */\nfunction handleInjectEvent(context, data) {\n    const diResolver = getDIResolver(context.injector);\n    if (diResolver === null) {\n        throwError('An Inject event must be run within an injection context.');\n    }\n    const diResolverToInstantiatedToken = frameworkDIDebugData.resolverToTokenToDependencies;\n    if (!diResolverToInstantiatedToken.has(diResolver)) {\n        diResolverToInstantiatedToken.set(diResolver, new WeakMap());\n    }\n    // if token is a primitive type, ignore this event. We do this because we cannot keep track of\n    // non-primitive tokens in WeakMaps since they are not garbage collectable.\n    if (!canBeHeldWeakly(context.token)) {\n        return;\n    }\n    const instantiatedTokenToDependencies = diResolverToInstantiatedToken.get(diResolver);\n    if (!instantiatedTokenToDependencies.has(context.token)) {\n        instantiatedTokenToDependencies.set(context.token, []);\n    }\n    const { token, value, flags } = data;\n    assertDefined(context.token, 'Injector profiler context token is undefined.');\n    const dependencies = instantiatedTokenToDependencies.get(context.token);\n    assertDefined(dependencies, 'Could not resolve dependencies for token.');\n    if (context.injector instanceof NodeInjector) {\n        dependencies.push({ token, value, flags, injectedIn: getNodeInjectorContext(context.injector) });\n    }\n    else {\n        dependencies.push({ token, value, flags });\n    }\n}\n/**\n *\n * Returns the LView and TNode associated with a NodeInjector. Returns undefined if the injector\n * is not a NodeInjector.\n *\n * @param injector\n * @returns {lView: LView, tNode: TNode}|undefined\n */\nfunction getNodeInjectorContext(injector) {\n    if (!(injector instanceof NodeInjector)) {\n        throwError('getNodeInjectorContext must be called with a NodeInjector');\n    }\n    const lView = getNodeInjectorLView(injector);\n    const tNode = getNodeInjectorTNode(injector);\n    if (tNode === null) {\n        return;\n    }\n    assertTNodeForLView(tNode, lView);\n    return { lView, tNode };\n}\n/**\n *\n * If the created instance is an instance of a standalone component, maps the injector to that\n * standalone component in frameworkDIDebugData.standaloneInjectorToComponent\n *\n * @param context InjectorProfilerContext the injection context that this event occurred in.\n * @param data InjectorCreatedInstance an object containing the instance that was just created\n *\n */\nfunction handleInstanceCreatedByInjectorEvent(context, data) {\n    const { value } = data;\n    if (getDIResolver(context.injector) === null) {\n        throwError('An InjectorCreatedInstance event must be run within an injection context.');\n    }\n    // if our value is an instance of a standalone component, map the injector of that standalone\n    // component to the component class. Otherwise, this event is a noop.\n    let standaloneComponent = undefined;\n    if (typeof value === 'object') {\n        standaloneComponent = value?.constructor;\n    }\n    if (standaloneComponent === undefined || !isStandaloneComponent(standaloneComponent)) {\n        return;\n    }\n    const environmentInjector = context.injector.get(EnvironmentInjector, null, { optional: true });\n    // Standalone components should have an environment injector. If one cannot be\n    // found we may be in a test case for low level functionality that did not explictly\n    // setup this injector. In those cases, we simply ignore this event.\n    if (environmentInjector === null) {\n        return;\n    }\n    const { standaloneInjectorToComponent } = frameworkDIDebugData;\n    // If our injector has already been mapped, as is the case\n    // when a standalone component imports another standalone component,\n    // we consider the original component (the component doing the importing)\n    // as the component connected to our injector.\n    if (standaloneInjectorToComponent.has(environmentInjector)) {\n        return;\n    }\n    // If our injector hasn't been mapped, then we map it to the standalone component\n    standaloneInjectorToComponent.set(environmentInjector, standaloneComponent);\n}\nfunction isStandaloneComponent(value) {\n    const def = getComponentDef(value);\n    return !!def?.standalone;\n}\n/**\n *\n * Stores the emitted ProviderRecords from the InjectorProfilerEventType.ProviderConfigured\n * event in frameworkDIDebugData.resolverToProviders\n *\n * @param context InjectorProfilerContext the injection context that this event occurred in.\n * @param data ProviderRecord an object containing the instance that was just created\n *\n */\nfunction handleProviderConfiguredEvent(context, data) {\n    const { resolverToProviders } = frameworkDIDebugData;\n    let diResolver;\n    if (context?.injector instanceof NodeInjector) {\n        diResolver = getNodeInjectorTNode(context.injector);\n    }\n    else {\n        diResolver = context.injector;\n    }\n    if (diResolver === null) {\n        throwError('A ProviderConfigured event must be run within an injection context.');\n    }\n    if (!resolverToProviders.has(diResolver)) {\n        resolverToProviders.set(diResolver, []);\n    }\n    resolverToProviders.get(diResolver).push(data);\n}\nfunction getDIResolver(injector) {\n    let diResolver = null;\n    if (injector === undefined) {\n        return diResolver;\n    }\n    // We use the LView as the diResolver for NodeInjectors because they\n    // do not persist anywhere in the framework. They are simply wrappers around an LView and a TNode\n    // that do persist. Because of this, we rely on the LView of the NodeInjector in order to use\n    // as a concrete key to represent this injector. If we get the same LView back later, we know\n    // we're looking at the same injector.\n    if (injector instanceof NodeInjector) {\n        diResolver = getNodeInjectorLView(injector);\n    }\n    // Other injectors can be used a keys for a map because their instances\n    // persist\n    else {\n        diResolver = injector;\n    }\n    return diResolver;\n}\n// inspired by\n// https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-canbeheldweakly\nfunction canBeHeldWeakly(value) {\n    // we check for value !== null here because typeof null === 'object\n    return value !== null &&\n        (typeof value === 'object' || typeof value === 'function' || typeof value === 'symbol');\n}\n\n/**\n * Marks a component for check (in case of OnPush components) and synchronously\n * performs change detection on the application this component belongs to.\n *\n * @param component Component to {@link ChangeDetectorRef#markForCheck mark for check}.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction applyChanges(component) {\n    ngDevMode && assertDefined(component, 'component');\n    markViewDirty(getComponentViewByInstance(component));\n    getRootComponents(component).forEach(rootComponent => detectChanges(rootComponent));\n}\n/**\n * Synchronously perform change detection on a component (and possibly its sub-components).\n *\n * This function triggers change detection in a synchronous way on a component.\n *\n * @param component The component which the change detection should be performed on.\n */\nfunction detectChanges(component) {\n    const view = getComponentViewByInstance(component);\n    view[FLAGS] |= 1024 /* LViewFlags.RefreshView */;\n    detectChangesInternal(view);\n}\n\n/**\n * Discovers the dependencies of an injectable instance. Provides DI information about each\n * dependency that the injectable was instantiated with, including where they were provided from.\n *\n * @param injector An injector instance\n * @param token a DI token that was constructed by the given injector instance\n * @returns an object that contains the created instance of token as well as all of the dependencies\n * that it was instantiated with OR undefined if the token was not created within the given\n * injector.\n */\nfunction getDependenciesFromInjectable(injector, token) {\n    // First we check to see if the token given maps to an actual instance in the injector given.\n    // We use `self: true` because we only want to look at the injector we were given.\n    // We use `optional: true` because it's possible that the token we were given was never\n    // constructed by the injector we were given.\n    const instance = injector.get(token, null, { self: true, optional: true });\n    if (instance === null) {\n        throw new Error(`Unable to determine instance of ${token} in given injector`);\n    }\n    const unformattedDependencies = getDependenciesForTokenInInjector(token, injector);\n    const resolutionPath = getInjectorResolutionPath(injector);\n    const dependencies = unformattedDependencies.map(dep => {\n        // injectedIn contains private fields, so we omit it from the response\n        const formattedDependency = {\n            value: dep.value,\n        };\n        // convert injection flags to booleans\n        const flags = dep.flags;\n        formattedDependency.flags = {\n            optional: (8 /* InternalInjectFlags.Optional */ & flags) === 8 /* InternalInjectFlags.Optional */,\n            host: (1 /* InternalInjectFlags.Host */ & flags) === 1 /* InternalInjectFlags.Host */,\n            self: (2 /* InternalInjectFlags.Self */ & flags) === 2 /* InternalInjectFlags.Self */,\n            skipSelf: (4 /* InternalInjectFlags.SkipSelf */ & flags) === 4 /* InternalInjectFlags.SkipSelf */,\n        };\n        // find the injector that provided the dependency\n        for (let i = 0; i < resolutionPath.length; i++) {\n            const injectorToCheck = resolutionPath[i];\n            // if skipSelf is true we skip the first injector\n            if (i === 0 && formattedDependency.flags.skipSelf) {\n                continue;\n            }\n            // host only applies to NodeInjectors\n            if (formattedDependency.flags.host && injectorToCheck instanceof EnvironmentInjector) {\n                break;\n            }\n            const instance = injectorToCheck.get(dep.token, null, { self: true, optional: true });\n            if (instance !== null) {\n                // if host flag is true we double check that we can get the service from the first element\n                // in the resolution path by using the host flag. This is done to make sure that we've found\n                // the correct providing injector, and not a node injector that is connected to our path via\n                // a router outlet.\n                if (formattedDependency.flags.host) {\n                    const firstInjector = resolutionPath[0];\n                    const lookupFromFirstInjector = firstInjector.get(dep.token, null, { ...formattedDependency.flags, optional: true });\n                    if (lookupFromFirstInjector !== null) {\n                        formattedDependency.providedIn = injectorToCheck;\n                    }\n                    break;\n                }\n                formattedDependency.providedIn = injectorToCheck;\n                break;\n            }\n            // if self is true we stop after the first injector\n            if (i === 0 && formattedDependency.flags.self) {\n                break;\n            }\n        }\n        if (dep.token)\n            formattedDependency.token = dep.token;\n        return formattedDependency;\n    });\n    return { instance, dependencies };\n}\nfunction getDependenciesForTokenInInjector(token, injector) {\n    const { resolverToTokenToDependencies } = getFrameworkDIDebugData();\n    if (!(injector instanceof NodeInjector)) {\n        return resolverToTokenToDependencies.get(injector)?.get?.(token) ?? [];\n    }\n    const lView = getNodeInjectorLView(injector);\n    const tokenDependencyMap = resolverToTokenToDependencies.get(lView);\n    const dependencies = tokenDependencyMap?.get(token) ?? [];\n    // In the NodeInjector case, all injections for every node are stored in the same lView.\n    // We use the injectedIn field of the dependency to filter out the dependencies that\n    // do not come from the same node as the instance we're looking at.\n    return dependencies.filter(dependency => {\n        const dependencyNode = dependency.injectedIn?.tNode;\n        if (dependencyNode === undefined) {\n            return false;\n        }\n        const instanceNode = getNodeInjectorTNode(injector);\n        assertTNode(dependencyNode);\n        assertTNode(instanceNode);\n        return dependencyNode === instanceNode;\n    });\n}\n/**\n * Gets the class associated with an injector that contains a provider `imports` array in it's\n * definition\n *\n * For Module Injectors this returns the NgModule constructor.\n *\n * For Standalone injectors this returns the standalone component constructor.\n *\n * @param injector Injector an injector instance\n * @returns the constructor where the `imports` array that configures this injector is located\n */\nfunction getProviderImportsContainer(injector) {\n    const { standaloneInjectorToComponent } = getFrameworkDIDebugData();\n    // standalone components configure providers through a component def, so we have to\n    // use the standalone component associated with this injector if Injector represents\n    // a standalone components EnvironmentInjector\n    if (standaloneInjectorToComponent.has(injector)) {\n        return standaloneInjectorToComponent.get(injector);\n    }\n    // Module injectors configure providers through their NgModule def, so we use the\n    // injector to lookup its NgModuleRef and through that grab its instance\n    const defTypeRef = injector.get(NgModuleRef$1, null, { self: true, optional: true });\n    // If we can't find an associated imports container, return null.\n    // This could be the case if this function is called with an R3Injector that does not represent\n    // a standalone component or NgModule.\n    if (defTypeRef === null) {\n        return null;\n    }\n    // In standalone applications, the root environment injector created by bootstrapApplication\n    // may have no associated \"instance\".\n    if (defTypeRef.instance === null) {\n        return null;\n    }\n    return defTypeRef.instance.constructor;\n}\n/**\n * Gets the providers configured on a NodeInjector\n *\n * @param injector A NodeInjector instance\n * @returns ProviderRecord[] an array of objects representing the providers configured on this\n *     injector\n */\nfunction getNodeInjectorProviders(injector) {\n    const diResolver = getNodeInjectorTNode(injector);\n    const { resolverToProviders } = getFrameworkDIDebugData();\n    return resolverToProviders.get(diResolver) ?? [];\n}\n/**\n * Gets a mapping of providers configured on an injector to their import paths\n *\n * ModuleA -> imports ModuleB\n * ModuleB -> imports ModuleC\n * ModuleB -> provides MyServiceA\n * ModuleC -> provides MyServiceB\n *\n * getProviderImportPaths(ModuleA)\n * > Map(2) {\n *   MyServiceA => [ModuleA, ModuleB]\n *   MyServiceB => [ModuleA, ModuleB, ModuleC]\n *  }\n *\n * @param providerImportsContainer constructor of class that contains an `imports` array in it's\n *     definition\n * @returns A Map object that maps providers to an array of constructors representing it's import\n *     path\n *\n */\nfunction getProviderImportPaths(providerImportsContainer) {\n    const providerToPath = new Map();\n    const visitedContainers = new Set();\n    const visitor = walkProviderTreeToDiscoverImportPaths(providerToPath, visitedContainers);\n    walkProviderTree(providerImportsContainer, visitor, [], new Set());\n    return providerToPath;\n}\n/**\n *\n * Higher order function that returns a visitor for WalkProviderTree\n *\n * Takes in a Map and Set to keep track of the providers and containers\n * visited, so that we can discover the import paths of these providers\n * during the traversal.\n *\n * This visitor takes advantage of the fact that walkProviderTree performs a\n * postorder traversal of the provider tree for the passed in container. Because postorder\n * traversal recursively processes subtrees from leaf nodes until the traversal reaches the root,\n * we write a visitor that constructs provider import paths in reverse.\n *\n *\n * We use the visitedContainers set defined outside this visitor\n * because we want to run some logic only once for\n * each container in the tree. That logic can be described as:\n *\n *\n * 1. for each discovered_provider and discovered_path in the incomplete provider paths we've\n * already discovered\n * 2. get the first container in discovered_path\n * 3. if that first container is in the imports array of the container we're visiting\n *    Then the container we're visiting is also in the import path of discovered_provider, so we\n *    unshift discovered_path with the container we're currently visiting\n *\n *\n * Example Run:\n * ```\n *                 ┌──────────┐\n *                 │containerA│\n *      ┌─imports-─┤          ├──imports─┐\n *      │          │  provA   │          │\n *      │          │  provB   │          │\n *      │          └──────────┘          │\n *      │                                │\n *     ┌▼─────────┐             ┌────────▼─┐\n *     │containerB│             │containerC│\n *     │          │             │          │\n *     │  provD   │             │  provF   │\n *     │  provE   │             │  provG   │\n *     └──────────┘             └──────────┘\n * ```\n *\n * Each step of the traversal,\n *\n * ```\n * visitor(provD, containerB)\n * providerToPath === Map { provD => [containerB] }\n * visitedContainers === Set { containerB }\n *\n * visitor(provE, containerB)\n * providerToPath === Map { provD => [containerB], provE => [containerB] }\n * visitedContainers === Set { containerB }\n *\n * visitor(provF, containerC)\n * providerToPath === Map { provD => [containerB], provE => [containerB], provF => [containerC] }\n * visitedContainers === Set { containerB, containerC }\n *\n * visitor(provG, containerC)\n * providerToPath === Map {\n *   provD => [containerB], provE => [containerB], provF => [containerC], provG => [containerC]\n * }\n * visitedContainers === Set { containerB, containerC }\n *\n * visitor(provA, containerA)\n * providerToPath === Map {\n *   provD => [containerA, containerB],\n *   provE => [containerA, containerB],\n *   provF => [containerA, containerC],\n *   provG => [containerA, containerC],\n *   provA => [containerA]\n * }\n * visitedContainers === Set { containerB, containerC, containerA }\n *\n * visitor(provB, containerA)\n * providerToPath === Map {\n *   provD => [containerA, containerB],\n *   provE => [containerA, containerB],\n *   provF => [containerA, containerC],\n *   provG => [containerA, containerC],\n *   provA => [containerA]\n *   provB => [containerA]\n * }\n * visitedContainers === Set { containerB, containerC, containerA }\n * ```\n *\n * @param providerToPath Map map of providers to paths that this function fills\n * @param visitedContainers Set a set to keep track of the containers we've already visited\n * @return function(provider SingleProvider, container: Type<unknown> | InjectorType<unknown>) =>\n *     void\n */\nfunction walkProviderTreeToDiscoverImportPaths(providerToPath, visitedContainers) {\n    return (provider, container) => {\n        // If the provider is not already in the providerToPath map,\n        // add an entry with the provider as the key and an array containing the current container as\n        // the value\n        if (!providerToPath.has(provider)) {\n            providerToPath.set(provider, [container]);\n        }\n        // This block will run exactly once for each container in the import tree.\n        // This is where we run the logic to check the imports array of the current\n        // container to see if it's the next container in the path for our currently\n        // discovered providers.\n        if (!visitedContainers.has(container)) {\n            // Iterate through the providers we've already seen\n            for (const prov of providerToPath.keys()) {\n                const existingImportPath = providerToPath.get(prov);\n                let containerDef = getInjectorDef(container);\n                if (!containerDef) {\n                    const ngModule = container.ngModule;\n                    containerDef = getInjectorDef(ngModule);\n                }\n                if (!containerDef) {\n                    return;\n                }\n                const lastContainerAddedToPath = existingImportPath[0];\n                let isNextStepInPath = false;\n                deepForEach(containerDef.imports, (moduleImport) => {\n                    if (isNextStepInPath) {\n                        return;\n                    }\n                    isNextStepInPath = moduleImport.ngModule === lastContainerAddedToPath ||\n                        moduleImport === lastContainerAddedToPath;\n                    if (isNextStepInPath) {\n                        providerToPath.get(prov)?.unshift(container);\n                    }\n                });\n            }\n        }\n        visitedContainers.add(container);\n    };\n}\n/**\n * Gets the providers configured on an EnvironmentInjector\n *\n * @param injector EnvironmentInjector\n * @returns an array of objects representing the providers of the given injector\n */\nfunction getEnvironmentInjectorProviders(injector) {\n    const providerRecordsWithoutImportPaths = getFrameworkDIDebugData().resolverToProviders.get(injector) ?? [];\n    // platform injector has no provider imports container so can we skip trying to\n    // find import paths\n    if (isPlatformInjector(injector)) {\n        return providerRecordsWithoutImportPaths;\n    }\n    const providerImportsContainer = getProviderImportsContainer(injector);\n    if (providerImportsContainer === null) {\n        // We assume that if an environment injector exists without an associated provider imports\n        // container, it was created without such a container. Some examples cases where this could\n        // happen:\n        // - The root injector of a standalone application\n        // - A router injector created by using the providers array in a lazy loaded route\n        // - A manually created injector that is attached to the injector tree\n        // Since each of these cases has no provider container, there is no concept of import paths,\n        // so we can simply return the provider records.\n        return providerRecordsWithoutImportPaths;\n    }\n    const providerToPath = getProviderImportPaths(providerImportsContainer);\n    const providerRecords = [];\n    for (const providerRecord of providerRecordsWithoutImportPaths) {\n        const provider = providerRecord.provider;\n        // Ignore these special providers for now until we have a cleaner way of\n        // determing when they are provided by the framework vs provided by the user.\n        const token = provider.provide;\n        if (token === ENVIRONMENT_INITIALIZER || token === INJECTOR_DEF_TYPES) {\n            continue;\n        }\n        let importPath = providerToPath.get(provider) ?? [];\n        const def = getComponentDef(providerImportsContainer);\n        const isStandaloneComponent = !!def?.standalone;\n        // We prepend the component constructor in the standalone case\n        // because walkProviderTree does not visit this constructor during it's traversal\n        if (isStandaloneComponent) {\n            importPath = [providerImportsContainer, ...importPath];\n        }\n        providerRecords.push({ ...providerRecord, importPath });\n    }\n    return providerRecords;\n}\nfunction isPlatformInjector(injector) {\n    return injector instanceof R3Injector && injector.scopes.has('platform');\n}\n/**\n * Gets the providers configured on an injector.\n *\n * @param injector the injector to lookup the providers of\n * @returns ProviderRecord[] an array of objects representing the providers of the given injector\n */\nfunction getInjectorProviders(injector) {\n    if (injector instanceof NodeInjector) {\n        return getNodeInjectorProviders(injector);\n    }\n    else if (injector instanceof EnvironmentInjector) {\n        return getEnvironmentInjectorProviders(injector);\n    }\n    throwError('getInjectorProviders only supports NodeInjector and EnvironmentInjector');\n}\n/**\n *\n * Given an injector, this function will return\n * an object containing the type and source of the injector.\n *\n * |              | type        | source                                                      |\n * |--------------|-------------|-------------------------------------------------------------|\n * | NodeInjector | element     | DOM element that created this injector                      |\n * | R3Injector   | environment | `injector.source`                                           |\n * | NullInjector | null        | null                                                        |\n *\n * @param injector the Injector to get metadata for\n * @returns an object containing the type and source of the given injector. If the injector metadata\n *     cannot be determined, returns null.\n */\nfunction getInjectorMetadata(injector) {\n    if (injector instanceof NodeInjector) {\n        const lView = getNodeInjectorLView(injector);\n        const tNode = getNodeInjectorTNode(injector);\n        assertTNodeForLView(tNode, lView);\n        return { type: 'element', source: getNativeByTNode(tNode, lView) };\n    }\n    if (injector instanceof R3Injector) {\n        return { type: 'environment', source: injector.source ?? null };\n    }\n    if (injector instanceof NullInjector) {\n        return { type: 'null', source: null };\n    }\n    return null;\n}\nfunction getInjectorResolutionPath(injector) {\n    const resolutionPath = [injector];\n    getInjectorResolutionPathHelper(injector, resolutionPath);\n    return resolutionPath;\n}\nfunction getInjectorResolutionPathHelper(injector, resolutionPath) {\n    const parent = getInjectorParent(injector);\n    // if getInjectorParent can't find a parent, then we've either reached the end\n    // of the path, or we need to move from the Element Injector tree to the\n    // module injector tree using the first injector in our path as the connection point.\n    if (parent === null) {\n        if (injector instanceof NodeInjector) {\n            const firstInjector = resolutionPath[0];\n            if (firstInjector instanceof NodeInjector) {\n                const moduleInjector = getModuleInjectorOfNodeInjector(firstInjector);\n                if (moduleInjector === null) {\n                    throwError('NodeInjector must have some connection to the module injector tree');\n                }\n                resolutionPath.push(moduleInjector);\n                getInjectorResolutionPathHelper(moduleInjector, resolutionPath);\n            }\n            return resolutionPath;\n        }\n    }\n    else {\n        resolutionPath.push(parent);\n        getInjectorResolutionPathHelper(parent, resolutionPath);\n    }\n    return resolutionPath;\n}\n/**\n * Gets the parent of an injector.\n *\n * This function is not able to make the jump from the Element Injector Tree to the Module\n * injector tree. This is because the \"parent\" (the next step in the reoslution path)\n * of a root NodeInjector is dependent on which NodeInjector ancestor initiated\n * the DI lookup. See getInjectorResolutionPath for a function that can make this jump.\n *\n * In the below diagram:\n * ```ts\n * getInjectorParent(NodeInjectorB)\n *  > NodeInjectorA\n * getInjectorParent(NodeInjectorA) // or getInjectorParent(getInjectorParent(NodeInjectorB))\n *  > null // cannot jump to ModuleInjector tree\n * ```\n *\n * ```\n *                ┌───────┐                ┌───────────────────┐\n *    ┌───────────┤ModuleA├───Injector────►│EnvironmentInjector│\n *    │           └───┬───┘                └───────────────────┘\n *    │               │\n *    │           bootstraps\n *    │               │\n *    │               │\n *    │          ┌────▼─────┐                 ┌─────────────┐\n * declares      │ComponentA├────Injector────►│NodeInjectorA│\n *    │          └────┬─────┘                 └─────▲───────┘\n *    │               │                             │\n *    │            renders                        parent\n *    │               │                             │\n *    │          ┌────▼─────┐                 ┌─────┴───────┐\n *    └─────────►│ComponentB├────Injector────►│NodeInjectorB│\n *               └──────────┘                 └─────────────┘\n *```\n *\n * @param injector an Injector to get the parent of\n * @returns Injector the parent of the given injector\n */\nfunction getInjectorParent(injector) {\n    if (injector instanceof R3Injector) {\n        return injector.parent;\n    }\n    let tNode;\n    let lView;\n    if (injector instanceof NodeInjector) {\n        tNode = getNodeInjectorTNode(injector);\n        lView = getNodeInjectorLView(injector);\n    }\n    else if (injector instanceof NullInjector) {\n        return null;\n    }\n    else {\n        throwError('getInjectorParent only support injectors of type R3Injector, NodeInjector, NullInjector');\n    }\n    const parentLocation = getParentInjectorLocation(tNode, lView);\n    if (hasParentInjector(parentLocation)) {\n        const parentInjectorIndex = getParentInjectorIndex(parentLocation);\n        const parentLView = getParentInjectorView(parentLocation, lView);\n        const parentTView = parentLView[TVIEW];\n        const parentTNode = parentTView.data[parentInjectorIndex + 8 /* NodeInjectorOffset.TNODE */];\n        return new NodeInjector(parentTNode, parentLView);\n    }\n    else {\n        const chainedInjector = lView[INJECTOR$1];\n        // Case where chainedInjector.injector is an OutletInjector and chainedInjector.injector.parent\n        // is a NodeInjector.\n        // todo(aleksanderbodurri): ideally nothing in packages/core should deal\n        // directly with router concerns. Refactor this so that we can make the jump from\n        // NodeInjector -> OutletInjector -> NodeInjector\n        // without explictly relying on types contracts from packages/router\n        const injectorParent = chainedInjector.injector?.parent;\n        if (injectorParent instanceof NodeInjector) {\n            return injectorParent;\n        }\n    }\n    return null;\n}\n/**\n * Gets the module injector of a NodeInjector.\n *\n * @param injector NodeInjector to get module injector of\n * @returns Injector representing module injector of the given NodeInjector\n */\nfunction getModuleInjectorOfNodeInjector(injector) {\n    let lView;\n    if (injector instanceof NodeInjector) {\n        lView = getNodeInjectorLView(injector);\n    }\n    else {\n        throwError('getModuleInjectorOfNodeInjector must be called with a NodeInjector');\n    }\n    const chainedInjector = lView[INJECTOR$1];\n    const moduleInjector = chainedInjector.parentInjector;\n    if (!moduleInjector) {\n        throwError('NodeInjector must have some connection to the module injector tree');\n    }\n    return moduleInjector;\n}\n\n/**\n * This file introduces series of globally accessible debug tools\n * to allow for the Angular debugging story to function.\n *\n * To see this in action run the following command:\n *\n *   bazel run //packages/core/test/bundling/todo:devserver\n *\n *  Then load `localhost:5432` and start using the console tools.\n */\n/**\n * This value reflects the property on the window where the dev\n * tools are patched (window.ng).\n * */\nconst GLOBAL_PUBLISH_EXPANDO_KEY = 'ng';\nlet _published = false;\n/**\n * Publishes a collection of default debug tools onto`window.ng`.\n *\n * These functions are available globally when Angular is in development\n * mode and are automatically stripped away from prod mode is on.\n */\nfunction publishDefaultGlobalUtils$1() {\n    if (!_published) {\n        _published = true;\n        setupFrameworkInjectorProfiler();\n        publishGlobalUtil('ɵgetDependenciesFromInjectable', getDependenciesFromInjectable);\n        publishGlobalUtil('ɵgetInjectorProviders', getInjectorProviders);\n        publishGlobalUtil('ɵgetInjectorResolutionPath', getInjectorResolutionPath);\n        publishGlobalUtil('ɵgetInjectorMetadata', getInjectorMetadata);\n        /**\n         * Warning: this function is *INTERNAL* and should not be relied upon in application's code.\n         * The contract of the function might be changed in any release and/or the function can be\n         * removed completely.\n         */\n        publishGlobalUtil('ɵsetProfiler', setProfiler);\n        publishGlobalUtil('getDirectiveMetadata', getDirectiveMetadata$1);\n        publishGlobalUtil('getComponent', getComponent);\n        publishGlobalUtil('getContext', getContext);\n        publishGlobalUtil('getListeners', getListeners);\n        publishGlobalUtil('getOwningComponent', getOwningComponent);\n        publishGlobalUtil('getHostElement', getHostElement);\n        publishGlobalUtil('getInjector', getInjector);\n        publishGlobalUtil('getRootComponents', getRootComponents);\n        publishGlobalUtil('getDirectives', getDirectives);\n        publishGlobalUtil('applyChanges', applyChanges);\n    }\n}\n/**\n * Publishes the given function to `window.ng` so that it can be\n * used from the browser console when an application is not in production.\n */\nfunction publishGlobalUtil(name, fn) {\n    if (typeof COMPILED === 'undefined' || !COMPILED) {\n        // Note: we can't export `ng` when using closure enhanced optimization as:\n        // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\n        // - we can't declare a closure extern as the namespace `ng` is already used within Google\n        //   for typings for AngularJS (via `goog.provide('ng....')`).\n        const w = _global;\n        ngDevMode && assertDefined(fn, 'function not defined');\n        if (w) {\n            let container = w[GLOBAL_PUBLISH_EXPANDO_KEY];\n            if (!container) {\n                container = w[GLOBAL_PUBLISH_EXPANDO_KEY] = {};\n            }\n            container[name] = fn;\n        }\n    }\n}\n\n/**\n * Internal injection token that can used to access an instance of a Testability class.\n *\n * This token acts as a bridge between the core bootstrap code and the `Testability` class. This is\n * needed to ensure that there are no direct references to the `Testability` class, so it can be\n * tree-shaken away (if not referenced). For the environments/setups when the `Testability` class\n * should be available, this token is used to add a provider that references the `Testability`\n * class. Otherwise, only this token is retained in a bundle, but the `Testability` class is not.\n */\nconst TESTABILITY = new InjectionToken('');\n/**\n * Internal injection token to retrieve Testability getter class instance.\n */\nconst TESTABILITY_GETTER = new InjectionToken('');\n/**\n * The Testability service provides testing hooks that can be accessed from\n * the browser.\n *\n * Angular applications bootstrapped using an NgModule (via `@NgModule.bootstrap` field) will also\n * instantiate Testability by default (in both development and production modes).\n *\n * For applications bootstrapped using the `bootstrapApplication` function, Testability is not\n * included by default. You can include it into your applications by getting the list of necessary\n * providers using the `provideProtractorTestingSupport()` function and adding them into the\n * `options.providers` array. Example:\n *\n * ```typescript\n * import {provideProtractorTestingSupport} from '@angular/platform-browser';\n *\n * await bootstrapApplication(RootComponent, providers: [provideProtractorTestingSupport()]);\n * ```\n *\n * @publicApi\n */\nclass Testability {\n    constructor(_ngZone, registry, testabilityGetter) {\n        this._ngZone = _ngZone;\n        this.registry = registry;\n        this._pendingCount = 0;\n        this._isZoneStable = true;\n        /**\n         * Whether any work was done since the last 'whenStable' callback. This is\n         * useful to detect if this could have potentially destabilized another\n         * component while it is stabilizing.\n         * @internal\n         */\n        this._didWork = false;\n        this._callbacks = [];\n        this.taskTrackingZone = null;\n        // If there was no Testability logic registered in the global scope\n        // before, register the current testability getter as a global one.\n        if (!_testabilityGetter) {\n            setTestabilityGetter(testabilityGetter);\n            testabilityGetter.addToWindow(registry);\n        }\n        this._watchAngularEvents();\n        _ngZone.run(() => {\n            this.taskTrackingZone =\n                typeof Zone == 'undefined' ? null : Zone.current.get('TaskTrackingZone');\n        });\n    }\n    _watchAngularEvents() {\n        this._ngZone.onUnstable.subscribe({\n            next: () => {\n                this._didWork = true;\n                this._isZoneStable = false;\n            }\n        });\n        this._ngZone.runOutsideAngular(() => {\n            this._ngZone.onStable.subscribe({\n                next: () => {\n                    NgZone.assertNotInAngularZone();\n                    queueMicrotask(() => {\n                        this._isZoneStable = true;\n                        this._runCallbacksIfReady();\n                    });\n                }\n            });\n        });\n    }\n    /**\n     * Increases the number of pending request\n     * @deprecated pending requests are now tracked with zones.\n     */\n    increasePendingRequestCount() {\n        this._pendingCount += 1;\n        this._didWork = true;\n        return this._pendingCount;\n    }\n    /**\n     * Decreases the number of pending request\n     * @deprecated pending requests are now tracked with zones\n     */\n    decreasePendingRequestCount() {\n        this._pendingCount -= 1;\n        if (this._pendingCount < 0) {\n            throw new Error('pending async requests below zero');\n        }\n        this._runCallbacksIfReady();\n        return this._pendingCount;\n    }\n    /**\n     * Whether an associated application is stable\n     */\n    isStable() {\n        return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;\n    }\n    _runCallbacksIfReady() {\n        if (this.isStable()) {\n            // Schedules the call backs in a new frame so that it is always async.\n            queueMicrotask(() => {\n                while (this._callbacks.length !== 0) {\n                    let cb = this._callbacks.pop();\n                    clearTimeout(cb.timeoutId);\n                    cb.doneCb(this._didWork);\n                }\n                this._didWork = false;\n            });\n        }\n        else {\n            // Still not stable, send updates.\n            let pending = this.getPendingTasks();\n            this._callbacks = this._callbacks.filter((cb) => {\n                if (cb.updateCb && cb.updateCb(pending)) {\n                    clearTimeout(cb.timeoutId);\n                    return false;\n                }\n                return true;\n            });\n            this._didWork = true;\n        }\n    }\n    getPendingTasks() {\n        if (!this.taskTrackingZone) {\n            return [];\n        }\n        // Copy the tasks data so that we don't leak tasks.\n        return this.taskTrackingZone.macroTasks.map((t) => {\n            return {\n                source: t.source,\n                // From TaskTrackingZone:\n                // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40\n                creationLocation: t.creationLocation,\n                data: t.data\n            };\n        });\n    }\n    addCallback(cb, timeout, updateCb) {\n        let timeoutId = -1;\n        if (timeout && timeout > 0) {\n            timeoutId = setTimeout(() => {\n                this._callbacks = this._callbacks.filter((cb) => cb.timeoutId !== timeoutId);\n                cb(this._didWork, this.getPendingTasks());\n            }, timeout);\n        }\n        this._callbacks.push({ doneCb: cb, timeoutId: timeoutId, updateCb: updateCb });\n    }\n    /**\n     * Wait for the application to be stable with a timeout. If the timeout is reached before that\n     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n     *\n     * @param doneCb The callback to invoke when Angular is stable or the timeout expires\n     *    whichever comes first.\n     * @param timeout Optional. The maximum time to wait for Angular to become stable. If not\n     *    specified, whenStable() will wait forever.\n     * @param updateCb Optional. If specified, this callback will be invoked whenever the set of\n     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n     *    and no further updates will be issued.\n     */\n    whenStable(doneCb, timeout, updateCb) {\n        if (updateCb && !this.taskTrackingZone) {\n            throw new Error('Task tracking zone is required when passing an update callback to ' +\n                'whenStable(). Is \"zone.js/plugins/task-tracking\" loaded?');\n        }\n        // These arguments are 'Function' above to keep the public API simple.\n        this.addCallback(doneCb, timeout, updateCb);\n        this._runCallbacksIfReady();\n    }\n    /**\n     * Get the number of pending requests\n     * @deprecated pending requests are now tracked with zones\n     */\n    getPendingRequestCount() {\n        return this._pendingCount;\n    }\n    /**\n     * Registers an application with a testability hook so that it can be tracked.\n     * @param token token of application, root element\n     *\n     * @internal\n     */\n    registerApplication(token) {\n        this.registry.registerApplication(token, this);\n    }\n    /**\n     * Unregisters an application.\n     * @param token token of application, root element\n     *\n     * @internal\n     */\n    unregisterApplication(token) {\n        this.registry.unregisterApplication(token);\n    }\n    /**\n     * Find providers by name\n     * @param using The root element to search from\n     * @param provider The name of binding variable\n     * @param exactMatch Whether using exactMatch\n     */\n    findProviders(using, provider, exactMatch) {\n        // TODO(juliemr): implement.\n        return [];\n    }\n    static { this.ɵfac = function Testability_Factory(t) { return new (t || Testability)(ɵɵinject(NgZone), ɵɵinject(TestabilityRegistry), ɵɵinject(TESTABILITY_GETTER)); }; }\n    static { this.ɵprov = /*@__PURE__*/ ɵɵdefineInjectable({ token: Testability, factory: Testability.ɵfac }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(Testability, [{\n        type: Injectable\n    }], () => [{ type: NgZone }, { type: TestabilityRegistry }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [TESTABILITY_GETTER]\n            }] }], null); })();\n/**\n * A global registry of {@link Testability} instances for specific elements.\n * @publicApi\n */\nclass TestabilityRegistry {\n    constructor() {\n        /** @internal */\n        this._applications = new Map();\n    }\n    /**\n     * Registers an application with a testability hook so that it can be tracked\n     * @param token token of application, root element\n     * @param testability Testability hook\n     */\n    registerApplication(token, testability) {\n        this._applications.set(token, testability);\n    }\n    /**\n     * Unregisters an application.\n     * @param token token of application, root element\n     */\n    unregisterApplication(token) {\n        this._applications.delete(token);\n    }\n    /**\n     * Unregisters all applications\n     */\n    unregisterAllApplications() {\n        this._applications.clear();\n    }\n    /**\n     * Get a testability hook associated with the application\n     * @param elem root element\n     */\n    getTestability(elem) {\n        return this._applications.get(elem) || null;\n    }\n    /**\n     * Get all registered testabilities\n     */\n    getAllTestabilities() {\n        return Array.from(this._applications.values());\n    }\n    /**\n     * Get all registered applications(root elements)\n     */\n    getAllRootElements() {\n        return Array.from(this._applications.keys());\n    }\n    /**\n     * Find testability of a node in the Tree\n     * @param elem node\n     * @param findInAncestors whether finding testability in ancestors if testability was not found in\n     * current node\n     */\n    findTestabilityInTree(elem, findInAncestors = true) {\n        return _testabilityGetter?.findTestabilityInTree(this, elem, findInAncestors) ?? null;\n    }\n    static { this.ɵfac = function TestabilityRegistry_Factory(t) { return new (t || TestabilityRegistry)(); }; }\n    static { this.ɵprov = /*@__PURE__*/ ɵɵdefineInjectable({ token: TestabilityRegistry, factory: TestabilityRegistry.ɵfac, providedIn: 'platform' }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(TestabilityRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'platform' }]\n    }], null, null); })();\n/**\n * Set the {@link GetTestability} implementation used by the Angular testing framework.\n * @publicApi\n */\nfunction setTestabilityGetter(getter) {\n    _testabilityGetter = getter;\n}\nlet _testabilityGetter;\n\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") that you can use to provide\n * one or more initialization functions.\n *\n * The provided functions are injected at application startup and executed during\n * app initialization. If any of these functions returns a Promise or an Observable, initialization\n * does not complete until the Promise is resolved or the Observable is completed.\n *\n * You can, for example, create a factory function that loads language data\n * or an external configuration, and provide that function to the `APP_INITIALIZER` token.\n * The function is executed during the application bootstrap process,\n * and the needed data is available on startup.\n *\n * @see {@link ApplicationInitStatus}\n *\n * @usageNotes\n *\n * The following example illustrates how to configure a multi-provider using `APP_INITIALIZER` token\n * and a function returning a promise.\n * ### Example with NgModule-based application\n * ```\n *  function initializeApp(): Promise<any> {\n *    return new Promise((resolve, reject) => {\n *      // Do some asynchronous stuff\n *      resolve();\n *    });\n *  }\n *\n *  @NgModule({\n *   imports: [BrowserModule],\n *   declarations: [AppComponent],\n *   bootstrap: [AppComponent],\n *   providers: [{\n *     provide: APP_INITIALIZER,\n *     useFactory: () => initializeApp,\n *     multi: true\n *    }]\n *   })\n *  export class AppModule {}\n * ```\n *\n * ### Example with standalone application\n * ```\n * export function initializeApp(http: HttpClient) {\n *   return (): Promise<any> =>\n *     firstValueFrom(\n *       http\n *         .get(\"https://someUrl.com/api/user\")\n *         .pipe(tap(user => { ... }))\n *     );\n * }\n *\n * bootstrapApplication(App, {\n *   providers: [\n *     provideHttpClient(),\n *     {\n *       provide: APP_INITIALIZER,\n *       useFactory: initializeApp,\n *       multi: true,\n *       deps: [HttpClient],\n *     },\n *   ],\n * });\n\n * ```\n *\n *\n * It's also possible to configure a multi-provider using `APP_INITIALIZER` token and a function\n * returning an observable, see an example below. Note: the `HttpClient` in this example is used for\n * demo purposes to illustrate how the factory function can work with other providers available\n * through DI.\n *\n * ### Example with NgModule-based application\n * ```\n *  function initializeAppFactory(httpClient: HttpClient): () => Observable<any> {\n *   return () => httpClient.get(\"https://someUrl.com/api/user\")\n *     .pipe(\n *        tap(user => { ... })\n *     );\n *  }\n *\n *  @NgModule({\n *    imports: [BrowserModule, HttpClientModule],\n *    declarations: [AppComponent],\n *    bootstrap: [AppComponent],\n *    providers: [{\n *      provide: APP_INITIALIZER,\n *      useFactory: initializeAppFactory,\n *      deps: [HttpClient],\n *      multi: true\n *    }]\n *  })\n *  export class AppModule {}\n * ```\n *\n * ### Example with standalone application\n * ```\n *  function initializeAppFactory(httpClient: HttpClient): () => Observable<any> {\n *   return () => httpClient.get(\"https://someUrl.com/api/user\")\n *     .pipe(\n *        tap(user => { ... })\n *     );\n *  }\n *\n * bootstrapApplication(App, {\n *   providers: [\n *     provideHttpClient(),\n *     {\n *       provide: APP_INITIALIZER,\n *       useFactory: initializeAppFactory,\n *       multi: true,\n *       deps: [HttpClient],\n *     },\n *   ],\n * });\n * ```\n *\n * @publicApi\n */\nconst APP_INITIALIZER = new InjectionToken('Application Initializer');\n/**\n * A class that reflects the state of running {@link APP_INITIALIZER} functions.\n *\n * @publicApi\n */\nclass ApplicationInitStatus {\n    constructor() {\n        this.initialized = false;\n        this.done = false;\n        this.donePromise = new Promise((res, rej) => {\n            this.resolve = res;\n            this.reject = rej;\n        });\n        this.appInits = inject(APP_INITIALIZER, { optional: true }) ?? [];\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && !Array.isArray(this.appInits)) {\n            throw new RuntimeError(-209 /* RuntimeErrorCode.INVALID_MULTI_PROVIDER */, 'Unexpected type of the `APP_INITIALIZER` token value ' +\n                `(expected an array, but got ${typeof this.appInits}). ` +\n                'Please check that the `APP_INITIALIZER` token is configured as a ' +\n                '`multi: true` provider.');\n        }\n    }\n    /** @internal */\n    runInitializers() {\n        if (this.initialized) {\n            return;\n        }\n        const asyncInitPromises = [];\n        for (const appInits of this.appInits) {\n            const initResult = appInits();\n            if (isPromise(initResult)) {\n                asyncInitPromises.push(initResult);\n            }\n            else if (isSubscribable(initResult)) {\n                const observableAsPromise = new Promise((resolve, reject) => {\n                    initResult.subscribe({ complete: resolve, error: reject });\n                });\n                asyncInitPromises.push(observableAsPromise);\n            }\n        }\n        const complete = () => {\n            // @ts-expect-error overwriting a readonly\n            this.done = true;\n            this.resolve();\n        };\n        Promise.all(asyncInitPromises)\n            .then(() => {\n            complete();\n        })\n            .catch(e => {\n            this.reject(e);\n        });\n        if (asyncInitPromises.length === 0) {\n            complete();\n        }\n        this.initialized = true;\n    }\n    static { this.ɵfac = function ApplicationInitStatus_Factory(t) { return new (t || ApplicationInitStatus)(); }; }\n    static { this.ɵprov = /*@__PURE__*/ ɵɵdefineInjectable({ token: ApplicationInitStatus, factory: ApplicationInitStatus.ɵfac, providedIn: 'root' }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(ApplicationInitStatus, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], () => [], null); })();\n\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") that provides a set of callbacks to\n * be called for every component that is bootstrapped.\n *\n * Each callback must take a `ComponentRef` instance and return nothing.\n *\n * `(componentRef: ComponentRef) => void`\n *\n * @publicApi\n */\nconst APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');\nfunction compileNgModuleFactory(injector, options, moduleType) {\n    ngDevMode && assertNgModuleType(moduleType);\n    const moduleFactory = new NgModuleFactory(moduleType);\n    // All of the logic below is irrelevant for AOT-compiled code.\n    if (typeof ngJitMode !== 'undefined' && !ngJitMode) {\n        return Promise.resolve(moduleFactory);\n    }\n    const compilerOptions = injector.get(COMPILER_OPTIONS, []).concat(options);\n    // Configure the compiler to use the provided options. This call may fail when multiple modules\n    // are bootstrapped with incompatible options, as a component can only be compiled according to\n    // a single set of options.\n    setJitOptions({\n        defaultEncapsulation: _lastDefined(compilerOptions.map(opts => opts.defaultEncapsulation)),\n        preserveWhitespaces: _lastDefined(compilerOptions.map(opts => opts.preserveWhitespaces)),\n    });\n    if (isComponentResourceResolutionQueueEmpty()) {\n        return Promise.resolve(moduleFactory);\n    }\n    const compilerProviders = compilerOptions.flatMap((option) => option.providers ?? []);\n    // In case there are no compiler providers, we just return the module factory as\n    // there won't be any resource loader. This can happen with Ivy, because AOT compiled\n    // modules can be still passed through \"bootstrapModule\". In that case we shouldn't\n    // unnecessarily require the JIT compiler.\n    if (compilerProviders.length === 0) {\n        return Promise.resolve(moduleFactory);\n    }\n    const compiler = getCompilerFacade({\n        usage: 0 /* JitCompilerUsage.Decorator */,\n        kind: 'NgModule',\n        type: moduleType,\n    });\n    const compilerInjector = Injector.create({ providers: compilerProviders });\n    const resourceLoader = compilerInjector.get(compiler.ResourceLoader);\n    // The resource loader can also return a string while the \"resolveComponentResources\"\n    // always expects a promise. Therefore we need to wrap the returned value in a promise.\n    return resolveComponentResources(url => Promise.resolve(resourceLoader.get(url)))\n        .then(() => moduleFactory);\n}\nfunction publishDefaultGlobalUtils() {\n    ngDevMode && publishDefaultGlobalUtils$1();\n}\n/**\n * Sets the error for an invalid write to a signal to be an Angular `RuntimeError`.\n */\nfunction publishSignalConfiguration() {\n    setThrowInvalidWriteToSignalError$1(() => {\n        throw new RuntimeError(600 /* RuntimeErrorCode.SIGNAL_WRITE_FROM_ILLEGAL_CONTEXT */, ngDevMode &&\n            'Writing to signals is not allowed in a `computed` or an `effect` by default. ' +\n                'Use `allowSignalWrites` in the `CreateEffectOptions` to enable this inside effects.');\n    });\n}\nfunction isBoundToModule(cf) {\n    return cf.isBoundToModule;\n}\n/**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * @deprecated\n * @publicApi\n */\nclass NgProbeToken {\n    constructor(name, token) {\n        this.name = name;\n        this.token = token;\n    }\n}\nfunction _callAndReportToErrorHandler(errorHandler, ngZone, callback) {\n    try {\n        const result = callback();\n        if (isPromise(result)) {\n            return result.catch((e) => {\n                ngZone.runOutsideAngular(() => errorHandler.handleError(e));\n                // rethrow as the exception handler might not do it\n                throw e;\n            });\n        }\n        return result;\n    }\n    catch (e) {\n        ngZone.runOutsideAngular(() => errorHandler.handleError(e));\n        // rethrow as the exception handler might not do it\n        throw e;\n    }\n}\nfunction optionsReducer(dst, objs) {\n    if (Array.isArray(objs)) {\n        return objs.reduce(optionsReducer, dst);\n    }\n    return { ...dst, ...objs };\n}\n/**\n * A reference to an Angular application running on a page.\n *\n * @usageNotes\n * {@a is-stable-examples}\n * ### isStable examples and caveats\n *\n * Note two important points about `isStable`, demonstrated in the examples below:\n * - the application will never be stable if you start any kind\n * of recurrent asynchronous task when the application starts\n * (for example for a polling process, started with a `setInterval`, a `setTimeout`\n * or using RxJS operators like `interval`);\n * - the `isStable` Observable runs outside of the Angular zone.\n *\n * Let's imagine that you start a recurrent task\n * (here incrementing a counter, using RxJS `interval`),\n * and at the same time subscribe to `isStable`.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *      filter(stable => stable)\n *   ).subscribe(() => console.log('App is stable now');\n *   interval(1000).subscribe(counter => console.log(counter));\n * }\n * ```\n * In this example, `isStable` will never emit `true`,\n * and the trace \"App is stable now\" will never get logged.\n *\n * If you want to execute something when the app is stable,\n * you have to wait for the application to be stable\n * before starting your polling process.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     tap(stable => console.log('App is stable now')),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => console.log(counter));\n * }\n * ```\n * In this example, the trace \"App is stable now\" will be logged\n * and then the counter starts incrementing every second.\n *\n * Note also that this Observable runs outside of the Angular zone,\n * which means that the code in the subscription\n * to this Observable will not trigger the change detection.\n *\n * Let's imagine that instead of logging the counter value,\n * you update a field of your component\n * and display it in its template.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => this.value = counter);\n * }\n * ```\n * As the `isStable` Observable runs outside the zone,\n * the `value` field will be updated properly,\n * but the template will not be refreshed!\n *\n * You'll have to manually trigger the change detection to update the template.\n *\n * ```\n * constructor(appRef: ApplicationRef, cd: ChangeDetectorRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => {\n *     this.value = counter;\n *     cd.detectChanges();\n *   });\n * }\n * ```\n *\n * Or make the subscription callback run inside the zone.\n *\n * ```\n * constructor(appRef: ApplicationRef, zone: NgZone) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => zone.run(() => this.value = counter));\n * }\n * ```\n *\n * @publicApi\n */\nclass ApplicationRef {\n    constructor() {\n        /** @internal */\n        this._bootstrapListeners = [];\n        this._runningTick = false;\n        this._destroyed = false;\n        this._destroyListeners = [];\n        /** @internal */\n        this._views = [];\n        this.internalErrorHandler = inject(INTERNAL_APPLICATION_ERROR_HANDLER);\n        /**\n         * Get a list of component types registered to this application.\n         * This list is populated even before the component is created.\n         */\n        this.componentTypes = [];\n        /**\n         * Get a list of components registered to this application.\n         */\n        this.components = [];\n        /**\n         * Returns an Observable that indicates when the application is stable or unstable.\n         */\n        this.isStable = inject(PendingTasks).hasPendingTasks.pipe(map(pending => !pending));\n        this._injector = inject(EnvironmentInjector);\n    }\n    /**\n     * Indicates whether this instance was destroyed.\n     */\n    get destroyed() {\n        return this._destroyed;\n    }\n    /**\n     * The `EnvironmentInjector` used to create this application.\n     */\n    get injector() {\n        return this._injector;\n    }\n    /**\n     * Bootstrap a component onto the element identified by its selector or, optionally, to a\n     * specified element.\n     *\n     * @usageNotes\n     * ### Bootstrap process\n     *\n     * When bootstrapping a component, Angular mounts it onto a target DOM element\n     * and kicks off automatic change detection. The target DOM element can be\n     * provided using the `rootSelectorOrNode` argument.\n     *\n     * If the target DOM element is not provided, Angular tries to find one on a page\n     * using the `selector` of the component that is being bootstrapped\n     * (first matched element is used).\n     *\n     * ### Example\n     *\n     * Generally, we define the component to bootstrap in the `bootstrap` array of `NgModule`,\n     * but it requires us to know the component while writing the application code.\n     *\n     * Imagine a situation where we have to wait for an API call to decide about the component to\n     * bootstrap. We can use the `ngDoBootstrap` hook of the `NgModule` and call this method to\n     * dynamically bootstrap a component.\n     *\n     * {@example core/ts/platform/platform.ts region='componentSelector'}\n     *\n     * Optionally, a component can be mounted onto a DOM element that does not match the\n     * selector of the bootstrapped component.\n     *\n     * In the following example, we are providing a CSS selector to match the target element.\n     *\n     * {@example core/ts/platform/platform.ts region='cssSelector'}\n     *\n     * While in this example, we are providing reference to a DOM node.\n     *\n     * {@example core/ts/platform/platform.ts region='domNode'}\n     */\n    bootstrap(componentOrFactory, rootSelectorOrNode) {\n        (typeof ngDevMode === 'undefined' || ngDevMode) && this.warnIfDestroyed();\n        const isComponentFactory = componentOrFactory instanceof ComponentFactory$1;\n        const initStatus = this._injector.get(ApplicationInitStatus);\n        if (!initStatus.done) {\n            const standalone = !isComponentFactory && isStandalone(componentOrFactory);\n            const errorMessage = 'Cannot bootstrap as there are still asynchronous initializers running.' +\n                (standalone ? '' :\n                    ' Bootstrap components in the `ngDoBootstrap` method of the root module.');\n            throw new RuntimeError(405 /* RuntimeErrorCode.ASYNC_INITIALIZERS_STILL_RUNNING */, (typeof ngDevMode === 'undefined' || ngDevMode) && errorMessage);\n        }\n        let componentFactory;\n        if (isComponentFactory) {\n            componentFactory = componentOrFactory;\n        }\n        else {\n            const resolver = this._injector.get(ComponentFactoryResolver$1);\n            componentFactory = resolver.resolveComponentFactory(componentOrFactory);\n        }\n        this.componentTypes.push(componentFactory.componentType);\n        // Create a factory associated with the current module if it's not bound to some other\n        const ngModule = isBoundToModule(componentFactory) ? undefined : this._injector.get(NgModuleRef$1);\n        const selectorOrNode = rootSelectorOrNode || componentFactory.selector;\n        const compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);\n        const nativeElement = compRef.location.nativeElement;\n        const testability = compRef.injector.get(TESTABILITY, null);\n        testability?.registerApplication(nativeElement);\n        compRef.onDestroy(() => {\n            this.detachView(compRef.hostView);\n            remove(this.components, compRef);\n            testability?.unregisterApplication(nativeElement);\n        });\n        this._loadComponent(compRef);\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const _console = this._injector.get(Console);\n            _console.log(`Angular is running in development mode.`);\n        }\n        return compRef;\n    }\n    /**\n     * Invoke this method to explicitly process change detection and its side-effects.\n     *\n     * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n     * further changes are detected. If additional changes are picked up during this second cycle,\n     * bindings in the app have side-effects that cannot be resolved in a single change detection\n     * pass.\n     * In this case, Angular throws an error, since an Angular application can only have one change\n     * detection pass during which all change detection must complete.\n     */\n    tick() {\n        (typeof ngDevMode === 'undefined' || ngDevMode) && this.warnIfDestroyed();\n        if (this._runningTick) {\n            throw new RuntimeError(101 /* RuntimeErrorCode.RECURSIVE_APPLICATION_REF_TICK */, ngDevMode && 'ApplicationRef.tick is called recursively');\n        }\n        try {\n            this._runningTick = true;\n            for (let view of this._views) {\n                view.detectChanges();\n            }\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                for (let view of this._views) {\n                    view.checkNoChanges();\n                }\n            }\n        }\n        catch (e) {\n            // Attention: Don't rethrow as it could cancel subscriptions to Observables!\n            this.internalErrorHandler(e);\n        }\n        finally {\n            this._runningTick = false;\n        }\n    }\n    /**\n     * Attaches a view so that it will be dirty checked.\n     * The view will be automatically detached when it is destroyed.\n     * This will throw if the view is already attached to a ViewContainer.\n     */\n    attachView(viewRef) {\n        (typeof ngDevMode === 'undefined' || ngDevMode) && this.warnIfDestroyed();\n        const view = viewRef;\n        this._views.push(view);\n        view.attachToAppRef(this);\n    }\n    /**\n     * Detaches a view from dirty checking again.\n     */\n    detachView(viewRef) {\n        (typeof ngDevMode === 'undefined' || ngDevMode) && this.warnIfDestroyed();\n        const view = viewRef;\n        remove(this._views, view);\n        view.detachFromAppRef();\n    }\n    _loadComponent(componentRef) {\n        this.attachView(componentRef.hostView);\n        this.tick();\n        this.components.push(componentRef);\n        // Get the listeners lazily to prevent DI cycles.\n        const listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []);\n        if (ngDevMode && !Array.isArray(listeners)) {\n            throw new RuntimeError(-209 /* RuntimeErrorCode.INVALID_MULTI_PROVIDER */, 'Unexpected type of the `APP_BOOTSTRAP_LISTENER` token value ' +\n                `(expected an array, but got ${typeof listeners}). ` +\n                'Please check that the `APP_BOOTSTRAP_LISTENER` token is configured as a ' +\n                '`multi: true` provider.');\n        }\n        [...this._bootstrapListeners, ...listeners].forEach((listener) => listener(componentRef));\n    }\n    /** @internal */\n    ngOnDestroy() {\n        if (this._destroyed)\n            return;\n        try {\n            // Call all the lifecycle hooks.\n            this._destroyListeners.forEach(listener => listener());\n            // Destroy all registered views.\n            this._views.slice().forEach((view) => view.destroy());\n        }\n        finally {\n            // Indicate that this instance is destroyed.\n            this._destroyed = true;\n            // Release all references.\n            this._views = [];\n            this._bootstrapListeners = [];\n            this._destroyListeners = [];\n        }\n    }\n    /**\n     * Registers a listener to be called when an instance is destroyed.\n     *\n     * @param callback A callback function to add as a listener.\n     * @returns A function which unregisters a listener.\n     */\n    onDestroy(callback) {\n        (typeof ngDevMode === 'undefined' || ngDevMode) && this.warnIfDestroyed();\n        this._destroyListeners.push(callback);\n        return () => remove(this._destroyListeners, callback);\n    }\n    /**\n     * Destroys an Angular application represented by this `ApplicationRef`. Calling this function\n     * will destroy the associated environment injectors as well as all the bootstrapped components\n     * with their views.\n     */\n    destroy() {\n        if (this._destroyed) {\n            throw new RuntimeError(406 /* RuntimeErrorCode.APPLICATION_REF_ALREADY_DESTROYED */, ngDevMode && 'This instance of the `ApplicationRef` has already been destroyed.');\n        }\n        const injector = this._injector;\n        // Check that this injector instance supports destroy operation.\n        if (injector.destroy && !injector.destroyed) {\n            // Destroying an underlying injector will trigger the `ngOnDestroy` lifecycle\n            // hook, which invokes the remaining cleanup actions.\n            injector.destroy();\n        }\n    }\n    /**\n     * Returns the number of attached views.\n     */\n    get viewCount() {\n        return this._views.length;\n    }\n    warnIfDestroyed() {\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && this._destroyed) {\n            console.warn(formatRuntimeError(406 /* RuntimeErrorCode.APPLICATION_REF_ALREADY_DESTROYED */, 'This instance of the `ApplicationRef` has already been destroyed.'));\n        }\n    }\n    static { this.ɵfac = function ApplicationRef_Factory(t) { return new (t || ApplicationRef)(); }; }\n    static { this.ɵprov = /*@__PURE__*/ ɵɵdefineInjectable({ token: ApplicationRef, factory: ApplicationRef.ɵfac, providedIn: 'root' }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(ApplicationRef, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], null, null); })();\nfunction remove(list, el) {\n    const index = list.indexOf(el);\n    if (index > -1) {\n        list.splice(index, 1);\n    }\n}\nfunction _lastDefined(args) {\n    for (let i = args.length - 1; i >= 0; i--) {\n        if (args[i] !== undefined) {\n            return args[i];\n        }\n    }\n    return undefined;\n}\nlet whenStableStore;\n/**\n * Returns a Promise that resolves when the application becomes stable after this method is called\n * the first time.\n */\nfunction whenStable(applicationRef) {\n    whenStableStore ??= new WeakMap();\n    const cachedWhenStable = whenStableStore.get(applicationRef);\n    if (cachedWhenStable) {\n        return cachedWhenStable;\n    }\n    const whenStablePromise = applicationRef.isStable.pipe(first((isStable) => isStable)).toPromise().then(() => void 0);\n    whenStableStore.set(applicationRef, whenStablePromise);\n    // Be a good citizen and clean the store `onDestroy` even though we are using `WeakMap`.\n    applicationRef.onDestroy(() => whenStableStore?.delete(applicationRef));\n    return whenStablePromise;\n}\n\nclass NgZoneChangeDetectionScheduler {\n    constructor() {\n        this.zone = inject(NgZone);\n        this.applicationRef = inject(ApplicationRef);\n    }\n    initialize() {\n        if (this._onMicrotaskEmptySubscription) {\n            return;\n        }\n        this._onMicrotaskEmptySubscription = this.zone.onMicrotaskEmpty.subscribe({\n            next: () => {\n                this.zone.run(() => {\n                    this.applicationRef.tick();\n                });\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._onMicrotaskEmptySubscription?.unsubscribe();\n    }\n    static { this.ɵfac = function NgZoneChangeDetectionScheduler_Factory(t) { return new (t || NgZoneChangeDetectionScheduler)(); }; }\n    static { this.ɵprov = /*@__PURE__*/ ɵɵdefineInjectable({ token: NgZoneChangeDetectionScheduler, factory: NgZoneChangeDetectionScheduler.ɵfac, providedIn: 'root' }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(NgZoneChangeDetectionScheduler, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], null, null); })();\n/**\n * Internal token used to verify that `provideZoneChangeDetection` is not used\n * with the bootstrapModule API.\n */\nconst PROVIDED_NG_ZONE = new InjectionToken((typeof ngDevMode === 'undefined' || ngDevMode) ? 'provideZoneChangeDetection token' : '');\nfunction internalProvideZoneChangeDetection(ngZoneFactory) {\n    return [\n        { provide: NgZone, useFactory: ngZoneFactory },\n        {\n            provide: ENVIRONMENT_INITIALIZER,\n            multi: true,\n            useFactory: () => {\n                const ngZoneChangeDetectionScheduler = inject(NgZoneChangeDetectionScheduler, { optional: true });\n                if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n                    ngZoneChangeDetectionScheduler === null) {\n                    throw new RuntimeError(402 /* RuntimeErrorCode.MISSING_REQUIRED_INJECTABLE_IN_BOOTSTRAP */, `A required Injectable was not found in the dependency injection tree. ` +\n                        'If you are bootstrapping an NgModule, make sure that the `BrowserModule` is imported.');\n                }\n                return () => ngZoneChangeDetectionScheduler.initialize();\n            },\n        },\n        {\n            provide: ENVIRONMENT_INITIALIZER,\n            multi: true,\n            useFactory: () => {\n                const service = inject(ZoneStablePendingTask);\n                return () => {\n                    service.initialize();\n                };\n            }\n        },\n        { provide: INTERNAL_APPLICATION_ERROR_HANDLER, useFactory: ngZoneApplicationErrorHandlerFactory },\n    ];\n}\nfunction ngZoneApplicationErrorHandlerFactory() {\n    const zone = inject(NgZone);\n    const userErrorHandler = inject(ErrorHandler);\n    return (e) => zone.runOutsideAngular(() => userErrorHandler.handleError(e));\n}\n/**\n * Provides `NgZone`-based change detection for the application bootstrapped using\n * `bootstrapApplication`.\n *\n * `NgZone` is already provided in applications by default. This provider allows you to configure\n * options like `eventCoalescing` in the `NgZone`.\n * This provider is not available for `platformBrowser().bootstrapModule`, which uses\n * `BootstrapOptions` instead.\n *\n * @usageNotes\n * ```typescript\n * bootstrapApplication(MyApp, {providers: [\n *   provideZoneChangeDetection({eventCoalescing: true}),\n * ]});\n * ```\n *\n * @publicApi\n * @see {@link bootstrapApplication}\n * @see {@link NgZoneOptions}\n */\nfunction provideZoneChangeDetection(options) {\n    const zoneProviders = internalProvideZoneChangeDetection(() => new NgZone(getNgZoneOptions(options)));\n    return makeEnvironmentProviders([\n        (typeof ngDevMode === 'undefined' || ngDevMode) ? { provide: PROVIDED_NG_ZONE, useValue: true } :\n            [],\n        zoneProviders,\n    ]);\n}\n// Transforms a set of `BootstrapOptions` (supported by the NgModule-based bootstrap APIs) ->\n// `NgZoneOptions` that are recognized by the NgZone constructor. Passing no options will result in\n// a set of default options returned.\nfunction getNgZoneOptions(options) {\n    return {\n        enableLongStackTrace: typeof ngDevMode === 'undefined' ? false : !!ngDevMode,\n        shouldCoalesceEventChangeDetection: options?.eventCoalescing ?? false,\n        shouldCoalesceRunChangeDetection: options?.runCoalescing ?? false,\n    };\n}\nclass ZoneStablePendingTask {\n    constructor() {\n        this.subscription = new Subscription();\n        this.initialized = false;\n        this.zone = inject(NgZone);\n        this.pendingTasks = inject(PendingTasks);\n    }\n    initialize() {\n        if (this.initialized) {\n            return;\n        }\n        this.initialized = true;\n        let task = null;\n        if (!this.zone.isStable && !this.zone.hasPendingMacrotasks && !this.zone.hasPendingMicrotasks) {\n            task = this.pendingTasks.add();\n        }\n        this.zone.runOutsideAngular(() => {\n            this.subscription.add(this.zone.onStable.subscribe(() => {\n                NgZone.assertNotInAngularZone();\n                // Check whether there are no pending macro/micro tasks in the next tick\n                // to allow for NgZone to update the state.\n                queueMicrotask(() => {\n                    if (task !== null && !this.zone.hasPendingMacrotasks && !this.zone.hasPendingMicrotasks) {\n                        this.pendingTasks.remove(task);\n                        task = null;\n                    }\n                });\n            }));\n        });\n        this.subscription.add(this.zone.onUnstable.subscribe(() => {\n            NgZone.assertInAngularZone();\n            task ??= this.pendingTasks.add();\n        }));\n    }\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n    static { this.ɵfac = function ZoneStablePendingTask_Factory(t) { return new (t || ZoneStablePendingTask)(); }; }\n    static { this.ɵprov = /*@__PURE__*/ ɵɵdefineInjectable({ token: ZoneStablePendingTask, factory: ZoneStablePendingTask.ɵfac, providedIn: 'root' }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(ZoneStablePendingTask, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], null, null); })();\n\n/**\n * Work out the locale from the potential global properties.\n *\n * * Closure Compiler: use `goog.LOCALE`.\n * * Ivy enabled: use `$localize.locale`\n */\nfunction getGlobalLocale() {\n    if (typeof ngI18nClosureMode !== 'undefined' && ngI18nClosureMode &&\n        typeof goog !== 'undefined' && goog.LOCALE !== 'en') {\n        // * The default `goog.LOCALE` value is `en`, while Angular used `en-US`.\n        // * In order to preserve backwards compatibility, we use Angular default value over\n        //   Closure Compiler's one.\n        return goog.LOCALE;\n    }\n    else {\n        // KEEP `typeof $localize !== 'undefined' && $localize.locale` IN SYNC WITH THE LOCALIZE\n        // COMPILE-TIME INLINER.\n        //\n        // * During compile time inlining of translations the expression will be replaced\n        //   with a string literal that is the current locale. Other forms of this expression are not\n        //   guaranteed to be replaced.\n        //\n        // * During runtime translation evaluation, the developer is required to set `$localize.locale`\n        //   if required, or just to provide their own `LOCALE_ID` provider.\n        return (typeof $localize !== 'undefined' && $localize.locale) || DEFAULT_LOCALE_ID;\n    }\n}\n/**\n * Provide this token to set the locale of your application.\n * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\n * DecimalPipe and PercentPipe) and by ICU expressions.\n *\n * See the [i18n guide](guide/i18n-common-locale-id) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { LOCALE_ID } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\n * });\n * ```\n *\n * @publicApi\n */\nconst LOCALE_ID = new InjectionToken('LocaleId', {\n    providedIn: 'root',\n    factory: () => inject(LOCALE_ID, InjectFlags.Optional | InjectFlags.SkipSelf) || getGlobalLocale(),\n});\n/**\n * Provide this token to set the default currency code your application uses for\n * CurrencyPipe when there is no currency code passed into it. This is only used by\n * CurrencyPipe and has no relation to locale currency. Defaults to USD if not configured.\n *\n * See the [i18n guide](guide/i18n-common-locale-id) for more information.\n *\n * <div class=\"alert is-helpful\">\n *\n * **Deprecation notice:**\n *\n * The default currency code is currently always `USD` but this is deprecated from v9.\n *\n * **In v10 the default currency code will be taken from the current locale.**\n *\n * If you need the previous behavior then set it by creating a `DEFAULT_CURRENCY_CODE` provider in\n * your application `NgModule`:\n *\n * ```ts\n * {provide: DEFAULT_CURRENCY_CODE, useValue: 'USD'}\n * ```\n *\n * </div>\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: DEFAULT_CURRENCY_CODE, useValue: 'EUR' }]\n * });\n * ```\n *\n * @publicApi\n */\nconst DEFAULT_CURRENCY_CODE = new InjectionToken('DefaultCurrencyCode', {\n    providedIn: 'root',\n    factory: () => USD_CURRENCY_CODE,\n});\n/**\n * Use this token at bootstrap to provide the content of your translation file (`xtb`,\n * `xlf` or `xlf2`) when you want to translate your application in another language.\n *\n * See the [i18n guide](guide/i18n-common-merge) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * // content of your translation file\n * const translations = '....';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS, useValue: translations }]\n * });\n * ```\n *\n * @publicApi\n */\nconst TRANSLATIONS = new InjectionToken('Translations');\n/**\n * Provide this token at bootstrap to set the format of your {@link TRANSLATIONS}: `xtb`,\n * `xlf` or `xlf2`.\n *\n * See the [i18n guide](guide/i18n-common-merge) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS_FORMAT } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\n * });\n * ```\n *\n * @publicApi\n */\nconst TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');\n/**\n * Use this enum at bootstrap as an option of `bootstrapModule` to define the strategy\n * that the compiler should use in case of missing translations:\n * - Error: throw if you have missing translations.\n * - Warning (default): show a warning in the console and/or shell.\n * - Ignore: do nothing.\n *\n * See the [i18n guide](guide/i18n-common-merge#report-missing-translations) for more information.\n *\n * @usageNotes\n * ### Example\n * ```typescript\n * import { MissingTranslationStrategy } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   missingTranslation: MissingTranslationStrategy.Error\n * });\n * ```\n *\n * @publicApi\n */\nvar MissingTranslationStrategy;\n(function (MissingTranslationStrategy) {\n    MissingTranslationStrategy[MissingTranslationStrategy[\"Error\"] = 0] = \"Error\";\n    MissingTranslationStrategy[MissingTranslationStrategy[\"Warning\"] = 1] = \"Warning\";\n    MissingTranslationStrategy[MissingTranslationStrategy[\"Ignore\"] = 2] = \"Ignore\";\n})(MissingTranslationStrategy || (MissingTranslationStrategy = {}));\n\n/**\n * Internal token that allows to register extra callbacks that should be invoked during the\n * `PlatformRef.destroy` operation. This token is needed to avoid a direct reference to the\n * `PlatformRef` class (i.e. register the callback via `PlatformRef.onDestroy`), thus making the\n * entire class tree-shakeable.\n */\nconst PLATFORM_DESTROY_LISTENERS = new InjectionToken('PlatformDestroyListeners');\n/**\n * The Angular platform is the entry point for Angular on a web page.\n * Each page has exactly one platform. Services (such as reflection) which are common\n * to every Angular application running on the page are bound in its scope.\n * A page's platform is initialized implicitly when a platform is created using a platform\n * factory such as `PlatformBrowser`, or explicitly by calling the `createPlatform()` function.\n *\n * @publicApi\n */\nclass PlatformRef {\n    /** @internal */\n    constructor(_injector) {\n        this._injector = _injector;\n        this._modules = [];\n        this._destroyListeners = [];\n        this._destroyed = false;\n    }\n    /**\n     * Creates an instance of an `@NgModule` for the given platform.\n     *\n     * @deprecated Passing NgModule factories as the `PlatformRef.bootstrapModuleFactory` function\n     *     argument is deprecated. Use the `PlatformRef.bootstrapModule` API instead.\n     */\n    bootstrapModuleFactory(moduleFactory, options) {\n        // Note: We need to create the NgZone _before_ we instantiate the module,\n        // as instantiating the module creates some providers eagerly.\n        // So we create a mini parent injector that just contains the new NgZone and\n        // pass that as parent to the NgModuleFactory.\n        const ngZone = getNgZone(options?.ngZone, getNgZoneOptions({\n            eventCoalescing: options?.ngZoneEventCoalescing,\n            runCoalescing: options?.ngZoneRunCoalescing\n        }));\n        // Note: Create ngZoneInjector within ngZone.run so that all of the instantiated services are\n        // created within the Angular zone\n        // Do not try to replace ngZone.run with ApplicationRef#run because ApplicationRef would then be\n        // created outside of the Angular zone.\n        return ngZone.run(() => {\n            const moduleRef = createNgModuleRefWithProviders(moduleFactory.moduleType, this.injector, internalProvideZoneChangeDetection(() => ngZone));\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n                moduleRef.injector.get(PROVIDED_NG_ZONE, null) !== null) {\n                throw new RuntimeError(207 /* RuntimeErrorCode.PROVIDER_IN_WRONG_CONTEXT */, '`bootstrapModule` does not support `provideZoneChangeDetection`. Use `BootstrapOptions` instead.');\n            }\n            const exceptionHandler = moduleRef.injector.get(ErrorHandler, null);\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) && exceptionHandler === null) {\n                throw new RuntimeError(402 /* RuntimeErrorCode.MISSING_REQUIRED_INJECTABLE_IN_BOOTSTRAP */, 'No ErrorHandler. Is platform module (BrowserModule) included?');\n            }\n            ngZone.runOutsideAngular(() => {\n                const subscription = ngZone.onError.subscribe({\n                    next: (error) => {\n                        exceptionHandler.handleError(error);\n                    }\n                });\n                moduleRef.onDestroy(() => {\n                    remove(this._modules, moduleRef);\n                    subscription.unsubscribe();\n                });\n            });\n            return _callAndReportToErrorHandler(exceptionHandler, ngZone, () => {\n                const initStatus = moduleRef.injector.get(ApplicationInitStatus);\n                initStatus.runInitializers();\n                return initStatus.donePromise.then(() => {\n                    // If the `LOCALE_ID` provider is defined at bootstrap then we set the value for ivy\n                    const localeId = moduleRef.injector.get(LOCALE_ID, DEFAULT_LOCALE_ID);\n                    setLocaleId(localeId || DEFAULT_LOCALE_ID);\n                    this._moduleDoBootstrap(moduleRef);\n                    return moduleRef;\n                });\n            });\n        });\n    }\n    /**\n     * Creates an instance of an `@NgModule` for a given platform.\n     *\n     * @usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * @NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n     * ```\n     *\n     */\n    bootstrapModule(moduleType, compilerOptions = []) {\n        const options = optionsReducer({}, compilerOptions);\n        return compileNgModuleFactory(this.injector, options, moduleType)\n            .then(moduleFactory => this.bootstrapModuleFactory(moduleFactory, options));\n    }\n    _moduleDoBootstrap(moduleRef) {\n        const appRef = moduleRef.injector.get(ApplicationRef);\n        if (moduleRef._bootstrapComponents.length > 0) {\n            moduleRef._bootstrapComponents.forEach(f => appRef.bootstrap(f));\n        }\n        else if (moduleRef.instance.ngDoBootstrap) {\n            moduleRef.instance.ngDoBootstrap(appRef);\n        }\n        else {\n            throw new RuntimeError(-403 /* RuntimeErrorCode.BOOTSTRAP_COMPONENTS_NOT_FOUND */, ngDevMode &&\n                `The module ${stringify(moduleRef.instance.constructor)} was bootstrapped, ` +\n                    `but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ` +\n                    `Please define one of these.`);\n        }\n        this._modules.push(moduleRef);\n    }\n    /**\n     * Registers a listener to be called when the platform is destroyed.\n     */\n    onDestroy(callback) {\n        this._destroyListeners.push(callback);\n    }\n    /**\n     * Retrieves the platform {@link Injector}, which is the parent injector for\n     * every Angular application on the page and provides singleton providers.\n     */\n    get injector() {\n        return this._injector;\n    }\n    /**\n     * Destroys the current Angular platform and all Angular applications on the page.\n     * Destroys all modules and listeners registered with the platform.\n     */\n    destroy() {\n        if (this._destroyed) {\n            throw new RuntimeError(404 /* RuntimeErrorCode.PLATFORM_ALREADY_DESTROYED */, ngDevMode && 'The platform has already been destroyed!');\n        }\n        this._modules.slice().forEach(module => module.destroy());\n        this._destroyListeners.forEach(listener => listener());\n        const destroyListeners = this._injector.get(PLATFORM_DESTROY_LISTENERS, null);\n        if (destroyListeners) {\n            destroyListeners.forEach(listener => listener());\n            destroyListeners.clear();\n        }\n        this._destroyed = true;\n    }\n    /**\n     * Indicates whether this instance was destroyed.\n     */\n    get destroyed() {\n        return this._destroyed;\n    }\n    static { this.ɵfac = function PlatformRef_Factory(t) { return new (t || PlatformRef)(ɵɵinject(Injector)); }; }\n    static { this.ɵprov = /*@__PURE__*/ ɵɵdefineInjectable({ token: PlatformRef, factory: PlatformRef.ɵfac, providedIn: 'platform' }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(PlatformRef, [{\n        type: Injectable,\n        args: [{ providedIn: 'platform' }]\n    }], () => [{ type: Injector }], null); })();\n\nlet _platformInjector = null;\n/**\n * Internal token to indicate whether having multiple bootstrapped platform should be allowed (only\n * one bootstrapped platform is allowed by default). This token helps to support SSR scenarios.\n */\nconst ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');\n/**\n * Creates a platform.\n * Platforms must be created on launch using this function.\n *\n * @publicApi\n */\nfunction createPlatform(injector) {\n    if (_platformInjector && !_platformInjector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n        throw new RuntimeError(400 /* RuntimeErrorCode.MULTIPLE_PLATFORMS */, ngDevMode &&\n            'There can be only one platform. Destroy the previous one to create a new one.');\n    }\n    publishDefaultGlobalUtils();\n    publishSignalConfiguration();\n    _platformInjector = injector;\n    const platform = injector.get(PlatformRef);\n    runPlatformInitializers(injector);\n    return platform;\n}\n/**\n * Creates a factory for a platform. Can be used to provide or override `Providers` specific to\n * your application's runtime needs, such as `PLATFORM_INITIALIZER` and `PLATFORM_ID`.\n * @param parentPlatformFactory Another platform factory to modify. Allows you to compose factories\n * to build up configurations that might be required by different libraries or parts of the\n * application.\n * @param name Identifies the new platform factory.\n * @param providers A set of dependency providers for platforms created with the new factory.\n *\n * @publicApi\n */\nfunction createPlatformFactory(parentPlatformFactory, name, providers = []) {\n    const desc = `Platform: ${name}`;\n    const marker = new InjectionToken(desc);\n    return (extraProviders = []) => {\n        let platform = getPlatform();\n        if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n            const platformProviders = [...providers, ...extraProviders, { provide: marker, useValue: true }];\n            if (parentPlatformFactory) {\n                parentPlatformFactory(platformProviders);\n            }\n            else {\n                createPlatform(createPlatformInjector(platformProviders, desc));\n            }\n        }\n        return assertPlatform(marker);\n    };\n}\n/**\n * Helper function to create an instance of a platform injector (that maintains the 'platform'\n * scope).\n */\nfunction createPlatformInjector(providers = [], name) {\n    return Injector.create({\n        name,\n        providers: [\n            { provide: INJECTOR_SCOPE, useValue: 'platform' },\n            { provide: PLATFORM_DESTROY_LISTENERS, useValue: new Set([() => _platformInjector = null]) },\n            ...providers\n        ],\n    });\n}\n/**\n * Checks that there is currently a platform that contains the given token as a provider.\n *\n * @publicApi\n */\nfunction assertPlatform(requiredToken) {\n    const platform = getPlatform();\n    if (!platform) {\n        throw new RuntimeError(401 /* RuntimeErrorCode.PLATFORM_NOT_FOUND */, ngDevMode && 'No platform exists!');\n    }\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n        !platform.injector.get(requiredToken, null)) {\n        throw new RuntimeError(400 /* RuntimeErrorCode.MULTIPLE_PLATFORMS */, 'A platform with a different configuration has been created. Please destroy it first.');\n    }\n    return platform;\n}\n/**\n * Returns the current platform.\n *\n * @publicApi\n */\nfunction getPlatform() {\n    return _platformInjector?.get(PlatformRef) ?? null;\n}\n/**\n * Destroys the current Angular platform and all Angular applications on the page.\n * Destroys all modules and listeners registered with the platform.\n *\n * @publicApi\n */\nfunction destroyPlatform() {\n    getPlatform()?.destroy();\n}\n/**\n * The goal of this function is to bootstrap a platform injector,\n * but avoid referencing `PlatformRef` class.\n * This function is needed for bootstrapping a Standalone Component.\n */\nfunction createOrReusePlatformInjector(providers = []) {\n    // If a platform injector already exists, it means that the platform\n    // is already bootstrapped and no additional actions are required.\n    if (_platformInjector)\n        return _platformInjector;\n    publishDefaultGlobalUtils();\n    // Otherwise, setup a new platform injector and run platform initializers.\n    const injector = createPlatformInjector(providers);\n    _platformInjector = injector;\n    publishSignalConfiguration();\n    runPlatformInitializers(injector);\n    return injector;\n}\nfunction runPlatformInitializers(injector) {\n    const inits = injector.get(PLATFORM_INITIALIZER, null);\n    inits?.forEach((init) => init());\n}\n\n/**\n * Returns whether Angular is in development mode.\n *\n * By default, this is true, unless `enableProdMode` is invoked prior to calling this method or the\n * application is built using the Angular CLI with the `optimization` option.\n * @see {@link cli/build ng build}\n *\n * @publicApi\n */\nfunction isDevMode() {\n    return typeof ngDevMode === 'undefined' || !!ngDevMode;\n}\n/**\n * Disable Angular's development mode, which turns off assertions and other\n * checks within the framework.\n *\n * One important assertion this disables verifies that a change detection pass\n * does not result in additional changes to any bindings (also known as\n * unidirectional data flow).\n *\n * Using this method is discouraged as the Angular CLI will set production mode when using the\n * `optimization` option.\n * @see {@link cli/build ng build}\n *\n * @publicApi\n */\nfunction enableProdMode() {\n    // The below check is there so when ngDevMode is set via terser\n    // `global['ngDevMode'] = false;` is also dropped.\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        _global['ngDevMode'] = false;\n    }\n}\n\n// Public API for render\n\n/**\n * Returns the NgModuleFactory with the given id (specified using [@NgModule.id\n * field](api/core/NgModule#id)), if it exists and has been loaded. Factories for NgModules that do\n * not specify an `id` cannot be retrieved. Throws if an NgModule cannot be found.\n * @publicApi\n * @deprecated Use `getNgModuleById` instead.\n */\nfunction getModuleFactory(id) {\n    const type = getRegisteredNgModuleType(id);\n    if (!type)\n        throw noModuleError(id);\n    return new NgModuleFactory(type);\n}\n/**\n * Returns the NgModule class with the given id (specified using [@NgModule.id\n * field](api/core/NgModule#id)), if it exists and has been loaded. Classes for NgModules that do\n * not specify an `id` cannot be retrieved. Throws if an NgModule cannot be found.\n * @publicApi\n */\nfunction getNgModuleById(id) {\n    const type = getRegisteredNgModuleType(id);\n    if (!type)\n        throw noModuleError(id);\n    return type;\n}\nfunction noModuleError(id) {\n    return new Error(`No module with ID ${id} loaded`);\n}\n\n/**\n * Represents an Angular [view](guide/glossary#view \"Definition\").\n *\n * @see {@link ChangeDetectorRef#usage-notes Change detection usage}\n *\n * @publicApi\n */\nclass ViewRef extends ChangeDetectorRef {\n}\n/**\n * Represents an Angular [view](guide/glossary#view) in a view container.\n * An [embedded view](guide/glossary#view-hierarchy) can be referenced from a component\n * other than the hosting component whose template defines it, or it can be defined\n * independently by a `TemplateRef`.\n *\n * Properties of elements in a view can change, but the structure (number and order) of elements in\n * a view cannot. Change the structure of elements by inserting, moving, or\n * removing nested views in a view container.\n *\n * @see {@link ViewContainerRef}\n *\n * @usageNotes\n *\n * The following template breaks down into two separate `TemplateRef` instances,\n * an outer one and an inner one.\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n *\n * This is the outer `TemplateRef`:\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n * </ul>\n * ```\n *\n * This is the inner `TemplateRef`:\n *\n * ```\n *   <li>{{item}}</li>\n * ```\n *\n * The outer and inner `TemplateRef` instances are assembled into views as follows:\n *\n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <ng-template view-container-ref></ng-template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n * @publicApi\n */\nclass EmbeddedViewRef extends ViewRef {\n}\n\n// Public API for compiler\n\n// This file exists for easily patching NgModuleFactoryLoader in g3\nvar ng_module_factory_loader_impl = {};\n\n/**\n * @publicApi\n */\nclass DebugEventListener {\n    constructor(name, callback) {\n        this.name = name;\n        this.callback = callback;\n    }\n}\n/**\n * @publicApi\n */\nfunction asNativeElements(debugEls) {\n    return debugEls.map((el) => el.nativeElement);\n}\n/**\n * @publicApi\n */\nclass DebugNode {\n    constructor(nativeNode) {\n        this.nativeNode = nativeNode;\n    }\n    /**\n     * The `DebugElement` parent. Will be `null` if this is the root element.\n     */\n    get parent() {\n        const parent = this.nativeNode.parentNode;\n        return parent ? new DebugElement(parent) : null;\n    }\n    /**\n     * The host dependency injector. For example, the root element's component instance injector.\n     */\n    get injector() {\n        return getInjector(this.nativeNode);\n    }\n    /**\n     * The element's own component instance, if it has one.\n     */\n    get componentInstance() {\n        const nativeElement = this.nativeNode;\n        return nativeElement &&\n            (getComponent(nativeElement) || getOwningComponent(nativeElement));\n    }\n    /**\n     * An object that provides parent context for this element. Often an ancestor component instance\n     * that governs this element.\n     *\n     * When an element is repeated within *ngFor, the context is an `NgForOf` whose `$implicit`\n     * property is the value of the row instance value. For example, the `hero` in `*ngFor=\"let hero\n     * of heroes\"`.\n     */\n    get context() {\n        return getComponent(this.nativeNode) || getContext(this.nativeNode);\n    }\n    /**\n     * The callbacks attached to the component's @Output properties and/or the element's event\n     * properties.\n     */\n    get listeners() {\n        return getListeners(this.nativeNode).filter(listener => listener.type === 'dom');\n    }\n    /**\n     * Dictionary of objects associated with template local variables (e.g. #foo), keyed by the local\n     * variable name.\n     */\n    get references() {\n        return getLocalRefs(this.nativeNode);\n    }\n    /**\n     * This component's injector lookup tokens. Includes the component itself plus the tokens that the\n     * component lists in its providers metadata.\n     */\n    get providerTokens() {\n        return getInjectionTokens(this.nativeNode);\n    }\n}\n/**\n * @publicApi\n *\n * @see [Component testing scenarios](guide/testing-components-scenarios)\n * @see [Basics of testing components](guide/testing-components-basics)\n * @see [Testing utility APIs](guide/testing-utility-apis)\n */\nclass DebugElement extends DebugNode {\n    constructor(nativeNode) {\n        ngDevMode && assertDomNode(nativeNode);\n        super(nativeNode);\n    }\n    /**\n     * The underlying DOM element at the root of the component.\n     */\n    get nativeElement() {\n        return this.nativeNode.nodeType == Node.ELEMENT_NODE ? this.nativeNode : null;\n    }\n    /**\n     * The element tag name, if it is an element.\n     */\n    get name() {\n        const context = getLContext(this.nativeNode);\n        const lView = context ? context.lView : null;\n        if (lView !== null) {\n            const tData = lView[TVIEW].data;\n            const tNode = tData[context.nodeIndex];\n            return tNode.value;\n        }\n        else {\n            return this.nativeNode.nodeName;\n        }\n    }\n    /**\n     *  Gets a map of property names to property values for an element.\n     *\n     *  This map includes:\n     *  - Regular property bindings (e.g. `[id]=\"id\"`)\n     *  - Host property bindings (e.g. `host: { '[id]': \"id\" }`)\n     *  - Interpolated property bindings (e.g. `id=\"{{ value }}\")\n     *\n     *  It does not include:\n     *  - input property bindings (e.g. `[myCustomInput]=\"value\"`)\n     *  - attribute bindings (e.g. `[attr.role]=\"menu\"`)\n     */\n    get properties() {\n        const context = getLContext(this.nativeNode);\n        const lView = context ? context.lView : null;\n        if (lView === null) {\n            return {};\n        }\n        const tData = lView[TVIEW].data;\n        const tNode = tData[context.nodeIndex];\n        const properties = {};\n        // Collect properties from the DOM.\n        copyDomProperties(this.nativeElement, properties);\n        // Collect properties from the bindings. This is needed for animation renderer which has\n        // synthetic properties which don't get reflected into the DOM.\n        collectPropertyBindings(properties, tNode, lView, tData);\n        return properties;\n    }\n    /**\n     *  A map of attribute names to attribute values for an element.\n     */\n    // TODO: replace null by undefined in the return type\n    get attributes() {\n        const attributes = {};\n        const element = this.nativeElement;\n        if (!element) {\n            return attributes;\n        }\n        const context = getLContext(element);\n        const lView = context ? context.lView : null;\n        if (lView === null) {\n            return {};\n        }\n        const tNodeAttrs = lView[TVIEW].data[context.nodeIndex].attrs;\n        const lowercaseTNodeAttrs = [];\n        // For debug nodes we take the element's attribute directly from the DOM since it allows us\n        // to account for ones that weren't set via bindings (e.g. ViewEngine keeps track of the ones\n        // that are set through `Renderer2`). The problem is that the browser will lowercase all names,\n        // however since we have the attributes already on the TNode, we can preserve the case by going\n        // through them once, adding them to the `attributes` map and putting their lower-cased name\n        // into an array. Afterwards when we're going through the native DOM attributes, we can check\n        // whether we haven't run into an attribute already through the TNode.\n        if (tNodeAttrs) {\n            let i = 0;\n            while (i < tNodeAttrs.length) {\n                const attrName = tNodeAttrs[i];\n                // Stop as soon as we hit a marker. We only care about the regular attributes. Everything\n                // else will be handled below when we read the final attributes off the DOM.\n                if (typeof attrName !== 'string')\n                    break;\n                const attrValue = tNodeAttrs[i + 1];\n                attributes[attrName] = attrValue;\n                lowercaseTNodeAttrs.push(attrName.toLowerCase());\n                i += 2;\n            }\n        }\n        for (const attr of element.attributes) {\n            // Make sure that we don't assign the same attribute both in its\n            // case-sensitive form and the lower-cased one from the browser.\n            if (!lowercaseTNodeAttrs.includes(attr.name)) {\n                attributes[attr.name] = attr.value;\n            }\n        }\n        return attributes;\n    }\n    /**\n     * The inline styles of the DOM element.\n     */\n    // TODO: replace null by undefined in the return type\n    get styles() {\n        const element = this.nativeElement;\n        return (element?.style ?? {});\n    }\n    /**\n     * A map containing the class names on the element as keys.\n     *\n     * This map is derived from the `className` property of the DOM element.\n     *\n     * Note: The values of this object will always be `true`. The class key will not appear in the KV\n     * object if it does not exist on the element.\n     *\n     * @see [Element.className](https://developer.mozilla.org/en-US/docs/Web/API/Element/className)\n     */\n    get classes() {\n        const result = {};\n        const element = this.nativeElement;\n        // SVG elements return an `SVGAnimatedString` instead of a plain string for the `className`.\n        const className = element.className;\n        const classes = typeof className !== 'string' ? className.baseVal.split(' ') : className.split(' ');\n        classes.forEach((value) => result[value] = true);\n        return result;\n    }\n    /**\n     * The `childNodes` of the DOM element as a `DebugNode` array.\n     *\n     * @see [Node.childNodes](https://developer.mozilla.org/en-US/docs/Web/API/Node/childNodes)\n     */\n    get childNodes() {\n        const childNodes = this.nativeNode.childNodes;\n        const children = [];\n        for (let i = 0; i < childNodes.length; i++) {\n            const element = childNodes[i];\n            children.push(getDebugNode(element));\n        }\n        return children;\n    }\n    /**\n     * The immediate `DebugElement` children. Walk the tree by descending through `children`.\n     */\n    get children() {\n        const nativeElement = this.nativeElement;\n        if (!nativeElement)\n            return [];\n        const childNodes = nativeElement.children;\n        const children = [];\n        for (let i = 0; i < childNodes.length; i++) {\n            const element = childNodes[i];\n            children.push(getDebugNode(element));\n        }\n        return children;\n    }\n    /**\n     * @returns the first `DebugElement` that matches the predicate at any depth in the subtree.\n     */\n    query(predicate) {\n        const results = this.queryAll(predicate);\n        return results[0] || null;\n    }\n    /**\n     * @returns All `DebugElement` matches for the predicate at any depth in the subtree.\n     */\n    queryAll(predicate) {\n        const matches = [];\n        _queryAll(this, predicate, matches, true);\n        return matches;\n    }\n    /**\n     * @returns All `DebugNode` matches for the predicate at any depth in the subtree.\n     */\n    queryAllNodes(predicate) {\n        const matches = [];\n        _queryAll(this, predicate, matches, false);\n        return matches;\n    }\n    /**\n     * Triggers the event by its name if there is a corresponding listener in the element's\n     * `listeners` collection.\n     *\n     * If the event lacks a listener or there's some other problem, consider\n     * calling `nativeElement.dispatchEvent(eventObject)`.\n     *\n     * @param eventName The name of the event to trigger\n     * @param eventObj The _event object_ expected by the handler\n     *\n     * @see [Testing components scenarios](guide/testing-components-scenarios#trigger-event-handler)\n     */\n    triggerEventHandler(eventName, eventObj) {\n        const node = this.nativeNode;\n        const invokedListeners = [];\n        this.listeners.forEach(listener => {\n            if (listener.name === eventName) {\n                const callback = listener.callback;\n                callback.call(node, eventObj);\n                invokedListeners.push(callback);\n            }\n        });\n        // We need to check whether `eventListeners` exists, because it's something\n        // that Zone.js only adds to `EventTarget` in browser environments.\n        if (typeof node.eventListeners === 'function') {\n            // Note that in Ivy we wrap event listeners with a call to `event.preventDefault` in some\n            // cases. We use '__ngUnwrap__' as a special token that gives us access to the actual event\n            // listener.\n            node.eventListeners(eventName).forEach((listener) => {\n                // In order to ensure that we can detect the special __ngUnwrap__ token described above, we\n                // use `toString` on the listener and see if it contains the token. We use this approach to\n                // ensure that it still worked with compiled code since it cannot remove or rename string\n                // literals. We also considered using a special function name (i.e. if(listener.name ===\n                // special)) but that was more cumbersome and we were also concerned the compiled code could\n                // strip the name, turning the condition in to (\"\" === \"\") and always returning true.\n                if (listener.toString().indexOf('__ngUnwrap__') !== -1) {\n                    const unwrappedListener = listener('__ngUnwrap__');\n                    return invokedListeners.indexOf(unwrappedListener) === -1 &&\n                        unwrappedListener.call(node, eventObj);\n                }\n            });\n        }\n    }\n}\nfunction copyDomProperties(element, properties) {\n    if (element) {\n        // Skip own properties (as those are patched)\n        let obj = Object.getPrototypeOf(element);\n        const NodePrototype = Node.prototype;\n        while (obj !== null && obj !== NodePrototype) {\n            const descriptors = Object.getOwnPropertyDescriptors(obj);\n            for (let key in descriptors) {\n                if (!key.startsWith('__') && !key.startsWith('on')) {\n                    // don't include properties starting with `__` and `on`.\n                    // `__` are patched values which should not be included.\n                    // `on` are listeners which also should not be included.\n                    const value = element[key];\n                    if (isPrimitiveValue(value)) {\n                        properties[key] = value;\n                    }\n                }\n            }\n            obj = Object.getPrototypeOf(obj);\n        }\n    }\n}\nfunction isPrimitiveValue(value) {\n    return typeof value === 'string' || typeof value === 'boolean' || typeof value === 'number' ||\n        value === null;\n}\nfunction _queryAll(parentElement, predicate, matches, elementsOnly) {\n    const context = getLContext(parentElement.nativeNode);\n    const lView = context ? context.lView : null;\n    if (lView !== null) {\n        const parentTNode = lView[TVIEW].data[context.nodeIndex];\n        _queryNodeChildren(parentTNode, lView, predicate, matches, elementsOnly, parentElement.nativeNode);\n    }\n    else {\n        // If the context is null, then `parentElement` was either created with Renderer2 or native DOM\n        // APIs.\n        _queryNativeNodeDescendants(parentElement.nativeNode, predicate, matches, elementsOnly);\n    }\n}\n/**\n * Recursively match the current TNode against the predicate, and goes on with the next ones.\n *\n * @param tNode the current TNode\n * @param lView the LView of this TNode\n * @param predicate the predicate to match\n * @param matches the list of positive matches\n * @param elementsOnly whether only elements should be searched\n * @param rootNativeNode the root native node on which predicate should not be matched\n */\nfunction _queryNodeChildren(tNode, lView, predicate, matches, elementsOnly, rootNativeNode) {\n    ngDevMode && assertTNodeForLView(tNode, lView);\n    const nativeNode = getNativeByTNodeOrNull(tNode, lView);\n    // For each type of TNode, specific logic is executed.\n    if (tNode.type & (3 /* TNodeType.AnyRNode */ | 8 /* TNodeType.ElementContainer */)) {\n        // Case 1: the TNode is an element\n        // The native node has to be checked.\n        _addQueryMatch(nativeNode, predicate, matches, elementsOnly, rootNativeNode);\n        if (isComponentHost(tNode)) {\n            // If the element is the host of a component, then all nodes in its view have to be processed.\n            // Note: the component's content (tNode.child) will be processed from the insertion points.\n            const componentView = getComponentLViewByIndex(tNode.index, lView);\n            if (componentView && componentView[TVIEW].firstChild) {\n                _queryNodeChildren(componentView[TVIEW].firstChild, componentView, predicate, matches, elementsOnly, rootNativeNode);\n            }\n        }\n        else {\n            if (tNode.child) {\n                // Otherwise, its children have to be processed.\n                _queryNodeChildren(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);\n            }\n            // We also have to query the DOM directly in order to catch elements inserted through\n            // Renderer2. Note that this is __not__ optimal, because we're walking similar trees multiple\n            // times. ViewEngine could do it more efficiently, because all the insertions go through\n            // Renderer2, however that's not the case in Ivy. This approach is being used because:\n            // 1. Matching the ViewEngine behavior would mean potentially introducing a dependency\n            //    from `Renderer2` to Ivy which could bring Ivy code into ViewEngine.\n            // 2. It allows us to capture nodes that were inserted directly via the DOM.\n            nativeNode && _queryNativeNodeDescendants(nativeNode, predicate, matches, elementsOnly);\n        }\n        // In all cases, if a dynamic container exists for this node, each view inside it has to be\n        // processed.\n        const nodeOrContainer = lView[tNode.index];\n        if (isLContainer(nodeOrContainer)) {\n            _queryNodeChildrenInContainer(nodeOrContainer, predicate, matches, elementsOnly, rootNativeNode);\n        }\n    }\n    else if (tNode.type & 4 /* TNodeType.Container */) {\n        // Case 2: the TNode is a container\n        // The native node has to be checked.\n        const lContainer = lView[tNode.index];\n        _addQueryMatch(lContainer[NATIVE], predicate, matches, elementsOnly, rootNativeNode);\n        // Each view inside the container has to be processed.\n        _queryNodeChildrenInContainer(lContainer, predicate, matches, elementsOnly, rootNativeNode);\n    }\n    else if (tNode.type & 16 /* TNodeType.Projection */) {\n        // Case 3: the TNode is a projection insertion point (i.e. a <ng-content>).\n        // The nodes projected at this location all need to be processed.\n        const componentView = lView[DECLARATION_COMPONENT_VIEW];\n        const componentHost = componentView[T_HOST];\n        const head = componentHost.projection[tNode.projection];\n        if (Array.isArray(head)) {\n            for (let nativeNode of head) {\n                _addQueryMatch(nativeNode, predicate, matches, elementsOnly, rootNativeNode);\n            }\n        }\n        else if (head) {\n            const nextLView = componentView[PARENT];\n            const nextTNode = nextLView[TVIEW].data[head.index];\n            _queryNodeChildren(nextTNode, nextLView, predicate, matches, elementsOnly, rootNativeNode);\n        }\n    }\n    else if (tNode.child) {\n        // Case 4: the TNode is a view.\n        _queryNodeChildren(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);\n    }\n    // We don't want to go to the next sibling of the root node.\n    if (rootNativeNode !== nativeNode) {\n        // To determine the next node to be processed, we need to use the next or the projectionNext\n        // link, depending on whether the current node has been projected.\n        const nextTNode = (tNode.flags & 2 /* TNodeFlags.isProjected */) ? tNode.projectionNext : tNode.next;\n        if (nextTNode) {\n            _queryNodeChildren(nextTNode, lView, predicate, matches, elementsOnly, rootNativeNode);\n        }\n    }\n}\n/**\n * Process all TNodes in a given container.\n *\n * @param lContainer the container to be processed\n * @param predicate the predicate to match\n * @param matches the list of positive matches\n * @param elementsOnly whether only elements should be searched\n * @param rootNativeNode the root native node on which predicate should not be matched\n */\nfunction _queryNodeChildrenInContainer(lContainer, predicate, matches, elementsOnly, rootNativeNode) {\n    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n        const childView = lContainer[i];\n        const firstChild = childView[TVIEW].firstChild;\n        if (firstChild) {\n            _queryNodeChildren(firstChild, childView, predicate, matches, elementsOnly, rootNativeNode);\n        }\n    }\n}\n/**\n * Match the current native node against the predicate.\n *\n * @param nativeNode the current native node\n * @param predicate the predicate to match\n * @param matches the list of positive matches\n * @param elementsOnly whether only elements should be searched\n * @param rootNativeNode the root native node on which predicate should not be matched\n */\nfunction _addQueryMatch(nativeNode, predicate, matches, elementsOnly, rootNativeNode) {\n    if (rootNativeNode !== nativeNode) {\n        const debugNode = getDebugNode(nativeNode);\n        if (!debugNode) {\n            return;\n        }\n        // Type of the \"predicate and \"matches\" array are set based on the value of\n        // the \"elementsOnly\" parameter. TypeScript is not able to properly infer these\n        // types with generics, so we manually cast the parameters accordingly.\n        if (elementsOnly && (debugNode instanceof DebugElement) && predicate(debugNode) &&\n            matches.indexOf(debugNode) === -1) {\n            matches.push(debugNode);\n        }\n        else if (!elementsOnly && predicate(debugNode) &&\n            matches.indexOf(debugNode) === -1) {\n            matches.push(debugNode);\n        }\n    }\n}\n/**\n * Match all the descendants of a DOM node against a predicate.\n *\n * @param nativeNode the current native node\n * @param predicate the predicate to match\n * @param matches the list where matches are stored\n * @param elementsOnly whether only elements should be searched\n */\nfunction _queryNativeNodeDescendants(parentNode, predicate, matches, elementsOnly) {\n    const nodes = parentNode.childNodes;\n    const length = nodes.length;\n    for (let i = 0; i < length; i++) {\n        const node = nodes[i];\n        const debugNode = getDebugNode(node);\n        if (debugNode) {\n            if (elementsOnly && (debugNode instanceof DebugElement) && predicate(debugNode) &&\n                matches.indexOf(debugNode) === -1) {\n                matches.push(debugNode);\n            }\n            else if (!elementsOnly && predicate(debugNode) &&\n                matches.indexOf(debugNode) === -1) {\n                matches.push(debugNode);\n            }\n            _queryNativeNodeDescendants(node, predicate, matches, elementsOnly);\n        }\n    }\n}\n/**\n * Iterates through the property bindings for a given node and generates\n * a map of property names to values. This map only contains property bindings\n * defined in templates, not in host bindings.\n */\nfunction collectPropertyBindings(properties, tNode, lView, tData) {\n    let bindingIndexes = tNode.propertyBindings;\n    if (bindingIndexes !== null) {\n        for (let i = 0; i < bindingIndexes.length; i++) {\n            const bindingIndex = bindingIndexes[i];\n            const propMetadata = tData[bindingIndex];\n            const metadataParts = propMetadata.split(INTERPOLATION_DELIMITER);\n            const propertyName = metadataParts[0];\n            if (metadataParts.length > 1) {\n                let value = metadataParts[1];\n                for (let j = 1; j < metadataParts.length - 1; j++) {\n                    value += renderStringify(lView[bindingIndex + j - 1]) + metadataParts[j + 1];\n                }\n                properties[propertyName] = value;\n            }\n            else {\n                properties[propertyName] = lView[bindingIndex];\n            }\n        }\n    }\n}\n// Need to keep the nodes in a global Map so that multiple angular apps are supported.\nconst _nativeNodeToDebugNode = new Map();\nconst NG_DEBUG_PROPERTY = '__ng_debug__';\n/**\n * @publicApi\n */\nfunction getDebugNode(nativeNode) {\n    if (nativeNode instanceof Node) {\n        if (!(nativeNode.hasOwnProperty(NG_DEBUG_PROPERTY))) {\n            nativeNode[NG_DEBUG_PROPERTY] = nativeNode.nodeType == Node.ELEMENT_NODE ?\n                new DebugElement(nativeNode) :\n                new DebugNode(nativeNode);\n        }\n        return nativeNode[NG_DEBUG_PROPERTY];\n    }\n    return null;\n}\nfunction getAllDebugNodes() {\n    return Array.from(_nativeNodeToDebugNode.values());\n}\nfunction indexDebugNode(node) {\n    _nativeNodeToDebugNode.set(node.nativeNode, node);\n}\nfunction removeDebugNodeFromIndex(node) {\n    _nativeNodeToDebugNode.delete(node.nativeNode);\n}\n\n/**\n * This platform has to be included in any other platform\n *\n * @publicApi\n */\nconst platformCore = createPlatformFactory(null, 'core', []);\n\n/**\n * Re-exported by `BrowserModule`, which is included automatically in the root\n * `AppModule` when you create a new app with the CLI `new` command. Eagerly injects\n * `ApplicationRef` to instantiate it.\n *\n * @publicApi\n */\nclass ApplicationModule {\n    // Inject ApplicationRef to make it eager...\n    constructor(appRef) { }\n    static { this.ɵfac = function ApplicationModule_Factory(t) { return new (t || ApplicationModule)(ɵɵinject(ApplicationRef)); }; }\n    static { this.ɵmod = /*@__PURE__*/ ɵɵdefineNgModule({ type: ApplicationModule }); }\n    static { this.ɵinj = /*@__PURE__*/ ɵɵdefineInjector({}); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(ApplicationModule, [{\n        type: NgModule\n    }], () => [{ type: ApplicationRef }], null); })();\n\n/**\n * The default equality function used for `signal` and `computed`, which uses referential equality.\n */\nfunction defaultEquals(a, b) {\n    return Object.is(a, b);\n}\n\n/**\n * The currently active consumer `ReactiveNode`, if running code in a reactive context.\n *\n * Change this via `setActiveConsumer`.\n */\nlet activeConsumer = null;\nlet inNotificationPhase = false;\n/**\n * Global epoch counter. Incremented whenever a source signal is set.\n */\nlet epoch = 1;\n/**\n * Symbol used to tell `Signal`s apart from other functions.\n *\n * This can be used to auto-unwrap signals in various cases, or to auto-wrap non-signal values.\n */\nconst SIGNAL = /* @__PURE__ */ Symbol('SIGNAL');\nfunction setActiveConsumer(consumer) {\n    const prev = activeConsumer;\n    activeConsumer = consumer;\n    return prev;\n}\nfunction getActiveConsumer() {\n    return activeConsumer;\n}\nfunction isInNotificationPhase() {\n    return inNotificationPhase;\n}\nfunction isReactive(value) {\n    return value[SIGNAL] !== undefined;\n}\nconst REACTIVE_NODE = {\n    version: 0,\n    lastCleanEpoch: 0,\n    dirty: false,\n    producerNode: undefined,\n    producerLastReadVersion: undefined,\n    producerIndexOfThis: undefined,\n    nextProducerIndex: 0,\n    liveConsumerNode: undefined,\n    liveConsumerIndexOfThis: undefined,\n    consumerAllowSignalWrites: false,\n    consumerIsAlwaysLive: false,\n    producerMustRecompute: () => false,\n    producerRecomputeValue: () => { },\n    consumerMarkedDirty: () => { },\n    consumerOnSignalRead: () => { },\n};\n/**\n * Called by implementations when a producer's signal is read.\n */\nfunction producerAccessed(node) {\n    if (inNotificationPhase) {\n        throw new Error(typeof ngDevMode !== 'undefined' && ngDevMode ?\n            `Assertion error: signal read during notification phase` :\n            '');\n    }\n    if (activeConsumer === null) {\n        // Accessed outside of a reactive context, so nothing to record.\n        return;\n    }\n    activeConsumer.consumerOnSignalRead(node);\n    // This producer is the `idx`th dependency of `activeConsumer`.\n    const idx = activeConsumer.nextProducerIndex++;\n    assertConsumerNode(activeConsumer);\n    if (idx < activeConsumer.producerNode.length && activeConsumer.producerNode[idx] !== node) {\n        // There's been a change in producers since the last execution of `activeConsumer`.\n        // `activeConsumer.producerNode[idx]` holds a stale dependency which will be be removed and\n        // replaced with `this`.\n        //\n        // If `activeConsumer` isn't live, then this is a no-op, since we can replace the producer in\n        // `activeConsumer.producerNode` directly. However, if `activeConsumer` is live, then we need\n        // to remove it from the stale producer's `liveConsumer`s.\n        if (consumerIsLive(activeConsumer)) {\n            const staleProducer = activeConsumer.producerNode[idx];\n            producerRemoveLiveConsumerAtIndex(staleProducer, activeConsumer.producerIndexOfThis[idx]);\n            // At this point, the only record of `staleProducer` is the reference at\n            // `activeConsumer.producerNode[idx]` which will be overwritten below.\n        }\n    }\n    if (activeConsumer.producerNode[idx] !== node) {\n        // We're a new dependency of the consumer (at `idx`).\n        activeConsumer.producerNode[idx] = node;\n        // If the active consumer is live, then add it as a live consumer. If not, then use 0 as a\n        // placeholder value.\n        activeConsumer.producerIndexOfThis[idx] =\n            consumerIsLive(activeConsumer) ? producerAddLiveConsumer(node, activeConsumer, idx) : 0;\n    }\n    activeConsumer.producerLastReadVersion[idx] = node.version;\n}\n/**\n * Increment the global epoch counter.\n *\n * Called by source producers (that is, not computeds) whenever their values change.\n */\nfunction producerIncrementEpoch() {\n    epoch++;\n}\n/**\n * Ensure this producer's `version` is up-to-date.\n */\nfunction producerUpdateValueVersion(node) {\n    if (consumerIsLive(node) && !node.dirty) {\n        // A live consumer will be marked dirty by producers, so a clean state means that its version\n        // is guaranteed to be up-to-date.\n        return;\n    }\n    if (!node.dirty && node.lastCleanEpoch === epoch) {\n        // Even non-live consumers can skip polling if they previously found themselves to be clean at\n        // the current epoch, since their dependencies could not possibly have changed (such a change\n        // would've increased the epoch).\n        return;\n    }\n    if (!node.producerMustRecompute(node) && !consumerPollProducersForChange(node)) {\n        // None of our producers report a change since the last time they were read, so no\n        // recomputation of our value is necessary, and we can consider ourselves clean.\n        node.dirty = false;\n        node.lastCleanEpoch = epoch;\n        return;\n    }\n    node.producerRecomputeValue(node);\n    // After recomputing the value, we're no longer dirty.\n    node.dirty = false;\n    node.lastCleanEpoch = epoch;\n}\n/**\n * Propagate a dirty notification to live consumers of this producer.\n */\nfunction producerNotifyConsumers(node) {\n    if (node.liveConsumerNode === undefined) {\n        return;\n    }\n    // Prevent signal reads when we're updating the graph\n    const prev = inNotificationPhase;\n    inNotificationPhase = true;\n    try {\n        for (const consumer of node.liveConsumerNode) {\n            if (!consumer.dirty) {\n                consumerMarkDirty(consumer);\n            }\n        }\n    }\n    finally {\n        inNotificationPhase = prev;\n    }\n}\n/**\n * Whether this `ReactiveNode` in its producer capacity is currently allowed to initiate updates,\n * based on the current consumer context.\n */\nfunction producerUpdatesAllowed() {\n    return activeConsumer?.consumerAllowSignalWrites !== false;\n}\nfunction consumerMarkDirty(node) {\n    node.dirty = true;\n    producerNotifyConsumers(node);\n    node.consumerMarkedDirty?.(node);\n}\n/**\n * Prepare this consumer to run a computation in its reactive context.\n *\n * Must be called by subclasses which represent reactive computations, before those computations\n * begin.\n */\nfunction consumerBeforeComputation(node) {\n    node && (node.nextProducerIndex = 0);\n    return setActiveConsumer(node);\n}\n/**\n * Finalize this consumer's state after a reactive computation has run.\n *\n * Must be called by subclasses which represent reactive computations, after those computations\n * have finished.\n */\nfunction consumerAfterComputation(node, prevConsumer) {\n    setActiveConsumer(prevConsumer);\n    if (!node || node.producerNode === undefined || node.producerIndexOfThis === undefined ||\n        node.producerLastReadVersion === undefined) {\n        return;\n    }\n    if (consumerIsLive(node)) {\n        // For live consumers, we need to remove the producer -> consumer edge for any stale producers\n        // which weren't dependencies after the recomputation.\n        for (let i = node.nextProducerIndex; i < node.producerNode.length; i++) {\n            producerRemoveLiveConsumerAtIndex(node.producerNode[i], node.producerIndexOfThis[i]);\n        }\n    }\n    // Truncate the producer tracking arrays.\n    // Perf note: this is essentially truncating the length to `node.nextProducerIndex`, but\n    // benchmarking has shown that individual pop operations are faster.\n    while (node.producerNode.length > node.nextProducerIndex) {\n        node.producerNode.pop();\n        node.producerLastReadVersion.pop();\n        node.producerIndexOfThis.pop();\n    }\n}\n/**\n * Determine whether this consumer has any dependencies which have changed since the last time\n * they were read.\n */\nfunction consumerPollProducersForChange(node) {\n    assertConsumerNode(node);\n    // Poll producers for change.\n    for (let i = 0; i < node.producerNode.length; i++) {\n        const producer = node.producerNode[i];\n        const seenVersion = node.producerLastReadVersion[i];\n        // First check the versions. A mismatch means that the producer's value is known to have\n        // changed since the last time we read it.\n        if (seenVersion !== producer.version) {\n            return true;\n        }\n        // The producer's version is the same as the last time we read it, but it might itself be\n        // stale. Force the producer to recompute its version (calculating a new value if necessary).\n        producerUpdateValueVersion(producer);\n        // Now when we do this check, `producer.version` is guaranteed to be up to date, so if the\n        // versions still match then it has not changed since the last time we read it.\n        if (seenVersion !== producer.version) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Disconnect this consumer from the graph.\n */\nfunction consumerDestroy(node) {\n    assertConsumerNode(node);\n    if (consumerIsLive(node)) {\n        // Drop all connections from the graph to this node.\n        for (let i = 0; i < node.producerNode.length; i++) {\n            producerRemoveLiveConsumerAtIndex(node.producerNode[i], node.producerIndexOfThis[i]);\n        }\n    }\n    // Truncate all the arrays to drop all connection from this node to the graph.\n    node.producerNode.length = node.producerLastReadVersion.length = node.producerIndexOfThis.length =\n        0;\n    if (node.liveConsumerNode) {\n        node.liveConsumerNode.length = node.liveConsumerIndexOfThis.length = 0;\n    }\n}\n/**\n * Add `consumer` as a live consumer of this node.\n *\n * Note that this operation is potentially transitive. If this node becomes live, then it becomes\n * a live consumer of all of its current producers.\n */\nfunction producerAddLiveConsumer(node, consumer, indexOfThis) {\n    assertProducerNode(node);\n    assertConsumerNode(node);\n    if (node.liveConsumerNode.length === 0) {\n        // When going from 0 to 1 live consumers, we become a live consumer to our producers.\n        for (let i = 0; i < node.producerNode.length; i++) {\n            node.producerIndexOfThis[i] = producerAddLiveConsumer(node.producerNode[i], node, i);\n        }\n    }\n    node.liveConsumerIndexOfThis.push(indexOfThis);\n    return node.liveConsumerNode.push(consumer) - 1;\n}\n/**\n * Remove the live consumer at `idx`.\n */\nfunction producerRemoveLiveConsumerAtIndex(node, idx) {\n    assertProducerNode(node);\n    assertConsumerNode(node);\n    if (typeof ngDevMode !== 'undefined' && ngDevMode && idx >= node.liveConsumerNode.length) {\n        throw new Error(`Assertion error: active consumer index ${idx} is out of bounds of ${node.liveConsumerNode.length} consumers)`);\n    }\n    if (node.liveConsumerNode.length === 1) {\n        // When removing the last live consumer, we will no longer be live. We need to remove\n        // ourselves from our producers' tracking (which may cause consumer-producers to lose\n        // liveness as well).\n        for (let i = 0; i < node.producerNode.length; i++) {\n            producerRemoveLiveConsumerAtIndex(node.producerNode[i], node.producerIndexOfThis[i]);\n        }\n    }\n    // Move the last value of `liveConsumers` into `idx`. Note that if there's only a single\n    // live consumer, this is a no-op.\n    const lastIdx = node.liveConsumerNode.length - 1;\n    node.liveConsumerNode[idx] = node.liveConsumerNode[lastIdx];\n    node.liveConsumerIndexOfThis[idx] = node.liveConsumerIndexOfThis[lastIdx];\n    // Truncate the array.\n    node.liveConsumerNode.length--;\n    node.liveConsumerIndexOfThis.length--;\n    // If the index is still valid, then we need to fix the index pointer from the producer to this\n    // consumer, and update it from `lastIdx` to `idx` (accounting for the move above).\n    if (idx < node.liveConsumerNode.length) {\n        const idxProducer = node.liveConsumerIndexOfThis[idx];\n        const consumer = node.liveConsumerNode[idx];\n        assertConsumerNode(consumer);\n        consumer.producerIndexOfThis[idxProducer] = idx;\n    }\n}\nfunction consumerIsLive(node) {\n    return node.consumerIsAlwaysLive || (node?.liveConsumerNode?.length ?? 0) > 0;\n}\nfunction assertConsumerNode(node) {\n    node.producerNode ??= [];\n    node.producerIndexOfThis ??= [];\n    node.producerLastReadVersion ??= [];\n}\nfunction assertProducerNode(node) {\n    node.liveConsumerNode ??= [];\n    node.liveConsumerIndexOfThis ??= [];\n}\n\n/**\n * Create a computed signal which derives a reactive value from an expression.\n */\nfunction createComputed(computation) {\n    const node = Object.create(COMPUTED_NODE);\n    node.computation = computation;\n    const computed = () => {\n        // Check if the value needs updating before returning it.\n        producerUpdateValueVersion(node);\n        // Record that someone looked at this signal.\n        producerAccessed(node);\n        if (node.value === ERRORED) {\n            throw node.error;\n        }\n        return node.value;\n    };\n    computed[SIGNAL] = node;\n    return computed;\n}\n/**\n * A dedicated symbol used before a computed value has been calculated for the first time.\n * Explicitly typed as `any` so we can use it as signal's value.\n */\nconst UNSET = /* @__PURE__ */ Symbol('UNSET');\n/**\n * A dedicated symbol used in place of a computed signal value to indicate that a given computation\n * is in progress. Used to detect cycles in computation chains.\n * Explicitly typed as `any` so we can use it as signal's value.\n */\nconst COMPUTING = /* @__PURE__ */ Symbol('COMPUTING');\n/**\n * A dedicated symbol used in place of a computed signal value to indicate that a given computation\n * failed. The thrown error is cached until the computation gets dirty again.\n * Explicitly typed as `any` so we can use it as signal's value.\n */\nconst ERRORED = /* @__PURE__ */ Symbol('ERRORED');\n// Note: Using an IIFE here to ensure that the spread assignment is not considered\n// a side-effect, ending up preserving `COMPUTED_NODE` and `REACTIVE_NODE`.\n// TODO: remove when https://github.com/evanw/esbuild/issues/3392 is resolved.\nconst COMPUTED_NODE = /* @__PURE__ */ (() => {\n    return {\n        ...REACTIVE_NODE,\n        value: UNSET,\n        dirty: true,\n        error: null,\n        equal: defaultEquals,\n        producerMustRecompute(node) {\n            // Force a recomputation if there's no current value, or if the current value is in the\n            // process of being calculated (which should throw an error).\n            return node.value === UNSET || node.value === COMPUTING;\n        },\n        producerRecomputeValue(node) {\n            if (node.value === COMPUTING) {\n                // Our computation somehow led to a cyclic read of itself.\n                throw new Error('Detected cycle in computations.');\n            }\n            const oldValue = node.value;\n            node.value = COMPUTING;\n            const prevConsumer = consumerBeforeComputation(node);\n            let newValue;\n            try {\n                newValue = node.computation();\n            }\n            catch (err) {\n                newValue = ERRORED;\n                node.error = err;\n            }\n            finally {\n                consumerAfterComputation(node, prevConsumer);\n            }\n            if (oldValue !== UNSET && oldValue !== ERRORED && newValue !== ERRORED &&\n                node.equal(oldValue, newValue)) {\n                // No change to `valueVersion` - old and new values are\n                // semantically equivalent.\n                node.value = oldValue;\n                return;\n            }\n            node.value = newValue;\n            node.version++;\n        },\n    };\n})();\n\nfunction defaultThrowError() {\n    throw new Error();\n}\nlet throwInvalidWriteToSignalErrorFn = defaultThrowError;\nfunction throwInvalidWriteToSignalError() {\n    throwInvalidWriteToSignalErrorFn();\n}\nfunction setThrowInvalidWriteToSignalError(fn) {\n    throwInvalidWriteToSignalErrorFn = fn;\n}\n\n/**\n * If set, called after `WritableSignal`s are updated.\n *\n * This hook can be used to achieve various effects, such as running effects synchronously as part\n * of setting a signal.\n */\nlet postSignalSetFn = null;\n/**\n * Create a `Signal` that can be set or updated directly.\n */\nfunction createSignal(initialValue) {\n    const node = Object.create(SIGNAL_NODE);\n    node.value = initialValue;\n    const getter = (() => {\n        producerAccessed(node);\n        return node.value;\n    });\n    getter[SIGNAL] = node;\n    return getter;\n}\nfunction setPostSignalSetFn(fn) {\n    const prev = postSignalSetFn;\n    postSignalSetFn = fn;\n    return prev;\n}\nfunction signalGetFn() {\n    producerAccessed(this);\n    return this.value;\n}\nfunction signalSetFn(node, newValue) {\n    if (!producerUpdatesAllowed()) {\n        throwInvalidWriteToSignalError();\n    }\n    if (!node.equal(node.value, newValue)) {\n        node.value = newValue;\n        signalValueChanged(node);\n    }\n}\nfunction signalUpdateFn(node, updater) {\n    if (!producerUpdatesAllowed()) {\n        throwInvalidWriteToSignalError();\n    }\n    signalSetFn(node, updater(node.value));\n}\nfunction signalMutateFn(node, mutator) {\n    if (!producerUpdatesAllowed()) {\n        throwInvalidWriteToSignalError();\n    }\n    // Mutate bypasses equality checks as it's by definition changing the value.\n    mutator(node.value);\n    signalValueChanged(node);\n}\n// Note: Using an IIFE here to ensure that the spread assignment is not considered\n// a side-effect, ending up preserving `COMPUTED_NODE` and `REACTIVE_NODE`.\n// TODO: remove when https://github.com/evanw/esbuild/issues/3392 is resolved.\nconst SIGNAL_NODE = /* @__PURE__ */ (() => {\n    return {\n        ...REACTIVE_NODE,\n        equal: defaultEquals,\n        value: undefined,\n    };\n})();\nfunction signalValueChanged(node) {\n    node.version++;\n    producerIncrementEpoch();\n    producerNotifyConsumers(node);\n    postSignalSetFn?.();\n}\n\nfunction createWatch(fn, schedule, allowSignalWrites) {\n    const node = Object.create(WATCH_NODE);\n    if (allowSignalWrites) {\n        node.consumerAllowSignalWrites = true;\n    }\n    node.fn = fn;\n    node.schedule = schedule;\n    const registerOnCleanup = (cleanupFn) => {\n        node.cleanupFn = cleanupFn;\n    };\n    function isWatchNodeDestroyed(node) {\n        return node.fn === null && node.schedule === null;\n    }\n    function destroyWatchNode(node) {\n        if (!isWatchNodeDestroyed(node)) {\n            consumerDestroy(node); // disconnect watcher from the reactive graph\n            node.cleanupFn();\n            // nullify references to the integration functions to mark node as destroyed\n            node.fn = null;\n            node.schedule = null;\n            node.cleanupFn = NOOP_CLEANUP_FN;\n        }\n    }\n    const run = () => {\n        if (node.fn === null) {\n            // trying to run a destroyed watch is noop\n            return;\n        }\n        if (isInNotificationPhase()) {\n            throw new Error(`Schedulers cannot synchronously execute watches while scheduling.`);\n        }\n        node.dirty = false;\n        if (node.hasRun && !consumerPollProducersForChange(node)) {\n            return;\n        }\n        node.hasRun = true;\n        const prevConsumer = consumerBeforeComputation(node);\n        try {\n            node.cleanupFn();\n            node.cleanupFn = NOOP_CLEANUP_FN;\n            node.fn(registerOnCleanup);\n        }\n        finally {\n            consumerAfterComputation(node, prevConsumer);\n        }\n    };\n    node.ref = {\n        notify: () => consumerMarkDirty(node),\n        run,\n        cleanup: () => node.cleanupFn(),\n        destroy: () => destroyWatchNode(node),\n        [SIGNAL]: node,\n    };\n    return node.ref;\n}\nconst NOOP_CLEANUP_FN = () => { };\n// Note: Using an IIFE here to ensure that the spread assignment is not considered\n// a side-effect, ending up preserving `COMPUTED_NODE` and `REACTIVE_NODE`.\n// TODO: remove when https://github.com/evanw/esbuild/issues/3392 is resolved.\nconst WATCH_NODE = /* @__PURE__ */ (() => {\n    return {\n        ...REACTIVE_NODE,\n        consumerIsAlwaysLive: true,\n        consumerAllowSignalWrites: false,\n        consumerMarkedDirty: (node) => {\n            if (node.schedule !== null) {\n                node.schedule(node.ref);\n            }\n        },\n        hasRun: false,\n        cleanupFn: NOOP_CLEANUP_FN,\n    };\n})();\n\nfunction setAlternateWeakRefImpl(impl) {\n    // TODO: remove this function\n}\n\n// A delay in milliseconds before the scan is run after onLoad, to avoid any\n// potential race conditions with other LCP-related functions. This delay\n// happens outside of the main JavaScript execution and will only effect the timing\n// on when the warning becomes visible in the console.\nconst SCAN_DELAY = 200;\nconst OVERSIZED_IMAGE_TOLERANCE = 1200;\nclass ImagePerformanceWarning {\n    constructor() {\n        // Map of full image URLs -> original `ngSrc` values.\n        this.window = null;\n        this.observer = null;\n        this.options = inject(IMAGE_CONFIG);\n        this.ngZone = inject(NgZone);\n    }\n    start() {\n        if (typeof PerformanceObserver === 'undefined' ||\n            (this.options?.disableImageSizeWarning && this.options?.disableImageLazyLoadWarning)) {\n            return;\n        }\n        this.observer = this.initPerformanceObserver();\n        const doc = getDocument();\n        const win = doc.defaultView;\n        if (typeof win !== 'undefined') {\n            this.window = win;\n            // Wait to avoid race conditions where LCP image triggers\n            // load event before it's recorded by the performance observer\n            const waitToScan = () => {\n                setTimeout(this.scanImages.bind(this), SCAN_DELAY);\n            };\n            // Angular doesn't have to run change detection whenever any asynchronous tasks are invoked in\n            // the scope of this functionality.\n            this.ngZone.runOutsideAngular(() => {\n                // Consider the case when the application is created and destroyed multiple times.\n                // Typically, applications are created instantly once the page is loaded, and the\n                // `window.load` listener is always triggered. However, the `window.load` event will never\n                // be fired if the page is loaded, and the application is created later. Checking for\n                // `readyState` is the easiest way to determine whether the page has been loaded or not.\n                if (doc.readyState === 'complete') {\n                    waitToScan();\n                }\n                else {\n                    this.window?.addEventListener('load', waitToScan, { once: true });\n                }\n            });\n        }\n    }\n    ngOnDestroy() {\n        this.observer?.disconnect();\n    }\n    initPerformanceObserver() {\n        if (typeof PerformanceObserver === 'undefined') {\n            return null;\n        }\n        const observer = new PerformanceObserver((entryList) => {\n            const entries = entryList.getEntries();\n            if (entries.length === 0)\n                return;\n            // We use the latest entry produced by the `PerformanceObserver` as the best\n            // signal on which element is actually an LCP one. As an example, the first image to load on\n            // a page, by virtue of being the only thing on the page so far, is often a LCP candidate\n            // and gets reported by PerformanceObserver, but isn't necessarily the LCP element.\n            const lcpElement = entries[entries.length - 1];\n            // Cast to `any` due to missing `element` on the `LargestContentfulPaint` type of entry.\n            // See https://developer.mozilla.org/en-US/docs/Web/API/LargestContentfulPaint\n            const imgSrc = lcpElement.element?.src ?? '';\n            // Exclude `data:` and `blob:` URLs, since they are fetched resources.\n            if (imgSrc.startsWith('data:') || imgSrc.startsWith('blob:'))\n                return;\n            this.lcpImageUrl = imgSrc;\n        });\n        observer.observe({ type: 'largest-contentful-paint', buffered: true });\n        return observer;\n    }\n    scanImages() {\n        const images = getDocument().querySelectorAll('img');\n        let lcpElementFound, lcpElementLoadedCorrectly = false;\n        images.forEach(image => {\n            if (!this.options?.disableImageSizeWarning) {\n                for (const image of images) {\n                    // Image elements using the NgOptimizedImage directive are excluded,\n                    // as that directive has its own version of this check.\n                    if (!image.getAttribute('ng-img') && this.isOversized(image)) {\n                        logOversizedImageWarning(image.src);\n                    }\n                }\n            }\n            if (!this.options?.disableImageLazyLoadWarning && this.lcpImageUrl) {\n                if (image.src === this.lcpImageUrl) {\n                    lcpElementFound = true;\n                    if (image.loading !== 'lazy' || image.getAttribute('ng-img')) {\n                        // This variable is set to true and never goes back to false to account\n                        // for the case where multiple images have the same src url, and some\n                        // have lazy loading while others don't.\n                        // Also ignore NgOptimizedImage because there's a different warning for that.\n                        lcpElementLoadedCorrectly = true;\n                    }\n                }\n            }\n        });\n        if (lcpElementFound && !lcpElementLoadedCorrectly && this.lcpImageUrl &&\n            !this.options?.disableImageLazyLoadWarning) {\n            logLazyLCPWarning(this.lcpImageUrl);\n        }\n    }\n    isOversized(image) {\n        if (!this.window) {\n            return false;\n        }\n        const computedStyle = this.window.getComputedStyle(image);\n        let renderedWidth = parseFloat(computedStyle.getPropertyValue('width'));\n        let renderedHeight = parseFloat(computedStyle.getPropertyValue('height'));\n        const boxSizing = computedStyle.getPropertyValue('box-sizing');\n        const objectFit = computedStyle.getPropertyValue('object-fit');\n        if (objectFit === `cover`) {\n            // Object fit cover may indicate a use case such as a sprite sheet where\n            // this warning does not apply.\n            return false;\n        }\n        if (boxSizing === 'border-box') {\n            const paddingTop = computedStyle.getPropertyValue('padding-top');\n            const paddingRight = computedStyle.getPropertyValue('padding-right');\n            const paddingBottom = computedStyle.getPropertyValue('padding-bottom');\n            const paddingLeft = computedStyle.getPropertyValue('padding-left');\n            renderedWidth -= parseFloat(paddingRight) + parseFloat(paddingLeft);\n            renderedHeight -= parseFloat(paddingTop) + parseFloat(paddingBottom);\n        }\n        const intrinsicWidth = image.naturalWidth;\n        const intrinsicHeight = image.naturalHeight;\n        const recommendedWidth = this.window.devicePixelRatio * renderedWidth;\n        const recommendedHeight = this.window.devicePixelRatio * renderedHeight;\n        const oversizedWidth = (intrinsicWidth - recommendedWidth) >= OVERSIZED_IMAGE_TOLERANCE;\n        const oversizedHeight = (intrinsicHeight - recommendedHeight) >= OVERSIZED_IMAGE_TOLERANCE;\n        return oversizedWidth || oversizedHeight;\n    }\n    static { this.ɵfac = function ImagePerformanceWarning_Factory(t) { return new (t || ImagePerformanceWarning)(); }; }\n    static { this.ɵprov = /*@__PURE__*/ ɵɵdefineInjectable({ token: ImagePerformanceWarning, factory: ImagePerformanceWarning.ɵfac, providedIn: 'root' }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(ImagePerformanceWarning, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], null, null); })();\nfunction logLazyLCPWarning(src) {\n    console.warn(formatRuntimeError(-913 /* RuntimeErrorCode.IMAGE_PERFORMANCE_WARNING */, `An image with src ${src} is the Largest Contentful Paint (LCP) element ` +\n        `but was given a \"loading\" value of \"lazy\", which can negatively impact ` +\n        `application loading performance. This warning can be addressed by ` +\n        `changing the loading value of the LCP image to \"eager\", or by using the ` +\n        `NgOptimizedImage directive's prioritization utilities. For more ` +\n        `information about addressing or disabling this warning, see ` +\n        `https://angular.io/errors/NG0913`));\n}\nfunction logOversizedImageWarning(src) {\n    console.warn(formatRuntimeError(-913 /* RuntimeErrorCode.IMAGE_PERFORMANCE_WARNING */, `An image with src ${src} has intrinsic file dimensions much larger than its ` +\n        `rendered size. This can negatively impact application loading performance. ` +\n        `For more information about addressing or disabling this warning, see ` +\n        `https://angular.io/errors/NG0913`));\n}\n\n/**\n * Internal create application API that implements the core application creation logic and optional\n * bootstrap logic.\n *\n * Platforms (such as `platform-browser`) may require different set of application and platform\n * providers for an application to function correctly. As a result, platforms may use this function\n * internally and supply the necessary providers during the bootstrap, while exposing\n * platform-specific APIs as a part of their public API.\n *\n * @returns A promise that returns an `ApplicationRef` instance once resolved.\n */\nfunction internalCreateApplication(config) {\n    try {\n        const { rootComponent, appProviders, platformProviders } = config;\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && rootComponent !== undefined) {\n            assertStandaloneComponentType(rootComponent);\n        }\n        const platformInjector = createOrReusePlatformInjector(platformProviders);\n        // Create root application injector based on a set of providers configured at the platform\n        // bootstrap level as well as providers passed to the bootstrap call by a user.\n        const allAppProviders = [\n            provideZoneChangeDetection(),\n            ...(appProviders || []),\n        ];\n        const adapter = new EnvironmentNgModuleRefAdapter({\n            providers: allAppProviders,\n            parent: platformInjector,\n            debugName: (typeof ngDevMode === 'undefined' || ngDevMode) ? 'Environment Injector' : '',\n            // We skip environment initializers because we need to run them inside the NgZone, which\n            // happens after we get the NgZone instance from the Injector.\n            runEnvironmentInitializers: false,\n        });\n        const envInjector = adapter.injector;\n        const ngZone = envInjector.get(NgZone);\n        return ngZone.run(() => {\n            envInjector.resolveInjectorInitializers();\n            const exceptionHandler = envInjector.get(ErrorHandler, null);\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) && !exceptionHandler) {\n                throw new RuntimeError(402 /* RuntimeErrorCode.MISSING_REQUIRED_INJECTABLE_IN_BOOTSTRAP */, 'No `ErrorHandler` found in the Dependency Injection tree.');\n            }\n            let onErrorSubscription;\n            ngZone.runOutsideAngular(() => {\n                onErrorSubscription = ngZone.onError.subscribe({\n                    next: (error) => {\n                        exceptionHandler.handleError(error);\n                    }\n                });\n            });\n            // If the whole platform is destroyed, invoke the `destroy` method\n            // for all bootstrapped applications as well.\n            const destroyListener = () => envInjector.destroy();\n            const onPlatformDestroyListeners = platformInjector.get(PLATFORM_DESTROY_LISTENERS);\n            onPlatformDestroyListeners.add(destroyListener);\n            envInjector.onDestroy(() => {\n                onErrorSubscription.unsubscribe();\n                onPlatformDestroyListeners.delete(destroyListener);\n            });\n            return _callAndReportToErrorHandler(exceptionHandler, ngZone, () => {\n                const initStatus = envInjector.get(ApplicationInitStatus);\n                initStatus.runInitializers();\n                return initStatus.donePromise.then(() => {\n                    const localeId = envInjector.get(LOCALE_ID, DEFAULT_LOCALE_ID);\n                    setLocaleId(localeId || DEFAULT_LOCALE_ID);\n                    const appRef = envInjector.get(ApplicationRef);\n                    if (rootComponent !== undefined) {\n                        appRef.bootstrap(rootComponent);\n                    }\n                    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                        const imagePerformanceService = envInjector.get(ImagePerformanceWarning);\n                        imagePerformanceService.start();\n                    }\n                    return appRef;\n                });\n            });\n        });\n    }\n    catch (e) {\n        return Promise.reject(e);\n    }\n}\n\n/**\n * Retrieves all defer blocks in a given LView.\n *\n * @param lView lView with defer blocks\n * @param deferBlocks defer block aggregator array\n */\nfunction getDeferBlocks(lView, deferBlocks) {\n    const tView = lView[TVIEW];\n    for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {\n        if (isLContainer(lView[i])) {\n            const lContainer = lView[i];\n            // An LContainer may represent an instance of a defer block, in which case\n            // we store it as a result. Otherwise, keep iterating over LContainer views and\n            // look for defer blocks.\n            const isLast = i === tView.bindingStartIndex - 1;\n            if (!isLast) {\n                const tNode = tView.data[i];\n                const tDetails = getTDeferBlockDetails(tView, tNode);\n                if (isTDeferBlockDetails(tDetails)) {\n                    deferBlocks.push({ lContainer, lView, tNode, tDetails });\n                    // This LContainer represents a defer block, so we exit\n                    // this iteration and don't inspect views in this LContainer.\n                    continue;\n                }\n            }\n            for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n                getDeferBlocks(lContainer[i], deferBlocks);\n            }\n        }\n        else if (isLView(lView[i])) {\n            // This is a component, enter the `getDeferBlocks` recursively.\n            getDeferBlocks(lView[i], deferBlocks);\n        }\n    }\n}\n\n/**\n * A collection that tracks all serialized views (`ngh` DOM annotations)\n * to avoid duplication. An attempt to add a duplicate view results in the\n * collection returning the index of the previously collected serialized view.\n * This reduces the number of annotations needed for a given page.\n */\nclass SerializedViewCollection {\n    constructor() {\n        this.views = [];\n        this.indexByContent = new Map();\n    }\n    add(serializedView) {\n        const viewAsString = JSON.stringify(serializedView);\n        if (!this.indexByContent.has(viewAsString)) {\n            const index = this.views.length;\n            this.views.push(serializedView);\n            this.indexByContent.set(viewAsString, index);\n            return index;\n        }\n        return this.indexByContent.get(viewAsString);\n    }\n    getAll() {\n        return this.views;\n    }\n}\n/**\n * Global counter that is used to generate a unique id for TViews\n * during the serialization process.\n */\nlet tViewSsrId = 0;\n/**\n * Generates a unique id for a given TView and returns this id.\n * The id is also stored on this instance of a TView and reused in\n * subsequent calls.\n *\n * This id is needed to uniquely identify and pick up dehydrated views\n * at runtime.\n */\nfunction getSsrId(tView) {\n    if (!tView.ssrId) {\n        tView.ssrId = `t${tViewSsrId++}`;\n    }\n    return tView.ssrId;\n}\n/**\n * Computes the number of root nodes in a given view\n * (or child nodes in a given container if a tNode is provided).\n */\nfunction calcNumRootNodes(tView, lView, tNode) {\n    const rootNodes = [];\n    collectNativeNodes(tView, lView, tNode, rootNodes);\n    return rootNodes.length;\n}\n/**\n * Computes the number of root nodes in all views in a given LContainer.\n */\nfunction calcNumRootNodesInLContainer(lContainer) {\n    const rootNodes = [];\n    collectNativeNodesInLContainer(lContainer, rootNodes);\n    return rootNodes.length;\n}\n/**\n * Annotates root level component's LView for hydration,\n * see `annotateHostElementForHydration` for additional information.\n */\nfunction annotateComponentLViewForHydration(lView, context) {\n    const hostElement = lView[HOST];\n    // Root elements might also be annotated with the `ngSkipHydration` attribute,\n    // check if it's present before starting the serialization process.\n    if (hostElement && !hostElement.hasAttribute(SKIP_HYDRATION_ATTR_NAME)) {\n        return annotateHostElementForHydration(hostElement, lView, context);\n    }\n    return null;\n}\n/**\n * Annotates root level LContainer for hydration. This happens when a root component\n * injects ViewContainerRef, thus making the component an anchor for a view container.\n * This function serializes the component itself as well as all views from the view\n * container.\n */\nfunction annotateLContainerForHydration(lContainer, context) {\n    const componentLView = unwrapLView(lContainer[HOST]);\n    // Serialize the root component itself.\n    const componentLViewNghIndex = annotateComponentLViewForHydration(componentLView, context);\n    const hostElement = unwrapRNode(componentLView[HOST]);\n    // Serialize all views within this view container.\n    const rootLView = lContainer[PARENT];\n    const rootLViewNghIndex = annotateHostElementForHydration(hostElement, rootLView, context);\n    const renderer = componentLView[RENDERER];\n    // For cases when a root component also acts as an anchor node for a ViewContainerRef\n    // (for example, when ViewContainerRef is injected in a root component), there is a need\n    // to serialize information about the component itself, as well as an LContainer that\n    // represents this ViewContainerRef. Effectively, we need to serialize 2 pieces of info:\n    // (1) hydration info for the root component itself and (2) hydration info for the\n    // ViewContainerRef instance (an LContainer). Each piece of information is included into\n    // the hydration data (in the TransferState object) separately, thus we end up with 2 ids.\n    // Since we only have 1 root element, we encode both bits of info into a single string:\n    // ids are separated by the `|` char (e.g. `10|25`, where `10` is the ngh for a component view\n    // and 25 is the `ngh` for a root view which holds LContainer).\n    const finalIndex = `${componentLViewNghIndex}|${rootLViewNghIndex}`;\n    renderer.setAttribute(hostElement, NGH_ATTR_NAME, finalIndex);\n}\n/**\n * Annotates all components bootstrapped in a given ApplicationRef\n * with info needed for hydration.\n *\n * @param appRef An instance of an ApplicationRef.\n * @param doc A reference to the current Document instance.\n */\nfunction annotateForHydration(appRef, doc) {\n    const serializedViewCollection = new SerializedViewCollection();\n    const corruptedTextNodes = new Map();\n    const viewRefs = appRef._views;\n    for (const viewRef of viewRefs) {\n        const lNode = getLNodeForHydration(viewRef);\n        // An `lView` might be `null` if a `ViewRef` represents\n        // an embedded view (not a component view).\n        if (lNode !== null) {\n            const context = {\n                serializedViewCollection,\n                corruptedTextNodes,\n            };\n            if (isLContainer(lNode)) {\n                annotateLContainerForHydration(lNode, context);\n            }\n            else {\n                annotateComponentLViewForHydration(lNode, context);\n            }\n            insertCorruptedTextNodeMarkers(corruptedTextNodes, doc);\n        }\n    }\n    // Note: we *always* include hydration info key and a corresponding value\n    // into the TransferState, even if the list of serialized views is empty.\n    // This is needed as a signal to the client that the server part of the\n    // hydration logic was setup and enabled correctly. Otherwise, if a client\n    // hydration doesn't find a key in the transfer state - an error is produced.\n    const serializedViews = serializedViewCollection.getAll();\n    const transferState = appRef.injector.get(TransferState);\n    transferState.set(NGH_DATA_KEY, serializedViews);\n}\n/**\n * Serializes the lContainer data into a list of SerializedView objects,\n * that represent views within this lContainer.\n *\n * @param lContainer the lContainer we are serializing\n * @param context the hydration context\n * @returns an array of the `SerializedView` objects\n */\nfunction serializeLContainer(lContainer, context) {\n    const views = [];\n    let lastViewAsString = '';\n    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n        let childLView = lContainer[i];\n        let template;\n        let numRootNodes;\n        let serializedView;\n        if (isRootView(childLView)) {\n            // If this is a root view, get an LView for the underlying component,\n            // because it contains information about the view to serialize.\n            childLView = childLView[HEADER_OFFSET];\n            // If we have an LContainer at this position, this indicates that the\n            // host element was used as a ViewContainerRef anchor (e.g. a `ViewContainerRef`\n            // was injected within the component class). This case requires special handling.\n            if (isLContainer(childLView)) {\n                // Calculate the number of root nodes in all views in a given container\n                // and increment by one to account for an anchor node itself, i.e. in this\n                // scenario we'll have a layout that would look like this:\n                // `<app-root /><#VIEW1><#VIEW2>...<!--container-->`\n                // The `+1` is to capture the `<app-root />` element.\n                numRootNodes = calcNumRootNodesInLContainer(childLView) + 1;\n                annotateLContainerForHydration(childLView, context);\n                const componentLView = unwrapLView(childLView[HOST]);\n                serializedView = {\n                    [TEMPLATE_ID]: componentLView[TVIEW].ssrId,\n                    [NUM_ROOT_NODES]: numRootNodes,\n                };\n            }\n        }\n        if (!serializedView) {\n            const childTView = childLView[TVIEW];\n            if (childTView.type === 1 /* TViewType.Component */) {\n                template = childTView.ssrId;\n                // This is a component view, thus it has only 1 root node: the component\n                // host node itself (other nodes would be inside that host node).\n                numRootNodes = 1;\n            }\n            else {\n                template = getSsrId(childTView);\n                numRootNodes = calcNumRootNodes(childTView, childLView, childTView.firstChild);\n            }\n            serializedView = {\n                [TEMPLATE_ID]: template,\n                [NUM_ROOT_NODES]: numRootNodes,\n                ...serializeLView(lContainer[i], context),\n            };\n        }\n        // Check if the previous view has the same shape (for example, it was\n        // produced by the *ngFor), in which case bump the counter on the previous\n        // view instead of including the same information again.\n        const currentViewAsString = JSON.stringify(serializedView);\n        if (views.length > 0 && currentViewAsString === lastViewAsString) {\n            const previousView = views[views.length - 1];\n            previousView[MULTIPLIER] ??= 1;\n            previousView[MULTIPLIER]++;\n        }\n        else {\n            // Record this view as most recently added.\n            lastViewAsString = currentViewAsString;\n            views.push(serializedView);\n        }\n    }\n    return views;\n}\n/**\n * Helper function to produce a node path (which navigation steps runtime logic\n * needs to take to locate a node) and stores it in the `NODES` section of the\n * current serialized view.\n */\nfunction appendSerializedNodePath(ngh, tNode, lView) {\n    const noOffsetIndex = tNode.index - HEADER_OFFSET;\n    ngh[NODES] ??= {};\n    ngh[NODES][noOffsetIndex] = calcPathForNode(tNode, lView);\n}\n/**\n * Helper function to append information about a disconnected node.\n * This info is needed at runtime to avoid DOM lookups for this element\n * and instead, the element would be created from scratch.\n */\nfunction appendDisconnectedNodeIndex(ngh, tNode) {\n    const noOffsetIndex = tNode.index - HEADER_OFFSET;\n    ngh[DISCONNECTED_NODES] ??= [];\n    if (!ngh[DISCONNECTED_NODES].includes(noOffsetIndex)) {\n        ngh[DISCONNECTED_NODES].push(noOffsetIndex);\n    }\n}\n/**\n * Serializes the lView data into a SerializedView object that will later be added\n * to the TransferState storage and referenced using the `ngh` attribute on a host\n * element.\n *\n * @param lView the lView we are serializing\n * @param context the hydration context\n * @returns the `SerializedView` object containing the data to be added to the host node\n */\nfunction serializeLView(lView, context) {\n    const ngh = {};\n    const tView = lView[TVIEW];\n    // Iterate over DOM element references in an LView.\n    for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {\n        const tNode = tView.data[i];\n        const noOffsetIndex = i - HEADER_OFFSET;\n        // Skip processing of a given slot in the following cases:\n        // - Local refs (e.g. <div #localRef>) take up an extra slot in LViews\n        //   to store the same element. In this case, there is no information in\n        //   a corresponding slot in TNode data structure.\n        // - When a slot contains something other than a TNode. For example, there\n        //   might be some metadata information about a defer block or a control flow block.\n        if (!isTNodeShape(tNode)) {\n            continue;\n        }\n        // Check if a native node that represents a given TNode is disconnected from the DOM tree.\n        // Such nodes must be excluded from the hydration (since the hydration won't be able to\n        // find them), so the TNode ids are collected and used at runtime to skip the hydration.\n        //\n        // This situation may happen during the content projection, when some nodes don't make it\n        // into one of the content projection slots (for example, when there is no default\n        // <ng-content /> slot in projector component's template).\n        if (isDisconnectedNode(tNode, lView) && isContentProjectedNode(tNode)) {\n            appendDisconnectedNodeIndex(ngh, tNode);\n            continue;\n        }\n        if (Array.isArray(tNode.projection)) {\n            for (const projectionHeadTNode of tNode.projection) {\n                // We may have `null`s in slots with no projected content.\n                if (!projectionHeadTNode)\n                    continue;\n                if (!Array.isArray(projectionHeadTNode)) {\n                    // If we process re-projected content (i.e. `<ng-content>`\n                    // appears at projection location), skip annotations for this content\n                    // since all DOM nodes in this projection were handled while processing\n                    // a parent lView, which contains those nodes.\n                    if (!isProjectionTNode(projectionHeadTNode) &&\n                        !isInSkipHydrationBlock(projectionHeadTNode)) {\n                        if (isDisconnectedNode(projectionHeadTNode, lView)) {\n                            // Check whether this node is connected, since we may have a TNode\n                            // in the data structure as a projection segment head, but the\n                            // content projection slot might be disabled (e.g.\n                            // <ng-content *ngIf=\"false\" />).\n                            appendDisconnectedNodeIndex(ngh, projectionHeadTNode);\n                        }\n                        else {\n                            appendSerializedNodePath(ngh, projectionHeadTNode, lView);\n                        }\n                    }\n                }\n                else {\n                    // If a value is an array, it means that we are processing a projection\n                    // where projectable nodes were passed in as DOM nodes (for example, when\n                    // calling `ViewContainerRef.createComponent(CmpA, {projectableNodes: [...]})`).\n                    //\n                    // In this scenario, nodes can come from anywhere (either created manually,\n                    // accessed via `document.querySelector`, etc) and may be in any state\n                    // (attached or detached from the DOM tree). As a result, we can not reliably\n                    // restore the state for such cases during hydration.\n                    throw unsupportedProjectionOfDomNodes(unwrapRNode(lView[i]));\n                }\n            }\n        }\n        conditionallyAnnotateNodePath(ngh, tNode, lView);\n        if (isLContainer(lView[i])) {\n            // Serialize information about a template.\n            const embeddedTView = tNode.tView;\n            if (embeddedTView !== null) {\n                ngh[TEMPLATES] ??= {};\n                ngh[TEMPLATES][noOffsetIndex] = getSsrId(embeddedTView);\n            }\n            // Serialize views within this LContainer.\n            const hostNode = lView[i][HOST]; // host node of this container\n            // LView[i][HOST] can be of 2 different types:\n            // - either a DOM node\n            // - or an array that represents an LView of a component\n            if (Array.isArray(hostNode)) {\n                // This is a component, serialize info about it.\n                const targetNode = unwrapRNode(hostNode);\n                if (!targetNode.hasAttribute(SKIP_HYDRATION_ATTR_NAME)) {\n                    annotateHostElementForHydration(targetNode, hostNode, context);\n                }\n            }\n            ngh[CONTAINERS] ??= {};\n            ngh[CONTAINERS][noOffsetIndex] = serializeLContainer(lView[i], context);\n        }\n        else if (Array.isArray(lView[i])) {\n            // This is a component, annotate the host node with an `ngh` attribute.\n            const targetNode = unwrapRNode(lView[i][HOST]);\n            if (!targetNode.hasAttribute(SKIP_HYDRATION_ATTR_NAME)) {\n                annotateHostElementForHydration(targetNode, lView[i], context);\n            }\n        }\n        else {\n            // <ng-container> case\n            if (tNode.type & 8 /* TNodeType.ElementContainer */) {\n                // An <ng-container> is represented by the number of\n                // top-level nodes. This information is needed to skip over\n                // those nodes to reach a corresponding anchor node (comment node).\n                ngh[ELEMENT_CONTAINERS] ??= {};\n                ngh[ELEMENT_CONTAINERS][noOffsetIndex] = calcNumRootNodes(tView, lView, tNode.child);\n            }\n            else if (tNode.type & 16 /* TNodeType.Projection */) {\n                // Current TNode represents an `<ng-content>` slot, thus it has no\n                // DOM elements associated with it, so the **next sibling** node would\n                // not be able to find an anchor. In this case, use full path instead.\n                let nextTNode = tNode.next;\n                // Skip over all `<ng-content>` slots in a row.\n                while (nextTNode !== null && (nextTNode.type & 16 /* TNodeType.Projection */)) {\n                    nextTNode = nextTNode.next;\n                }\n                if (nextTNode && !isInSkipHydrationBlock(nextTNode)) {\n                    // Handle a tNode after the `<ng-content>` slot.\n                    appendSerializedNodePath(ngh, nextTNode, lView);\n                }\n            }\n            else {\n                // Handle cases where text nodes can be lost after DOM serialization:\n                //  1. When there is an *empty text node* in DOM: in this case, this\n                //     node would not make it into the serialized string and as a result,\n                //     this node wouldn't be created in a browser. This would result in\n                //     a mismatch during the hydration, where the runtime logic would expect\n                //     a text node to be present in live DOM, but no text node would exist.\n                //     Example: `<span>{{ name }}</span>` when the `name` is an empty string.\n                //     This would result in `<span></span>` string after serialization and\n                //     in a browser only the `span` element would be created. To resolve that,\n                //     an extra comment node is appended in place of an empty text node and\n                //     that special comment node is replaced with an empty text node *before*\n                //     hydration.\n                //  2. When there are 2 consecutive text nodes present in the DOM.\n                //     Example: `<div>Hello <ng-container *ngIf=\"true\">world</ng-container></div>`.\n                //     In this scenario, the live DOM would look like this:\n                //       <div>#text('Hello ') #text('world') #comment('container')</div>\n                //     Serialized string would look like this: `<div>Hello world<!--container--></div>`.\n                //     The live DOM in a browser after that would be:\n                //       <div>#text('Hello world') #comment('container')</div>\n                //     Notice how 2 text nodes are now \"merged\" into one. This would cause hydration\n                //     logic to fail, since it'd expect 2 text nodes being present, not one.\n                //     To fix this, we insert a special comment node in between those text nodes, so\n                //     serialized representation is: `<div>Hello <!--ngtns-->world<!--container--></div>`.\n                //     This forces browser to create 2 text nodes separated by a comment node.\n                //     Before running a hydration process, this special comment node is removed, so the\n                //     live DOM has exactly the same state as it was before serialization.\n                if (tNode.type & 1 /* TNodeType.Text */) {\n                    const rNode = unwrapRNode(lView[i]);\n                    // Collect this node as required special annotation only when its\n                    // contents is empty. Otherwise, such text node would be present on\n                    // the client after server-side rendering and no special handling needed.\n                    if (rNode.textContent === '') {\n                        context.corruptedTextNodes.set(rNode, \"ngetn\" /* TextNodeMarker.EmptyNode */);\n                    }\n                    else if (rNode.nextSibling?.nodeType === Node.TEXT_NODE) {\n                        context.corruptedTextNodes.set(rNode, \"ngtns\" /* TextNodeMarker.Separator */);\n                    }\n                }\n            }\n        }\n    }\n    return ngh;\n}\n/**\n * Serializes node location in cases when it's needed, specifically:\n *\n *  1. If `tNode.projectionNext` is different from `tNode.next` - it means that\n *     the next `tNode` after projection is different from the one in the original\n *     template. Since hydration relies on `tNode.next`, this serialized info\n *     if required to help runtime code find the node at the correct location.\n *  2. In certain content projection-based use-cases, it's possible that only\n *     a content of a projected element is rendered. In this case, content nodes\n *     require an extra annotation, since runtime logic can't rely on parent-child\n *     connection to identify the location of a node.\n */\nfunction conditionallyAnnotateNodePath(ngh, tNode, lView) {\n    // Handle case #1 described above.\n    if (tNode.projectionNext && tNode.projectionNext !== tNode.next &&\n        !isInSkipHydrationBlock(tNode.projectionNext)) {\n        appendSerializedNodePath(ngh, tNode.projectionNext, lView);\n    }\n    // Handle case #2 described above.\n    // Note: we only do that for the first node (i.e. when `tNode.prev === null`),\n    // the rest of the nodes would rely on the current node location, so no extra\n    // annotation is needed.\n    if (tNode.prev === null && tNode.parent !== null && isDisconnectedNode(tNode.parent, lView) &&\n        !isDisconnectedNode(tNode, lView)) {\n        appendSerializedNodePath(ngh, tNode, lView);\n    }\n}\n/**\n * Determines whether a component instance that is represented\n * by a given LView uses `ViewEncapsulation.ShadowDom`.\n */\nfunction componentUsesShadowDomEncapsulation(lView) {\n    const instance = lView[CONTEXT];\n    return instance?.constructor ?\n        getComponentDef(instance.constructor)?.encapsulation === ViewEncapsulation$1.ShadowDom :\n        false;\n}\n/**\n * Annotates component host element for hydration:\n * - by either adding the `ngh` attribute and collecting hydration-related info\n *   for the serialization and transferring to the client\n * - or by adding the `ngSkipHydration` attribute in case Angular detects that\n *   component contents is not compatible with hydration.\n *\n * @param element The Host element to be annotated\n * @param lView The associated LView\n * @param context The hydration context\n * @returns An index of serialized view from the transfer state object\n *          or `null` when a given component can not be serialized.\n */\nfunction annotateHostElementForHydration(element, lView, context) {\n    const renderer = lView[RENDERER];\n    if (hasI18n(lView) || componentUsesShadowDomEncapsulation(lView)) {\n        // Attach the skip hydration attribute if this component:\n        // - either has i18n blocks, since hydrating such blocks is not yet supported\n        // - or uses ShadowDom view encapsulation, since Domino doesn't support\n        //   shadow DOM, so we can not guarantee that client and server representations\n        //   would exactly match\n        renderer.setAttribute(element, SKIP_HYDRATION_ATTR_NAME, '');\n        return null;\n    }\n    else {\n        const ngh = serializeLView(lView, context);\n        const index = context.serializedViewCollection.add(ngh);\n        renderer.setAttribute(element, NGH_ATTR_NAME, index.toString());\n        return index;\n    }\n}\n/**\n * Physically inserts the comment nodes to ensure empty text nodes and adjacent\n * text node separators are preserved after server serialization of the DOM.\n * These get swapped back for empty text nodes or separators once hydration happens\n * on the client.\n *\n * @param corruptedTextNodes The Map of text nodes to be replaced with comments\n * @param doc The document\n */\nfunction insertCorruptedTextNodeMarkers(corruptedTextNodes, doc) {\n    for (const [textNode, marker] of corruptedTextNodes) {\n        textNode.after(doc.createComment(marker));\n    }\n}\n/**\n * Detects whether a given TNode represents a node that\n * is being content projected.\n */\nfunction isContentProjectedNode(tNode) {\n    let currentTNode = tNode;\n    while (currentTNode != null) {\n        // If we come across a component host node in parent nodes -\n        // this TNode is in the content projection section.\n        if (isComponentHost(currentTNode)) {\n            return true;\n        }\n        currentTNode = currentTNode.parent;\n    }\n    return false;\n}\n\n/**\n * Indicates whether the hydration-related code was added,\n * prevents adding it multiple times.\n */\nlet isHydrationSupportEnabled = false;\n/**\n * Defines a period of time that Angular waits for the `ApplicationRef.isStable` to emit `true`.\n * If there was no event with the `true` value during this time, Angular reports a warning.\n */\nconst APPLICATION_IS_STABLE_TIMEOUT = 10000;\n/**\n * Brings the necessary hydration code in tree-shakable manner.\n * The code is only present when the `provideClientHydration` is\n * invoked. Otherwise, this code is tree-shaken away during the\n * build optimization step.\n *\n * This technique allows us to swap implementations of methods so\n * tree shaking works appropriately when hydration is disabled or\n * enabled. It brings in the appropriate version of the method that\n * supports hydration only when enabled.\n */\nfunction enableHydrationRuntimeSupport() {\n    if (!isHydrationSupportEnabled) {\n        isHydrationSupportEnabled = true;\n        enableRetrieveHydrationInfoImpl();\n        enableLocateOrCreateElementNodeImpl();\n        enableLocateOrCreateTextNodeImpl();\n        enableLocateOrCreateElementContainerNodeImpl();\n        enableLocateOrCreateContainerAnchorImpl();\n        enableLocateOrCreateContainerRefImpl();\n        enableFindMatchingDehydratedViewImpl();\n        enableApplyRootElementTransformImpl();\n    }\n}\n/**\n * Outputs a message with hydration stats into a console.\n */\nfunction printHydrationStats(injector) {\n    const console = injector.get(Console);\n    const message = `Angular hydrated ${ngDevMode.hydratedComponents} component(s) ` +\n        `and ${ngDevMode.hydratedNodes} node(s), ` +\n        `${ngDevMode.componentsSkippedHydration} component(s) were skipped. ` +\n        `Learn more at https://angular.io/guide/hydration.`;\n    // tslint:disable-next-line:no-console\n    console.log(message);\n}\n/**\n * Returns a Promise that is resolved when an application becomes stable.\n */\nfunction whenStableWithTimeout(appRef, injector) {\n    const whenStablePromise = whenStable(appRef);\n    if (typeof ngDevMode !== 'undefined' && ngDevMode) {\n        const timeoutTime = APPLICATION_IS_STABLE_TIMEOUT;\n        const console = injector.get(Console);\n        const ngZone = injector.get(NgZone);\n        // The following call should not and does not prevent the app to become stable\n        // We cannot use RxJS timer here because the app would remain unstable.\n        // This also avoids an extra change detection cycle.\n        const timeoutId = ngZone.runOutsideAngular(() => {\n            return setTimeout(() => logWarningOnStableTimedout(timeoutTime, console), timeoutTime);\n        });\n        whenStablePromise.finally(() => clearTimeout(timeoutId));\n    }\n    return whenStablePromise;\n}\n/**\n * Returns a set of providers required to setup hydration support\n * for an application that is server side rendered. This function is\n * included into the `provideClientHydration` public API function from\n * the `platform-browser` package.\n *\n * The function sets up an internal flag that would be recognized during\n * the server side rendering time as well, so there is no need to\n * configure or change anything in NgUniversal to enable the feature.\n */\nfunction withDomHydration() {\n    return makeEnvironmentProviders([\n        {\n            provide: IS_HYDRATION_DOM_REUSE_ENABLED,\n            useFactory: () => {\n                let isEnabled = true;\n                if (isPlatformBrowser()) {\n                    // On the client, verify that the server response contains\n                    // hydration annotations. Otherwise, keep hydration disabled.\n                    const transferState = inject(TransferState, { optional: true });\n                    isEnabled = !!transferState?.get(NGH_DATA_KEY, null);\n                    if (!isEnabled && (typeof ngDevMode !== 'undefined' && ngDevMode)) {\n                        const console = inject(Console);\n                        const message = formatRuntimeError(-505 /* RuntimeErrorCode.MISSING_HYDRATION_ANNOTATIONS */, 'Angular hydration was requested on the client, but there was no ' +\n                            'serialized information present in the server response, ' +\n                            'thus hydration was not enabled. ' +\n                            'Make sure the `provideClientHydration()` is included into the list ' +\n                            'of providers in the server part of the application configuration.');\n                        // tslint:disable-next-line:no-console\n                        console.warn(message);\n                    }\n                }\n                if (isEnabled) {\n                    performanceMarkFeature('NgHydration');\n                }\n                return isEnabled;\n            },\n        },\n        {\n            provide: ENVIRONMENT_INITIALIZER,\n            useValue: () => {\n                // Since this function is used across both server and client,\n                // make sure that the runtime code is only added when invoked\n                // on the client. Moving forward, the `isPlatformBrowser` check should\n                // be replaced with a tree-shakable alternative (e.g. `isServer`\n                // flag).\n                if (isPlatformBrowser() && inject(IS_HYDRATION_DOM_REUSE_ENABLED)) {\n                    verifySsrContentsIntegrity();\n                    enableHydrationRuntimeSupport();\n                }\n            },\n            multi: true,\n        },\n        {\n            provide: PRESERVE_HOST_CONTENT,\n            useFactory: () => {\n                // Preserve host element content only in a browser\n                // environment and when hydration is configured properly.\n                // On a server, an application is rendered from scratch,\n                // so the host content needs to be empty.\n                return isPlatformBrowser() && inject(IS_HYDRATION_DOM_REUSE_ENABLED);\n            }\n        },\n        {\n            provide: APP_BOOTSTRAP_LISTENER,\n            useFactory: () => {\n                if (isPlatformBrowser() && inject(IS_HYDRATION_DOM_REUSE_ENABLED)) {\n                    const appRef = inject(ApplicationRef);\n                    const injector = inject(Injector);\n                    return () => {\n                        // Wait until an app becomes stable and cleanup all views that\n                        // were not claimed during the application bootstrap process.\n                        // The timing is similar to when we start the serialization process\n                        // on the server.\n                        //\n                        // Note: the cleanup task *MUST* be scheduled within the Angular zone\n                        // to ensure that change detection is properly run afterward.\n                        whenStableWithTimeout(appRef, injector).then(() => {\n                            NgZone.assertInAngularZone();\n                            cleanupDehydratedViews(appRef);\n                            if (typeof ngDevMode !== 'undefined' && ngDevMode) {\n                                printHydrationStats(injector);\n                            }\n                        });\n                    };\n                }\n                return () => { }; // noop\n            },\n            multi: true,\n        }\n    ]);\n}\n/**\n *\n * @param time The time in ms until the stable timedout warning message is logged\n */\nfunction logWarningOnStableTimedout(time, console) {\n    const message = `Angular hydration expected the ApplicationRef.isStable() to emit \\`true\\`, but it ` +\n        `didn't happen within ${time}ms. Angular hydration logic depends on the application becoming stable ` +\n        `as a signal to complete hydration process.`;\n    console.warn(formatRuntimeError(-506 /* RuntimeErrorCode.HYDRATION_STABLE_TIMEDOUT */, message));\n}\n/**\n * Verifies whether the DOM contains a special marker added during SSR time to make sure\n * there is no SSR'ed contents transformations happen after SSR is completed. Typically that\n * happens either by CDN or during the build process as an optimization to remove comment nodes.\n * Hydration process requires comment nodes produced by Angular to locate correct DOM segments.\n * When this special marker is *not* present - throw an error and do not proceed with hydration,\n * since it will not be able to function correctly.\n *\n * Note: this function is invoked only on the client, so it's safe to use DOM APIs.\n */\nfunction verifySsrContentsIntegrity() {\n    const doc = getDocument();\n    let hydrationMarker;\n    for (const node of doc.body.childNodes) {\n        if (node.nodeType === Node.COMMENT_NODE &&\n            node.textContent?.trim() === SSR_CONTENT_INTEGRITY_MARKER) {\n            hydrationMarker = node;\n            break;\n        }\n    }\n    if (!hydrationMarker) {\n        throw new RuntimeError(-507 /* RuntimeErrorCode.MISSING_SSR_CONTENT_INTEGRITY_MARKER */, typeof ngDevMode !== 'undefined' && ngDevMode &&\n            'Angular hydration logic detected that HTML content of this page was modified after it ' +\n                'was produced during server side rendering. Make sure that there are no optimizations ' +\n                'that remove comment nodes from HTML enabled on your CDN. Angular hydration ' +\n                'relies on HTML produced by the server, including whitespaces and comment nodes.');\n    }\n}\n\n/**\n * Transforms a value (typically a string) to a boolean.\n * Intended to be used as a transform function of an input.\n *\n *  @usageNotes\n *  ```typescript\n *  @Input({ transform: booleanAttribute }) status!: boolean;\n *  ```\n * @param value Value to be transformed.\n *\n * @publicApi\n */\nfunction booleanAttribute(value) {\n    return typeof value === 'boolean' ? value : (value != null && value !== 'false');\n}\n/**\n * Transforms a value (typically a string) to a number.\n * Intended to be used as a transform function of an input.\n * @param value Value to be transformed.\n * @param fallbackValue Value to use if the provided value can't be parsed as a number.\n *\n *  @usageNotes\n *  ```typescript\n *  @Input({ transform: numberAttribute }) id!: number;\n *  ```\n *\n * @publicApi\n */\nfunction numberAttribute(value, fallbackValue = NaN) {\n    // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n    // and other non-number values as NaN, where Number just uses 0) but it considers the string\n    // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n    const isNumberValue = !isNaN(parseFloat(value)) && !isNaN(Number(value));\n    return isNumberValue ? Number(value) : fallbackValue;\n}\n\n/**\n * Compiles a partial directive declaration object into a full directive definition object.\n *\n * @codeGenApi\n */\nfunction ɵɵngDeclareDirective(decl) {\n    const compiler = getCompilerFacade({ usage: 1 /* JitCompilerUsage.PartialDeclaration */, kind: 'directive', type: decl.type });\n    return compiler.compileDirectiveDeclaration(angularCoreEnv, `ng:///${decl.type.name}/ɵfac.js`, decl);\n}\n/**\n * Evaluates the class metadata declaration.\n *\n * @codeGenApi\n */\nfunction ɵɵngDeclareClassMetadata(decl) {\n    setClassMetadata(decl.type, decl.decorators, decl.ctorParameters ?? null, decl.propDecorators ?? null);\n}\n/**\n * Compiles a partial component declaration object into a full component definition object.\n *\n * @codeGenApi\n */\nfunction ɵɵngDeclareComponent(decl) {\n    const compiler = getCompilerFacade({ usage: 1 /* JitCompilerUsage.PartialDeclaration */, kind: 'component', type: decl.type });\n    return compiler.compileComponentDeclaration(angularCoreEnv, `ng:///${decl.type.name}/ɵcmp.js`, decl);\n}\n/**\n * Compiles a partial pipe declaration object into a full pipe definition object.\n *\n * @codeGenApi\n */\nfunction ɵɵngDeclareFactory(decl) {\n    const compiler = getCompilerFacade({\n        usage: 1 /* JitCompilerUsage.PartialDeclaration */,\n        kind: getFactoryKind(decl.target),\n        type: decl.type\n    });\n    return compiler.compileFactoryDeclaration(angularCoreEnv, `ng:///${decl.type.name}/ɵfac.js`, decl);\n}\nfunction getFactoryKind(target) {\n    switch (target) {\n        case FactoryTarget.Directive:\n            return 'directive';\n        case FactoryTarget.Component:\n            return 'component';\n        case FactoryTarget.Injectable:\n            return 'injectable';\n        case FactoryTarget.Pipe:\n            return 'pipe';\n        case FactoryTarget.NgModule:\n            return 'NgModule';\n    }\n}\n/**\n * Compiles a partial injectable declaration object into a full injectable definition object.\n *\n * @codeGenApi\n */\nfunction ɵɵngDeclareInjectable(decl) {\n    const compiler = getCompilerFacade({ usage: 1 /* JitCompilerUsage.PartialDeclaration */, kind: 'injectable', type: decl.type });\n    return compiler.compileInjectableDeclaration(angularCoreEnv, `ng:///${decl.type.name}/ɵprov.js`, decl);\n}\n/**\n * Compiles a partial injector declaration object into a full injector definition object.\n *\n * @codeGenApi\n */\nfunction ɵɵngDeclareInjector(decl) {\n    const compiler = getCompilerFacade({ usage: 1 /* JitCompilerUsage.PartialDeclaration */, kind: 'NgModule', type: decl.type });\n    return compiler.compileInjectorDeclaration(angularCoreEnv, `ng:///${decl.type.name}/ɵinj.js`, decl);\n}\n/**\n * Compiles a partial NgModule declaration object into a full NgModule definition object.\n *\n * @codeGenApi\n */\nfunction ɵɵngDeclareNgModule(decl) {\n    const compiler = getCompilerFacade({ usage: 1 /* JitCompilerUsage.PartialDeclaration */, kind: 'NgModule', type: decl.type });\n    return compiler.compileNgModuleDeclaration(angularCoreEnv, `ng:///${decl.type.name}/ɵmod.js`, decl);\n}\n/**\n * Compiles a partial pipe declaration object into a full pipe definition object.\n *\n * @codeGenApi\n */\nfunction ɵɵngDeclarePipe(decl) {\n    const compiler = getCompilerFacade({ usage: 1 /* JitCompilerUsage.PartialDeclaration */, kind: 'pipe', type: decl.type });\n    return compiler.compilePipeDeclaration(angularCoreEnv, `ng:///${decl.type.name}/ɵpipe.js`, decl);\n}\n\n// clang-format off\n// clang-format on\n\n// This file exists to allow the set of reactivity exports to be modified in g3, as these APIs are\n\n/**\n * Creates a `ComponentRef` instance based on provided component type and a set of options.\n *\n * @usageNotes\n *\n * The example below demonstrates how the `createComponent` function can be used\n * to create an instance of a ComponentRef dynamically and attach it to an ApplicationRef,\n * so that it gets included into change detection cycles.\n *\n * Note: the example uses standalone components, but the function can also be used for\n * non-standalone components (declared in an NgModule) as well.\n *\n * ```typescript\n * @Component({\n *   standalone: true,\n *   template: `Hello {{ name }}!`\n * })\n * class HelloComponent {\n *   name = 'Angular';\n * }\n *\n * @Component({\n *   standalone: true,\n *   template: `<div id=\"hello-component-host\"></div>`\n * })\n * class RootComponent {}\n *\n * // Bootstrap an application.\n * const applicationRef = await bootstrapApplication(RootComponent);\n *\n * // Locate a DOM node that would be used as a host.\n * const hostElement = document.getElementById('hello-component-host');\n *\n * // Get an `EnvironmentInjector` instance from the `ApplicationRef`.\n * const environmentInjector = applicationRef.injector;\n *\n * // We can now create a `ComponentRef` instance.\n * const componentRef = createComponent(HelloComponent, {hostElement, environmentInjector});\n *\n * // Last step is to register the newly created ref using the `ApplicationRef` instance\n * // to include the component view into change detection cycles.\n * applicationRef.attachView(componentRef.hostView);\n * componentRef.changeDetectorRef.detectChanges();\n * ```\n *\n * @param component Component class reference.\n * @param options Set of options to use:\n *  * `environmentInjector`: An `EnvironmentInjector` instance to be used for the component, see\n * additional info about it [here](/guide/standalone-components#environment-injectors).\n *  * `hostElement` (optional): A DOM node that should act as a host node for the component. If not\n * provided, Angular creates one based on the tag name used in the component selector (and falls\n * back to using `div` if selector doesn't have tag name info).\n *  * `elementInjector` (optional): An `ElementInjector` instance, see additional info about it\n * [here](/guide/hierarchical-dependency-injection#elementinjector).\n *  * `projectableNodes` (optional): A list of DOM nodes that should be projected through\n *                      [`<ng-content>`](api/core/ng-content) of the new component instance.\n * @returns ComponentRef instance that represents a given Component.\n *\n * @publicApi\n */\nfunction createComponent(component, options) {\n    ngDevMode && assertComponentDef(component);\n    const componentDef = getComponentDef(component);\n    const elementInjector = options.elementInjector || getNullInjector();\n    const factory = new ComponentFactory(componentDef);\n    return factory.create(elementInjector, options.projectableNodes, options.hostElement, options.environmentInjector);\n}\n/**\n * Creates an object that allows to retrieve component metadata.\n *\n * @usageNotes\n *\n * The example below demonstrates how to use the function and how the fields\n * of the returned object map to the component metadata.\n *\n * ```typescript\n * @Component({\n *   standalone: true,\n *   selector: 'foo-component',\n *   template: `\n *     <ng-content></ng-content>\n *     <ng-content select=\"content-selector-a\"></ng-content>\n *   `,\n * })\n * class FooComponent {\n *   @Input('inputName') inputPropName: string;\n *   @Output('outputName') outputPropName = new EventEmitter<void>();\n * }\n *\n * const mirror = reflectComponentType(FooComponent);\n * expect(mirror.type).toBe(FooComponent);\n * expect(mirror.selector).toBe('foo-component');\n * expect(mirror.isStandalone).toBe(true);\n * expect(mirror.inputs).toEqual([{propName: 'inputName', templateName: 'inputPropName'}]);\n * expect(mirror.outputs).toEqual([{propName: 'outputName', templateName: 'outputPropName'}]);\n * expect(mirror.ngContentSelectors).toEqual([\n *   '*',                 // first `<ng-content>` in a template, the selector defaults to `*`\n *   'content-selector-a' // second `<ng-content>` in a template\n * ]);\n * ```\n *\n * @param component Component class reference.\n * @returns An object that allows to retrieve component metadata.\n *\n * @publicApi\n */\nfunction reflectComponentType(component) {\n    const componentDef = getComponentDef(component);\n    if (!componentDef)\n        return null;\n    const factory = new ComponentFactory(componentDef);\n    return {\n        get selector() {\n            return factory.selector;\n        },\n        get type() {\n            return factory.componentType;\n        },\n        get inputs() {\n            return factory.inputs;\n        },\n        get outputs() {\n            return factory.outputs;\n        },\n        get ngContentSelectors() {\n            return factory.ngContentSelectors;\n        },\n        get isStandalone() {\n            return componentDef.standalone;\n        },\n        get isSignal() {\n            return componentDef.signals;\n        },\n    };\n}\n\n/**\n * Merge multiple application configurations from left to right.\n *\n * @param configs Two or more configurations to be merged.\n * @returns A merged [ApplicationConfig](api/core/ApplicationConfig).\n *\n * @publicApi\n */\nfunction mergeApplicationConfig(...configs) {\n    return configs.reduce((prev, curr) => {\n        return Object.assign(prev, curr, { providers: [...prev.providers, ...curr.providers] });\n    }, { providers: [] });\n}\n\n/**\n * @module\n * @description\n * Entry point from which you should import all public core APIs.\n */\nif (typeof ngDevMode !== 'undefined' && ngDevMode) {\n    // This helper is to give a reasonable error message to people upgrading to v9 that have not yet\n    // installed `@angular/localize` in their app.\n    // tslint:disable-next-line: no-toplevel-property-access\n    _global.$localize ??= function () {\n        throw new Error('It looks like your application or one of its dependencies is using i18n.\\n' +\n            'Angular 9 introduced a global `$localize()` function that needs to be loaded.\\n' +\n            'Please run `ng add @angular/localize` from the Angular CLI.\\n' +\n            '(For non-CLI projects, add `import \\'@angular/localize/init\\';` to your `polyfills.ts` file.\\n' +\n            'For server-side rendering applications add the import to your `main.server.ts` file.)');\n    };\n}\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/* This file is not used to build this module. It is only used during editing\n * by the TypeScript language service and during build for verification. `ngc`\n * replaces this file with production index.ts when it rewrites private symbol\n * names.\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ANIMATION_MODULE_TYPE, APP_BOOTSTRAP_LISTENER, APP_ID, APP_INITIALIZER, AfterRenderPhase, ApplicationInitStatus, ApplicationModule, ApplicationRef, Attribute, COMPILER_OPTIONS, CSP_NONCE, CUSTOM_ELEMENTS_SCHEMA, ChangeDetectionStrategy, ChangeDetectorRef, Compiler, CompilerFactory, Component, ComponentFactory$1 as ComponentFactory, ComponentFactoryResolver$1 as ComponentFactoryResolver, ComponentRef$1 as ComponentRef, ContentChild, ContentChildren, DEFAULT_CURRENCY_CODE, DebugElement, DebugEventListener, DebugNode, DefaultIterableDiffer, DestroyRef, Directive, ENVIRONMENT_INITIALIZER, ElementRef, EmbeddedViewRef, EnvironmentInjector, ErrorHandler, EventEmitter, Host, HostBinding, HostListener, INJECTOR, Inject, InjectFlags, Injectable, InjectionToken, Injector, Input, IterableDiffers, KeyValueDiffers, LOCALE_ID, MissingTranslationStrategy, ModuleWithComponentFactories, NO_ERRORS_SCHEMA, NgModule, NgModuleFactory$1 as NgModuleFactory, NgModuleRef$1 as NgModuleRef, NgProbeToken, NgZone, Optional, Output, PACKAGE_ROOT_URL, PLATFORM_ID, PLATFORM_INITIALIZER, Pipe, PlatformRef, Query, QueryList, Renderer2, RendererFactory2, RendererStyleFlags2, Sanitizer, SecurityContext, Self, SimpleChange, SkipSelf, TRANSLATIONS, TRANSLATIONS_FORMAT, TemplateRef, Testability, TestabilityRegistry, TransferState, Type, VERSION, Version, ViewChild, ViewChildren, ViewContainerRef, ViewEncapsulation$1 as ViewEncapsulation, ViewRef, afterNextRender, afterRender, asNativeElements, assertInInjectionContext, assertNotInReactiveContext, assertPlatform, booleanAttribute, computed, createComponent, createEnvironmentInjector, createNgModule, createNgModuleRef, createPlatform, createPlatformFactory, defineInjectable, destroyPlatform, effect, enableProdMode, forwardRef, getDebugNode, getModuleFactory, getNgModuleById, getPlatform, importProvidersFrom, inject, isDevMode, isSignal, isStandalone, makeEnvironmentProviders, makeStateKey, mergeApplicationConfig, numberAttribute, platformCore, provideZoneChangeDetection, reflectComponentType, resolveForwardRef, runInInjectionContext, setTestabilityGetter, signal, untracked, ALLOW_MULTIPLE_PLATFORMS as ɵALLOW_MULTIPLE_PLATFORMS, AfterRenderEventManager as ɵAfterRenderEventManager, CONTAINER_HEADER_OFFSET as ɵCONTAINER_HEADER_OFFSET, ChangeDetectionScheduler as ɵChangeDetectionScheduler, ComponentFactory$1 as ɵComponentFactory, Console as ɵConsole, DEFAULT_LOCALE_ID as ɵDEFAULT_LOCALE_ID, DEFER_BLOCK_CONFIG as ɵDEFER_BLOCK_CONFIG, DEFER_BLOCK_DEPENDENCY_INTERCEPTOR as ɵDEFER_BLOCK_DEPENDENCY_INTERCEPTOR, DeferBlockBehavior as ɵDeferBlockBehavior, DeferBlockState as ɵDeferBlockState, EffectScheduler as ɵEffectScheduler, IMAGE_CONFIG as ɵIMAGE_CONFIG, IMAGE_CONFIG_DEFAULTS as ɵIMAGE_CONFIG_DEFAULTS, INJECTOR_SCOPE as ɵINJECTOR_SCOPE, IS_HYDRATION_DOM_REUSE_ENABLED as ɵIS_HYDRATION_DOM_REUSE_ENABLED, LContext as ɵLContext, LifecycleHooksFeature as ɵLifecycleHooksFeature, LocaleDataIndex as ɵLocaleDataIndex, NG_COMP_DEF as ɵNG_COMP_DEF, NG_DIR_DEF as ɵNG_DIR_DEF, NG_ELEMENT_ID as ɵNG_ELEMENT_ID, NG_INJ_DEF as ɵNG_INJ_DEF, NG_MOD_DEF as ɵNG_MOD_DEF, NG_PIPE_DEF as ɵNG_PIPE_DEF, NG_PROV_DEF as ɵNG_PROV_DEF, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR as ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, NO_CHANGE as ɵNO_CHANGE, NgModuleFactory as ɵNgModuleFactory, NoopNgZone as ɵNoopNgZone, PendingTasks as ɵPendingTasks, ReflectionCapabilities as ɵReflectionCapabilities, ComponentFactory as ɵRender3ComponentFactory, ComponentRef as ɵRender3ComponentRef, NgModuleRef as ɵRender3NgModuleRef, RuntimeError as ɵRuntimeError, SSR_CONTENT_INTEGRITY_MARKER as ɵSSR_CONTENT_INTEGRITY_MARKER, TESTABILITY as ɵTESTABILITY, TESTABILITY_GETTER as ɵTESTABILITY_GETTER, USE_RUNTIME_DEPS_TRACKER_FOR_JIT as ɵUSE_RUNTIME_DEPS_TRACKER_FOR_JIT, ViewRef$1 as ɵViewRef, XSS_SECURITY_URL as ɵXSS_SECURITY_URL, ZoneAwareQueueingScheduler as ɵZoneAwareQueueingScheduler, _sanitizeHtml as ɵ_sanitizeHtml, _sanitizeUrl as ɵ_sanitizeUrl, allowSanitizationBypassAndThrow as ɵallowSanitizationBypassAndThrow, annotateForHydration as ɵannotateForHydration, bypassSanitizationTrustHtml as ɵbypassSanitizationTrustHtml, bypassSanitizationTrustResourceUrl as ɵbypassSanitizationTrustResourceUrl, bypassSanitizationTrustScript as ɵbypassSanitizationTrustScript, bypassSanitizationTrustStyle as ɵbypassSanitizationTrustStyle, bypassSanitizationTrustUrl as ɵbypassSanitizationTrustUrl, clearResolutionOfComponentResourcesQueue as ɵclearResolutionOfComponentResourcesQueue, compileComponent as ɵcompileComponent, compileDirective as ɵcompileDirective, compileNgModule as ɵcompileNgModule, compileNgModuleDefs as ɵcompileNgModuleDefs, compileNgModuleFactory as ɵcompileNgModuleFactory, compilePipe as ɵcompilePipe, convertToBitFlags as ɵconvertToBitFlags, createInjector as ɵcreateInjector, defaultIterableDiffers as ɵdefaultIterableDiffers, defaultKeyValueDiffers as ɵdefaultKeyValueDiffers, depsTracker as ɵdepsTracker, devModeEqual as ɵdevModeEqual, findLocaleData as ɵfindLocaleData, flushModuleScopingQueueAsMuchAsPossible as ɵflushModuleScopingQueueAsMuchAsPossible, formatRuntimeError as ɵformatRuntimeError, generateStandaloneInDeclarationsError as ɵgenerateStandaloneInDeclarationsError, getAsyncClassMetadataFn as ɵgetAsyncClassMetadataFn, getDebugNode as ɵgetDebugNode, getDeferBlocks as ɵgetDeferBlocks, getDirectives as ɵgetDirectives, getEnsureDirtyViewsAreAlwaysReachable as ɵgetEnsureDirtyViewsAreAlwaysReachable, getHostElement as ɵgetHostElement, getInjectableDef as ɵgetInjectableDef, getLContext as ɵgetLContext, getLocaleCurrencyCode as ɵgetLocaleCurrencyCode, getLocalePluralCase as ɵgetLocalePluralCase, getSanitizationBypassType as ɵgetSanitizationBypassType, ɵgetUnknownElementStrictMode, ɵgetUnknownPropertyStrictMode, _global as ɵglobal, injectChangeDetectorRef as ɵinjectChangeDetectorRef, internalAfterNextRender as ɵinternalAfterNextRender, internalCreateApplication as ɵinternalCreateApplication, isBoundToModule as ɵisBoundToModule, isComponentDefPendingResolution as ɵisComponentDefPendingResolution, isEnvironmentProviders as ɵisEnvironmentProviders, isInjectable as ɵisInjectable, isNgModule as ɵisNgModule, isPromise as ɵisPromise, isSubscribable as ɵisSubscribable, noSideEffects as ɵnoSideEffects, patchComponentDefWithScope as ɵpatchComponentDefWithScope, performanceMarkFeature as ɵperformanceMarkFeature, publishDefaultGlobalUtils$1 as ɵpublishDefaultGlobalUtils, publishGlobalUtil as ɵpublishGlobalUtil, registerLocaleData as ɵregisterLocaleData, renderDeferBlockState as ɵrenderDeferBlockState, resetCompiledComponents as ɵresetCompiledComponents, resetJitOptions as ɵresetJitOptions, resolveComponentResources as ɵresolveComponentResources, restoreComponentResolutionQueue as ɵrestoreComponentResolutionQueue, setAllowDuplicateNgModuleIdsForTest as ɵsetAllowDuplicateNgModuleIdsForTest, setAlternateWeakRefImpl as ɵsetAlternateWeakRefImpl, ɵsetClassDebugInfo, setClassMetadata as ɵsetClassMetadata, setClassMetadataAsync as ɵsetClassMetadataAsync, setCurrentInjector as ɵsetCurrentInjector, setDocument as ɵsetDocument, setEnsureDirtyViewsAreAlwaysReachable as ɵsetEnsureDirtyViewsAreAlwaysReachable, setInjectorProfilerContext as ɵsetInjectorProfilerContext, setLocaleId as ɵsetLocaleId, ɵsetUnknownElementStrictMode, ɵsetUnknownPropertyStrictMode, store as ɵstore, stringify as ɵstringify, transitiveScopesFor as ɵtransitiveScopesFor, triggerResourceLoading as ɵtriggerResourceLoading, truncateMiddle as ɵtruncateMiddle, unregisterAllLocaleData as ɵunregisterLocaleData, unwrapSafeValue as ɵunwrapSafeValue, whenStable as ɵwhenStable, withDomHydration as ɵwithDomHydration, ɵɵCopyDefinitionFeature, FactoryTarget as ɵɵFactoryTarget, ɵɵHostDirectivesFeature, ɵɵInheritDefinitionFeature, ɵɵInputTransformsFeature, ɵɵNgOnChangesFeature, ɵɵProvidersFeature, ɵɵStandaloneFeature, ɵɵadvance, ɵɵattribute, ɵɵattributeInterpolate1, ɵɵattributeInterpolate2, ɵɵattributeInterpolate3, ɵɵattributeInterpolate4, ɵɵattributeInterpolate5, ɵɵattributeInterpolate6, ɵɵattributeInterpolate7, ɵɵattributeInterpolate8, ɵɵattributeInterpolateV, ɵɵclassMap, ɵɵclassMapInterpolate1, ɵɵclassMapInterpolate2, ɵɵclassMapInterpolate3, ɵɵclassMapInterpolate4, ɵɵclassMapInterpolate5, ɵɵclassMapInterpolate6, ɵɵclassMapInterpolate7, ɵɵclassMapInterpolate8, ɵɵclassMapInterpolateV, ɵɵclassProp, ɵɵcomponentInstance, ɵɵconditional, ɵɵcontentQuery, ɵɵdefer, ɵɵdeferEnableTimerScheduling, ɵɵdeferOnHover, ɵɵdeferOnIdle, ɵɵdeferOnImmediate, ɵɵdeferOnInteraction, ɵɵdeferOnTimer, ɵɵdeferOnViewport, ɵɵdeferPrefetchOnHover, ɵɵdeferPrefetchOnIdle, ɵɵdeferPrefetchOnImmediate, ɵɵdeferPrefetchOnInteraction, ɵɵdeferPrefetchOnTimer, ɵɵdeferPrefetchOnViewport, ɵɵdeferPrefetchWhen, ɵɵdeferWhen, ɵɵdefineComponent, ɵɵdefineDirective, ɵɵdefineInjectable, ɵɵdefineInjector, ɵɵdefineNgModule, ɵɵdefinePipe, ɵɵdirectiveInject, ɵɵdisableBindings, ɵɵelement, ɵɵelementContainer, ɵɵelementContainerEnd, ɵɵelementContainerStart, ɵɵelementEnd, ɵɵelementStart, ɵɵenableBindings, ɵɵgetComponentDepsFactory, ɵɵgetCurrentView, ɵɵgetInheritedFactory, ɵɵhostProperty, ɵɵi18n, ɵɵi18nApply, ɵɵi18nAttributes, ɵɵi18nEnd, ɵɵi18nExp, ɵɵi18nPostprocess, ɵɵi18nStart, ɵɵinject, ɵɵinjectAttribute, ɵɵinvalidFactory, ɵɵinvalidFactoryDep, ɵɵlistener, ɵɵloadQuery, ɵɵnamespaceHTML, ɵɵnamespaceMathML, ɵɵnamespaceSVG, ɵɵnextContext, ɵɵngDeclareClassMetadata, ɵɵngDeclareComponent, ɵɵngDeclareDirective, ɵɵngDeclareFactory, ɵɵngDeclareInjectable, ɵɵngDeclareInjector, ɵɵngDeclareNgModule, ɵɵngDeclarePipe, ɵɵpipe, ɵɵpipeBind1, ɵɵpipeBind2, ɵɵpipeBind3, ɵɵpipeBind4, ɵɵpipeBindV, ɵɵprojection, ɵɵprojectionDef, ɵɵproperty, ɵɵpropertyInterpolate, ɵɵpropertyInterpolate1, ɵɵpropertyInterpolate2, ɵɵpropertyInterpolate3, ɵɵpropertyInterpolate4, ɵɵpropertyInterpolate5, ɵɵpropertyInterpolate6, ɵɵpropertyInterpolate7, ɵɵpropertyInterpolate8, ɵɵpropertyInterpolateV, ɵɵpureFunction0, ɵɵpureFunction1, ɵɵpureFunction2, ɵɵpureFunction3, ɵɵpureFunction4, ɵɵpureFunction5, ɵɵpureFunction6, ɵɵpureFunction7, ɵɵpureFunction8, ɵɵpureFunctionV, ɵɵqueryRefresh, ɵɵreference, registerNgModuleType as ɵɵregisterNgModuleType, ɵɵrepeater, ɵɵrepeaterCreate, ɵɵrepeaterTrackByIdentity, ɵɵrepeaterTrackByIndex, ɵɵresetView, ɵɵresolveBody, ɵɵresolveDocument, ɵɵresolveWindow, ɵɵrestoreView, ɵɵsanitizeHtml, ɵɵsanitizeResourceUrl, ɵɵsanitizeScript, ɵɵsanitizeStyle, ɵɵsanitizeUrl, ɵɵsanitizeUrlOrResourceUrl, ɵɵsetComponentScope, ɵɵsetNgModuleScope, ɵɵstyleMap, ɵɵstyleMapInterpolate1, ɵɵstyleMapInterpolate2, ɵɵstyleMapInterpolate3, ɵɵstyleMapInterpolate4, ɵɵstyleMapInterpolate5, ɵɵstyleMapInterpolate6, ɵɵstyleMapInterpolate7, ɵɵstyleMapInterpolate8, ɵɵstyleMapInterpolateV, ɵɵstyleProp, ɵɵstylePropInterpolate1, ɵɵstylePropInterpolate2, ɵɵstylePropInterpolate3, ɵɵstylePropInterpolate4, ɵɵstylePropInterpolate5, ɵɵstylePropInterpolate6, ɵɵstylePropInterpolate7, ɵɵstylePropInterpolate8, ɵɵstylePropInterpolateV, ɵɵsyntheticHostListener, ɵɵsyntheticHostProperty, ɵɵtemplate, ɵɵtemplateRefExtractor, ɵɵtext, ɵɵtextInterpolate, ɵɵtextInterpolate1, ɵɵtextInterpolate2, ɵɵtextInterpolate3, ɵɵtextInterpolate4, ɵɵtextInterpolate5, ɵɵtextInterpolate6, ɵɵtextInterpolate7, ɵɵtextInterpolate8, ɵɵtextInterpolateV, ɵɵtrustConstantHtml, ɵɵtrustConstantResourceUrl, ɵɵvalidateIframeAttribute, ɵɵviewQuery };\n"],"mappings":"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G,eAAe,GAAG9B,sBAAsB,CAAC;EAAE8B,eAAe,EAAE9B;AAAuB,CAAC,CAAC;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS+B,UAAUA,CAACC,YAAY,EAAE;EAC9BA,YAAY,CAACF,eAAe,GAAGC,UAAU;EACzCC,YAAY,CAAChB,QAAQ,GAAG,YAAY;IAChC,OAAOR,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;EAC5B,CAAC;EACD,OAAOwB,YAAY;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,iBAAiBA,CAACC,IAAI,EAAE;EAC7B,OAAOC,YAAY,CAACD,IAAI,CAAC,GAAGA,IAAI,CAAC,CAAC,GAAGA,IAAI;AAC7C;AACA;AACA,SAASC,YAAYA,CAACC,EAAE,EAAE;EACtB,OAAO,OAAOA,EAAE,KAAK,UAAU,IAAIA,EAAE,CAAC7B,cAAc,CAACuB,eAAe,CAAC,IACjEM,EAAE,CAACN,eAAe,KAAKC,UAAU;AACzC;AAEA,SAASM,sBAAsBA,CAACC,KAAK,EAAE;EACnC,OAAOA,KAAK,IAAI,CAAC,CAACA,KAAK,CAACC,UAAU;AACtC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,2BAA2B,GAAG,2BAA2B;AAC/D;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,8BAA8B;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,SAASvC,KAAK,CAAC;EAC7BwC,WAAWA,CAACC,IAAI,EAAEC,OAAO,EAAE;IACvB,KAAK,CAACC,kBAAkB,CAACF,IAAI,EAAEC,OAAO,CAAC,CAAC;IACxC,IAAI,CAACD,IAAI,GAAGA,IA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,CAACC,MAAM,CAACO,iBAAiB;AACpD;AACA,SAASC,yBAAyBA,CAAA,EAAG;EACjCT,gBAAgB,CAACC,MAAM,CAACO,iBAAiB,EAAE;AAC/C;AACA,SAASE,yBAAyBA,CAAA,EAAG;EACjCV,gBAAgB,CAACC,MAAM,CAACO,iBAAiB,EAAE;AAC/C;AACA,SAASG,kBAAkBA,CAAA,EAAG;EAC1B,OAAOX,gBAAgB,CAACG,eAAe;AAC3C;AACA;AACA;AACA;AACA;AACA,SAASS,wBAAwBA,CAAA,EAAG;EAChC,OAAOZ,gBAAgB,CAACI,sBAAsB,KAAK,IAAI;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,SAASS,wBAAwBA,CAACpb,KAAK,EAAE;EACrC,OAAOua,gBAAgB,CAACI,sBAAsB,KAAK3a,KAAK;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASqb,gBAAgBA,CAAA,EAAG;EACxBd,gBAAgB,CAACG,eAAe,GAAG,IAAI;AAC3C;AACA;AACA;AACA;AACA;AACA,SAASY,uBAAuBA,CAACtb,KAAK,EAAE;EACpCua,gBAAgB,CAACI,sBAAsB,GAAG3a,KAAK;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASub,iBAAiBA,CAAA,EAAG;EACzBhB,gBAAgB,CAACG,eAAe,GAAG,KAAK;AAC5C;AACA;AACA;AACA;AACA,SAASc,uBAAuBA,CAAA,EAAG;EAC/BjB,gBAAgB,CAACI,sBAAsB,GAAG,IAAI;AAClD;AACA;AACA;AACA;AACA,SAASc,QAAQA,CAAA,EAAG;EAChB,OAAOlB,gBAAgB,CAACC,MAAM,CAACzG,KAAK;AACxC;AACA;AACA;AACA;AACA,SAAS2H,QAAQA,CAAA,EAAG;EAChB,OAAOnB,gBAAgB,CAACC,MAAM,CAACva,KAAK;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AAC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C;MAC5BsR,gBAAgB,CAACC,SAAS,EAAEJ,IAAI,CAAC;IACrC;EACJ,CAAC,MACI;IACDG,gBAAgB,CAACC,SAAS,EAAEJ,IAAI,CAAC;EACrC;AACJ;AAEA,MAAMQ,kBAAkB,GAAG,CAAC,CAAC;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,CAAC;EACtBnrB,WAAWA;EACX;AACJ;AACA;EACIqF,OAAO;EACP;AACJ;AACA;EACIqF,cAAc,EAAE0gB,oBAAoB,EAAE;IAClC,IAAI,CAAC/lB,OAAO,GAAGA,OAAO;IACtB;AACR;AACA;AACA;IACQ,IAAI,CAACgmB,SAAS,GAAG,KAAK;IACtB9qB,SAAS,IAAI6D,aAAa,CAACiB,OAAO,EAAE,uBAAuB,CAAC;IAC5D9E,SAAS,IAAIqD,WAAW,CAAC,OAAOyB,OAAO,EAAE,UAAU,EAAE,4BAA4B,CAAC;IAClF,IAAI,CAACimB,mBAAmB,GAAG5gB,cAAc;IACzC,IAAI,CAAC6gB,UAAU,GAAGH,oBAAoB;EAC1C;AACJ;AACA,SAASI,SAASA,CAACxd,GAAG,EAAE;EACpB,OAAOA,GAAG,YAAYmd,mBAAmB;AAC7C;;AAEA;AACA;AACA;AACA;AACA,SAASM,mBAAmBA,CAACC,SAAS,EAAE;EACpC,IAAI3d,IAAI,GAAG,EAAE;EACZ2d,SAAS,G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C;AACA,SAASwmC,mBAAmBA,CAAA,EAAG;EAC3BL,OAAO,CAACjM,KAAK,CAAC,CAAC;AACnB;AACA,SAASuM,yBAAyBA,CAAC7zB,EAAE,EAAE;EACnC,OAAOuzB,OAAO,CAACx8B,GAAG,CAACiJ,EAAE,CAAC;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS8zB,mCAAmCA,CAACC,eAAe,EAAE;EAC1DP,0BAA0B,GAAG,CAACO,eAAe;AACjD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,sBAAsB,GAAG;EAC3BjrC,IAAI,EAAE;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMkrC,gBAAgB,GAAG;EACrBlrC,IAAI,EAAE;AACV,CAAC;AAED,IAAImrC,gCAAgC,GAAG,KAAK;AAC5C;AACA;AACA;AACA;AACA;AACA,SAASC,4BAA4BA,CAACC,WAAW,EAAE;EAC/CF,gCAAgC,GAAGE,WAAW;AAClD;AACA;AACA;AACA;AACA,SAASC,4BAA4BA,CAAA,EAAG;EACpC,OAAOH,gCAAgC;AAC3C;AACA,IAAII,iCAAiC,GAAG,KAAK;AAC7C;AACA;AACA;AACA;AACA;AACA,SAASC,6BAA6BA,CAACH,WAAW,EAAE;EAChDE,iCAAiC,GAAGF,WAAW;AACnD;AACA;AACA;AACA;AACA,SAASI,6BAA6BA,CAAA,EAAG;EACrC,OAAOF,iCAAiC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,sBAAsBA,CAAC9D,OAAO,EAAEhqB,KAAK,EAAE+tB,OAAO,EAAE30B,OAAO,EAAE40B,aAAa,EAAE;EAC7E;EACA;EACA;EACA;EACA,IAAI50B,OAAO,KAAK,IAAI,EAChB;EACJ;EACA,IAAI,CAAC40B,aAAa,IAAID,OAAO,KAAK,IAAI,EAAE;IACpC;IACA;IACA;IACA,MAAME,SAAS;IACf;IACA;IACC,OAAOC,kBAAkB,KAAK,WA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B,EAAE,6GAA6G,CAAC;UAC5Ls3B,UAAU,CAAC51B,MAAM,EAAEhY,KAAK,CAAC;UACzBqxB,eAAe,CAACurC,QAAQ,EAAE58D,KAAK,CAAC;QACpC;MACJ;MACA,IAAI,CAAC28D,wBAAwB,GAAG,KAAK;IACzC;IACA3uB,YAAY,CAAC,IAAI,CAAC/hB,MAAM,CAACxX,KAAK,CAAC,EAAE,IAAI,CAACwX,MAAM,CAAC;EACjD;EACAla,SAASA,CAACzL,QAAQ,EAAE;IAChBgX,mBAAmB,CAAC,IAAI,CAAC2O,MAAM,EAAE3lB,QAAQ,CAAC;EAC9C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIu2D,YAAYA,CAAA,EAAG;IACXR,aAAa,CAAC,IAAI,CAACI,mBAAmB,IAAI,IAAI,CAACxwC,MAAM,CAAC;EAC1D;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI6wC,MAAMA,CAAA,EAAG;IACL,IAAI,CAAC7wC,MAAM,CAACvX,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC;EAC/B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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WAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS0uH,wBAAwBA,CAACxjH,QAAQ,EAAE;EAAA,IAAAyjH,qBAAA;EACxC,MAAM9B,UAAU,GAAG97F,oBAAoB,CAAC7lB,QAAQ,CAAC;EACjD,MAAM;IAAEihH;EAAoB,CAAC,GAAGG,uBAAuB,CAAC,CAAC;EACzD,QAAAqC,qBAAA,GAAOxC,mBAAmB,CAAChgH,GAAG,CAAC0gH,UAAU,CAAC,cAAA8B,qBAAA,cAAAA,qBAAA,GAAI,EAAE;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,sBAAsBA,CAACC,wBAAwB,EAAE;EACtD,MAAMC,cAAc,GAAG,IAAIn2G,GAAG,CAAC,CAAC;EAChC,MAAMo2G,iBAAiB,GAAG,IAAI5wG,GAAG,CAAC,CAAC;EACnC,MAAM6f,OAAO,GAAGgxF,qCAAqC,CAACF,cAAc,EAAEC,iBAAiB,CAAC;EACxFlxF,gBAAgB,CAACgxF,wBAAwB,EAAE7wF,OAAO,EAAE,EAAE,EAAE,IAAI7f,GAAG,CAAC,CAAC,CAAC;EAClE,OAAO2wG,cAAc;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,qCAAqCA,CAACF,cAAc,EAAEC,iBAAiB,EAAE;EAC9E,OAAO,CAACrsH,QAAQ,EAAE07B,SAAS,KAAK;IAC5B;IACA;IACA;IACA,IAAI,CAAC0wF,cAAc,CAAC51G,GAAG,CAACxW,QAAQ,CAAC,EAAE;MAC/BosH,cAAc,CAAC11G,GAAG,CAAC1W,QAAQ,EAAE,CAAC07B,SAAS,CAAC,CAAC;IAC7C;IACA;IACA;IACA;IACA;IACA,IAAI,CAAC2wF,iBAAiB,CAAC71G,GAAG,CAACklB,SAAS,CAAC,EAAE;MACnC;MACA,KAAK,MAAM6wF,IAAI,IAAIH,cAAc,CAACz1F,IAAI,CAAC,CAAC,EAAE;QACtC,MAAM61F,kBAAkB,GAAGJ,cAAc,CAAC3iH,GAAG,CAAC8iH,IAAI,CAAC;QACnD,IAAIE,YAAY,GAAG9oH,cAAc,CAAC+3B,SAAS,CAAC;QAC5C,IAAI,CAAC+wF,YAAY,EAAE;UACf,MAAMlxF,QAAQ,GAAGG,SAAS,CAACH,QAAQ;UACnCkxF,YAAY,GAAG9oH,cAAc,CAAC43B,QAAQ,CAAC;QAC3C;QACA,IAAI,CAACkxF,YAAY,EAAE;UACf;QACJ;QACA,MAAMC,wBAAwB,GAAGF,kBAAkB,CAAC,CAAC,CAAC;QACtD,IAAIG,gBAAgB,GAAG,KAAK;QAC5Bt5F,WAAW,CAACo5F,YAAY,CAACzpH,OAAO,EAAG4pH,YAAY,IAAK;UAChD,IAAID,gBAAgB,EAAE;YAClB;UACJ;UACAA,gBAAgB,GAAGC,YAAY,CAACrxF,QAAQ,KAAKmxF,wBAAwB,IACjEE,YAAY,KAAKF,wBAAwB;UAC7C,IAAIC,gBAAgB,EAAE;YAAA,IAAAE,mBAAA;YAClB,CAAAA,mBAAA,GAAAT,cAAc,CAAC3iH,GAAG,CAAC8iH,IAAI,CAAC,cAAAM,mBAAA,eAAxBA,mBAAA,CAA0B1hH,OAAO,CAACuwB,SAAS,CAAC;UAChD;QACJ,CAAC,CAAC;MACN;IACJ;IACA2wF,iBAAiB,CAAC3wG,GAAG,CAACggB,SAAS,CAAC;EACpC,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASoxF,+BAA+BA,CAACtkH,QAAQ,EAAE;EAAA,IAAAukH,qBAAA;EAC/C,MAAMC,iCAAiC,IAAAD,qBAAA,GAAGnD,uBAAuB,CAAC,CAAC,CAACH,mBAAmB,CAAChgH,GAAG,CAACjB,QAAQ,CAAC,cAAAukH,qBAAA,cAAAA,qBAAA,GAAI,EAAE;EAC3G;EACA;EACA,IAAIE,kBAAkB,CAACzkH,QAAQ,CAAC,EAAE;IAC9B,OAAOwkH,iCAAiC;EAC5C;EACA,MAAMb,wBAAwB,GAAGL,2BAA2B,CAACtjH,QAAQ,CAAC;EACtE,IAAI2jH,wBAAwB,KAAK,IAAI,EAAE;IACnC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,OAAOa,iCAAiC;EAC5C;EACA,MAAMZ,cAAc,GAAGF,sBAAsB,CAACC,wBAAwB,CAAC;EACvE,MAAMe,eAAe,GAAG,EAAE;EAC1B,KAAK,MAAMhlH,cAAc,IAAI8kH,iCAAiC,EAAE;IAAA,IAAAG,oBAAA;IAC5D,MAAMntH,QAAQ,GAAGkI,cAAc,CAAClI,QAAQ;IACxC;IACA;IACA,MAAM5E,KAAK,GAAG4E,QAAQ,CAACiI,OAAO;IAC9B,IAAI7M,KAAK,KAAKg/B,uBAAuB,IAAIh/B,KAAK,KAAKk/B,kBAAkB,EAAE;MACnE;IACJ;IACA,IAAI8yF,UAAU,IAAAD,oBAAA,GAAGf,cAAc,CAAC3iH,GAAG,CAACzJ,QAAQ,CAAC,cAAAmtH,oBAAA,cAAAA,oBAAA,GAAI,EAAE;IACnD,MAAM3pH,GAAG,GAAGuP,eAAe,CAACo5G,wBAAwB,CAAC;IACrD,MAAMxB,qBAAqB,GAAG,CAAC,EAACnnH,GAAG,aAAHA,GAAG,eAAHA,GAAG,CAAEyO,UAAU;IAC/C;IACA;IACA,IAAI04G,qBAAqB,EAAE;MACvByC,UAAU,GAAG,CAACjB,wBAAwB,EAAE,GAAGiB,UAAU,CAAC;IAC1D;IACAF,eAAe,CAACviH,IAAI,CAAC;MAAE,GAAGzC,cAAc;MAAEklH;IAAW,CAAC,CAAC;EAC3D;EACA,OAAOF,eAAe;AAC1B;AACA,SAASD,kBAAkBA,CAACzkH,QAAQ,EAAE;EAClC,OAAOA,QAAQ,YAAY80B,UAAU,IAAI90B,QAAQ,CAACi1B,MAAM,CAACjnB,GAAG,CAAC,UAAU,CAAC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS62G,oBAAoBA,CAAC7kH,QAAQ,EAAE;EACpC,IAAIA,QAAQ,YAAY+jB,YAAY,EAAE;IAClC,OAAOy/F,wBAAwB,CAACxjH,QAAQ,CAAC;EAC7C,CAAC,MACI,IAAIA,QAAQ,YAAY60B,mBAAmB,EAAE;IAC9C,OAAOyvF,+BAA+B,CAACtkH,QAAQ,CAAC;EACpD;EACA9H,UAAU,CAAC,yEAAyE,CAAC;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS4sH,mBAAmBA,CAAC9kH,QAAQ,EAAE;EACnC,IAAIA,QAAQ,YAAY+jB,YAAY,EAAE;IAClC,MAAMlT,KAAK,GAAG6U,oBAAoB,CAAC1lB,QAAQ,CAAC;IAC5C,MAAMlD,KAAK,GAAG+oB,oBAAoB,CAAC7lB,QAAQ,CAAC;IAC5C+Q,mBAAmB,CAACjU,KAAK,EAAE+T,KAAK,CAAC;IACjC,OAAO;MAAExc,IAAI,EAAE,SAAS;MAAE5B,MAAM,EAAE4iB,gBAAgB,CAACvY,KAAK,EAAE+T,KAAK;IAAE,CAAC;EACtE;EACA,IAAI7Q,QAAQ,YAAY80B,UAAU,EAAE;IAAA,IAAAiwF,gBAAA;IAChC,OAAO;MAAE1wH,IAAI,EAAE,aAAa;MAAE5B,MAAM,GAAAsyH,gBAAA,GAAE/kH,QAAQ,CAACvN,MAAM,cAAAsyH,gBAAA,cAAAA,gBAAA,GAAI;IAAK,CAAC;EACnE;EACA,IAAI/kH,QAAQ,YAAY+xB,YAAY,EAAE;IAClC,OAAO;MAAE19B,IAAI,EAAE,MAAM;MAAE5B,MAAM,EAAE;IAAK,CAAC;EACzC;EACA,OAAO,IAAI;AACf;AACA,SAASgwH,yBAAyBA,CAACziH,QAAQ,EAAE;EACzC,MAAMwiH,cAAc,GAAG,CAACxiH,QAAQ,CAAC;EACjCglH,+BAA+B,CAAChlH,QAAQ,EAAEwiH,cAAc,CAAC;EACzD,OAAOA,cAAc;AACzB;AACA,SAASwC,+BAA+BA,CAAChlH,QAAQ,EAAEwiH,cAAc,EAAE;EAC/D,MAAM7wG,MAAM,GAAGszG,iBAAiB,CAACjlH,QAAQ,CAAC;EAC1C;EACA;EACA;EACA,IAAI2R,MAAM,KAAK,IAAI,EAAE;IACjB,IAAI3R,QAAQ,YAAY+jB,YAAY,EAAE;MAClC,MAAM6+F,aAAa,GAAGJ,cAAc,CAAC,CAAC,CAAC;MACvC,IAAII,aAAa,YAAY7+F,YAAY,EAAE;QACvC,MAAMP,cAAc,GAAG0hG,+BAA+B,CAACtC,aAAa,CAAC;QACrE,IAAIp/F,cAAc,KAAK,IAAI,EAAE;UACzBtrB,UAAU,CAAC,oEAAoE,CAAC;QACpF;QACAsqH,cAAc,CAACrgH,IAAI,CAACqhB,cAAc,CAAC;QACnCwhG,+BAA+B,CAACxhG,cAAc,EAAEg/F,cAAc,CAAC;MACnE;MACA,OAAOA,cAAc;IACzB;EACJ,CAAC,MACI;IACDA,cAAc,CAACrgH,IAAI,CAACwP,MAAM,CAAC;IAC3BqzG,+BAA+B,CAACrzG,MAAM,EAAE6wG,cAAc,CAAC;EAC3D;EACA,OAAOA,cAAc;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASyC,iBAAiBA,CAACjlH,QAAQ,EAAE;EACjC,IAAIA,QAAQ,YAAY80B,UAAU,EAAE;IAChC,OAAO90B,QAAQ,CAAC2R,MAAM;EAC1B;EACA,IAAI7U,KAAK;EACT,IAAI+T,KAAK;EACT,IAAI7Q,QAAQ,YAAY+jB,YAAY,EAAE;IAClCjnB,KAAK,GAAG+oB,oBAAoB,CAAC7lB,QAAQ,CAAC;IACtC6Q,KAAK,GAAG6U,oBAAoB,CAAC1lB,QAAQ,CAAC;EAC1C,CAAC,MACI,IAAIA,QAAQ,YAAY+xB,YAAY,EAAE;IACvC,OAAO,IAAI;EACf,CAAC,MACI;IACD75B,UAAU,CAAC,yFAAyF,CAAC;EACzG;EACA,MAAM+oB,cAAc,GAAGyB,yBAAyB,CAAC5lB,KAAK,EAAE+T,KAAK,CAAC;EAC9D,IAAImQ,iBAAiB,CAACC,cAAc,CAAC,EAAE;IACnC,MAAME,mBAAmB,GAAGD,sBAAsB,CAACD,cAAc,CAAC;IAClE,MAAMlG,WAAW,GAAGsG,qBAAqB,CAACJ,cAAc,EAAEpQ,KAAK,CAAC;IAChE,MAAMs0G,WAAW,GAAGpqG,WAAW,CAAC3M,KAAK,CAAC;IACtC,MAAM0M,WAAW,GAAGqqG,WAAW,CAACv7G,IAAI,CAACuX,mBAAmB,GAAG,CAAC,CAAC,+BAA+B;IAC5F,OAAO,IAAI4C,YAAY,CAACjJ,WAAW,EAAEC,WAAW,CAAC;EACrD,CAAC,MACI;IAAA,IAAAqqG,qBAAA;IACD,MAAMC,eAAe,GAAGx0G,KAAK,CAACjC,UAAU,CAAC;IACzC;IACA;IACA;IACA;IACA;IACA;IACA,MAAM02G,cAAc,IAAAF,qBAAA,GAAGC,eAAe,CAACrlH,QAAQ,cAAAolH,qBAAA,uBAAxBA,qBAAA,CAA0BzzG,MAAM;IACvD,IAAI2zG,cAAc,YAAYvhG,YAAY,EAAE;MACxC,OAAOuhG,cAAc;IACzB;EACJ;EACA,OAAO,IAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASJ,+BAA+BA,CAACllH,QAAQ,EAAE;EAC/C,IAAI6Q,KAAK;EACT,IAAI7Q,QAAQ,YAAY+jB,YAAY,EAAE;IAClClT,KAAK,GAAG6U,oBAAoB,CAAC1lB,QAAQ,CAAC;EAC1C,CAAC,MACI;IACD9H,UAAU,CAAC,oEAAoE,CAAC;EACpF;EACA,MAAMmtH,eAAe,GAAGx0G,KAAK,CAACjC,UAAU,CAAC;EACzC,MAAM4U,cAAc,GAAG6hG,eAAe,CAAC9gD,cAAc;EACrD,IAAI,CAAC/gD,cAAc,EAAE;IACjBtrB,UAAU,CAAC,oEAAoE,CAAC;EACpF;EACA,OAAOsrB,cAAc;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM+hG,0BAA0B,GAAG,IAAI;AACvC,IAAIC,UAAU,GAAG,KAAK;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,2BAA2BA,CAAA,EAAG;EACnC,IAAI,CAACD,UAAU,EAAE;IACbA,UAAU,GAAG,IAAI;IACjBnE,8BAA8B,CAAC,CAAC;IAChCqE,iBAAiB,CAAC,gCAAgC,EAAErD,6BAA6B,CAAC;IAClFqD,iBAAiB,CAAC,uBAAuB,EAAEb,oBAAoB,CAAC;IAChEa,iBAAiB,CAAC,4BAA4B,EAAEjD,yBAAyB,CAAC;IAC1EiD,iBAAiB,CAAC,sBAAsB,EAAEZ,mBAAmB,CAAC;IAC9D;AACR;AACA;AACA;AACA;IACQY,iBAAiB,CAAC,cAAc,EAAEhxG,WAAW,CAAC;IAC9CgxG,iBAAiB,CAAC,sBAAsB,EAAElY,sBAAsB,CAAC;IACjEkY,iBAAiB,CAAC,cAAc,EAAE9Y,YAAY,CAAC;IAC/C8Y,iBAAiB,CAAC,YAAY,EAAE5Y,UAAU,CAAC;IAC3C4Y,iBAAiB,CAAC,cAAc,EAAE3X,YAAY,CAAC;IAC/C2X,iBAAiB,CAAC,oBAAoB,EAAE3Y,kBAAkB,CAAC;IAC3D2Y,iBAAiB,CAAC,gBAAgB,EAAE/X,cAAc,CAAC;IACnD+X,iBAAiB,CAAC,aAAa,EAAExY,WAAW,CAAC;IAC7CwY,iBAAiB,CAAC,mBAAmB,EAAEzY,iBAAiB,CAAC;IACzDyY,iBAAiB,CAAC,eAAe,EAAEpY,aAAa,CAAC;IACjDoY,iBAAiB,CAAC,cAAc,EAAEtD,YAAY,CAAC;EACnD;AACJ;AACA;AACA;AACA;AACA;AACA,SAASsD,iBAAiBA,CAACzyH,IAAI,EAAEsB,EAAE,EAAE;EACjC,IAAI,OAAOoxH,QAAQ,KAAK,WAAW,IAAI,CAACA,QAAQ,EAAE;IAC9C;IACA;IACA;IACA;IACA,MAAMC,CAAC,GAAGtpH,OAAO;IACjBjH,SAAS,IAAI6D,aAAa,CAAC3E,EAAE,EAAE,sBAAsB,CAAC;IACtD,IAAIqxH,CAAC,EAAE;MACH,IAAI1yF,SAAS,GAAG0yF,CAAC,CAACL,0BAA0B,CAAC;MAC7C,IAAI,CAACryF,SAAS,EAAE;QACZA,SAAS,GAAG0yF,CAAC,CAACL,0BAA0B,CAAC,GAAG,CAAC,CAAC;MAClD;MACAryF,SAAS,CAACjgC,IAAI,CAAC,GAAGsB,EAAE;IACxB;EACJ;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMsxH,WAAW,GAAG,IAAInnH,cAAc,CAAC,EAAE,CAAC;AAC1C;AACA;AACA;AACA,MAAMonH,kBAAkB,GAAG,IAAIpnH,cAAc,CAAC,EAAE,CAAC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMqnH,WAAW,CAAC;EACdjxH,WAAWA,CAACkxH,OAAO,EAAEh0D,QAAQ,EAAEi0D,iBAAiB,EAAE;IAC9C,IAAI,CAACD,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACh0D,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACk0D,aAAa,GAAG,CAAC;IACtB,IAAI,CAACC,aAAa,GAAG,IAAI;IACzB;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACC,UAAU,GAAG,EAAE;IACpB,IAAI,CAACC,gBAAgB,GAAG,IAAI;IAC5B;IACA;IACA,IAAI,CAACC,kBAAkB,EAAE;MACrBC,oBAAoB,CAACP,iBAAiB,CAAC;MACvCA,iBAAiB,CAACQ,WAAW,CAACz0D,QAAQ,CAAC;IAC3C;IACA,IAAI,CAAC00D,mBAAmB,CAAC,CAAC;IAC1BV,OAAO,CAACptD,GAAG,CAAC,MAAM;MACd,IAAI,CAAC0tD,gBAAgB,GACjB,OAAOnsD,IAAI,IAAI,WAAW,GAAG,IAAI,GAAGA,IAAI,CAAC1zD,OAAO,CAACxF,GAAG,CAAC,kBAAkB,CAAC;IAChF,CAAC,CAAC;EACN;EACAylH,mBAAmBA,CAAA,EAAG;IAClB,IAAI,CAACV,OAAO,CAAC/nD,UAAU,CAAC9C,SAAS,CAAC;MAC9Br4B,IAAI,EAAEA,CAAA,KAAM;QACR,IAAI,CAACsjF,QAAQ,GAAG,IAAI;QACpB,IAAI,CAACD,aAAa,GAAG,KAAK;MAC9B;IACJ,CAAC,CAAC;IACF,IAAI,CAACH,OAAO,CAAC5mD,iBAAiB,CAAC,MAAM;MACjC,IAAI,CAAC4mD,OAAO,CAAC7nD,QAAQ,CAAChD,SAAS,CAAC;QAC5Br4B,IAAI,EAAEA,CAAA,KAAM;UACR46B,MAAM,CAACoB,sBAAsB,CAAC,CAAC;UAC/B7F,cAAc,CAAC,MAAM;YACjB,IAAI,CAACktD,aAAa,GAAG,IAAI;YACzB,IAAI,CAACQ,oBAAoB,CAAC,CAAC;UAC/B,CAAC,CAAC;QACN;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;EACIC,2BAA2BA,CAAA,EAAG;IAC1B,IAAI,CAACV,aAAa,IAAI,CAAC;IACvB,IAAI,CAACE,QAAQ,GAAG,IAAI;IACpB,OAAO,IAAI,CAACF,aAAa;EAC7B;EACA;AACJ;AACA;AACA;EACIW,2BAA2BA,CAAA,EAAG;IAC1B,IAAI,CAACX,aAAa,IAAI,CAAC;IACvB,IAAI,IAAI,CAACA,aAAa,GAAG,CAAC,EAAE;MACxB,MAAM,IAAI5zH,KAAK,CAAC,mCAAmC,CAAC;IACxD;IACA,IAAI,CAACq0H,oBAAoB,CAAC,CAAC;IAC3B,OAAO,IAAI,CAACT,aAAa;EAC7B;EACA;AACJ;AACA;EACIloD,QAAQA,CAAA,EAAG;IACP,OAAO,IAAI,CAACmoD,aAAa,IAAI,IAAI,CAACD,aAAa,KAAK,CAAC,IAAI,CAAC,IAAI,CAACF,OAAO,CAACloD,oBAAoB;EAC/F;EACA6oD,oBAAoBA,CAAA,EAAG;IACnB,IAAI,IAAI,CAAC3oD,QAAQ,CAAC,CAAC,EAAE;MACjB;MACA/E,cAAc,CAAC,MAAM;QACjB,OAAO,IAAI,CAACotD,UAAU,CAACxyH,MAAM,KAAK,CAAC,EAAE;UACjC,IAAImrF,EAAE,GAAG,IAAI,CAACqnC,UAAU,CAACp7F,GAAG,CAAC,CAAC;UAC9BwhE,YAAY,CAACzN,EAAE,CAACoO,SAAS,CAAC;UAC1BpO,EAAE,CAAC8nC,MAAM,CAAC,IAAI,CAACV,QAAQ,CAAC;QAC5B;QACA,IAAI,CAACA,QAAQ,GAAG,KAAK;MACzB,CAAC,CAAC;IACN,CAAC,MACI;MACD;MACA,IAAIW,OAAO,GAAG,IAAI,CAACC,eAAe,CAAC,CAAC;MACpC,IAAI,CAACX,UAAU,GAAG,IAAI,CAACA,UAAU,CAAC94G,MAAM,CAAEyxE,EAAE,IAAK;QAC7C,IAAIA,EAAE,CAACioC,QAAQ,IAAIjoC,EAAE,CAACioC,QAAQ,CAACF,OAAO,CAAC,EAAE;UACrCt6B,YAAY,CAACzN,EAAE,CAACoO,SAAS,CAAC;UAC1B,OAAO,KAAK;QAChB;QACA,OAAO,IAAI;MACf,CAAC,CAAC;MACF,IAAI,CAACg5B,QAAQ,GAAG,IAAI;IACxB;EACJ;EACAY,eAAeA,CAAA,EAAG;IACd,IAAI,CAAC,IAAI,CAACV,gBAAgB,EAAE;MACxB,OAAO,EAAE;IACb;IACA;IACA,OAAO,IAAI,CAACA,gBAAgB,CAACY,UAAU,CAACj1H,GAAG,CAAEo0B,CAAC,IAAK;MAC/C,OAAO;QACH5zB,MAAM,EAAE4zB,CAAC,CAAC5zB,MAAM;QAChB;QACA;QACA00H,gBAAgB,EAAE9gG,CAAC,CAAC8gG,gBAAgB;QACpCv9G,IAAI,EAAEyc,CAAC,CAACzc;MACZ,CAAC;IACL,CAAC,CAAC;EACN;EACAw9G,WAAWA,CAACpoC,EAAE,EAAEkP,OAAO,EAAE+4B,QAAQ,EAAE;IAC/B,IAAI75B,SAAS,GAAG,CAAC,CAAC;IAClB,IAAIc,OAAO,IAAIA,OAAO,GAAG,CAAC,EAAE;MACxBd,SAAS,GAAGrxB,UAAU,CAAC,MAAM;QACzB,IAAI,CAACsqD,UAAU,GAAG,IAAI,CAACA,UAAU,CAAC94G,MAAM,CAAEyxE,EAAE,IAAKA,EAAE,CAACoO,SAAS,KAAKA,SAAS,CAAC;QAC5EpO,EAAE,CAAC,IAAI,CAAConC,QAAQ,EAAE,IAAI,CAACY,eAAe,CAAC,CAAC,CAAC;MAC7C,CAAC,EAAE94B,OAAO,CAAC;IACf;IACA,IAAI,CAACm4B,UAAU,CAAClkH,IAAI,CAAC;MAAE2kH,MAAM,EAAE9nC,EAAE;MAAEoO,SAAS,EAAEA,SAAS;MAAE65B,QAAQ,EAAEA;IAAS,CAAC,CAAC;EAClF;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACII,UAAUA,CAACP,MAAM,EAAE54B,OAAO,EAAE+4B,QAAQ,EAAE;IAClC,IAAIA,QAAQ,IAAI,CAAC,IAAI,CAACX,gBAAgB,EAAE;MACpC,MAAM,IAAIh0H,KAAK,CAAC,oEAAoE,GAChF,0DAA0D,CAAC;IACnE;IACA;IACA,IAAI,CAAC80H,WAAW,CAACN,MAAM,EAAE54B,OAAO,EAAE+4B,QAAQ,CAAC;IAC3C,IAAI,CAACN,oBAAoB,CAAC,CAAC;EAC/B;EACA;AACJ;AACA;AACA;EACIW,sBAAsBA,CAAA,EAAG;IACrB,OAAO,IAAI,CAACpB,aAAa;EAC7B;EACA;AACJ;AACA;AACA;AACA;AACA;EACIqB,mBAAmBA,CAAC30H,KAAK,EAAE;IACvB,IAAI,CAACo/D,QAAQ,CAACu1D,mBAAmB,CAAC30H,KAAK,EAAE,IAAI,CAAC;EAClD;EACA;AACJ;AACA;AACA;AACA;AACA;EACI40H,qBAAqBA,CAAC50H,KAAK,EAAE;IACzB,IAAI,CAACo/D,QAAQ,CAACw1D,qBAAqB,CAAC50H,KAAK,CAAC;EAC9C;EACA;AACJ;AACA;AACA;AACA;AACA;EACI60H,aAAaA,CAACC,KAAK,EAAElwH,QAAQ,EAAEmwH,UAAU,EAAE;IACvC;IACA,OAAO,EAAE;EACb;AAGJ;AAACC,QAAA,GArLK7B,WAAW;AAmLJ6B,QAAA,CAAK1xH,IAAI,GAAG,SAAS2xH,mBAAmBA,CAACxhG,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAI0/F,QAAW,EAAE7kH,QAAQ,CAACw8D,MAAM,CAAC,EAAEx8D,QAAQ,CAAC4mH,mBAAmB,CAAC,EAAE5mH,QAAQ,CAAC4kH,kBAAkB,CAAC,CAAC;AAAE,CAAC;AAC7J8B,QAAA,CAAKtsH,KAAK,GAAG,aAActB,kBAAkB,CAAC;EAAEpH,KAAK,EAAEmzH,QAAW;EAAE5rH,OAAO,EAAE4rH,QAAW,CAAC7vH;AAAK,CAAC,CAAC;AAE7G,CAAC,MAAM;EAAE,CAAC,OAAOb,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAK45G,gBAAgB,CAAC8W,WAAW,EAAE,CAAC;IACnF1xH,IAAI,EAAE0jC;EACV,CAAC,CAAC,EAAE,MAAM,CAAC;IAAE1jC,IAAI,EAAEqpE;EAAO,CAAC,EAAE;IAAErpE,IAAI,EAAEyzH;EAAoB,CAAC,EAAE;IAAEzzH,IAAI,EAAE+F,SAAS;IAAEqzB,UAAU,EAAE,CAAC;MAChFp5B,IAAI,EAAEy6B,MAAM;MACZltB,IAAI,EAAE,CAACkkH,kBAAkB;IAC7B,CAAC;EAAE,CAAC,CAAC,EAAE,IAAI,CAAC;AAAE,CAAC,EAAE,CAAC;AAC9B;AACA;AACA;AACA;AACA,MAAMgC,mBAAmB,CAAC;EACtBhzH,WAAWA,CAAA,EAAG;IACV;IACA,IAAI,CAACizH,aAAa,GAAG,IAAIt6G,GAAG,CAAC,CAAC;EAClC;EACA;AACJ;AACA;AACA;AACA;EACI85G,mBAAmBA,CAAC30H,KAAK,EAAEo1H,WAAW,EAAE;IACpC,IAAI,CAACD,aAAa,CAAC75G,GAAG,CAACtb,KAAK,EAAEo1H,WAAW,CAAC;EAC9C;EACA;AACJ;AACA;AACA;EACIR,qBAAqBA,CAAC50H,KAAK,EAAE;IACzB,IAAI,CAACm1H,aAAa,CAACp2F,MAAM,CAAC/+B,KAAK,CAAC;EACpC;EACA;AACJ;AACA;EACIq1H,yBAAyBA,CAAA,EAAG;IACxB,IAAI,CAACF,aAAa,CAACv2F,KAAK,CAAC,CAAC;EAC9B;EACA;AACJ;AACA;AACA;EACI02F,cAAcA,CAACC,IAAI,EAAE;IACjB,OAAO,IAAI,CAACJ,aAAa,CAAC9mH,GAAG,CAACknH,IAAI,CAAC,IAAI,IAAI;EAC/C;EACA;AACJ;AACA;EACIC,mBAAmBA,CAAA,EAAG;IAClB,OAAOv1H,KAAK,CAACg0E,IAAI,CAAC,IAAI,CAACkhD,aAAa,CAAChgG,MAAM,CAAC,CAAC,CAAC;EAClD;EACA;AACJ;AACA;EACIsgG,kBAAkBA,CAAA,EAAG;IACjB,OAAOx1H,KAAK,CAACg0E,IAAI,CAAC,IAAI,CAACkhD,aAAa,CAAC55F,IAAI,CAAC,CAAC,CAAC;EAChD;EACA;AACJ;AACA;AACA;AACA;AACA;EACIm6F,qBAAqBA,CAACH,IAAI,EAAEI,eAAe,GAAG,IAAI,EAAE;IAAA,IAAAC,qBAAA,EAAAC,mBAAA;IAChD,QAAAD,qBAAA,IAAAC,mBAAA,GAAOlC,kBAAkB,cAAAkC,mBAAA,uBAAlBA,mBAAA,CAAoBH,qBAAqB,CAAC,IAAI,EAAEH,IAAI,EAAEI,eAAe,CAAC,cAAAC,qBAAA,cAAAA,qBAAA,GAAI,IAAI;EACzF;AAGJ;AAACE,QAAA,GAxDKZ,mBAAmB;AAsDZY,QAAA,CAAKxyH,IAAI,GAAG,SAASyyH,2BAA2BA,CAACtiG,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAIyhG,QAAmB,EAAE,CAAC;AAAE,CAAC;AAChGY,QAAA,CAAKptH,KAAK,GAAG,aAActB,kBAAkB,CAAC;EAAEpH,KAAK,EAAEk1H,QAAmB;EAAE3tH,OAAO,EAAE2tH,QAAmB,CAAC5xH,IAAI;EAAEgE,UAAU,EAAE;AAAW,CAAC,CAAC;AAErJ,CAAC,MAAM;EAAE,CAAC,OAAO7E,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAK45G,gBAAgB,CAAC6Y,mBAAmB,EAAE,CAAC;IAC3FzzH,IAAI,EAAE0jC,UAAU;IAChBn2B,IAAI,EAAE,CAAC;MAAE1H,UAAU,EAAE;IAAW,CAAC;EACrC,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC;AAAE,CAAC,EAAE,CAAC;AACzB;AACA;AACA;AACA;AACA,SAASssH,oBAAoBA,CAACrpE,MAAM,EAAE;EAClCopE,kBAAkB,GAAGppE,MAAM;AAC/B;AACA,IAAIopE,kBAAkB;;AAEtqC,eAAe,GAAG,IAAIlqH,cAAc,CAAC,yBAAyB,CAAC;AACrE;AACA;AACA;AACA;AACA;AACA,MAAMmqH,qBAAqB,CAAC;EACxB/zH,WAAWA,CAAA,EAAG;IAAA,IAAAg0H,OAAA;IACV,IAAI,CAACC,WAAW,GAAG,KAAK;IACxB,IAAI,CAACrqE,IAAI,GAAG,KAAK;IACjB,IAAI,CAACsqE,WAAW,GAAG,IAAIp4F,OAAO,CAAC,CAAC19B,GAAG,EAAE+1H,GAAG,KAAK;MACzC,IAAI,CAACl3B,OAAO,GAAG7+F,GAAG;MAClB,IAAI,CAACg2H,MAAM,GAAGD,GAAG;IACrB,CAAC,CAAC;IACF,IAAI,CAACE,QAAQ,IAAAL,OAAA,GAAG1nH,MAAM,CAACwnH,eAAe,EAAE;MAAEtnH,QAAQ,EAAE;IAAK,CAAC,CAAC,cAAAwnH,OAAA,cAAAA,OAAA,GAAI,EAAE;IACjE,IAAI,CAAC,OAAOzzH,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAK,CAACxC,KAAK,CAACC,OAAO,CAAC,IAAI,CAACq2H,QAAQ,CAAC,EAAE;MAClF,MAAM,IAAIt0H,YAAY,CAAC,CAAC,GAAG,CAAC,+CAA+C,uDAAuD,GAC7H,+BAA8B,OAAO,IAAI,CAACs0H,QAAS,KAAI,GACxD,mEAAmE,GACnE,yBAAyB,CAAC;IAClC;EACJ;EACA;EACAC,eAAeA,CAAA,EAAG;IACd,IAAI,IAAI,CAACL,WAAW,EAAE;MAClB;IACJ;IACA,MAAMM,iBAAiB,GAAG,EAAE;IAC5B,KAAK,MAAMF,QAAQ,IAAI,IAAI,CAACA,QAAQ,EAAE;MAClC,MAAMG,UAAU,GAAGH,QAAQ,CAAC,CAAC;MAC7B,IAAI1lB,SAAS,CAAC6lB,UAAU,CAAC,EAAE;QACvBD,iBAAiB,CAAClnH,IAAI,CAACmnH,UAAU,CAAC;MACtC,CAAC,MACI,IAAI5lB,cAAc,CAAC4lB,UAAU,CAAC,EAAE;QACjC,MAAMC,mBAAmB,GAAG,IAAI34F,OAAO,CAAC,CAACmhE,OAAO,EAAEm3B,MAAM,KAAK;UACzDI,UAAU,CAACnuD,SAAS,CAAC;YAAEE,QAAQ,EAAE02B,OAAO;YAAEloE,KAAK,EAAEq/F;UAAO,CAAC,CAAC;QAC9D,CAAC,CAAC;QACFG,iBAAiB,CAAClnH,IAAI,CAAConH,mBAAmB,CAAC;MAC/C;IACJ;IACA,MAAMluD,QAAQ,GAAGA,CAAA,KAAM;MACnB;MACA,IAAI,CAAC3c,IAAI,GAAG,IAAI;MAChB,IAAI,CAACqzC,OAAO,CAAC,CAAC;IAClB,CAAC;IACDnhE,OAAO,CAACC,GAAG,CAACw4F,iBAAiB,CAAC,CACzBt5F,IAAI,CAAC,MAAM;MACZsrC,QAAQ,CAAC,CAAC;IACd,CAAC,CAAC,CACGmuD,KAAK,CAAChnH,CAAC,IAAI;MACZ,IAAI,CAAC0mH,MAAM,CAAC1mH,CAAC,CAAC;IAClB,CAAC,CAAC;IACF,IAAI6mH,iBAAiB,CAACx1H,MAAM,KAAK,CAAC,EAAE;MAChCwnE,QAAQ,CAAC,CAAC;IACd;IACA,IAAI,CAAC0tD,WAAW,GAAG,IAAI;EAC3B;AAGJ;AAACU,QAAA,GArDKZ,qBAAqB;AAmDdY,QAAA,CAAKvzH,IAAI,GAAG,SAASwzH,6BAA6BA,CAACrjG,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAIwiG,QAAqB,EAAE,CAAC;AAAE,CAAC;AACpGY,QAAA,CAAKnuH,KAAK,GAAG,aAActB,kBAAkB,CAAC;EAAEpH,KAAK,EAAEi2H,QAAqB;EAAE1uH,OAAO,EAAE0uH,QAAqB,CAAC3yH,IAAI;EAAEgE,UAAU,EAAE;AAAO,CAAC,CAAC;AAErJ,CAAC,MAAM;EAAE,CAAC,OAAO7E,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAK45G,gBAAgB,CAAC4Z,qBAAqB,EAAE,CAAC;IAC7Fx0H,IAAI,EAAE0jC,UAAU;IAChBn2B,IAAI,EAAE,CAAC;MAAE1H,UAAU,EAAE;IAAO,CAAC;EACjC,CAAC,CAAC,EAAE,MAAM,EAAE,EAAE,IAAI,CAAC;AAAE,CAAC,EAAE,CAAC;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMyvH,sBAAsB,GAAG,IAAIjrH,cAAc,CAAC,sBAAsB,CAAC;AACzE,SAASkrH,sBAAsBA,CAAC5pH,QAAQ,EAAEzF,OAAO,EAAEqhC,UAAU,EAAE;EAC3DvmC,SAAS,IAAIkc,kBAAkB,CAACqqB,UAAU,CAAC;EAC3C,MAAMiuF,aAAa,GAAG,IAAIpe,eAAe,CAAC7vE,UAAU,CAAC;EACrD;EACA,IAAI,OAAOqpC,SAAS,KAAK,WAAW,IAAI,CAACA,SAAS,EAAE;IAChD,OAAOr0C,OAAO,CAACmhE,OAAO,CAAC83B,aAAa,CAAC;EACzC;EACA,MAAMC,eAAe,GAAG9pH,QAAQ,CAACiB,GAAG,CAACq/G,gBAAgB,EAAE,EAAE,CAAC,CAACpzF,MAAM,CAAC3yB,OAAO,CAAC;EAC1E;EACA;EACA;EACAm9G,aAAa,CAAC;IACVC,oBAAoB,EAAEoS,YAAY,CAACD,eAAe,CAAC73H,GAAG,CAACgI,IAAI,IAAIA,IAAI,CAAC09G,oBAAoB,CAAC,CAAC;IAC1FC,mBAAmB,EAAEmS,YAAY,CAACD,eAAe,CAAC73H,GAAG,CAACgI,IAAI,IAAIA,IAAI,CAAC29G,mBAAmB,CAAC;EAC3F,CAAC,CAAC;EACF,IAAInmF,uCAAuC,CAAC,CAAC,EAAE;IAC3C,OAAOb,OAAO,CAACmhE,OAAO,CAAC83B,aAAa,CAAC;EACzC;EACA,MAAMG,iBAAiB,GAAGF,eAAe,CAACG,OAAO,CAAEC,MAAM;IAAA,IAAAC,iBAAA;IAAA,QAAAA,iBAAA,GAAKD,MAAM,CAAC3yH,SAAS,cAAA4yH,iBAAA,cAAAA,iBAAA,GAAI,EAAE;EAAA,EAAC;EACrF;EACA;EACA;EACA;EACA,IAAIH,iBAAiB,CAACn2H,MAAM,KAAK,CAAC,EAAE;IAChC,OAAO+8B,OAAO,CAACmhE,OAAO,CAAC83B,aAAa,CAAC;EACzC;EACA,MAAMlyF,QAAQ,GAAGlO,iBAAiB,CAAC;IAC/BM,KAAK,EAAE,CAAC,CAAC;IACTD,IAAI,EAAE,UAAU;IAChBz1B,IAAI,EAAEunC;EACV,CAAC,CAAC;EACF,MAAMwuF,gBAAgB,GAAGzxF,QAAQ,CAAC/Q,MAAM,CAAC;IAAErwB,SAAS,EAAEyyH;EAAkB,CAAC,CAAC;EAC1E,MAAMK,cAAc,GAAGD,gBAAgB,CAACnpH,GAAG,CAAC02B,QAAQ,CAAC2yF,cAAc,CAAC;EACpE;EACA;EACA,OAAO/6F,yBAAyB,CAACK,GAAG,IAAIgB,OAAO,CAACmhE,OAAO,CAACs4B,cAAc,CAACppH,GAAG,CAAC2uB,GAAG,CAAC,CAAC,CAAC,CAC5EG,IAAI,CAAC,MAAM85F,aAAa,CAAC;AAClC;AACA,SAASU,yBAAyBA,CAAA,EAAG;EACjCl1H,SAAS,IAAIowH,2BAA2B,CAAC,CAAC;AAC9C;AACA;AACA;AACA;AACA,SAAS+E,0BAA0BA,CAAA,EAAG;EAClC34H,mCAAmC,CAAC,MAAM;IACtC,MAAM,IAAIgD,YAAY,CAAC,GAAG,CAAC,0DAA0DQ,SAAS,IAC1F,+EAA+E,GAC3E,qFAAqF,CAAC;EAClG,CAAC,CAAC;AACN;AACA,SAASsvE,eAAeA,CAAC8lD,EAAE,EAAE;EACzB,OAAOA,EAAE,CAAC9lD,eAAe;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM+lD,YAAY,CAAC;EACf51H,WAAWA,CAAC7B,IAAI,EAAEL,KAAK,EAAE;IACrB,IAAI,CAACK,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACL,KAAK,GAAGA,KAAK;EACtB;AACJ;AACA,SAAS+3H,4BAA4BA,CAAC32D,YAAY,EAAE22B,MAAM,EAAE1qF,QAAQ,EAAE;EAClE,IAAI;IACA,MAAMgI,MAAM,GAAGhI,QAAQ,CAAC,CAAC;IACzB,IAAIwjG,SAAS,CAACx7F,MAAM,CAAC,EAAE;MACnB,OAAOA,MAAM,CAACuhH,KAAK,CAAEhnH,CAAC,IAAK;QACvBmoF,MAAM,CAACvrB,iBAAiB,CAAC,MAAMpL,YAAY,CAACnM,WAAW,CAACrlD,CAAC,CAAC,CAAC;QAC3D;QACA,MAAMA,CAAC;MACX,CAAC,CAAC;IACN;IACA,OAAOyF,MAAM;EACjB,CAAC,CACD,OAAOzF,CAAC,EAAE;IACNmoF,MAAM,CAACvrB,iBAAiB,CAAC,MAAMpL,YAAY,CAACnM,WAAW,CAACrlD,CAAC,CAAC,CAAC;IAC3D;IACA,MAAMA,CAAC;EACX;AACJ;AACA,SAASooH,cAAcA,CAAC9lH,GAAG,EAAE+lH,IAAI,EAAE;EAC/B,IAAIh4H,KAAK,CAACC,OAAO,CAAC+3H,IAAI,CAAC,EAAE;IACrB,OAAOA,IAAI,CAAClY,MAAM,CAACiY,cAAc,EAAE9lH,GAAG,CAAC;EAC3C;EACA,OAAO;IAAE,GAAGA,GAAG;IAAE,GAAG+lH;EAAK,CAAC;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,CAAC;EACjBh2H,WAAWA,CAAA,EAAG;IACV;IACA,IAAI,CAACi2H,mBAAmB,GAAG,EAAE;IAC7B,IAAI,CAACC,YAAY,GAAG,KAAK;IACzB,IAAI,CAACh2F,UAAU,GAAG,KAAK;IACvB,IAAI,CAACi2F,iBAAiB,GAAG,EAAE;IAC3B;IACA,IAAI,CAAC1zC,MAAM,GAAG,EAAE;IAChB,IAAI,CAAC2zC,oBAAoB,GAAG9pH,MAAM,CAAC2mD,kCAAkC,CAAC;IACtE;AACR;AACA;AACA;IACQ,IAAI,CAACojE,cAAc,GAAG,EAAE;IACxB;AACR;AACA;IACQ,IAAI,CAACnoF,UAAU,GAAG,EAAE;IACpB;AACR;AACA;IACQ,IAAI,CAACg7B,QAAQ,GAAG58D,MAAM,CAACo/G,YAAY,CAAC,CAACG,eAAe,CAACrP,IAAI,CAACr/G,GAAG,CAAC80H,OAAO,IAAI,CAACA,OAAO,CAAC,CAAC;IACnF,IAAI,CAACxlC,SAAS,GAAGngF,MAAM,CAACyzB,mBAAmB,CAAC;EAChD;EACA;AACJ;AACA;EACI,IAAIE,SAASA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACC,UAAU;EAC1B;EACA;AACJ;AACA;EACI,IAAIh1B,QAAQA,CAAA,EAAG;IACX,OAAO,IAAI,CAACuhF,SAAS;EACzB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA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;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,OAAQ,OAAOC,SAAS,KAAK,WAAW,IAAIA,SAAS,CAACn5B,MAAM,IAAKe,iBAAiB;EACtF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMq4B,SAAS,GAAG,IAAItvH,cAAc,CAAC,UAAU,EAAE;EAC7CxE,UAAU,EAAE,MAAM;EAClBC,OAAO,EAAEA,CAAA,KAAMiH,MAAM,CAAC4sH,SAAS,EAAEtyH,WAAW,CAACU,QAAQ,GAAGV,WAAW,CAACmf,QAAQ,CAAC,IAAIgzG,eAAe,CAAC;AACrG,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,qBAAqB,GAAG,IAAIvvH,cAAc,CAAC,qBAAqB,EAAE;EACpExE,UAAU,EAAE,MAAM;EAClBC,OAAO,EAAEA,CAAA,KAAMy7F;AACnB,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMs4B,YAAY,GAAG,IAAIxvH,cAAc,CAAC,cAAc,CAAC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMyvH,mBAAmB,GAAG,IAAIzvH,cAAc,CAAC,oBAAoB,CAAC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,I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"},"metadata":{},"sourceType":"module","externalDependencies":[]}